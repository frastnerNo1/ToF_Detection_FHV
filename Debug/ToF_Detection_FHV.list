
ToF_Detection_FHV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006620  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080066e0  080066e0  000076e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006844  08006844  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006844  08006844  00007844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800684c  0800684c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800684c  0800684c  0000784c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006850  08006850  00007850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006854  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000068  080068bc  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  080068bc  00008404  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2a0  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a5  00000000  00000000  00015330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  000173d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000978  00000000  00000000  00018018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012fc0  00000000  00000000  00018990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010441  00000000  00000000  0002b950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ad91  00000000  00000000  0003bd91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6b22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003520  00000000  00000000  000a6b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000aa088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080066c8 	.word	0x080066c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080066c8 	.word	0x080066c8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f852 	bl	800030c <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__aeabi_d2uiz>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	2200      	movs	r2, #0
 80002d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <__aeabi_d2uiz+0x38>)
 80002d6:	0004      	movs	r4, r0
 80002d8:	000d      	movs	r5, r1
 80002da:	f000 ffdb 	bl	8001294 <__aeabi_dcmpge>
 80002de:	2800      	cmp	r0, #0
 80002e0:	d104      	bne.n	80002ec <__aeabi_d2uiz+0x1c>
 80002e2:	0020      	movs	r0, r4
 80002e4:	0029      	movs	r1, r5
 80002e6:	f000 ff41 	bl	800116c <__aeabi_d2iz>
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	4b06      	ldr	r3, [pc, #24]	@ (8000308 <__aeabi_d2uiz+0x38>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	0020      	movs	r0, r4
 80002f2:	0029      	movs	r1, r5
 80002f4:	f000 fb9e 	bl	8000a34 <__aeabi_dsub>
 80002f8:	f000 ff38 	bl	800116c <__aeabi_d2iz>
 80002fc:	2380      	movs	r3, #128	@ 0x80
 80002fe:	061b      	lsls	r3, r3, #24
 8000300:	469c      	mov	ip, r3
 8000302:	4460      	add	r0, ip
 8000304:	e7f1      	b.n	80002ea <__aeabi_d2uiz+0x1a>
 8000306:	46c0      	nop			@ (mov r8, r8)
 8000308:	41e00000 	.word	0x41e00000

0800030c <__udivmoddi4>:
 800030c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800030e:	4657      	mov	r7, sl
 8000310:	464e      	mov	r6, r9
 8000312:	4645      	mov	r5, r8
 8000314:	46de      	mov	lr, fp
 8000316:	b5e0      	push	{r5, r6, r7, lr}
 8000318:	0004      	movs	r4, r0
 800031a:	000d      	movs	r5, r1
 800031c:	4692      	mov	sl, r2
 800031e:	4699      	mov	r9, r3
 8000320:	b083      	sub	sp, #12
 8000322:	428b      	cmp	r3, r1
 8000324:	d830      	bhi.n	8000388 <__udivmoddi4+0x7c>
 8000326:	d02d      	beq.n	8000384 <__udivmoddi4+0x78>
 8000328:	4649      	mov	r1, r9
 800032a:	4650      	mov	r0, sl
 800032c:	f000 ffda 	bl	80012e4 <__clzdi2>
 8000330:	0029      	movs	r1, r5
 8000332:	0006      	movs	r6, r0
 8000334:	0020      	movs	r0, r4
 8000336:	f000 ffd5 	bl	80012e4 <__clzdi2>
 800033a:	1a33      	subs	r3, r6, r0
 800033c:	4698      	mov	r8, r3
 800033e:	3b20      	subs	r3, #32
 8000340:	d434      	bmi.n	80003ac <__udivmoddi4+0xa0>
 8000342:	469b      	mov	fp, r3
 8000344:	4653      	mov	r3, sl
 8000346:	465a      	mov	r2, fp
 8000348:	4093      	lsls	r3, r2
 800034a:	4642      	mov	r2, r8
 800034c:	001f      	movs	r7, r3
 800034e:	4653      	mov	r3, sl
 8000350:	4093      	lsls	r3, r2
 8000352:	001e      	movs	r6, r3
 8000354:	42af      	cmp	r7, r5
 8000356:	d83b      	bhi.n	80003d0 <__udivmoddi4+0xc4>
 8000358:	42af      	cmp	r7, r5
 800035a:	d100      	bne.n	800035e <__udivmoddi4+0x52>
 800035c:	e079      	b.n	8000452 <__udivmoddi4+0x146>
 800035e:	465b      	mov	r3, fp
 8000360:	1ba4      	subs	r4, r4, r6
 8000362:	41bd      	sbcs	r5, r7
 8000364:	2b00      	cmp	r3, #0
 8000366:	da00      	bge.n	800036a <__udivmoddi4+0x5e>
 8000368:	e076      	b.n	8000458 <__udivmoddi4+0x14c>
 800036a:	2200      	movs	r2, #0
 800036c:	2300      	movs	r3, #0
 800036e:	9200      	str	r2, [sp, #0]
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2301      	movs	r3, #1
 8000374:	465a      	mov	r2, fp
 8000376:	4093      	lsls	r3, r2
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	2301      	movs	r3, #1
 800037c:	4642      	mov	r2, r8
 800037e:	4093      	lsls	r3, r2
 8000380:	9300      	str	r3, [sp, #0]
 8000382:	e029      	b.n	80003d8 <__udivmoddi4+0xcc>
 8000384:	4282      	cmp	r2, r0
 8000386:	d9cf      	bls.n	8000328 <__udivmoddi4+0x1c>
 8000388:	2200      	movs	r2, #0
 800038a:	2300      	movs	r3, #0
 800038c:	9200      	str	r2, [sp, #0]
 800038e:	9301      	str	r3, [sp, #4]
 8000390:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <__udivmoddi4+0x8e>
 8000396:	601c      	str	r4, [r3, #0]
 8000398:	605d      	str	r5, [r3, #4]
 800039a:	9800      	ldr	r0, [sp, #0]
 800039c:	9901      	ldr	r1, [sp, #4]
 800039e:	b003      	add	sp, #12
 80003a0:	bcf0      	pop	{r4, r5, r6, r7}
 80003a2:	46bb      	mov	fp, r7
 80003a4:	46b2      	mov	sl, r6
 80003a6:	46a9      	mov	r9, r5
 80003a8:	46a0      	mov	r8, r4
 80003aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ac:	4642      	mov	r2, r8
 80003ae:	469b      	mov	fp, r3
 80003b0:	2320      	movs	r3, #32
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	4652      	mov	r2, sl
 80003b6:	40da      	lsrs	r2, r3
 80003b8:	4641      	mov	r1, r8
 80003ba:	0013      	movs	r3, r2
 80003bc:	464a      	mov	r2, r9
 80003be:	408a      	lsls	r2, r1
 80003c0:	0017      	movs	r7, r2
 80003c2:	4642      	mov	r2, r8
 80003c4:	431f      	orrs	r7, r3
 80003c6:	4653      	mov	r3, sl
 80003c8:	4093      	lsls	r3, r2
 80003ca:	001e      	movs	r6, r3
 80003cc:	42af      	cmp	r7, r5
 80003ce:	d9c3      	bls.n	8000358 <__udivmoddi4+0x4c>
 80003d0:	2200      	movs	r2, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	9200      	str	r2, [sp, #0]
 80003d6:	9301      	str	r3, [sp, #4]
 80003d8:	4643      	mov	r3, r8
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0d8      	beq.n	8000390 <__udivmoddi4+0x84>
 80003de:	07fb      	lsls	r3, r7, #31
 80003e0:	0872      	lsrs	r2, r6, #1
 80003e2:	431a      	orrs	r2, r3
 80003e4:	4646      	mov	r6, r8
 80003e6:	087b      	lsrs	r3, r7, #1
 80003e8:	e00e      	b.n	8000408 <__udivmoddi4+0xfc>
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	d101      	bne.n	80003f2 <__udivmoddi4+0xe6>
 80003ee:	42a2      	cmp	r2, r4
 80003f0:	d80c      	bhi.n	800040c <__udivmoddi4+0x100>
 80003f2:	1aa4      	subs	r4, r4, r2
 80003f4:	419d      	sbcs	r5, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	1924      	adds	r4, r4, r4
 80003fa:	416d      	adcs	r5, r5
 80003fc:	2100      	movs	r1, #0
 80003fe:	3e01      	subs	r6, #1
 8000400:	1824      	adds	r4, r4, r0
 8000402:	414d      	adcs	r5, r1
 8000404:	2e00      	cmp	r6, #0
 8000406:	d006      	beq.n	8000416 <__udivmoddi4+0x10a>
 8000408:	42ab      	cmp	r3, r5
 800040a:	d9ee      	bls.n	80003ea <__udivmoddi4+0xde>
 800040c:	3e01      	subs	r6, #1
 800040e:	1924      	adds	r4, r4, r4
 8000410:	416d      	adcs	r5, r5
 8000412:	2e00      	cmp	r6, #0
 8000414:	d1f8      	bne.n	8000408 <__udivmoddi4+0xfc>
 8000416:	9800      	ldr	r0, [sp, #0]
 8000418:	9901      	ldr	r1, [sp, #4]
 800041a:	465b      	mov	r3, fp
 800041c:	1900      	adds	r0, r0, r4
 800041e:	4169      	adcs	r1, r5
 8000420:	2b00      	cmp	r3, #0
 8000422:	db24      	blt.n	800046e <__udivmoddi4+0x162>
 8000424:	002b      	movs	r3, r5
 8000426:	465a      	mov	r2, fp
 8000428:	4644      	mov	r4, r8
 800042a:	40d3      	lsrs	r3, r2
 800042c:	002a      	movs	r2, r5
 800042e:	40e2      	lsrs	r2, r4
 8000430:	001c      	movs	r4, r3
 8000432:	465b      	mov	r3, fp
 8000434:	0015      	movs	r5, r2
 8000436:	2b00      	cmp	r3, #0
 8000438:	db2a      	blt.n	8000490 <__udivmoddi4+0x184>
 800043a:	0026      	movs	r6, r4
 800043c:	409e      	lsls	r6, r3
 800043e:	0033      	movs	r3, r6
 8000440:	0026      	movs	r6, r4
 8000442:	4647      	mov	r7, r8
 8000444:	40be      	lsls	r6, r7
 8000446:	0032      	movs	r2, r6
 8000448:	1a80      	subs	r0, r0, r2
 800044a:	4199      	sbcs	r1, r3
 800044c:	9000      	str	r0, [sp, #0]
 800044e:	9101      	str	r1, [sp, #4]
 8000450:	e79e      	b.n	8000390 <__udivmoddi4+0x84>
 8000452:	42a3      	cmp	r3, r4
 8000454:	d8bc      	bhi.n	80003d0 <__udivmoddi4+0xc4>
 8000456:	e782      	b.n	800035e <__udivmoddi4+0x52>
 8000458:	4642      	mov	r2, r8
 800045a:	2320      	movs	r3, #32
 800045c:	2100      	movs	r1, #0
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	9100      	str	r1, [sp, #0]
 8000464:	9201      	str	r2, [sp, #4]
 8000466:	2201      	movs	r2, #1
 8000468:	40da      	lsrs	r2, r3
 800046a:	9201      	str	r2, [sp, #4]
 800046c:	e785      	b.n	800037a <__udivmoddi4+0x6e>
 800046e:	4642      	mov	r2, r8
 8000470:	2320      	movs	r3, #32
 8000472:	1a9b      	subs	r3, r3, r2
 8000474:	002a      	movs	r2, r5
 8000476:	4646      	mov	r6, r8
 8000478:	409a      	lsls	r2, r3
 800047a:	0023      	movs	r3, r4
 800047c:	40f3      	lsrs	r3, r6
 800047e:	4644      	mov	r4, r8
 8000480:	4313      	orrs	r3, r2
 8000482:	002a      	movs	r2, r5
 8000484:	40e2      	lsrs	r2, r4
 8000486:	001c      	movs	r4, r3
 8000488:	465b      	mov	r3, fp
 800048a:	0015      	movs	r5, r2
 800048c:	2b00      	cmp	r3, #0
 800048e:	dad4      	bge.n	800043a <__udivmoddi4+0x12e>
 8000490:	4642      	mov	r2, r8
 8000492:	002f      	movs	r7, r5
 8000494:	2320      	movs	r3, #32
 8000496:	0026      	movs	r6, r4
 8000498:	4097      	lsls	r7, r2
 800049a:	1a9b      	subs	r3, r3, r2
 800049c:	40de      	lsrs	r6, r3
 800049e:	003b      	movs	r3, r7
 80004a0:	4333      	orrs	r3, r6
 80004a2:	e7cd      	b.n	8000440 <__udivmoddi4+0x134>

080004a4 <__aeabi_dmul>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	46de      	mov	lr, fp
 80004aa:	464e      	mov	r6, r9
 80004ac:	4645      	mov	r5, r8
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	001f      	movs	r7, r3
 80004b2:	030b      	lsls	r3, r1, #12
 80004b4:	0b1b      	lsrs	r3, r3, #12
 80004b6:	0016      	movs	r6, r2
 80004b8:	469a      	mov	sl, r3
 80004ba:	0fca      	lsrs	r2, r1, #31
 80004bc:	004b      	lsls	r3, r1, #1
 80004be:	0004      	movs	r4, r0
 80004c0:	4693      	mov	fp, r2
 80004c2:	b087      	sub	sp, #28
 80004c4:	0d5b      	lsrs	r3, r3, #21
 80004c6:	d100      	bne.n	80004ca <__aeabi_dmul+0x26>
 80004c8:	e0d5      	b.n	8000676 <__aeabi_dmul+0x1d2>
 80004ca:	4abb      	ldr	r2, [pc, #748]	@ (80007b8 <__aeabi_dmul+0x314>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d100      	bne.n	80004d2 <__aeabi_dmul+0x2e>
 80004d0:	e0f8      	b.n	80006c4 <__aeabi_dmul+0x220>
 80004d2:	4651      	mov	r1, sl
 80004d4:	0f42      	lsrs	r2, r0, #29
 80004d6:	00c9      	lsls	r1, r1, #3
 80004d8:	430a      	orrs	r2, r1
 80004da:	2180      	movs	r1, #128	@ 0x80
 80004dc:	0409      	lsls	r1, r1, #16
 80004de:	4311      	orrs	r1, r2
 80004e0:	00c2      	lsls	r2, r0, #3
 80004e2:	4691      	mov	r9, r2
 80004e4:	4ab5      	ldr	r2, [pc, #724]	@ (80007bc <__aeabi_dmul+0x318>)
 80004e6:	468a      	mov	sl, r1
 80004e8:	189d      	adds	r5, r3, r2
 80004ea:	2300      	movs	r3, #0
 80004ec:	4698      	mov	r8, r3
 80004ee:	9302      	str	r3, [sp, #8]
 80004f0:	033c      	lsls	r4, r7, #12
 80004f2:	007b      	lsls	r3, r7, #1
 80004f4:	0ffa      	lsrs	r2, r7, #31
 80004f6:	0030      	movs	r0, r6
 80004f8:	0b24      	lsrs	r4, r4, #12
 80004fa:	0d5b      	lsrs	r3, r3, #21
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	d100      	bne.n	8000502 <__aeabi_dmul+0x5e>
 8000500:	e096      	b.n	8000630 <__aeabi_dmul+0x18c>
 8000502:	4aad      	ldr	r2, [pc, #692]	@ (80007b8 <__aeabi_dmul+0x314>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d031      	beq.n	800056c <__aeabi_dmul+0xc8>
 8000508:	0f72      	lsrs	r2, r6, #29
 800050a:	00e4      	lsls	r4, r4, #3
 800050c:	4322      	orrs	r2, r4
 800050e:	2480      	movs	r4, #128	@ 0x80
 8000510:	0424      	lsls	r4, r4, #16
 8000512:	4314      	orrs	r4, r2
 8000514:	4aa9      	ldr	r2, [pc, #676]	@ (80007bc <__aeabi_dmul+0x318>)
 8000516:	00f0      	lsls	r0, r6, #3
 8000518:	4694      	mov	ip, r2
 800051a:	4463      	add	r3, ip
 800051c:	195b      	adds	r3, r3, r5
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	9201      	str	r2, [sp, #4]
 8000522:	4642      	mov	r2, r8
 8000524:	2600      	movs	r6, #0
 8000526:	2a0a      	cmp	r2, #10
 8000528:	dc42      	bgt.n	80005b0 <__aeabi_dmul+0x10c>
 800052a:	465a      	mov	r2, fp
 800052c:	9900      	ldr	r1, [sp, #0]
 800052e:	404a      	eors	r2, r1
 8000530:	4693      	mov	fp, r2
 8000532:	4642      	mov	r2, r8
 8000534:	2a02      	cmp	r2, #2
 8000536:	dc32      	bgt.n	800059e <__aeabi_dmul+0xfa>
 8000538:	3a01      	subs	r2, #1
 800053a:	2a01      	cmp	r2, #1
 800053c:	d900      	bls.n	8000540 <__aeabi_dmul+0x9c>
 800053e:	e149      	b.n	80007d4 <__aeabi_dmul+0x330>
 8000540:	2e02      	cmp	r6, #2
 8000542:	d100      	bne.n	8000546 <__aeabi_dmul+0xa2>
 8000544:	e0ca      	b.n	80006dc <__aeabi_dmul+0x238>
 8000546:	2e01      	cmp	r6, #1
 8000548:	d13d      	bne.n	80005c6 <__aeabi_dmul+0x122>
 800054a:	2300      	movs	r3, #0
 800054c:	2400      	movs	r4, #0
 800054e:	2200      	movs	r2, #0
 8000550:	0010      	movs	r0, r2
 8000552:	465a      	mov	r2, fp
 8000554:	051b      	lsls	r3, r3, #20
 8000556:	4323      	orrs	r3, r4
 8000558:	07d2      	lsls	r2, r2, #31
 800055a:	4313      	orrs	r3, r2
 800055c:	0019      	movs	r1, r3
 800055e:	b007      	add	sp, #28
 8000560:	bcf0      	pop	{r4, r5, r6, r7}
 8000562:	46bb      	mov	fp, r7
 8000564:	46b2      	mov	sl, r6
 8000566:	46a9      	mov	r9, r5
 8000568:	46a0      	mov	r8, r4
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056c:	4b92      	ldr	r3, [pc, #584]	@ (80007b8 <__aeabi_dmul+0x314>)
 800056e:	4326      	orrs	r6, r4
 8000570:	18eb      	adds	r3, r5, r3
 8000572:	2e00      	cmp	r6, #0
 8000574:	d100      	bne.n	8000578 <__aeabi_dmul+0xd4>
 8000576:	e0bb      	b.n	80006f0 <__aeabi_dmul+0x24c>
 8000578:	2203      	movs	r2, #3
 800057a:	4641      	mov	r1, r8
 800057c:	4311      	orrs	r1, r2
 800057e:	465a      	mov	r2, fp
 8000580:	4688      	mov	r8, r1
 8000582:	9900      	ldr	r1, [sp, #0]
 8000584:	404a      	eors	r2, r1
 8000586:	2180      	movs	r1, #128	@ 0x80
 8000588:	0109      	lsls	r1, r1, #4
 800058a:	468c      	mov	ip, r1
 800058c:	0029      	movs	r1, r5
 800058e:	4461      	add	r1, ip
 8000590:	9101      	str	r1, [sp, #4]
 8000592:	4641      	mov	r1, r8
 8000594:	290a      	cmp	r1, #10
 8000596:	dd00      	ble.n	800059a <__aeabi_dmul+0xf6>
 8000598:	e233      	b.n	8000a02 <__aeabi_dmul+0x55e>
 800059a:	4693      	mov	fp, r2
 800059c:	2603      	movs	r6, #3
 800059e:	4642      	mov	r2, r8
 80005a0:	2701      	movs	r7, #1
 80005a2:	4097      	lsls	r7, r2
 80005a4:	21a6      	movs	r1, #166	@ 0xa6
 80005a6:	003a      	movs	r2, r7
 80005a8:	00c9      	lsls	r1, r1, #3
 80005aa:	400a      	ands	r2, r1
 80005ac:	420f      	tst	r7, r1
 80005ae:	d031      	beq.n	8000614 <__aeabi_dmul+0x170>
 80005b0:	9e02      	ldr	r6, [sp, #8]
 80005b2:	2e02      	cmp	r6, #2
 80005b4:	d100      	bne.n	80005b8 <__aeabi_dmul+0x114>
 80005b6:	e235      	b.n	8000a24 <__aeabi_dmul+0x580>
 80005b8:	2e03      	cmp	r6, #3
 80005ba:	d100      	bne.n	80005be <__aeabi_dmul+0x11a>
 80005bc:	e1d2      	b.n	8000964 <__aeabi_dmul+0x4c0>
 80005be:	4654      	mov	r4, sl
 80005c0:	4648      	mov	r0, r9
 80005c2:	2e01      	cmp	r6, #1
 80005c4:	d0c1      	beq.n	800054a <__aeabi_dmul+0xa6>
 80005c6:	9a01      	ldr	r2, [sp, #4]
 80005c8:	4b7d      	ldr	r3, [pc, #500]	@ (80007c0 <__aeabi_dmul+0x31c>)
 80005ca:	4694      	mov	ip, r2
 80005cc:	4463      	add	r3, ip
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	dc00      	bgt.n	80005d4 <__aeabi_dmul+0x130>
 80005d2:	e0c0      	b.n	8000756 <__aeabi_dmul+0x2b2>
 80005d4:	0742      	lsls	r2, r0, #29
 80005d6:	d009      	beq.n	80005ec <__aeabi_dmul+0x148>
 80005d8:	220f      	movs	r2, #15
 80005da:	4002      	ands	r2, r0
 80005dc:	2a04      	cmp	r2, #4
 80005de:	d005      	beq.n	80005ec <__aeabi_dmul+0x148>
 80005e0:	1d02      	adds	r2, r0, #4
 80005e2:	4282      	cmp	r2, r0
 80005e4:	4180      	sbcs	r0, r0
 80005e6:	4240      	negs	r0, r0
 80005e8:	1824      	adds	r4, r4, r0
 80005ea:	0010      	movs	r0, r2
 80005ec:	01e2      	lsls	r2, r4, #7
 80005ee:	d506      	bpl.n	80005fe <__aeabi_dmul+0x15a>
 80005f0:	4b74      	ldr	r3, [pc, #464]	@ (80007c4 <__aeabi_dmul+0x320>)
 80005f2:	9a01      	ldr	r2, [sp, #4]
 80005f4:	401c      	ands	r4, r3
 80005f6:	2380      	movs	r3, #128	@ 0x80
 80005f8:	4694      	mov	ip, r2
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	4463      	add	r3, ip
 80005fe:	4a72      	ldr	r2, [pc, #456]	@ (80007c8 <__aeabi_dmul+0x324>)
 8000600:	4293      	cmp	r3, r2
 8000602:	dc6b      	bgt.n	80006dc <__aeabi_dmul+0x238>
 8000604:	0762      	lsls	r2, r4, #29
 8000606:	08c0      	lsrs	r0, r0, #3
 8000608:	0264      	lsls	r4, r4, #9
 800060a:	055b      	lsls	r3, r3, #21
 800060c:	4302      	orrs	r2, r0
 800060e:	0b24      	lsrs	r4, r4, #12
 8000610:	0d5b      	lsrs	r3, r3, #21
 8000612:	e79d      	b.n	8000550 <__aeabi_dmul+0xac>
 8000614:	2190      	movs	r1, #144	@ 0x90
 8000616:	0089      	lsls	r1, r1, #2
 8000618:	420f      	tst	r7, r1
 800061a:	d163      	bne.n	80006e4 <__aeabi_dmul+0x240>
 800061c:	2288      	movs	r2, #136	@ 0x88
 800061e:	423a      	tst	r2, r7
 8000620:	d100      	bne.n	8000624 <__aeabi_dmul+0x180>
 8000622:	e0d7      	b.n	80007d4 <__aeabi_dmul+0x330>
 8000624:	9b00      	ldr	r3, [sp, #0]
 8000626:	46a2      	mov	sl, r4
 8000628:	469b      	mov	fp, r3
 800062a:	4681      	mov	r9, r0
 800062c:	9602      	str	r6, [sp, #8]
 800062e:	e7bf      	b.n	80005b0 <__aeabi_dmul+0x10c>
 8000630:	0023      	movs	r3, r4
 8000632:	4333      	orrs	r3, r6
 8000634:	d100      	bne.n	8000638 <__aeabi_dmul+0x194>
 8000636:	e07f      	b.n	8000738 <__aeabi_dmul+0x294>
 8000638:	2c00      	cmp	r4, #0
 800063a:	d100      	bne.n	800063e <__aeabi_dmul+0x19a>
 800063c:	e1ad      	b.n	800099a <__aeabi_dmul+0x4f6>
 800063e:	0020      	movs	r0, r4
 8000640:	f000 fe32 	bl	80012a8 <__clzsi2>
 8000644:	0002      	movs	r2, r0
 8000646:	0003      	movs	r3, r0
 8000648:	3a0b      	subs	r2, #11
 800064a:	201d      	movs	r0, #29
 800064c:	0019      	movs	r1, r3
 800064e:	1a82      	subs	r2, r0, r2
 8000650:	0030      	movs	r0, r6
 8000652:	3908      	subs	r1, #8
 8000654:	40d0      	lsrs	r0, r2
 8000656:	408c      	lsls	r4, r1
 8000658:	4304      	orrs	r4, r0
 800065a:	0030      	movs	r0, r6
 800065c:	4088      	lsls	r0, r1
 800065e:	4a5b      	ldr	r2, [pc, #364]	@ (80007cc <__aeabi_dmul+0x328>)
 8000660:	1aeb      	subs	r3, r5, r3
 8000662:	4694      	mov	ip, r2
 8000664:	4463      	add	r3, ip
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	9201      	str	r2, [sp, #4]
 800066a:	4642      	mov	r2, r8
 800066c:	2600      	movs	r6, #0
 800066e:	2a0a      	cmp	r2, #10
 8000670:	dc00      	bgt.n	8000674 <__aeabi_dmul+0x1d0>
 8000672:	e75a      	b.n	800052a <__aeabi_dmul+0x86>
 8000674:	e79c      	b.n	80005b0 <__aeabi_dmul+0x10c>
 8000676:	4653      	mov	r3, sl
 8000678:	4303      	orrs	r3, r0
 800067a:	4699      	mov	r9, r3
 800067c:	d054      	beq.n	8000728 <__aeabi_dmul+0x284>
 800067e:	4653      	mov	r3, sl
 8000680:	2b00      	cmp	r3, #0
 8000682:	d100      	bne.n	8000686 <__aeabi_dmul+0x1e2>
 8000684:	e177      	b.n	8000976 <__aeabi_dmul+0x4d2>
 8000686:	4650      	mov	r0, sl
 8000688:	f000 fe0e 	bl	80012a8 <__clzsi2>
 800068c:	230b      	movs	r3, #11
 800068e:	425b      	negs	r3, r3
 8000690:	469c      	mov	ip, r3
 8000692:	0002      	movs	r2, r0
 8000694:	4484      	add	ip, r0
 8000696:	0011      	movs	r1, r2
 8000698:	4650      	mov	r0, sl
 800069a:	3908      	subs	r1, #8
 800069c:	4088      	lsls	r0, r1
 800069e:	231d      	movs	r3, #29
 80006a0:	4680      	mov	r8, r0
 80006a2:	4660      	mov	r0, ip
 80006a4:	1a1b      	subs	r3, r3, r0
 80006a6:	0020      	movs	r0, r4
 80006a8:	40d8      	lsrs	r0, r3
 80006aa:	0003      	movs	r3, r0
 80006ac:	4640      	mov	r0, r8
 80006ae:	4303      	orrs	r3, r0
 80006b0:	469a      	mov	sl, r3
 80006b2:	0023      	movs	r3, r4
 80006b4:	408b      	lsls	r3, r1
 80006b6:	4699      	mov	r9, r3
 80006b8:	2300      	movs	r3, #0
 80006ba:	4d44      	ldr	r5, [pc, #272]	@ (80007cc <__aeabi_dmul+0x328>)
 80006bc:	4698      	mov	r8, r3
 80006be:	1aad      	subs	r5, r5, r2
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	e715      	b.n	80004f0 <__aeabi_dmul+0x4c>
 80006c4:	4652      	mov	r2, sl
 80006c6:	4302      	orrs	r2, r0
 80006c8:	4691      	mov	r9, r2
 80006ca:	d126      	bne.n	800071a <__aeabi_dmul+0x276>
 80006cc:	2200      	movs	r2, #0
 80006ce:	001d      	movs	r5, r3
 80006d0:	2302      	movs	r3, #2
 80006d2:	4692      	mov	sl, r2
 80006d4:	3208      	adds	r2, #8
 80006d6:	4690      	mov	r8, r2
 80006d8:	9302      	str	r3, [sp, #8]
 80006da:	e709      	b.n	80004f0 <__aeabi_dmul+0x4c>
 80006dc:	2400      	movs	r4, #0
 80006de:	2200      	movs	r2, #0
 80006e0:	4b35      	ldr	r3, [pc, #212]	@ (80007b8 <__aeabi_dmul+0x314>)
 80006e2:	e735      	b.n	8000550 <__aeabi_dmul+0xac>
 80006e4:	2300      	movs	r3, #0
 80006e6:	2480      	movs	r4, #128	@ 0x80
 80006e8:	469b      	mov	fp, r3
 80006ea:	0324      	lsls	r4, r4, #12
 80006ec:	4b32      	ldr	r3, [pc, #200]	@ (80007b8 <__aeabi_dmul+0x314>)
 80006ee:	e72f      	b.n	8000550 <__aeabi_dmul+0xac>
 80006f0:	2202      	movs	r2, #2
 80006f2:	4641      	mov	r1, r8
 80006f4:	4311      	orrs	r1, r2
 80006f6:	2280      	movs	r2, #128	@ 0x80
 80006f8:	0112      	lsls	r2, r2, #4
 80006fa:	4694      	mov	ip, r2
 80006fc:	002a      	movs	r2, r5
 80006fe:	4462      	add	r2, ip
 8000700:	4688      	mov	r8, r1
 8000702:	9201      	str	r2, [sp, #4]
 8000704:	290a      	cmp	r1, #10
 8000706:	dd00      	ble.n	800070a <__aeabi_dmul+0x266>
 8000708:	e752      	b.n	80005b0 <__aeabi_dmul+0x10c>
 800070a:	465a      	mov	r2, fp
 800070c:	2000      	movs	r0, #0
 800070e:	9900      	ldr	r1, [sp, #0]
 8000710:	0004      	movs	r4, r0
 8000712:	404a      	eors	r2, r1
 8000714:	4693      	mov	fp, r2
 8000716:	2602      	movs	r6, #2
 8000718:	e70b      	b.n	8000532 <__aeabi_dmul+0x8e>
 800071a:	220c      	movs	r2, #12
 800071c:	001d      	movs	r5, r3
 800071e:	2303      	movs	r3, #3
 8000720:	4681      	mov	r9, r0
 8000722:	4690      	mov	r8, r2
 8000724:	9302      	str	r3, [sp, #8]
 8000726:	e6e3      	b.n	80004f0 <__aeabi_dmul+0x4c>
 8000728:	2300      	movs	r3, #0
 800072a:	469a      	mov	sl, r3
 800072c:	3304      	adds	r3, #4
 800072e:	4698      	mov	r8, r3
 8000730:	3b03      	subs	r3, #3
 8000732:	2500      	movs	r5, #0
 8000734:	9302      	str	r3, [sp, #8]
 8000736:	e6db      	b.n	80004f0 <__aeabi_dmul+0x4c>
 8000738:	4642      	mov	r2, r8
 800073a:	3301      	adds	r3, #1
 800073c:	431a      	orrs	r2, r3
 800073e:	002b      	movs	r3, r5
 8000740:	4690      	mov	r8, r2
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	9201      	str	r2, [sp, #4]
 8000746:	4642      	mov	r2, r8
 8000748:	2400      	movs	r4, #0
 800074a:	2000      	movs	r0, #0
 800074c:	2601      	movs	r6, #1
 800074e:	2a0a      	cmp	r2, #10
 8000750:	dc00      	bgt.n	8000754 <__aeabi_dmul+0x2b0>
 8000752:	e6ea      	b.n	800052a <__aeabi_dmul+0x86>
 8000754:	e72c      	b.n	80005b0 <__aeabi_dmul+0x10c>
 8000756:	2201      	movs	r2, #1
 8000758:	1ad2      	subs	r2, r2, r3
 800075a:	2a38      	cmp	r2, #56	@ 0x38
 800075c:	dd00      	ble.n	8000760 <__aeabi_dmul+0x2bc>
 800075e:	e6f4      	b.n	800054a <__aeabi_dmul+0xa6>
 8000760:	2a1f      	cmp	r2, #31
 8000762:	dc00      	bgt.n	8000766 <__aeabi_dmul+0x2c2>
 8000764:	e12a      	b.n	80009bc <__aeabi_dmul+0x518>
 8000766:	211f      	movs	r1, #31
 8000768:	4249      	negs	r1, r1
 800076a:	1acb      	subs	r3, r1, r3
 800076c:	0021      	movs	r1, r4
 800076e:	40d9      	lsrs	r1, r3
 8000770:	000b      	movs	r3, r1
 8000772:	2a20      	cmp	r2, #32
 8000774:	d005      	beq.n	8000782 <__aeabi_dmul+0x2de>
 8000776:	4a16      	ldr	r2, [pc, #88]	@ (80007d0 <__aeabi_dmul+0x32c>)
 8000778:	9d01      	ldr	r5, [sp, #4]
 800077a:	4694      	mov	ip, r2
 800077c:	4465      	add	r5, ip
 800077e:	40ac      	lsls	r4, r5
 8000780:	4320      	orrs	r0, r4
 8000782:	1e42      	subs	r2, r0, #1
 8000784:	4190      	sbcs	r0, r2
 8000786:	4318      	orrs	r0, r3
 8000788:	2307      	movs	r3, #7
 800078a:	0019      	movs	r1, r3
 800078c:	2400      	movs	r4, #0
 800078e:	4001      	ands	r1, r0
 8000790:	4203      	tst	r3, r0
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x30a>
 8000794:	230f      	movs	r3, #15
 8000796:	4003      	ands	r3, r0
 8000798:	2b04      	cmp	r3, #4
 800079a:	d100      	bne.n	800079e <__aeabi_dmul+0x2fa>
 800079c:	e140      	b.n	8000a20 <__aeabi_dmul+0x57c>
 800079e:	1d03      	adds	r3, r0, #4
 80007a0:	4283      	cmp	r3, r0
 80007a2:	41a4      	sbcs	r4, r4
 80007a4:	0018      	movs	r0, r3
 80007a6:	4264      	negs	r4, r4
 80007a8:	0761      	lsls	r1, r4, #29
 80007aa:	0264      	lsls	r4, r4, #9
 80007ac:	0b24      	lsrs	r4, r4, #12
 80007ae:	08c2      	lsrs	r2, r0, #3
 80007b0:	2300      	movs	r3, #0
 80007b2:	430a      	orrs	r2, r1
 80007b4:	e6cc      	b.n	8000550 <__aeabi_dmul+0xac>
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	000007ff 	.word	0x000007ff
 80007bc:	fffffc01 	.word	0xfffffc01
 80007c0:	000003ff 	.word	0x000003ff
 80007c4:	feffffff 	.word	0xfeffffff
 80007c8:	000007fe 	.word	0x000007fe
 80007cc:	fffffc0d 	.word	0xfffffc0d
 80007d0:	0000043e 	.word	0x0000043e
 80007d4:	4649      	mov	r1, r9
 80007d6:	464a      	mov	r2, r9
 80007d8:	0409      	lsls	r1, r1, #16
 80007da:	0c09      	lsrs	r1, r1, #16
 80007dc:	000d      	movs	r5, r1
 80007de:	0c16      	lsrs	r6, r2, #16
 80007e0:	0c02      	lsrs	r2, r0, #16
 80007e2:	0400      	lsls	r0, r0, #16
 80007e4:	0c00      	lsrs	r0, r0, #16
 80007e6:	4345      	muls	r5, r0
 80007e8:	46ac      	mov	ip, r5
 80007ea:	0005      	movs	r5, r0
 80007ec:	4375      	muls	r5, r6
 80007ee:	46a8      	mov	r8, r5
 80007f0:	0015      	movs	r5, r2
 80007f2:	000f      	movs	r7, r1
 80007f4:	4375      	muls	r5, r6
 80007f6:	9200      	str	r2, [sp, #0]
 80007f8:	9502      	str	r5, [sp, #8]
 80007fa:	002a      	movs	r2, r5
 80007fc:	9d00      	ldr	r5, [sp, #0]
 80007fe:	436f      	muls	r7, r5
 8000800:	4665      	mov	r5, ip
 8000802:	0c2d      	lsrs	r5, r5, #16
 8000804:	46a9      	mov	r9, r5
 8000806:	4447      	add	r7, r8
 8000808:	444f      	add	r7, r9
 800080a:	45b8      	cmp	r8, r7
 800080c:	d905      	bls.n	800081a <__aeabi_dmul+0x376>
 800080e:	0015      	movs	r5, r2
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	0252      	lsls	r2, r2, #9
 8000814:	4690      	mov	r8, r2
 8000816:	4445      	add	r5, r8
 8000818:	9502      	str	r5, [sp, #8]
 800081a:	0c3d      	lsrs	r5, r7, #16
 800081c:	9503      	str	r5, [sp, #12]
 800081e:	4665      	mov	r5, ip
 8000820:	042d      	lsls	r5, r5, #16
 8000822:	043f      	lsls	r7, r7, #16
 8000824:	0c2d      	lsrs	r5, r5, #16
 8000826:	46ac      	mov	ip, r5
 8000828:	003d      	movs	r5, r7
 800082a:	4465      	add	r5, ip
 800082c:	9504      	str	r5, [sp, #16]
 800082e:	0c25      	lsrs	r5, r4, #16
 8000830:	0424      	lsls	r4, r4, #16
 8000832:	0c24      	lsrs	r4, r4, #16
 8000834:	46ac      	mov	ip, r5
 8000836:	0025      	movs	r5, r4
 8000838:	4375      	muls	r5, r6
 800083a:	46a8      	mov	r8, r5
 800083c:	4665      	mov	r5, ip
 800083e:	000f      	movs	r7, r1
 8000840:	4369      	muls	r1, r5
 8000842:	4441      	add	r1, r8
 8000844:	4689      	mov	r9, r1
 8000846:	4367      	muls	r7, r4
 8000848:	0c39      	lsrs	r1, r7, #16
 800084a:	4449      	add	r1, r9
 800084c:	436e      	muls	r6, r5
 800084e:	4588      	cmp	r8, r1
 8000850:	d903      	bls.n	800085a <__aeabi_dmul+0x3b6>
 8000852:	2280      	movs	r2, #128	@ 0x80
 8000854:	0252      	lsls	r2, r2, #9
 8000856:	4690      	mov	r8, r2
 8000858:	4446      	add	r6, r8
 800085a:	0c0d      	lsrs	r5, r1, #16
 800085c:	46a8      	mov	r8, r5
 800085e:	0035      	movs	r5, r6
 8000860:	4445      	add	r5, r8
 8000862:	9505      	str	r5, [sp, #20]
 8000864:	9d03      	ldr	r5, [sp, #12]
 8000866:	043f      	lsls	r7, r7, #16
 8000868:	46a8      	mov	r8, r5
 800086a:	0c3f      	lsrs	r7, r7, #16
 800086c:	0409      	lsls	r1, r1, #16
 800086e:	19c9      	adds	r1, r1, r7
 8000870:	4488      	add	r8, r1
 8000872:	4645      	mov	r5, r8
 8000874:	9503      	str	r5, [sp, #12]
 8000876:	4655      	mov	r5, sl
 8000878:	042e      	lsls	r6, r5, #16
 800087a:	0c36      	lsrs	r6, r6, #16
 800087c:	0c2f      	lsrs	r7, r5, #16
 800087e:	0035      	movs	r5, r6
 8000880:	4345      	muls	r5, r0
 8000882:	4378      	muls	r0, r7
 8000884:	4681      	mov	r9, r0
 8000886:	0038      	movs	r0, r7
 8000888:	46a8      	mov	r8, r5
 800088a:	0c2d      	lsrs	r5, r5, #16
 800088c:	46aa      	mov	sl, r5
 800088e:	9a00      	ldr	r2, [sp, #0]
 8000890:	4350      	muls	r0, r2
 8000892:	4372      	muls	r2, r6
 8000894:	444a      	add	r2, r9
 8000896:	4452      	add	r2, sl
 8000898:	4591      	cmp	r9, r2
 800089a:	d903      	bls.n	80008a4 <__aeabi_dmul+0x400>
 800089c:	2580      	movs	r5, #128	@ 0x80
 800089e:	026d      	lsls	r5, r5, #9
 80008a0:	46a9      	mov	r9, r5
 80008a2:	4448      	add	r0, r9
 80008a4:	0c15      	lsrs	r5, r2, #16
 80008a6:	46a9      	mov	r9, r5
 80008a8:	4645      	mov	r5, r8
 80008aa:	042d      	lsls	r5, r5, #16
 80008ac:	0c2d      	lsrs	r5, r5, #16
 80008ae:	46a8      	mov	r8, r5
 80008b0:	4665      	mov	r5, ip
 80008b2:	437d      	muls	r5, r7
 80008b4:	0412      	lsls	r2, r2, #16
 80008b6:	4448      	add	r0, r9
 80008b8:	4490      	add	r8, r2
 80008ba:	46a9      	mov	r9, r5
 80008bc:	0032      	movs	r2, r6
 80008be:	4665      	mov	r5, ip
 80008c0:	4362      	muls	r2, r4
 80008c2:	436e      	muls	r6, r5
 80008c4:	437c      	muls	r4, r7
 80008c6:	0c17      	lsrs	r7, r2, #16
 80008c8:	1936      	adds	r6, r6, r4
 80008ca:	19bf      	adds	r7, r7, r6
 80008cc:	42bc      	cmp	r4, r7
 80008ce:	d903      	bls.n	80008d8 <__aeabi_dmul+0x434>
 80008d0:	2480      	movs	r4, #128	@ 0x80
 80008d2:	0264      	lsls	r4, r4, #9
 80008d4:	46a4      	mov	ip, r4
 80008d6:	44e1      	add	r9, ip
 80008d8:	9c02      	ldr	r4, [sp, #8]
 80008da:	9e03      	ldr	r6, [sp, #12]
 80008dc:	46a4      	mov	ip, r4
 80008de:	9d05      	ldr	r5, [sp, #20]
 80008e0:	4466      	add	r6, ip
 80008e2:	428e      	cmp	r6, r1
 80008e4:	4189      	sbcs	r1, r1
 80008e6:	46ac      	mov	ip, r5
 80008e8:	0412      	lsls	r2, r2, #16
 80008ea:	043c      	lsls	r4, r7, #16
 80008ec:	0c12      	lsrs	r2, r2, #16
 80008ee:	18a2      	adds	r2, r4, r2
 80008f0:	4462      	add	r2, ip
 80008f2:	4249      	negs	r1, r1
 80008f4:	1854      	adds	r4, r2, r1
 80008f6:	4446      	add	r6, r8
 80008f8:	46a4      	mov	ip, r4
 80008fa:	4546      	cmp	r6, r8
 80008fc:	41a4      	sbcs	r4, r4
 80008fe:	4682      	mov	sl, r0
 8000900:	4264      	negs	r4, r4
 8000902:	46a0      	mov	r8, r4
 8000904:	42aa      	cmp	r2, r5
 8000906:	4192      	sbcs	r2, r2
 8000908:	458c      	cmp	ip, r1
 800090a:	4189      	sbcs	r1, r1
 800090c:	44e2      	add	sl, ip
 800090e:	44d0      	add	r8, sl
 8000910:	4249      	negs	r1, r1
 8000912:	4252      	negs	r2, r2
 8000914:	430a      	orrs	r2, r1
 8000916:	45a0      	cmp	r8, r4
 8000918:	41a4      	sbcs	r4, r4
 800091a:	4582      	cmp	sl, r0
 800091c:	4189      	sbcs	r1, r1
 800091e:	4264      	negs	r4, r4
 8000920:	4249      	negs	r1, r1
 8000922:	430c      	orrs	r4, r1
 8000924:	4641      	mov	r1, r8
 8000926:	0c3f      	lsrs	r7, r7, #16
 8000928:	19d2      	adds	r2, r2, r7
 800092a:	1912      	adds	r2, r2, r4
 800092c:	0dcc      	lsrs	r4, r1, #23
 800092e:	9904      	ldr	r1, [sp, #16]
 8000930:	0270      	lsls	r0, r6, #9
 8000932:	4308      	orrs	r0, r1
 8000934:	1e41      	subs	r1, r0, #1
 8000936:	4188      	sbcs	r0, r1
 8000938:	4641      	mov	r1, r8
 800093a:	444a      	add	r2, r9
 800093c:	0df6      	lsrs	r6, r6, #23
 800093e:	0252      	lsls	r2, r2, #9
 8000940:	4330      	orrs	r0, r6
 8000942:	0249      	lsls	r1, r1, #9
 8000944:	4314      	orrs	r4, r2
 8000946:	4308      	orrs	r0, r1
 8000948:	01d2      	lsls	r2, r2, #7
 800094a:	d535      	bpl.n	80009b8 <__aeabi_dmul+0x514>
 800094c:	2201      	movs	r2, #1
 800094e:	0843      	lsrs	r3, r0, #1
 8000950:	4002      	ands	r2, r0
 8000952:	4313      	orrs	r3, r2
 8000954:	07e0      	lsls	r0, r4, #31
 8000956:	4318      	orrs	r0, r3
 8000958:	0864      	lsrs	r4, r4, #1
 800095a:	e634      	b.n	80005c6 <__aeabi_dmul+0x122>
 800095c:	9b00      	ldr	r3, [sp, #0]
 800095e:	46a2      	mov	sl, r4
 8000960:	469b      	mov	fp, r3
 8000962:	4681      	mov	r9, r0
 8000964:	2480      	movs	r4, #128	@ 0x80
 8000966:	4653      	mov	r3, sl
 8000968:	0324      	lsls	r4, r4, #12
 800096a:	431c      	orrs	r4, r3
 800096c:	0324      	lsls	r4, r4, #12
 800096e:	464a      	mov	r2, r9
 8000970:	4b2e      	ldr	r3, [pc, #184]	@ (8000a2c <__aeabi_dmul+0x588>)
 8000972:	0b24      	lsrs	r4, r4, #12
 8000974:	e5ec      	b.n	8000550 <__aeabi_dmul+0xac>
 8000976:	f000 fc97 	bl	80012a8 <__clzsi2>
 800097a:	2315      	movs	r3, #21
 800097c:	469c      	mov	ip, r3
 800097e:	4484      	add	ip, r0
 8000980:	0002      	movs	r2, r0
 8000982:	4663      	mov	r3, ip
 8000984:	3220      	adds	r2, #32
 8000986:	2b1c      	cmp	r3, #28
 8000988:	dc00      	bgt.n	800098c <__aeabi_dmul+0x4e8>
 800098a:	e684      	b.n	8000696 <__aeabi_dmul+0x1f2>
 800098c:	2300      	movs	r3, #0
 800098e:	4699      	mov	r9, r3
 8000990:	0023      	movs	r3, r4
 8000992:	3808      	subs	r0, #8
 8000994:	4083      	lsls	r3, r0
 8000996:	469a      	mov	sl, r3
 8000998:	e68e      	b.n	80006b8 <__aeabi_dmul+0x214>
 800099a:	f000 fc85 	bl	80012a8 <__clzsi2>
 800099e:	0002      	movs	r2, r0
 80009a0:	0003      	movs	r3, r0
 80009a2:	3215      	adds	r2, #21
 80009a4:	3320      	adds	r3, #32
 80009a6:	2a1c      	cmp	r2, #28
 80009a8:	dc00      	bgt.n	80009ac <__aeabi_dmul+0x508>
 80009aa:	e64e      	b.n	800064a <__aeabi_dmul+0x1a6>
 80009ac:	0002      	movs	r2, r0
 80009ae:	0034      	movs	r4, r6
 80009b0:	3a08      	subs	r2, #8
 80009b2:	2000      	movs	r0, #0
 80009b4:	4094      	lsls	r4, r2
 80009b6:	e652      	b.n	800065e <__aeabi_dmul+0x1ba>
 80009b8:	9301      	str	r3, [sp, #4]
 80009ba:	e604      	b.n	80005c6 <__aeabi_dmul+0x122>
 80009bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <__aeabi_dmul+0x58c>)
 80009be:	0021      	movs	r1, r4
 80009c0:	469c      	mov	ip, r3
 80009c2:	0003      	movs	r3, r0
 80009c4:	9d01      	ldr	r5, [sp, #4]
 80009c6:	40d3      	lsrs	r3, r2
 80009c8:	4465      	add	r5, ip
 80009ca:	40a9      	lsls	r1, r5
 80009cc:	4319      	orrs	r1, r3
 80009ce:	0003      	movs	r3, r0
 80009d0:	40ab      	lsls	r3, r5
 80009d2:	1e58      	subs	r0, r3, #1
 80009d4:	4183      	sbcs	r3, r0
 80009d6:	4319      	orrs	r1, r3
 80009d8:	0008      	movs	r0, r1
 80009da:	40d4      	lsrs	r4, r2
 80009dc:	074b      	lsls	r3, r1, #29
 80009de:	d009      	beq.n	80009f4 <__aeabi_dmul+0x550>
 80009e0:	230f      	movs	r3, #15
 80009e2:	400b      	ands	r3, r1
 80009e4:	2b04      	cmp	r3, #4
 80009e6:	d005      	beq.n	80009f4 <__aeabi_dmul+0x550>
 80009e8:	1d0b      	adds	r3, r1, #4
 80009ea:	428b      	cmp	r3, r1
 80009ec:	4180      	sbcs	r0, r0
 80009ee:	4240      	negs	r0, r0
 80009f0:	1824      	adds	r4, r4, r0
 80009f2:	0018      	movs	r0, r3
 80009f4:	0223      	lsls	r3, r4, #8
 80009f6:	d400      	bmi.n	80009fa <__aeabi_dmul+0x556>
 80009f8:	e6d6      	b.n	80007a8 <__aeabi_dmul+0x304>
 80009fa:	2301      	movs	r3, #1
 80009fc:	2400      	movs	r4, #0
 80009fe:	2200      	movs	r2, #0
 8000a00:	e5a6      	b.n	8000550 <__aeabi_dmul+0xac>
 8000a02:	290f      	cmp	r1, #15
 8000a04:	d1aa      	bne.n	800095c <__aeabi_dmul+0x4b8>
 8000a06:	2380      	movs	r3, #128	@ 0x80
 8000a08:	4652      	mov	r2, sl
 8000a0a:	031b      	lsls	r3, r3, #12
 8000a0c:	421a      	tst	r2, r3
 8000a0e:	d0a9      	beq.n	8000964 <__aeabi_dmul+0x4c0>
 8000a10:	421c      	tst	r4, r3
 8000a12:	d1a7      	bne.n	8000964 <__aeabi_dmul+0x4c0>
 8000a14:	431c      	orrs	r4, r3
 8000a16:	9b00      	ldr	r3, [sp, #0]
 8000a18:	0002      	movs	r2, r0
 8000a1a:	469b      	mov	fp, r3
 8000a1c:	4b03      	ldr	r3, [pc, #12]	@ (8000a2c <__aeabi_dmul+0x588>)
 8000a1e:	e597      	b.n	8000550 <__aeabi_dmul+0xac>
 8000a20:	2400      	movs	r4, #0
 8000a22:	e6c1      	b.n	80007a8 <__aeabi_dmul+0x304>
 8000a24:	2400      	movs	r4, #0
 8000a26:	4b01      	ldr	r3, [pc, #4]	@ (8000a2c <__aeabi_dmul+0x588>)
 8000a28:	0022      	movs	r2, r4
 8000a2a:	e591      	b.n	8000550 <__aeabi_dmul+0xac>
 8000a2c:	000007ff 	.word	0x000007ff
 8000a30:	0000041e 	.word	0x0000041e

08000a34 <__aeabi_dsub>:
 8000a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a36:	464e      	mov	r6, r9
 8000a38:	4645      	mov	r5, r8
 8000a3a:	46de      	mov	lr, fp
 8000a3c:	4657      	mov	r7, sl
 8000a3e:	b5e0      	push	{r5, r6, r7, lr}
 8000a40:	b085      	sub	sp, #20
 8000a42:	9000      	str	r0, [sp, #0]
 8000a44:	9101      	str	r1, [sp, #4]
 8000a46:	030c      	lsls	r4, r1, #12
 8000a48:	004f      	lsls	r7, r1, #1
 8000a4a:	0fce      	lsrs	r6, r1, #31
 8000a4c:	0a61      	lsrs	r1, r4, #9
 8000a4e:	9c00      	ldr	r4, [sp, #0]
 8000a50:	46b0      	mov	r8, r6
 8000a52:	0f64      	lsrs	r4, r4, #29
 8000a54:	430c      	orrs	r4, r1
 8000a56:	9900      	ldr	r1, [sp, #0]
 8000a58:	0d7f      	lsrs	r7, r7, #21
 8000a5a:	00c8      	lsls	r0, r1, #3
 8000a5c:	0011      	movs	r1, r2
 8000a5e:	001a      	movs	r2, r3
 8000a60:	031b      	lsls	r3, r3, #12
 8000a62:	469c      	mov	ip, r3
 8000a64:	9100      	str	r1, [sp, #0]
 8000a66:	9201      	str	r2, [sp, #4]
 8000a68:	0051      	lsls	r1, r2, #1
 8000a6a:	0d4b      	lsrs	r3, r1, #21
 8000a6c:	4699      	mov	r9, r3
 8000a6e:	9b01      	ldr	r3, [sp, #4]
 8000a70:	9d00      	ldr	r5, [sp, #0]
 8000a72:	0fd9      	lsrs	r1, r3, #31
 8000a74:	4663      	mov	r3, ip
 8000a76:	0f6a      	lsrs	r2, r5, #29
 8000a78:	0a5b      	lsrs	r3, r3, #9
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	00ea      	lsls	r2, r5, #3
 8000a7e:	4694      	mov	ip, r2
 8000a80:	4693      	mov	fp, r2
 8000a82:	4ac1      	ldr	r2, [pc, #772]	@ (8000d88 <__aeabi_dsub+0x354>)
 8000a84:	9003      	str	r0, [sp, #12]
 8000a86:	9302      	str	r3, [sp, #8]
 8000a88:	4591      	cmp	r9, r2
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_dsub+0x5a>
 8000a8c:	e0cd      	b.n	8000c2a <__aeabi_dsub+0x1f6>
 8000a8e:	2501      	movs	r5, #1
 8000a90:	4069      	eors	r1, r5
 8000a92:	464d      	mov	r5, r9
 8000a94:	1b7d      	subs	r5, r7, r5
 8000a96:	46aa      	mov	sl, r5
 8000a98:	428e      	cmp	r6, r1
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_dsub+0x6a>
 8000a9c:	e080      	b.n	8000ba0 <__aeabi_dsub+0x16c>
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	dc00      	bgt.n	8000aa4 <__aeabi_dsub+0x70>
 8000aa2:	e335      	b.n	8001110 <__aeabi_dsub+0x6dc>
 8000aa4:	4649      	mov	r1, r9
 8000aa6:	2900      	cmp	r1, #0
 8000aa8:	d100      	bne.n	8000aac <__aeabi_dsub+0x78>
 8000aaa:	e0df      	b.n	8000c6c <__aeabi_dsub+0x238>
 8000aac:	4297      	cmp	r7, r2
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dsub+0x7e>
 8000ab0:	e194      	b.n	8000ddc <__aeabi_dsub+0x3a8>
 8000ab2:	4652      	mov	r2, sl
 8000ab4:	2501      	movs	r5, #1
 8000ab6:	2a38      	cmp	r2, #56	@ 0x38
 8000ab8:	dc19      	bgt.n	8000aee <__aeabi_dsub+0xba>
 8000aba:	2280      	movs	r2, #128	@ 0x80
 8000abc:	9b02      	ldr	r3, [sp, #8]
 8000abe:	0412      	lsls	r2, r2, #16
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	9302      	str	r3, [sp, #8]
 8000ac4:	4652      	mov	r2, sl
 8000ac6:	2a1f      	cmp	r2, #31
 8000ac8:	dd00      	ble.n	8000acc <__aeabi_dsub+0x98>
 8000aca:	e1e3      	b.n	8000e94 <__aeabi_dsub+0x460>
 8000acc:	4653      	mov	r3, sl
 8000ace:	2220      	movs	r2, #32
 8000ad0:	4661      	mov	r1, ip
 8000ad2:	9d02      	ldr	r5, [sp, #8]
 8000ad4:	1ad2      	subs	r2, r2, r3
 8000ad6:	4095      	lsls	r5, r2
 8000ad8:	40d9      	lsrs	r1, r3
 8000ada:	430d      	orrs	r5, r1
 8000adc:	4661      	mov	r1, ip
 8000ade:	4091      	lsls	r1, r2
 8000ae0:	000a      	movs	r2, r1
 8000ae2:	1e51      	subs	r1, r2, #1
 8000ae4:	418a      	sbcs	r2, r1
 8000ae6:	4315      	orrs	r5, r2
 8000ae8:	9a02      	ldr	r2, [sp, #8]
 8000aea:	40da      	lsrs	r2, r3
 8000aec:	1aa4      	subs	r4, r4, r2
 8000aee:	1b45      	subs	r5, r0, r5
 8000af0:	42a8      	cmp	r0, r5
 8000af2:	4180      	sbcs	r0, r0
 8000af4:	4240      	negs	r0, r0
 8000af6:	1a24      	subs	r4, r4, r0
 8000af8:	0223      	lsls	r3, r4, #8
 8000afa:	d400      	bmi.n	8000afe <__aeabi_dsub+0xca>
 8000afc:	e13d      	b.n	8000d7a <__aeabi_dsub+0x346>
 8000afe:	0264      	lsls	r4, r4, #9
 8000b00:	0a64      	lsrs	r4, r4, #9
 8000b02:	2c00      	cmp	r4, #0
 8000b04:	d100      	bne.n	8000b08 <__aeabi_dsub+0xd4>
 8000b06:	e147      	b.n	8000d98 <__aeabi_dsub+0x364>
 8000b08:	0020      	movs	r0, r4
 8000b0a:	f000 fbcd 	bl	80012a8 <__clzsi2>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	3b08      	subs	r3, #8
 8000b12:	2120      	movs	r1, #32
 8000b14:	0028      	movs	r0, r5
 8000b16:	1aca      	subs	r2, r1, r3
 8000b18:	40d0      	lsrs	r0, r2
 8000b1a:	409c      	lsls	r4, r3
 8000b1c:	0002      	movs	r2, r0
 8000b1e:	409d      	lsls	r5, r3
 8000b20:	4322      	orrs	r2, r4
 8000b22:	429f      	cmp	r7, r3
 8000b24:	dd00      	ble.n	8000b28 <__aeabi_dsub+0xf4>
 8000b26:	e177      	b.n	8000e18 <__aeabi_dsub+0x3e4>
 8000b28:	1bd8      	subs	r0, r3, r7
 8000b2a:	3001      	adds	r0, #1
 8000b2c:	1a09      	subs	r1, r1, r0
 8000b2e:	002c      	movs	r4, r5
 8000b30:	408d      	lsls	r5, r1
 8000b32:	40c4      	lsrs	r4, r0
 8000b34:	1e6b      	subs	r3, r5, #1
 8000b36:	419d      	sbcs	r5, r3
 8000b38:	0013      	movs	r3, r2
 8000b3a:	40c2      	lsrs	r2, r0
 8000b3c:	408b      	lsls	r3, r1
 8000b3e:	4325      	orrs	r5, r4
 8000b40:	2700      	movs	r7, #0
 8000b42:	0014      	movs	r4, r2
 8000b44:	431d      	orrs	r5, r3
 8000b46:	076b      	lsls	r3, r5, #29
 8000b48:	d009      	beq.n	8000b5e <__aeabi_dsub+0x12a>
 8000b4a:	230f      	movs	r3, #15
 8000b4c:	402b      	ands	r3, r5
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	d005      	beq.n	8000b5e <__aeabi_dsub+0x12a>
 8000b52:	1d2b      	adds	r3, r5, #4
 8000b54:	42ab      	cmp	r3, r5
 8000b56:	41ad      	sbcs	r5, r5
 8000b58:	426d      	negs	r5, r5
 8000b5a:	1964      	adds	r4, r4, r5
 8000b5c:	001d      	movs	r5, r3
 8000b5e:	0223      	lsls	r3, r4, #8
 8000b60:	d400      	bmi.n	8000b64 <__aeabi_dsub+0x130>
 8000b62:	e140      	b.n	8000de6 <__aeabi_dsub+0x3b2>
 8000b64:	4a88      	ldr	r2, [pc, #544]	@ (8000d88 <__aeabi_dsub+0x354>)
 8000b66:	3701      	adds	r7, #1
 8000b68:	4297      	cmp	r7, r2
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dsub+0x13a>
 8000b6c:	e101      	b.n	8000d72 <__aeabi_dsub+0x33e>
 8000b6e:	2601      	movs	r6, #1
 8000b70:	4643      	mov	r3, r8
 8000b72:	4986      	ldr	r1, [pc, #536]	@ (8000d8c <__aeabi_dsub+0x358>)
 8000b74:	08ed      	lsrs	r5, r5, #3
 8000b76:	4021      	ands	r1, r4
 8000b78:	074a      	lsls	r2, r1, #29
 8000b7a:	432a      	orrs	r2, r5
 8000b7c:	057c      	lsls	r4, r7, #21
 8000b7e:	024d      	lsls	r5, r1, #9
 8000b80:	0b2d      	lsrs	r5, r5, #12
 8000b82:	0d64      	lsrs	r4, r4, #21
 8000b84:	401e      	ands	r6, r3
 8000b86:	0524      	lsls	r4, r4, #20
 8000b88:	432c      	orrs	r4, r5
 8000b8a:	07f6      	lsls	r6, r6, #31
 8000b8c:	4334      	orrs	r4, r6
 8000b8e:	0010      	movs	r0, r2
 8000b90:	0021      	movs	r1, r4
 8000b92:	b005      	add	sp, #20
 8000b94:	bcf0      	pop	{r4, r5, r6, r7}
 8000b96:	46bb      	mov	fp, r7
 8000b98:	46b2      	mov	sl, r6
 8000b9a:	46a9      	mov	r9, r5
 8000b9c:	46a0      	mov	r8, r4
 8000b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ba0:	2d00      	cmp	r5, #0
 8000ba2:	dc00      	bgt.n	8000ba6 <__aeabi_dsub+0x172>
 8000ba4:	e2d0      	b.n	8001148 <__aeabi_dsub+0x714>
 8000ba6:	4649      	mov	r1, r9
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	d000      	beq.n	8000bae <__aeabi_dsub+0x17a>
 8000bac:	e0d4      	b.n	8000d58 <__aeabi_dsub+0x324>
 8000bae:	4661      	mov	r1, ip
 8000bb0:	9b02      	ldr	r3, [sp, #8]
 8000bb2:	4319      	orrs	r1, r3
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_dsub+0x184>
 8000bb6:	e12b      	b.n	8000e10 <__aeabi_dsub+0x3dc>
 8000bb8:	1e69      	subs	r1, r5, #1
 8000bba:	2d01      	cmp	r5, #1
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_dsub+0x18c>
 8000bbe:	e1d9      	b.n	8000f74 <__aeabi_dsub+0x540>
 8000bc0:	4295      	cmp	r5, r2
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dsub+0x192>
 8000bc4:	e10a      	b.n	8000ddc <__aeabi_dsub+0x3a8>
 8000bc6:	2501      	movs	r5, #1
 8000bc8:	2938      	cmp	r1, #56	@ 0x38
 8000bca:	dc17      	bgt.n	8000bfc <__aeabi_dsub+0x1c8>
 8000bcc:	468a      	mov	sl, r1
 8000bce:	4653      	mov	r3, sl
 8000bd0:	2b1f      	cmp	r3, #31
 8000bd2:	dd00      	ble.n	8000bd6 <__aeabi_dsub+0x1a2>
 8000bd4:	e1e7      	b.n	8000fa6 <__aeabi_dsub+0x572>
 8000bd6:	2220      	movs	r2, #32
 8000bd8:	1ad2      	subs	r2, r2, r3
 8000bda:	9b02      	ldr	r3, [sp, #8]
 8000bdc:	4661      	mov	r1, ip
 8000bde:	4093      	lsls	r3, r2
 8000be0:	001d      	movs	r5, r3
 8000be2:	4653      	mov	r3, sl
 8000be4:	40d9      	lsrs	r1, r3
 8000be6:	4663      	mov	r3, ip
 8000be8:	4093      	lsls	r3, r2
 8000bea:	001a      	movs	r2, r3
 8000bec:	430d      	orrs	r5, r1
 8000bee:	1e51      	subs	r1, r2, #1
 8000bf0:	418a      	sbcs	r2, r1
 8000bf2:	4653      	mov	r3, sl
 8000bf4:	4315      	orrs	r5, r2
 8000bf6:	9a02      	ldr	r2, [sp, #8]
 8000bf8:	40da      	lsrs	r2, r3
 8000bfa:	18a4      	adds	r4, r4, r2
 8000bfc:	182d      	adds	r5, r5, r0
 8000bfe:	4285      	cmp	r5, r0
 8000c00:	4180      	sbcs	r0, r0
 8000c02:	4240      	negs	r0, r0
 8000c04:	1824      	adds	r4, r4, r0
 8000c06:	0223      	lsls	r3, r4, #8
 8000c08:	d400      	bmi.n	8000c0c <__aeabi_dsub+0x1d8>
 8000c0a:	e0b6      	b.n	8000d7a <__aeabi_dsub+0x346>
 8000c0c:	4b5e      	ldr	r3, [pc, #376]	@ (8000d88 <__aeabi_dsub+0x354>)
 8000c0e:	3701      	adds	r7, #1
 8000c10:	429f      	cmp	r7, r3
 8000c12:	d100      	bne.n	8000c16 <__aeabi_dsub+0x1e2>
 8000c14:	e0ad      	b.n	8000d72 <__aeabi_dsub+0x33e>
 8000c16:	2101      	movs	r1, #1
 8000c18:	4b5c      	ldr	r3, [pc, #368]	@ (8000d8c <__aeabi_dsub+0x358>)
 8000c1a:	086a      	lsrs	r2, r5, #1
 8000c1c:	401c      	ands	r4, r3
 8000c1e:	4029      	ands	r1, r5
 8000c20:	430a      	orrs	r2, r1
 8000c22:	07e5      	lsls	r5, r4, #31
 8000c24:	4315      	orrs	r5, r2
 8000c26:	0864      	lsrs	r4, r4, #1
 8000c28:	e78d      	b.n	8000b46 <__aeabi_dsub+0x112>
 8000c2a:	4a59      	ldr	r2, [pc, #356]	@ (8000d90 <__aeabi_dsub+0x35c>)
 8000c2c:	9b02      	ldr	r3, [sp, #8]
 8000c2e:	4692      	mov	sl, r2
 8000c30:	4662      	mov	r2, ip
 8000c32:	44ba      	add	sl, r7
 8000c34:	431a      	orrs	r2, r3
 8000c36:	d02c      	beq.n	8000c92 <__aeabi_dsub+0x25e>
 8000c38:	428e      	cmp	r6, r1
 8000c3a:	d02e      	beq.n	8000c9a <__aeabi_dsub+0x266>
 8000c3c:	4652      	mov	r2, sl
 8000c3e:	2a00      	cmp	r2, #0
 8000c40:	d060      	beq.n	8000d04 <__aeabi_dsub+0x2d0>
 8000c42:	2f00      	cmp	r7, #0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_dsub+0x214>
 8000c46:	e0db      	b.n	8000e00 <__aeabi_dsub+0x3cc>
 8000c48:	4663      	mov	r3, ip
 8000c4a:	000e      	movs	r6, r1
 8000c4c:	9c02      	ldr	r4, [sp, #8]
 8000c4e:	08d8      	lsrs	r0, r3, #3
 8000c50:	0762      	lsls	r2, r4, #29
 8000c52:	4302      	orrs	r2, r0
 8000c54:	08e4      	lsrs	r4, r4, #3
 8000c56:	0013      	movs	r3, r2
 8000c58:	4323      	orrs	r3, r4
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dsub+0x22a>
 8000c5c:	e254      	b.n	8001108 <__aeabi_dsub+0x6d4>
 8000c5e:	2580      	movs	r5, #128	@ 0x80
 8000c60:	032d      	lsls	r5, r5, #12
 8000c62:	4325      	orrs	r5, r4
 8000c64:	032d      	lsls	r5, r5, #12
 8000c66:	4c48      	ldr	r4, [pc, #288]	@ (8000d88 <__aeabi_dsub+0x354>)
 8000c68:	0b2d      	lsrs	r5, r5, #12
 8000c6a:	e78c      	b.n	8000b86 <__aeabi_dsub+0x152>
 8000c6c:	4661      	mov	r1, ip
 8000c6e:	9b02      	ldr	r3, [sp, #8]
 8000c70:	4319      	orrs	r1, r3
 8000c72:	d100      	bne.n	8000c76 <__aeabi_dsub+0x242>
 8000c74:	e0cc      	b.n	8000e10 <__aeabi_dsub+0x3dc>
 8000c76:	0029      	movs	r1, r5
 8000c78:	3901      	subs	r1, #1
 8000c7a:	2d01      	cmp	r5, #1
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_dsub+0x24c>
 8000c7e:	e188      	b.n	8000f92 <__aeabi_dsub+0x55e>
 8000c80:	4295      	cmp	r5, r2
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dsub+0x252>
 8000c84:	e0aa      	b.n	8000ddc <__aeabi_dsub+0x3a8>
 8000c86:	2501      	movs	r5, #1
 8000c88:	2938      	cmp	r1, #56	@ 0x38
 8000c8a:	dd00      	ble.n	8000c8e <__aeabi_dsub+0x25a>
 8000c8c:	e72f      	b.n	8000aee <__aeabi_dsub+0xba>
 8000c8e:	468a      	mov	sl, r1
 8000c90:	e718      	b.n	8000ac4 <__aeabi_dsub+0x90>
 8000c92:	2201      	movs	r2, #1
 8000c94:	4051      	eors	r1, r2
 8000c96:	428e      	cmp	r6, r1
 8000c98:	d1d0      	bne.n	8000c3c <__aeabi_dsub+0x208>
 8000c9a:	4653      	mov	r3, sl
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dsub+0x26e>
 8000ca0:	e0be      	b.n	8000e20 <__aeabi_dsub+0x3ec>
 8000ca2:	2f00      	cmp	r7, #0
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_dsub+0x274>
 8000ca6:	e138      	b.n	8000f1a <__aeabi_dsub+0x4e6>
 8000ca8:	46ca      	mov	sl, r9
 8000caa:	0022      	movs	r2, r4
 8000cac:	4302      	orrs	r2, r0
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_dsub+0x27e>
 8000cb0:	e1e2      	b.n	8001078 <__aeabi_dsub+0x644>
 8000cb2:	4653      	mov	r3, sl
 8000cb4:	1e59      	subs	r1, r3, #1
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_dsub+0x288>
 8000cba:	e20d      	b.n	80010d8 <__aeabi_dsub+0x6a4>
 8000cbc:	4a32      	ldr	r2, [pc, #200]	@ (8000d88 <__aeabi_dsub+0x354>)
 8000cbe:	4592      	cmp	sl, r2
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_dsub+0x290>
 8000cc2:	e1d2      	b.n	800106a <__aeabi_dsub+0x636>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	2938      	cmp	r1, #56	@ 0x38
 8000cc8:	dc13      	bgt.n	8000cf2 <__aeabi_dsub+0x2be>
 8000cca:	291f      	cmp	r1, #31
 8000ccc:	dd00      	ble.n	8000cd0 <__aeabi_dsub+0x29c>
 8000cce:	e1ee      	b.n	80010ae <__aeabi_dsub+0x67a>
 8000cd0:	2220      	movs	r2, #32
 8000cd2:	9b02      	ldr	r3, [sp, #8]
 8000cd4:	1a52      	subs	r2, r2, r1
 8000cd6:	0025      	movs	r5, r4
 8000cd8:	0007      	movs	r7, r0
 8000cda:	469a      	mov	sl, r3
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4090      	lsls	r0, r2
 8000ce0:	4095      	lsls	r5, r2
 8000ce2:	40cf      	lsrs	r7, r1
 8000ce4:	44a2      	add	sl, r4
 8000ce6:	1e42      	subs	r2, r0, #1
 8000ce8:	4190      	sbcs	r0, r2
 8000cea:	4653      	mov	r3, sl
 8000cec:	432f      	orrs	r7, r5
 8000cee:	4307      	orrs	r7, r0
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	003d      	movs	r5, r7
 8000cf4:	4465      	add	r5, ip
 8000cf6:	4565      	cmp	r5, ip
 8000cf8:	4192      	sbcs	r2, r2
 8000cfa:	9b02      	ldr	r3, [sp, #8]
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	464f      	mov	r7, r9
 8000d00:	18d4      	adds	r4, r2, r3
 8000d02:	e780      	b.n	8000c06 <__aeabi_dsub+0x1d2>
 8000d04:	4a23      	ldr	r2, [pc, #140]	@ (8000d94 <__aeabi_dsub+0x360>)
 8000d06:	1c7d      	adds	r5, r7, #1
 8000d08:	4215      	tst	r5, r2
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_dsub+0x2da>
 8000d0c:	e0aa      	b.n	8000e64 <__aeabi_dsub+0x430>
 8000d0e:	4662      	mov	r2, ip
 8000d10:	0025      	movs	r5, r4
 8000d12:	9b02      	ldr	r3, [sp, #8]
 8000d14:	4305      	orrs	r5, r0
 8000d16:	431a      	orrs	r2, r3
 8000d18:	2f00      	cmp	r7, #0
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_dsub+0x2ea>
 8000d1c:	e0f5      	b.n	8000f0a <__aeabi_dsub+0x4d6>
 8000d1e:	2d00      	cmp	r5, #0
 8000d20:	d100      	bne.n	8000d24 <__aeabi_dsub+0x2f0>
 8000d22:	e16b      	b.n	8000ffc <__aeabi_dsub+0x5c8>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dsub+0x2f6>
 8000d28:	e152      	b.n	8000fd0 <__aeabi_dsub+0x59c>
 8000d2a:	4663      	mov	r3, ip
 8000d2c:	1ac5      	subs	r5, r0, r3
 8000d2e:	9b02      	ldr	r3, [sp, #8]
 8000d30:	1ae2      	subs	r2, r4, r3
 8000d32:	42a8      	cmp	r0, r5
 8000d34:	419b      	sbcs	r3, r3
 8000d36:	425b      	negs	r3, r3
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	021a      	lsls	r2, r3, #8
 8000d3c:	d400      	bmi.n	8000d40 <__aeabi_dsub+0x30c>
 8000d3e:	e1d5      	b.n	80010ec <__aeabi_dsub+0x6b8>
 8000d40:	4663      	mov	r3, ip
 8000d42:	1a1d      	subs	r5, r3, r0
 8000d44:	45ac      	cmp	ip, r5
 8000d46:	4192      	sbcs	r2, r2
 8000d48:	2601      	movs	r6, #1
 8000d4a:	9b02      	ldr	r3, [sp, #8]
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	1b1c      	subs	r4, r3, r4
 8000d50:	4688      	mov	r8, r1
 8000d52:	1aa4      	subs	r4, r4, r2
 8000d54:	400e      	ands	r6, r1
 8000d56:	e6f6      	b.n	8000b46 <__aeabi_dsub+0x112>
 8000d58:	4297      	cmp	r7, r2
 8000d5a:	d03f      	beq.n	8000ddc <__aeabi_dsub+0x3a8>
 8000d5c:	4652      	mov	r2, sl
 8000d5e:	2501      	movs	r5, #1
 8000d60:	2a38      	cmp	r2, #56	@ 0x38
 8000d62:	dd00      	ble.n	8000d66 <__aeabi_dsub+0x332>
 8000d64:	e74a      	b.n	8000bfc <__aeabi_dsub+0x1c8>
 8000d66:	2280      	movs	r2, #128	@ 0x80
 8000d68:	9b02      	ldr	r3, [sp, #8]
 8000d6a:	0412      	lsls	r2, r2, #16
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	e72d      	b.n	8000bce <__aeabi_dsub+0x19a>
 8000d72:	003c      	movs	r4, r7
 8000d74:	2500      	movs	r5, #0
 8000d76:	2200      	movs	r2, #0
 8000d78:	e705      	b.n	8000b86 <__aeabi_dsub+0x152>
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	402b      	ands	r3, r5
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d000      	beq.n	8000d84 <__aeabi_dsub+0x350>
 8000d82:	e6e2      	b.n	8000b4a <__aeabi_dsub+0x116>
 8000d84:	e06b      	b.n	8000e5e <__aeabi_dsub+0x42a>
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	000007ff 	.word	0x000007ff
 8000d8c:	ff7fffff 	.word	0xff7fffff
 8000d90:	fffff801 	.word	0xfffff801
 8000d94:	000007fe 	.word	0x000007fe
 8000d98:	0028      	movs	r0, r5
 8000d9a:	f000 fa85 	bl	80012a8 <__clzsi2>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	3318      	adds	r3, #24
 8000da2:	2b1f      	cmp	r3, #31
 8000da4:	dc00      	bgt.n	8000da8 <__aeabi_dsub+0x374>
 8000da6:	e6b4      	b.n	8000b12 <__aeabi_dsub+0xde>
 8000da8:	002a      	movs	r2, r5
 8000daa:	3808      	subs	r0, #8
 8000dac:	4082      	lsls	r2, r0
 8000dae:	429f      	cmp	r7, r3
 8000db0:	dd00      	ble.n	8000db4 <__aeabi_dsub+0x380>
 8000db2:	e0b9      	b.n	8000f28 <__aeabi_dsub+0x4f4>
 8000db4:	1bdb      	subs	r3, r3, r7
 8000db6:	1c58      	adds	r0, r3, #1
 8000db8:	281f      	cmp	r0, #31
 8000dba:	dc00      	bgt.n	8000dbe <__aeabi_dsub+0x38a>
 8000dbc:	e1a0      	b.n	8001100 <__aeabi_dsub+0x6cc>
 8000dbe:	0015      	movs	r5, r2
 8000dc0:	3b1f      	subs	r3, #31
 8000dc2:	40dd      	lsrs	r5, r3
 8000dc4:	2820      	cmp	r0, #32
 8000dc6:	d005      	beq.n	8000dd4 <__aeabi_dsub+0x3a0>
 8000dc8:	2340      	movs	r3, #64	@ 0x40
 8000dca:	1a1b      	subs	r3, r3, r0
 8000dcc:	409a      	lsls	r2, r3
 8000dce:	1e53      	subs	r3, r2, #1
 8000dd0:	419a      	sbcs	r2, r3
 8000dd2:	4315      	orrs	r5, r2
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	2700      	movs	r7, #0
 8000dd8:	402b      	ands	r3, r5
 8000dda:	e7d0      	b.n	8000d7e <__aeabi_dsub+0x34a>
 8000ddc:	08c0      	lsrs	r0, r0, #3
 8000dde:	0762      	lsls	r2, r4, #29
 8000de0:	4302      	orrs	r2, r0
 8000de2:	08e4      	lsrs	r4, r4, #3
 8000de4:	e737      	b.n	8000c56 <__aeabi_dsub+0x222>
 8000de6:	08ea      	lsrs	r2, r5, #3
 8000de8:	0763      	lsls	r3, r4, #29
 8000dea:	431a      	orrs	r2, r3
 8000dec:	4bd3      	ldr	r3, [pc, #844]	@ (800113c <__aeabi_dsub+0x708>)
 8000dee:	08e4      	lsrs	r4, r4, #3
 8000df0:	429f      	cmp	r7, r3
 8000df2:	d100      	bne.n	8000df6 <__aeabi_dsub+0x3c2>
 8000df4:	e72f      	b.n	8000c56 <__aeabi_dsub+0x222>
 8000df6:	0324      	lsls	r4, r4, #12
 8000df8:	0b25      	lsrs	r5, r4, #12
 8000dfa:	057c      	lsls	r4, r7, #21
 8000dfc:	0d64      	lsrs	r4, r4, #21
 8000dfe:	e6c2      	b.n	8000b86 <__aeabi_dsub+0x152>
 8000e00:	46ca      	mov	sl, r9
 8000e02:	0022      	movs	r2, r4
 8000e04:	4302      	orrs	r2, r0
 8000e06:	d158      	bne.n	8000eba <__aeabi_dsub+0x486>
 8000e08:	4663      	mov	r3, ip
 8000e0a:	000e      	movs	r6, r1
 8000e0c:	9c02      	ldr	r4, [sp, #8]
 8000e0e:	9303      	str	r3, [sp, #12]
 8000e10:	9b03      	ldr	r3, [sp, #12]
 8000e12:	4657      	mov	r7, sl
 8000e14:	08da      	lsrs	r2, r3, #3
 8000e16:	e7e7      	b.n	8000de8 <__aeabi_dsub+0x3b4>
 8000e18:	4cc9      	ldr	r4, [pc, #804]	@ (8001140 <__aeabi_dsub+0x70c>)
 8000e1a:	1aff      	subs	r7, r7, r3
 8000e1c:	4014      	ands	r4, r2
 8000e1e:	e692      	b.n	8000b46 <__aeabi_dsub+0x112>
 8000e20:	4dc8      	ldr	r5, [pc, #800]	@ (8001144 <__aeabi_dsub+0x710>)
 8000e22:	1c7a      	adds	r2, r7, #1
 8000e24:	422a      	tst	r2, r5
 8000e26:	d000      	beq.n	8000e2a <__aeabi_dsub+0x3f6>
 8000e28:	e084      	b.n	8000f34 <__aeabi_dsub+0x500>
 8000e2a:	0022      	movs	r2, r4
 8000e2c:	4302      	orrs	r2, r0
 8000e2e:	2f00      	cmp	r7, #0
 8000e30:	d000      	beq.n	8000e34 <__aeabi_dsub+0x400>
 8000e32:	e0ef      	b.n	8001014 <__aeabi_dsub+0x5e0>
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dsub+0x406>
 8000e38:	e0e5      	b.n	8001006 <__aeabi_dsub+0x5d2>
 8000e3a:	4662      	mov	r2, ip
 8000e3c:	9902      	ldr	r1, [sp, #8]
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dsub+0x410>
 8000e42:	e0c5      	b.n	8000fd0 <__aeabi_dsub+0x59c>
 8000e44:	4663      	mov	r3, ip
 8000e46:	18c5      	adds	r5, r0, r3
 8000e48:	468c      	mov	ip, r1
 8000e4a:	4285      	cmp	r5, r0
 8000e4c:	4180      	sbcs	r0, r0
 8000e4e:	4464      	add	r4, ip
 8000e50:	4240      	negs	r0, r0
 8000e52:	1824      	adds	r4, r4, r0
 8000e54:	0223      	lsls	r3, r4, #8
 8000e56:	d502      	bpl.n	8000e5e <__aeabi_dsub+0x42a>
 8000e58:	4bb9      	ldr	r3, [pc, #740]	@ (8001140 <__aeabi_dsub+0x70c>)
 8000e5a:	3701      	adds	r7, #1
 8000e5c:	401c      	ands	r4, r3
 8000e5e:	46ba      	mov	sl, r7
 8000e60:	9503      	str	r5, [sp, #12]
 8000e62:	e7d5      	b.n	8000e10 <__aeabi_dsub+0x3dc>
 8000e64:	4662      	mov	r2, ip
 8000e66:	1a85      	subs	r5, r0, r2
 8000e68:	42a8      	cmp	r0, r5
 8000e6a:	4192      	sbcs	r2, r2
 8000e6c:	4252      	negs	r2, r2
 8000e6e:	4691      	mov	r9, r2
 8000e70:	9b02      	ldr	r3, [sp, #8]
 8000e72:	1ae3      	subs	r3, r4, r3
 8000e74:	001a      	movs	r2, r3
 8000e76:	464b      	mov	r3, r9
 8000e78:	1ad2      	subs	r2, r2, r3
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	4691      	mov	r9, r2
 8000e7e:	021a      	lsls	r2, r3, #8
 8000e80:	d46c      	bmi.n	8000f5c <__aeabi_dsub+0x528>
 8000e82:	464a      	mov	r2, r9
 8000e84:	464c      	mov	r4, r9
 8000e86:	432a      	orrs	r2, r5
 8000e88:	d000      	beq.n	8000e8c <__aeabi_dsub+0x458>
 8000e8a:	e63a      	b.n	8000b02 <__aeabi_dsub+0xce>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	2400      	movs	r4, #0
 8000e90:	2500      	movs	r5, #0
 8000e92:	e678      	b.n	8000b86 <__aeabi_dsub+0x152>
 8000e94:	9902      	ldr	r1, [sp, #8]
 8000e96:	4653      	mov	r3, sl
 8000e98:	000d      	movs	r5, r1
 8000e9a:	3a20      	subs	r2, #32
 8000e9c:	40d5      	lsrs	r5, r2
 8000e9e:	2b20      	cmp	r3, #32
 8000ea0:	d006      	beq.n	8000eb0 <__aeabi_dsub+0x47c>
 8000ea2:	2240      	movs	r2, #64	@ 0x40
 8000ea4:	1ad2      	subs	r2, r2, r3
 8000ea6:	000b      	movs	r3, r1
 8000ea8:	4093      	lsls	r3, r2
 8000eaa:	4662      	mov	r2, ip
 8000eac:	431a      	orrs	r2, r3
 8000eae:	4693      	mov	fp, r2
 8000eb0:	465b      	mov	r3, fp
 8000eb2:	1e5a      	subs	r2, r3, #1
 8000eb4:	4193      	sbcs	r3, r2
 8000eb6:	431d      	orrs	r5, r3
 8000eb8:	e619      	b.n	8000aee <__aeabi_dsub+0xba>
 8000eba:	4653      	mov	r3, sl
 8000ebc:	1e5a      	subs	r2, r3, #1
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_dsub+0x490>
 8000ec2:	e0c6      	b.n	8001052 <__aeabi_dsub+0x61e>
 8000ec4:	4e9d      	ldr	r6, [pc, #628]	@ (800113c <__aeabi_dsub+0x708>)
 8000ec6:	45b2      	cmp	sl, r6
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_dsub+0x498>
 8000eca:	e6bd      	b.n	8000c48 <__aeabi_dsub+0x214>
 8000ecc:	4688      	mov	r8, r1
 8000ece:	000e      	movs	r6, r1
 8000ed0:	2501      	movs	r5, #1
 8000ed2:	2a38      	cmp	r2, #56	@ 0x38
 8000ed4:	dc10      	bgt.n	8000ef8 <__aeabi_dsub+0x4c4>
 8000ed6:	2a1f      	cmp	r2, #31
 8000ed8:	dc7f      	bgt.n	8000fda <__aeabi_dsub+0x5a6>
 8000eda:	2120      	movs	r1, #32
 8000edc:	0025      	movs	r5, r4
 8000ede:	1a89      	subs	r1, r1, r2
 8000ee0:	0007      	movs	r7, r0
 8000ee2:	4088      	lsls	r0, r1
 8000ee4:	408d      	lsls	r5, r1
 8000ee6:	40d7      	lsrs	r7, r2
 8000ee8:	40d4      	lsrs	r4, r2
 8000eea:	1e41      	subs	r1, r0, #1
 8000eec:	4188      	sbcs	r0, r1
 8000eee:	9b02      	ldr	r3, [sp, #8]
 8000ef0:	433d      	orrs	r5, r7
 8000ef2:	1b1b      	subs	r3, r3, r4
 8000ef4:	4305      	orrs	r5, r0
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	4662      	mov	r2, ip
 8000efa:	1b55      	subs	r5, r2, r5
 8000efc:	45ac      	cmp	ip, r5
 8000efe:	4192      	sbcs	r2, r2
 8000f00:	9b02      	ldr	r3, [sp, #8]
 8000f02:	4252      	negs	r2, r2
 8000f04:	464f      	mov	r7, r9
 8000f06:	1a9c      	subs	r4, r3, r2
 8000f08:	e5f6      	b.n	8000af8 <__aeabi_dsub+0xc4>
 8000f0a:	2d00      	cmp	r5, #0
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_dsub+0x4dc>
 8000f0e:	e0b7      	b.n	8001080 <__aeabi_dsub+0x64c>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d100      	bne.n	8000f16 <__aeabi_dsub+0x4e2>
 8000f14:	e0f0      	b.n	80010f8 <__aeabi_dsub+0x6c4>
 8000f16:	2601      	movs	r6, #1
 8000f18:	400e      	ands	r6, r1
 8000f1a:	4663      	mov	r3, ip
 8000f1c:	9802      	ldr	r0, [sp, #8]
 8000f1e:	08d9      	lsrs	r1, r3, #3
 8000f20:	0742      	lsls	r2, r0, #29
 8000f22:	430a      	orrs	r2, r1
 8000f24:	08c4      	lsrs	r4, r0, #3
 8000f26:	e696      	b.n	8000c56 <__aeabi_dsub+0x222>
 8000f28:	4c85      	ldr	r4, [pc, #532]	@ (8001140 <__aeabi_dsub+0x70c>)
 8000f2a:	1aff      	subs	r7, r7, r3
 8000f2c:	4014      	ands	r4, r2
 8000f2e:	0762      	lsls	r2, r4, #29
 8000f30:	08e4      	lsrs	r4, r4, #3
 8000f32:	e760      	b.n	8000df6 <__aeabi_dsub+0x3c2>
 8000f34:	4981      	ldr	r1, [pc, #516]	@ (800113c <__aeabi_dsub+0x708>)
 8000f36:	428a      	cmp	r2, r1
 8000f38:	d100      	bne.n	8000f3c <__aeabi_dsub+0x508>
 8000f3a:	e0c9      	b.n	80010d0 <__aeabi_dsub+0x69c>
 8000f3c:	4663      	mov	r3, ip
 8000f3e:	18c1      	adds	r1, r0, r3
 8000f40:	4281      	cmp	r1, r0
 8000f42:	4180      	sbcs	r0, r0
 8000f44:	9b02      	ldr	r3, [sp, #8]
 8000f46:	4240      	negs	r0, r0
 8000f48:	18e3      	adds	r3, r4, r3
 8000f4a:	181b      	adds	r3, r3, r0
 8000f4c:	07dd      	lsls	r5, r3, #31
 8000f4e:	085c      	lsrs	r4, r3, #1
 8000f50:	2307      	movs	r3, #7
 8000f52:	0849      	lsrs	r1, r1, #1
 8000f54:	430d      	orrs	r5, r1
 8000f56:	0017      	movs	r7, r2
 8000f58:	402b      	ands	r3, r5
 8000f5a:	e710      	b.n	8000d7e <__aeabi_dsub+0x34a>
 8000f5c:	4663      	mov	r3, ip
 8000f5e:	1a1d      	subs	r5, r3, r0
 8000f60:	45ac      	cmp	ip, r5
 8000f62:	4192      	sbcs	r2, r2
 8000f64:	2601      	movs	r6, #1
 8000f66:	9b02      	ldr	r3, [sp, #8]
 8000f68:	4252      	negs	r2, r2
 8000f6a:	1b1c      	subs	r4, r3, r4
 8000f6c:	4688      	mov	r8, r1
 8000f6e:	1aa4      	subs	r4, r4, r2
 8000f70:	400e      	ands	r6, r1
 8000f72:	e5c6      	b.n	8000b02 <__aeabi_dsub+0xce>
 8000f74:	4663      	mov	r3, ip
 8000f76:	18c5      	adds	r5, r0, r3
 8000f78:	9b02      	ldr	r3, [sp, #8]
 8000f7a:	4285      	cmp	r5, r0
 8000f7c:	4180      	sbcs	r0, r0
 8000f7e:	469c      	mov	ip, r3
 8000f80:	4240      	negs	r0, r0
 8000f82:	4464      	add	r4, ip
 8000f84:	1824      	adds	r4, r4, r0
 8000f86:	2701      	movs	r7, #1
 8000f88:	0223      	lsls	r3, r4, #8
 8000f8a:	d400      	bmi.n	8000f8e <__aeabi_dsub+0x55a>
 8000f8c:	e6f5      	b.n	8000d7a <__aeabi_dsub+0x346>
 8000f8e:	2702      	movs	r7, #2
 8000f90:	e641      	b.n	8000c16 <__aeabi_dsub+0x1e2>
 8000f92:	4663      	mov	r3, ip
 8000f94:	1ac5      	subs	r5, r0, r3
 8000f96:	42a8      	cmp	r0, r5
 8000f98:	4180      	sbcs	r0, r0
 8000f9a:	9b02      	ldr	r3, [sp, #8]
 8000f9c:	4240      	negs	r0, r0
 8000f9e:	1ae4      	subs	r4, r4, r3
 8000fa0:	2701      	movs	r7, #1
 8000fa2:	1a24      	subs	r4, r4, r0
 8000fa4:	e5a8      	b.n	8000af8 <__aeabi_dsub+0xc4>
 8000fa6:	9d02      	ldr	r5, [sp, #8]
 8000fa8:	4652      	mov	r2, sl
 8000faa:	002b      	movs	r3, r5
 8000fac:	3a20      	subs	r2, #32
 8000fae:	40d3      	lsrs	r3, r2
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	4653      	mov	r3, sl
 8000fb4:	2b20      	cmp	r3, #32
 8000fb6:	d006      	beq.n	8000fc6 <__aeabi_dsub+0x592>
 8000fb8:	2240      	movs	r2, #64	@ 0x40
 8000fba:	1ad2      	subs	r2, r2, r3
 8000fbc:	002b      	movs	r3, r5
 8000fbe:	4093      	lsls	r3, r2
 8000fc0:	4662      	mov	r2, ip
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	4693      	mov	fp, r2
 8000fc6:	465d      	mov	r5, fp
 8000fc8:	1e6b      	subs	r3, r5, #1
 8000fca:	419d      	sbcs	r5, r3
 8000fcc:	430d      	orrs	r5, r1
 8000fce:	e615      	b.n	8000bfc <__aeabi_dsub+0x1c8>
 8000fd0:	0762      	lsls	r2, r4, #29
 8000fd2:	08c0      	lsrs	r0, r0, #3
 8000fd4:	4302      	orrs	r2, r0
 8000fd6:	08e4      	lsrs	r4, r4, #3
 8000fd8:	e70d      	b.n	8000df6 <__aeabi_dsub+0x3c2>
 8000fda:	0011      	movs	r1, r2
 8000fdc:	0027      	movs	r7, r4
 8000fde:	3920      	subs	r1, #32
 8000fe0:	40cf      	lsrs	r7, r1
 8000fe2:	2a20      	cmp	r2, #32
 8000fe4:	d005      	beq.n	8000ff2 <__aeabi_dsub+0x5be>
 8000fe6:	2140      	movs	r1, #64	@ 0x40
 8000fe8:	1a8a      	subs	r2, r1, r2
 8000fea:	4094      	lsls	r4, r2
 8000fec:	0025      	movs	r5, r4
 8000fee:	4305      	orrs	r5, r0
 8000ff0:	9503      	str	r5, [sp, #12]
 8000ff2:	9d03      	ldr	r5, [sp, #12]
 8000ff4:	1e6a      	subs	r2, r5, #1
 8000ff6:	4195      	sbcs	r5, r2
 8000ff8:	433d      	orrs	r5, r7
 8000ffa:	e77d      	b.n	8000ef8 <__aeabi_dsub+0x4c4>
 8000ffc:	2a00      	cmp	r2, #0
 8000ffe:	d100      	bne.n	8001002 <__aeabi_dsub+0x5ce>
 8001000:	e744      	b.n	8000e8c <__aeabi_dsub+0x458>
 8001002:	2601      	movs	r6, #1
 8001004:	400e      	ands	r6, r1
 8001006:	4663      	mov	r3, ip
 8001008:	08d9      	lsrs	r1, r3, #3
 800100a:	9b02      	ldr	r3, [sp, #8]
 800100c:	075a      	lsls	r2, r3, #29
 800100e:	430a      	orrs	r2, r1
 8001010:	08dc      	lsrs	r4, r3, #3
 8001012:	e6f0      	b.n	8000df6 <__aeabi_dsub+0x3c2>
 8001014:	2a00      	cmp	r2, #0
 8001016:	d028      	beq.n	800106a <__aeabi_dsub+0x636>
 8001018:	4662      	mov	r2, ip
 800101a:	9f02      	ldr	r7, [sp, #8]
 800101c:	08c0      	lsrs	r0, r0, #3
 800101e:	433a      	orrs	r2, r7
 8001020:	d100      	bne.n	8001024 <__aeabi_dsub+0x5f0>
 8001022:	e6dc      	b.n	8000dde <__aeabi_dsub+0x3aa>
 8001024:	0762      	lsls	r2, r4, #29
 8001026:	4310      	orrs	r0, r2
 8001028:	2280      	movs	r2, #128	@ 0x80
 800102a:	08e4      	lsrs	r4, r4, #3
 800102c:	0312      	lsls	r2, r2, #12
 800102e:	4214      	tst	r4, r2
 8001030:	d009      	beq.n	8001046 <__aeabi_dsub+0x612>
 8001032:	08fd      	lsrs	r5, r7, #3
 8001034:	4215      	tst	r5, r2
 8001036:	d106      	bne.n	8001046 <__aeabi_dsub+0x612>
 8001038:	4663      	mov	r3, ip
 800103a:	2601      	movs	r6, #1
 800103c:	002c      	movs	r4, r5
 800103e:	08d8      	lsrs	r0, r3, #3
 8001040:	077b      	lsls	r3, r7, #29
 8001042:	4318      	orrs	r0, r3
 8001044:	400e      	ands	r6, r1
 8001046:	0f42      	lsrs	r2, r0, #29
 8001048:	00c0      	lsls	r0, r0, #3
 800104a:	08c0      	lsrs	r0, r0, #3
 800104c:	0752      	lsls	r2, r2, #29
 800104e:	4302      	orrs	r2, r0
 8001050:	e601      	b.n	8000c56 <__aeabi_dsub+0x222>
 8001052:	4663      	mov	r3, ip
 8001054:	1a1d      	subs	r5, r3, r0
 8001056:	45ac      	cmp	ip, r5
 8001058:	4192      	sbcs	r2, r2
 800105a:	9b02      	ldr	r3, [sp, #8]
 800105c:	4252      	negs	r2, r2
 800105e:	1b1c      	subs	r4, r3, r4
 8001060:	000e      	movs	r6, r1
 8001062:	4688      	mov	r8, r1
 8001064:	2701      	movs	r7, #1
 8001066:	1aa4      	subs	r4, r4, r2
 8001068:	e546      	b.n	8000af8 <__aeabi_dsub+0xc4>
 800106a:	4663      	mov	r3, ip
 800106c:	08d9      	lsrs	r1, r3, #3
 800106e:	9b02      	ldr	r3, [sp, #8]
 8001070:	075a      	lsls	r2, r3, #29
 8001072:	430a      	orrs	r2, r1
 8001074:	08dc      	lsrs	r4, r3, #3
 8001076:	e5ee      	b.n	8000c56 <__aeabi_dsub+0x222>
 8001078:	4663      	mov	r3, ip
 800107a:	9c02      	ldr	r4, [sp, #8]
 800107c:	9303      	str	r3, [sp, #12]
 800107e:	e6c7      	b.n	8000e10 <__aeabi_dsub+0x3dc>
 8001080:	08c0      	lsrs	r0, r0, #3
 8001082:	2a00      	cmp	r2, #0
 8001084:	d100      	bne.n	8001088 <__aeabi_dsub+0x654>
 8001086:	e6aa      	b.n	8000dde <__aeabi_dsub+0x3aa>
 8001088:	0762      	lsls	r2, r4, #29
 800108a:	4310      	orrs	r0, r2
 800108c:	2280      	movs	r2, #128	@ 0x80
 800108e:	08e4      	lsrs	r4, r4, #3
 8001090:	0312      	lsls	r2, r2, #12
 8001092:	4214      	tst	r4, r2
 8001094:	d0d7      	beq.n	8001046 <__aeabi_dsub+0x612>
 8001096:	9f02      	ldr	r7, [sp, #8]
 8001098:	08fd      	lsrs	r5, r7, #3
 800109a:	4215      	tst	r5, r2
 800109c:	d1d3      	bne.n	8001046 <__aeabi_dsub+0x612>
 800109e:	4663      	mov	r3, ip
 80010a0:	2601      	movs	r6, #1
 80010a2:	08d8      	lsrs	r0, r3, #3
 80010a4:	077b      	lsls	r3, r7, #29
 80010a6:	002c      	movs	r4, r5
 80010a8:	4318      	orrs	r0, r3
 80010aa:	400e      	ands	r6, r1
 80010ac:	e7cb      	b.n	8001046 <__aeabi_dsub+0x612>
 80010ae:	000a      	movs	r2, r1
 80010b0:	0027      	movs	r7, r4
 80010b2:	3a20      	subs	r2, #32
 80010b4:	40d7      	lsrs	r7, r2
 80010b6:	2920      	cmp	r1, #32
 80010b8:	d005      	beq.n	80010c6 <__aeabi_dsub+0x692>
 80010ba:	2240      	movs	r2, #64	@ 0x40
 80010bc:	1a52      	subs	r2, r2, r1
 80010be:	4094      	lsls	r4, r2
 80010c0:	0025      	movs	r5, r4
 80010c2:	4305      	orrs	r5, r0
 80010c4:	9503      	str	r5, [sp, #12]
 80010c6:	9d03      	ldr	r5, [sp, #12]
 80010c8:	1e6a      	subs	r2, r5, #1
 80010ca:	4195      	sbcs	r5, r2
 80010cc:	432f      	orrs	r7, r5
 80010ce:	e610      	b.n	8000cf2 <__aeabi_dsub+0x2be>
 80010d0:	0014      	movs	r4, r2
 80010d2:	2500      	movs	r5, #0
 80010d4:	2200      	movs	r2, #0
 80010d6:	e556      	b.n	8000b86 <__aeabi_dsub+0x152>
 80010d8:	9b02      	ldr	r3, [sp, #8]
 80010da:	4460      	add	r0, ip
 80010dc:	4699      	mov	r9, r3
 80010de:	4560      	cmp	r0, ip
 80010e0:	4192      	sbcs	r2, r2
 80010e2:	444c      	add	r4, r9
 80010e4:	4252      	negs	r2, r2
 80010e6:	0005      	movs	r5, r0
 80010e8:	18a4      	adds	r4, r4, r2
 80010ea:	e74c      	b.n	8000f86 <__aeabi_dsub+0x552>
 80010ec:	001a      	movs	r2, r3
 80010ee:	001c      	movs	r4, r3
 80010f0:	432a      	orrs	r2, r5
 80010f2:	d000      	beq.n	80010f6 <__aeabi_dsub+0x6c2>
 80010f4:	e6b3      	b.n	8000e5e <__aeabi_dsub+0x42a>
 80010f6:	e6c9      	b.n	8000e8c <__aeabi_dsub+0x458>
 80010f8:	2480      	movs	r4, #128	@ 0x80
 80010fa:	2600      	movs	r6, #0
 80010fc:	0324      	lsls	r4, r4, #12
 80010fe:	e5ae      	b.n	8000c5e <__aeabi_dsub+0x22a>
 8001100:	2120      	movs	r1, #32
 8001102:	2500      	movs	r5, #0
 8001104:	1a09      	subs	r1, r1, r0
 8001106:	e517      	b.n	8000b38 <__aeabi_dsub+0x104>
 8001108:	2200      	movs	r2, #0
 800110a:	2500      	movs	r5, #0
 800110c:	4c0b      	ldr	r4, [pc, #44]	@ (800113c <__aeabi_dsub+0x708>)
 800110e:	e53a      	b.n	8000b86 <__aeabi_dsub+0x152>
 8001110:	2d00      	cmp	r5, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_dsub+0x6e2>
 8001114:	e5f6      	b.n	8000d04 <__aeabi_dsub+0x2d0>
 8001116:	464b      	mov	r3, r9
 8001118:	1bda      	subs	r2, r3, r7
 800111a:	4692      	mov	sl, r2
 800111c:	2f00      	cmp	r7, #0
 800111e:	d100      	bne.n	8001122 <__aeabi_dsub+0x6ee>
 8001120:	e66f      	b.n	8000e02 <__aeabi_dsub+0x3ce>
 8001122:	2a38      	cmp	r2, #56	@ 0x38
 8001124:	dc05      	bgt.n	8001132 <__aeabi_dsub+0x6fe>
 8001126:	2680      	movs	r6, #128	@ 0x80
 8001128:	0436      	lsls	r6, r6, #16
 800112a:	4334      	orrs	r4, r6
 800112c:	4688      	mov	r8, r1
 800112e:	000e      	movs	r6, r1
 8001130:	e6d1      	b.n	8000ed6 <__aeabi_dsub+0x4a2>
 8001132:	4688      	mov	r8, r1
 8001134:	000e      	movs	r6, r1
 8001136:	2501      	movs	r5, #1
 8001138:	e6de      	b.n	8000ef8 <__aeabi_dsub+0x4c4>
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	000007ff 	.word	0x000007ff
 8001140:	ff7fffff 	.word	0xff7fffff
 8001144:	000007fe 	.word	0x000007fe
 8001148:	2d00      	cmp	r5, #0
 800114a:	d100      	bne.n	800114e <__aeabi_dsub+0x71a>
 800114c:	e668      	b.n	8000e20 <__aeabi_dsub+0x3ec>
 800114e:	464b      	mov	r3, r9
 8001150:	1bd9      	subs	r1, r3, r7
 8001152:	2f00      	cmp	r7, #0
 8001154:	d101      	bne.n	800115a <__aeabi_dsub+0x726>
 8001156:	468a      	mov	sl, r1
 8001158:	e5a7      	b.n	8000caa <__aeabi_dsub+0x276>
 800115a:	2701      	movs	r7, #1
 800115c:	2938      	cmp	r1, #56	@ 0x38
 800115e:	dd00      	ble.n	8001162 <__aeabi_dsub+0x72e>
 8001160:	e5c7      	b.n	8000cf2 <__aeabi_dsub+0x2be>
 8001162:	2280      	movs	r2, #128	@ 0x80
 8001164:	0412      	lsls	r2, r2, #16
 8001166:	4314      	orrs	r4, r2
 8001168:	e5af      	b.n	8000cca <__aeabi_dsub+0x296>
 800116a:	46c0      	nop			@ (mov r8, r8)

0800116c <__aeabi_d2iz>:
 800116c:	000b      	movs	r3, r1
 800116e:	0002      	movs	r2, r0
 8001170:	b570      	push	{r4, r5, r6, lr}
 8001172:	4d16      	ldr	r5, [pc, #88]	@ (80011cc <__aeabi_d2iz+0x60>)
 8001174:	030c      	lsls	r4, r1, #12
 8001176:	b082      	sub	sp, #8
 8001178:	0049      	lsls	r1, r1, #1
 800117a:	2000      	movs	r0, #0
 800117c:	9200      	str	r2, [sp, #0]
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	0b24      	lsrs	r4, r4, #12
 8001182:	0d49      	lsrs	r1, r1, #21
 8001184:	0fde      	lsrs	r6, r3, #31
 8001186:	42a9      	cmp	r1, r5
 8001188:	dd04      	ble.n	8001194 <__aeabi_d2iz+0x28>
 800118a:	4811      	ldr	r0, [pc, #68]	@ (80011d0 <__aeabi_d2iz+0x64>)
 800118c:	4281      	cmp	r1, r0
 800118e:	dd03      	ble.n	8001198 <__aeabi_d2iz+0x2c>
 8001190:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <__aeabi_d2iz+0x68>)
 8001192:	18f0      	adds	r0, r6, r3
 8001194:	b002      	add	sp, #8
 8001196:	bd70      	pop	{r4, r5, r6, pc}
 8001198:	2080      	movs	r0, #128	@ 0x80
 800119a:	0340      	lsls	r0, r0, #13
 800119c:	4320      	orrs	r0, r4
 800119e:	4c0e      	ldr	r4, [pc, #56]	@ (80011d8 <__aeabi_d2iz+0x6c>)
 80011a0:	1a64      	subs	r4, r4, r1
 80011a2:	2c1f      	cmp	r4, #31
 80011a4:	dd08      	ble.n	80011b8 <__aeabi_d2iz+0x4c>
 80011a6:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <__aeabi_d2iz+0x70>)
 80011a8:	1a5b      	subs	r3, r3, r1
 80011aa:	40d8      	lsrs	r0, r3
 80011ac:	0003      	movs	r3, r0
 80011ae:	4258      	negs	r0, r3
 80011b0:	2e00      	cmp	r6, #0
 80011b2:	d1ef      	bne.n	8001194 <__aeabi_d2iz+0x28>
 80011b4:	0018      	movs	r0, r3
 80011b6:	e7ed      	b.n	8001194 <__aeabi_d2iz+0x28>
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <__aeabi_d2iz+0x74>)
 80011ba:	9a00      	ldr	r2, [sp, #0]
 80011bc:	469c      	mov	ip, r3
 80011be:	0003      	movs	r3, r0
 80011c0:	4461      	add	r1, ip
 80011c2:	408b      	lsls	r3, r1
 80011c4:	40e2      	lsrs	r2, r4
 80011c6:	4313      	orrs	r3, r2
 80011c8:	e7f1      	b.n	80011ae <__aeabi_d2iz+0x42>
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	000003fe 	.word	0x000003fe
 80011d0:	0000041d 	.word	0x0000041d
 80011d4:	7fffffff 	.word	0x7fffffff
 80011d8:	00000433 	.word	0x00000433
 80011dc:	00000413 	.word	0x00000413
 80011e0:	fffffbed 	.word	0xfffffbed

080011e4 <__aeabi_ui2d>:
 80011e4:	b510      	push	{r4, lr}
 80011e6:	1e04      	subs	r4, r0, #0
 80011e8:	d010      	beq.n	800120c <__aeabi_ui2d+0x28>
 80011ea:	f000 f85d 	bl	80012a8 <__clzsi2>
 80011ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <__aeabi_ui2d+0x44>)
 80011f0:	1a1b      	subs	r3, r3, r0
 80011f2:	055b      	lsls	r3, r3, #21
 80011f4:	0d5b      	lsrs	r3, r3, #21
 80011f6:	280a      	cmp	r0, #10
 80011f8:	dc0f      	bgt.n	800121a <__aeabi_ui2d+0x36>
 80011fa:	220b      	movs	r2, #11
 80011fc:	0021      	movs	r1, r4
 80011fe:	1a12      	subs	r2, r2, r0
 8001200:	40d1      	lsrs	r1, r2
 8001202:	3015      	adds	r0, #21
 8001204:	030a      	lsls	r2, r1, #12
 8001206:	4084      	lsls	r4, r0
 8001208:	0b12      	lsrs	r2, r2, #12
 800120a:	e001      	b.n	8001210 <__aeabi_ui2d+0x2c>
 800120c:	2300      	movs	r3, #0
 800120e:	2200      	movs	r2, #0
 8001210:	051b      	lsls	r3, r3, #20
 8001212:	4313      	orrs	r3, r2
 8001214:	0020      	movs	r0, r4
 8001216:	0019      	movs	r1, r3
 8001218:	bd10      	pop	{r4, pc}
 800121a:	0022      	movs	r2, r4
 800121c:	380b      	subs	r0, #11
 800121e:	4082      	lsls	r2, r0
 8001220:	0312      	lsls	r2, r2, #12
 8001222:	2400      	movs	r4, #0
 8001224:	0b12      	lsrs	r2, r2, #12
 8001226:	e7f3      	b.n	8001210 <__aeabi_ui2d+0x2c>
 8001228:	0000041e 	.word	0x0000041e

0800122c <__aeabi_cdrcmple>:
 800122c:	4684      	mov	ip, r0
 800122e:	0010      	movs	r0, r2
 8001230:	4662      	mov	r2, ip
 8001232:	468c      	mov	ip, r1
 8001234:	0019      	movs	r1, r3
 8001236:	4663      	mov	r3, ip
 8001238:	e000      	b.n	800123c <__aeabi_cdcmpeq>
 800123a:	46c0      	nop			@ (mov r8, r8)

0800123c <__aeabi_cdcmpeq>:
 800123c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800123e:	f000 f915 	bl	800146c <__ledf2>
 8001242:	2800      	cmp	r0, #0
 8001244:	d401      	bmi.n	800124a <__aeabi_cdcmpeq+0xe>
 8001246:	2100      	movs	r1, #0
 8001248:	42c8      	cmn	r0, r1
 800124a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800124c <__aeabi_dcmpeq>:
 800124c:	b510      	push	{r4, lr}
 800124e:	f000 f855 	bl	80012fc <__eqdf2>
 8001252:	4240      	negs	r0, r0
 8001254:	3001      	adds	r0, #1
 8001256:	bd10      	pop	{r4, pc}

08001258 <__aeabi_dcmplt>:
 8001258:	b510      	push	{r4, lr}
 800125a:	f000 f907 	bl	800146c <__ledf2>
 800125e:	2800      	cmp	r0, #0
 8001260:	db01      	blt.n	8001266 <__aeabi_dcmplt+0xe>
 8001262:	2000      	movs	r0, #0
 8001264:	bd10      	pop	{r4, pc}
 8001266:	2001      	movs	r0, #1
 8001268:	bd10      	pop	{r4, pc}
 800126a:	46c0      	nop			@ (mov r8, r8)

0800126c <__aeabi_dcmple>:
 800126c:	b510      	push	{r4, lr}
 800126e:	f000 f8fd 	bl	800146c <__ledf2>
 8001272:	2800      	cmp	r0, #0
 8001274:	dd01      	ble.n	800127a <__aeabi_dcmple+0xe>
 8001276:	2000      	movs	r0, #0
 8001278:	bd10      	pop	{r4, pc}
 800127a:	2001      	movs	r0, #1
 800127c:	bd10      	pop	{r4, pc}
 800127e:	46c0      	nop			@ (mov r8, r8)

08001280 <__aeabi_dcmpgt>:
 8001280:	b510      	push	{r4, lr}
 8001282:	f000 f87f 	bl	8001384 <__gedf2>
 8001286:	2800      	cmp	r0, #0
 8001288:	dc01      	bgt.n	800128e <__aeabi_dcmpgt+0xe>
 800128a:	2000      	movs	r0, #0
 800128c:	bd10      	pop	{r4, pc}
 800128e:	2001      	movs	r0, #1
 8001290:	bd10      	pop	{r4, pc}
 8001292:	46c0      	nop			@ (mov r8, r8)

08001294 <__aeabi_dcmpge>:
 8001294:	b510      	push	{r4, lr}
 8001296:	f000 f875 	bl	8001384 <__gedf2>
 800129a:	2800      	cmp	r0, #0
 800129c:	da01      	bge.n	80012a2 <__aeabi_dcmpge+0xe>
 800129e:	2000      	movs	r0, #0
 80012a0:	bd10      	pop	{r4, pc}
 80012a2:	2001      	movs	r0, #1
 80012a4:	bd10      	pop	{r4, pc}
 80012a6:	46c0      	nop			@ (mov r8, r8)

080012a8 <__clzsi2>:
 80012a8:	211c      	movs	r1, #28
 80012aa:	2301      	movs	r3, #1
 80012ac:	041b      	lsls	r3, r3, #16
 80012ae:	4298      	cmp	r0, r3
 80012b0:	d301      	bcc.n	80012b6 <__clzsi2+0xe>
 80012b2:	0c00      	lsrs	r0, r0, #16
 80012b4:	3910      	subs	r1, #16
 80012b6:	0a1b      	lsrs	r3, r3, #8
 80012b8:	4298      	cmp	r0, r3
 80012ba:	d301      	bcc.n	80012c0 <__clzsi2+0x18>
 80012bc:	0a00      	lsrs	r0, r0, #8
 80012be:	3908      	subs	r1, #8
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	4298      	cmp	r0, r3
 80012c4:	d301      	bcc.n	80012ca <__clzsi2+0x22>
 80012c6:	0900      	lsrs	r0, r0, #4
 80012c8:	3904      	subs	r1, #4
 80012ca:	a202      	add	r2, pc, #8	@ (adr r2, 80012d4 <__clzsi2+0x2c>)
 80012cc:	5c10      	ldrb	r0, [r2, r0]
 80012ce:	1840      	adds	r0, r0, r1
 80012d0:	4770      	bx	lr
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	02020304 	.word	0x02020304
 80012d8:	01010101 	.word	0x01010101
	...

080012e4 <__clzdi2>:
 80012e4:	b510      	push	{r4, lr}
 80012e6:	2900      	cmp	r1, #0
 80012e8:	d103      	bne.n	80012f2 <__clzdi2+0xe>
 80012ea:	f7ff ffdd 	bl	80012a8 <__clzsi2>
 80012ee:	3020      	adds	r0, #32
 80012f0:	e002      	b.n	80012f8 <__clzdi2+0x14>
 80012f2:	0008      	movs	r0, r1
 80012f4:	f7ff ffd8 	bl	80012a8 <__clzsi2>
 80012f8:	bd10      	pop	{r4, pc}
 80012fa:	46c0      	nop			@ (mov r8, r8)

080012fc <__eqdf2>:
 80012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fe:	4657      	mov	r7, sl
 8001300:	46de      	mov	lr, fp
 8001302:	464e      	mov	r6, r9
 8001304:	4645      	mov	r5, r8
 8001306:	b5e0      	push	{r5, r6, r7, lr}
 8001308:	000d      	movs	r5, r1
 800130a:	0004      	movs	r4, r0
 800130c:	0fe8      	lsrs	r0, r5, #31
 800130e:	4683      	mov	fp, r0
 8001310:	0309      	lsls	r1, r1, #12
 8001312:	0fd8      	lsrs	r0, r3, #31
 8001314:	0b09      	lsrs	r1, r1, #12
 8001316:	4682      	mov	sl, r0
 8001318:	4819      	ldr	r0, [pc, #100]	@ (8001380 <__eqdf2+0x84>)
 800131a:	468c      	mov	ip, r1
 800131c:	031f      	lsls	r7, r3, #12
 800131e:	0069      	lsls	r1, r5, #1
 8001320:	005e      	lsls	r6, r3, #1
 8001322:	0d49      	lsrs	r1, r1, #21
 8001324:	0b3f      	lsrs	r7, r7, #12
 8001326:	0d76      	lsrs	r6, r6, #21
 8001328:	4281      	cmp	r1, r0
 800132a:	d018      	beq.n	800135e <__eqdf2+0x62>
 800132c:	4286      	cmp	r6, r0
 800132e:	d00f      	beq.n	8001350 <__eqdf2+0x54>
 8001330:	2001      	movs	r0, #1
 8001332:	42b1      	cmp	r1, r6
 8001334:	d10d      	bne.n	8001352 <__eqdf2+0x56>
 8001336:	45bc      	cmp	ip, r7
 8001338:	d10b      	bne.n	8001352 <__eqdf2+0x56>
 800133a:	4294      	cmp	r4, r2
 800133c:	d109      	bne.n	8001352 <__eqdf2+0x56>
 800133e:	45d3      	cmp	fp, sl
 8001340:	d01c      	beq.n	800137c <__eqdf2+0x80>
 8001342:	2900      	cmp	r1, #0
 8001344:	d105      	bne.n	8001352 <__eqdf2+0x56>
 8001346:	4660      	mov	r0, ip
 8001348:	4320      	orrs	r0, r4
 800134a:	1e43      	subs	r3, r0, #1
 800134c:	4198      	sbcs	r0, r3
 800134e:	e000      	b.n	8001352 <__eqdf2+0x56>
 8001350:	2001      	movs	r0, #1
 8001352:	bcf0      	pop	{r4, r5, r6, r7}
 8001354:	46bb      	mov	fp, r7
 8001356:	46b2      	mov	sl, r6
 8001358:	46a9      	mov	r9, r5
 800135a:	46a0      	mov	r8, r4
 800135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800135e:	2001      	movs	r0, #1
 8001360:	428e      	cmp	r6, r1
 8001362:	d1f6      	bne.n	8001352 <__eqdf2+0x56>
 8001364:	4661      	mov	r1, ip
 8001366:	4339      	orrs	r1, r7
 8001368:	000f      	movs	r7, r1
 800136a:	4317      	orrs	r7, r2
 800136c:	4327      	orrs	r7, r4
 800136e:	d1f0      	bne.n	8001352 <__eqdf2+0x56>
 8001370:	465b      	mov	r3, fp
 8001372:	4652      	mov	r2, sl
 8001374:	1a98      	subs	r0, r3, r2
 8001376:	1e43      	subs	r3, r0, #1
 8001378:	4198      	sbcs	r0, r3
 800137a:	e7ea      	b.n	8001352 <__eqdf2+0x56>
 800137c:	2000      	movs	r0, #0
 800137e:	e7e8      	b.n	8001352 <__eqdf2+0x56>
 8001380:	000007ff 	.word	0x000007ff

08001384 <__gedf2>:
 8001384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001386:	4657      	mov	r7, sl
 8001388:	464e      	mov	r6, r9
 800138a:	4645      	mov	r5, r8
 800138c:	46de      	mov	lr, fp
 800138e:	b5e0      	push	{r5, r6, r7, lr}
 8001390:	000d      	movs	r5, r1
 8001392:	030f      	lsls	r7, r1, #12
 8001394:	0b39      	lsrs	r1, r7, #12
 8001396:	b083      	sub	sp, #12
 8001398:	0004      	movs	r4, r0
 800139a:	4680      	mov	r8, r0
 800139c:	9101      	str	r1, [sp, #4]
 800139e:	0058      	lsls	r0, r3, #1
 80013a0:	0fe9      	lsrs	r1, r5, #31
 80013a2:	4f31      	ldr	r7, [pc, #196]	@ (8001468 <__gedf2+0xe4>)
 80013a4:	0d40      	lsrs	r0, r0, #21
 80013a6:	468c      	mov	ip, r1
 80013a8:	006e      	lsls	r6, r5, #1
 80013aa:	0319      	lsls	r1, r3, #12
 80013ac:	4682      	mov	sl, r0
 80013ae:	4691      	mov	r9, r2
 80013b0:	0d76      	lsrs	r6, r6, #21
 80013b2:	0b09      	lsrs	r1, r1, #12
 80013b4:	0fd8      	lsrs	r0, r3, #31
 80013b6:	42be      	cmp	r6, r7
 80013b8:	d01f      	beq.n	80013fa <__gedf2+0x76>
 80013ba:	45ba      	cmp	sl, r7
 80013bc:	d00f      	beq.n	80013de <__gedf2+0x5a>
 80013be:	2e00      	cmp	r6, #0
 80013c0:	d12f      	bne.n	8001422 <__gedf2+0x9e>
 80013c2:	4655      	mov	r5, sl
 80013c4:	9e01      	ldr	r6, [sp, #4]
 80013c6:	4334      	orrs	r4, r6
 80013c8:	2d00      	cmp	r5, #0
 80013ca:	d127      	bne.n	800141c <__gedf2+0x98>
 80013cc:	430a      	orrs	r2, r1
 80013ce:	d03a      	beq.n	8001446 <__gedf2+0xc2>
 80013d0:	2c00      	cmp	r4, #0
 80013d2:	d145      	bne.n	8001460 <__gedf2+0xdc>
 80013d4:	2800      	cmp	r0, #0
 80013d6:	d11a      	bne.n	800140e <__gedf2+0x8a>
 80013d8:	2001      	movs	r0, #1
 80013da:	4240      	negs	r0, r0
 80013dc:	e017      	b.n	800140e <__gedf2+0x8a>
 80013de:	4311      	orrs	r1, r2
 80013e0:	d13b      	bne.n	800145a <__gedf2+0xd6>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d102      	bne.n	80013ec <__gedf2+0x68>
 80013e6:	9f01      	ldr	r7, [sp, #4]
 80013e8:	4327      	orrs	r7, r4
 80013ea:	d0f3      	beq.n	80013d4 <__gedf2+0x50>
 80013ec:	4584      	cmp	ip, r0
 80013ee:	d109      	bne.n	8001404 <__gedf2+0x80>
 80013f0:	4663      	mov	r3, ip
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <__gedf2+0x54>
 80013f6:	4660      	mov	r0, ip
 80013f8:	e009      	b.n	800140e <__gedf2+0x8a>
 80013fa:	9f01      	ldr	r7, [sp, #4]
 80013fc:	4327      	orrs	r7, r4
 80013fe:	d12c      	bne.n	800145a <__gedf2+0xd6>
 8001400:	45b2      	cmp	sl, r6
 8001402:	d024      	beq.n	800144e <__gedf2+0xca>
 8001404:	4663      	mov	r3, ip
 8001406:	2002      	movs	r0, #2
 8001408:	3b01      	subs	r3, #1
 800140a:	4018      	ands	r0, r3
 800140c:	3801      	subs	r0, #1
 800140e:	b003      	add	sp, #12
 8001410:	bcf0      	pop	{r4, r5, r6, r7}
 8001412:	46bb      	mov	fp, r7
 8001414:	46b2      	mov	sl, r6
 8001416:	46a9      	mov	r9, r5
 8001418:	46a0      	mov	r8, r4
 800141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141c:	2c00      	cmp	r4, #0
 800141e:	d0d9      	beq.n	80013d4 <__gedf2+0x50>
 8001420:	e7e4      	b.n	80013ec <__gedf2+0x68>
 8001422:	4654      	mov	r4, sl
 8001424:	2c00      	cmp	r4, #0
 8001426:	d0ed      	beq.n	8001404 <__gedf2+0x80>
 8001428:	4584      	cmp	ip, r0
 800142a:	d1eb      	bne.n	8001404 <__gedf2+0x80>
 800142c:	4556      	cmp	r6, sl
 800142e:	dce9      	bgt.n	8001404 <__gedf2+0x80>
 8001430:	dbde      	blt.n	80013f0 <__gedf2+0x6c>
 8001432:	9b01      	ldr	r3, [sp, #4]
 8001434:	428b      	cmp	r3, r1
 8001436:	d8e5      	bhi.n	8001404 <__gedf2+0x80>
 8001438:	d1da      	bne.n	80013f0 <__gedf2+0x6c>
 800143a:	45c8      	cmp	r8, r9
 800143c:	d8e2      	bhi.n	8001404 <__gedf2+0x80>
 800143e:	2000      	movs	r0, #0
 8001440:	45c8      	cmp	r8, r9
 8001442:	d2e4      	bcs.n	800140e <__gedf2+0x8a>
 8001444:	e7d4      	b.n	80013f0 <__gedf2+0x6c>
 8001446:	2000      	movs	r0, #0
 8001448:	2c00      	cmp	r4, #0
 800144a:	d0e0      	beq.n	800140e <__gedf2+0x8a>
 800144c:	e7da      	b.n	8001404 <__gedf2+0x80>
 800144e:	4311      	orrs	r1, r2
 8001450:	d103      	bne.n	800145a <__gedf2+0xd6>
 8001452:	4584      	cmp	ip, r0
 8001454:	d1d6      	bne.n	8001404 <__gedf2+0x80>
 8001456:	2000      	movs	r0, #0
 8001458:	e7d9      	b.n	800140e <__gedf2+0x8a>
 800145a:	2002      	movs	r0, #2
 800145c:	4240      	negs	r0, r0
 800145e:	e7d6      	b.n	800140e <__gedf2+0x8a>
 8001460:	4584      	cmp	ip, r0
 8001462:	d0e6      	beq.n	8001432 <__gedf2+0xae>
 8001464:	e7ce      	b.n	8001404 <__gedf2+0x80>
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	000007ff 	.word	0x000007ff

0800146c <__ledf2>:
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	4657      	mov	r7, sl
 8001470:	464e      	mov	r6, r9
 8001472:	4645      	mov	r5, r8
 8001474:	46de      	mov	lr, fp
 8001476:	b5e0      	push	{r5, r6, r7, lr}
 8001478:	000d      	movs	r5, r1
 800147a:	030f      	lsls	r7, r1, #12
 800147c:	0004      	movs	r4, r0
 800147e:	4680      	mov	r8, r0
 8001480:	0fe8      	lsrs	r0, r5, #31
 8001482:	0b39      	lsrs	r1, r7, #12
 8001484:	4684      	mov	ip, r0
 8001486:	b083      	sub	sp, #12
 8001488:	0058      	lsls	r0, r3, #1
 800148a:	4f30      	ldr	r7, [pc, #192]	@ (800154c <__ledf2+0xe0>)
 800148c:	0d40      	lsrs	r0, r0, #21
 800148e:	9101      	str	r1, [sp, #4]
 8001490:	031e      	lsls	r6, r3, #12
 8001492:	0069      	lsls	r1, r5, #1
 8001494:	4682      	mov	sl, r0
 8001496:	4691      	mov	r9, r2
 8001498:	0d49      	lsrs	r1, r1, #21
 800149a:	0b36      	lsrs	r6, r6, #12
 800149c:	0fd8      	lsrs	r0, r3, #31
 800149e:	42b9      	cmp	r1, r7
 80014a0:	d020      	beq.n	80014e4 <__ledf2+0x78>
 80014a2:	45ba      	cmp	sl, r7
 80014a4:	d00f      	beq.n	80014c6 <__ledf2+0x5a>
 80014a6:	2900      	cmp	r1, #0
 80014a8:	d12b      	bne.n	8001502 <__ledf2+0x96>
 80014aa:	9901      	ldr	r1, [sp, #4]
 80014ac:	430c      	orrs	r4, r1
 80014ae:	4651      	mov	r1, sl
 80014b0:	2900      	cmp	r1, #0
 80014b2:	d137      	bne.n	8001524 <__ledf2+0xb8>
 80014b4:	4332      	orrs	r2, r6
 80014b6:	d038      	beq.n	800152a <__ledf2+0xbe>
 80014b8:	2c00      	cmp	r4, #0
 80014ba:	d144      	bne.n	8001546 <__ledf2+0xda>
 80014bc:	2800      	cmp	r0, #0
 80014be:	d119      	bne.n	80014f4 <__ledf2+0x88>
 80014c0:	2001      	movs	r0, #1
 80014c2:	4240      	negs	r0, r0
 80014c4:	e016      	b.n	80014f4 <__ledf2+0x88>
 80014c6:	4316      	orrs	r6, r2
 80014c8:	d113      	bne.n	80014f2 <__ledf2+0x86>
 80014ca:	2900      	cmp	r1, #0
 80014cc:	d102      	bne.n	80014d4 <__ledf2+0x68>
 80014ce:	9f01      	ldr	r7, [sp, #4]
 80014d0:	4327      	orrs	r7, r4
 80014d2:	d0f3      	beq.n	80014bc <__ledf2+0x50>
 80014d4:	4584      	cmp	ip, r0
 80014d6:	d020      	beq.n	800151a <__ledf2+0xae>
 80014d8:	4663      	mov	r3, ip
 80014da:	2002      	movs	r0, #2
 80014dc:	3b01      	subs	r3, #1
 80014de:	4018      	ands	r0, r3
 80014e0:	3801      	subs	r0, #1
 80014e2:	e007      	b.n	80014f4 <__ledf2+0x88>
 80014e4:	9f01      	ldr	r7, [sp, #4]
 80014e6:	4327      	orrs	r7, r4
 80014e8:	d103      	bne.n	80014f2 <__ledf2+0x86>
 80014ea:	458a      	cmp	sl, r1
 80014ec:	d1f4      	bne.n	80014d8 <__ledf2+0x6c>
 80014ee:	4316      	orrs	r6, r2
 80014f0:	d01f      	beq.n	8001532 <__ledf2+0xc6>
 80014f2:	2002      	movs	r0, #2
 80014f4:	b003      	add	sp, #12
 80014f6:	bcf0      	pop	{r4, r5, r6, r7}
 80014f8:	46bb      	mov	fp, r7
 80014fa:	46b2      	mov	sl, r6
 80014fc:	46a9      	mov	r9, r5
 80014fe:	46a0      	mov	r8, r4
 8001500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001502:	4654      	mov	r4, sl
 8001504:	2c00      	cmp	r4, #0
 8001506:	d0e7      	beq.n	80014d8 <__ledf2+0x6c>
 8001508:	4584      	cmp	ip, r0
 800150a:	d1e5      	bne.n	80014d8 <__ledf2+0x6c>
 800150c:	4551      	cmp	r1, sl
 800150e:	dce3      	bgt.n	80014d8 <__ledf2+0x6c>
 8001510:	db03      	blt.n	800151a <__ledf2+0xae>
 8001512:	9b01      	ldr	r3, [sp, #4]
 8001514:	42b3      	cmp	r3, r6
 8001516:	d8df      	bhi.n	80014d8 <__ledf2+0x6c>
 8001518:	d00f      	beq.n	800153a <__ledf2+0xce>
 800151a:	4663      	mov	r3, ip
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0cf      	beq.n	80014c0 <__ledf2+0x54>
 8001520:	4660      	mov	r0, ip
 8001522:	e7e7      	b.n	80014f4 <__ledf2+0x88>
 8001524:	2c00      	cmp	r4, #0
 8001526:	d0c9      	beq.n	80014bc <__ledf2+0x50>
 8001528:	e7d4      	b.n	80014d4 <__ledf2+0x68>
 800152a:	2000      	movs	r0, #0
 800152c:	2c00      	cmp	r4, #0
 800152e:	d0e1      	beq.n	80014f4 <__ledf2+0x88>
 8001530:	e7d2      	b.n	80014d8 <__ledf2+0x6c>
 8001532:	4584      	cmp	ip, r0
 8001534:	d1d0      	bne.n	80014d8 <__ledf2+0x6c>
 8001536:	2000      	movs	r0, #0
 8001538:	e7dc      	b.n	80014f4 <__ledf2+0x88>
 800153a:	45c8      	cmp	r8, r9
 800153c:	d8cc      	bhi.n	80014d8 <__ledf2+0x6c>
 800153e:	2000      	movs	r0, #0
 8001540:	45c8      	cmp	r8, r9
 8001542:	d2d7      	bcs.n	80014f4 <__ledf2+0x88>
 8001544:	e7e9      	b.n	800151a <__ledf2+0xae>
 8001546:	4584      	cmp	ip, r0
 8001548:	d0e3      	beq.n	8001512 <__ledf2+0xa6>
 800154a:	e7c5      	b.n	80014d8 <__ledf2+0x6c>
 800154c:	000007ff 	.word	0x000007ff

08001550 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	0002      	movs	r2, r0
 8001558:	1dbb      	adds	r3, r7, #6
 800155a:	801a      	strh	r2, [r3, #0]
 800155c:	1d7b      	adds	r3, r7, #5
 800155e:	1c0a      	adds	r2, r1, #0
 8001560:	701a      	strb	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8001562:	240f      	movs	r4, #15
 8001564:	193b      	adds	r3, r7, r4
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 800156a:	1d7b      	adds	r3, r7, #5
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	085b      	lsrs	r3, r3, #1
 8001570:	b2da      	uxtb	r2, r3
 8001572:	1dbb      	adds	r3, r7, #6
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	2101      	movs	r1, #1
 8001578:	0018      	movs	r0, r3
 800157a:	f000 fe09 	bl	8002190 <VL53L1_WrByte>
 800157e:	0003      	movs	r3, r0
 8001580:	0019      	movs	r1, r3
 8001582:	193b      	adds	r3, r7, r4
 8001584:	193a      	adds	r2, r7, r4
 8001586:	7812      	ldrb	r2, [r2, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	701a      	strb	r2, [r3, #0]
	return status;
 800158c:	193b      	adds	r3, r7, r4
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b25b      	sxtb	r3, r3
}
 8001592:	0018      	movs	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	b005      	add	sp, #20
 8001598:	bd90      	pop	{r4, r7, pc}
	...

0800159c <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	0002      	movs	r2, r0
 80015a4:	1dbb      	adds	r3, r7, #6
 80015a6:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80015a8:	230f      	movs	r3, #15
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 80015b0:	210e      	movs	r1, #14
 80015b2:	187b      	adds	r3, r7, r1
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	222d      	movs	r2, #45	@ 0x2d
 80015bc:	701a      	strb	r2, [r3, #0]
 80015be:	e01a      	b.n	80015f6 <VL53L1X_SensorInit+0x5a>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80015c0:	240e      	movs	r4, #14
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b299      	uxth	r1, r3
 80015c8:	193b      	adds	r3, r7, r4
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	3b2d      	subs	r3, #45	@ 0x2d
 80015ce:	4a3e      	ldr	r2, [pc, #248]	@ (80016c8 <VL53L1X_SensorInit+0x12c>)
 80015d0:	5cd2      	ldrb	r2, [r2, r3]
 80015d2:	1dbb      	adds	r3, r7, #6
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	0018      	movs	r0, r3
 80015d8:	f000 fdda 	bl	8002190 <VL53L1_WrByte>
 80015dc:	0003      	movs	r3, r0
 80015de:	0019      	movs	r1, r3
 80015e0:	220f      	movs	r2, #15
 80015e2:	18bb      	adds	r3, r7, r2
 80015e4:	18ba      	adds	r2, r7, r2
 80015e6:	7812      	ldrb	r2, [r2, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	701a      	strb	r2, [r3, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80015ec:	193b      	adds	r3, r7, r4
 80015ee:	781a      	ldrb	r2, [r3, #0]
 80015f0:	193b      	adds	r3, r7, r4
 80015f2:	3201      	adds	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
 80015f6:	230e      	movs	r3, #14
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b87      	cmp	r3, #135	@ 0x87
 80015fe:	d9df      	bls.n	80015c0 <VL53L1X_SensorInit+0x24>
	}
	status |= VL53L1X_StartRanging(dev);
 8001600:	1dbb      	adds	r3, r7, #6
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	0018      	movs	r0, r3
 8001606:	f000 f8b3 	bl	8001770 <VL53L1X_StartRanging>
 800160a:	0003      	movs	r3, r0
 800160c:	0019      	movs	r1, r3
 800160e:	220f      	movs	r2, #15
 8001610:	18bb      	adds	r3, r7, r2
 8001612:	18ba      	adds	r2, r7, r2
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	701a      	strb	r2, [r3, #0]
	tmp  = 0;
 800161a:	230d      	movs	r3, #13
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8001622:	e00f      	b.n	8001644 <VL53L1X_SensorInit+0xa8>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8001624:	230d      	movs	r3, #13
 8001626:	18fa      	adds	r2, r7, r3
 8001628:	1dbb      	adds	r3, r7, #6
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	0011      	movs	r1, r2
 800162e:	0018      	movs	r0, r3
 8001630:	f000 f8dc 	bl	80017ec <VL53L1X_CheckForDataReady>
 8001634:	0003      	movs	r3, r0
 8001636:	0019      	movs	r1, r3
 8001638:	220f      	movs	r2, #15
 800163a:	18bb      	adds	r3, r7, r2
 800163c:	18ba      	adds	r2, r7, r2
 800163e:	7812      	ldrb	r2, [r2, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8001644:	230d      	movs	r3, #13
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0ea      	beq.n	8001624 <VL53L1X_SensorInit+0x88>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 800164e:	1dbb      	adds	r3, r7, #6
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	0018      	movs	r0, r3
 8001654:	f000 f83a 	bl	80016cc <VL53L1X_ClearInterrupt>
 8001658:	0003      	movs	r3, r0
 800165a:	0019      	movs	r1, r3
 800165c:	240f      	movs	r4, #15
 800165e:	193b      	adds	r3, r7, r4
 8001660:	193a      	adds	r2, r7, r4
 8001662:	7812      	ldrb	r2, [r2, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_StopRanging(dev);
 8001668:	1dbb      	adds	r3, r7, #6
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	0018      	movs	r0, r3
 800166e:	f000 f89e 	bl	80017ae <VL53L1X_StopRanging>
 8001672:	0003      	movs	r3, r0
 8001674:	0019      	movs	r1, r3
 8001676:	193b      	adds	r3, r7, r4
 8001678:	193a      	adds	r2, r7, r4
 800167a:	7812      	ldrb	r2, [r2, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8001680:	1dbb      	adds	r3, r7, #6
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	2209      	movs	r2, #9
 8001686:	2108      	movs	r1, #8
 8001688:	0018      	movs	r0, r3
 800168a:	f000 fd81 	bl	8002190 <VL53L1_WrByte>
 800168e:	0003      	movs	r3, r0
 8001690:	0019      	movs	r1, r3
 8001692:	193b      	adds	r3, r7, r4
 8001694:	193a      	adds	r2, r7, r4
 8001696:	7812      	ldrb	r2, [r2, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 800169c:	1dbb      	adds	r3, r7, #6
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	2200      	movs	r2, #0
 80016a2:	210b      	movs	r1, #11
 80016a4:	0018      	movs	r0, r3
 80016a6:	f000 fd73 	bl	8002190 <VL53L1_WrByte>
 80016aa:	0003      	movs	r3, r0
 80016ac:	0019      	movs	r1, r3
 80016ae:	193b      	adds	r3, r7, r4
 80016b0:	193a      	adds	r2, r7, r4
 80016b2:	7812      	ldrb	r2, [r2, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	701a      	strb	r2, [r3, #0]
	return status;
 80016b8:	193b      	adds	r3, r7, r4
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b25b      	sxtb	r3, r3
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b005      	add	sp, #20
 80016c4:	bd90      	pop	{r4, r7, pc}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	08006748 	.word	0x08006748

080016cc <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	0002      	movs	r2, r0
 80016d4:	1dbb      	adds	r3, r7, #6
 80016d6:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80016d8:	240f      	movs	r4, #15
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 80016e0:	1dbb      	adds	r3, r7, #6
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	2201      	movs	r2, #1
 80016e6:	2186      	movs	r1, #134	@ 0x86
 80016e8:	0018      	movs	r0, r3
 80016ea:	f000 fd51 	bl	8002190 <VL53L1_WrByte>
 80016ee:	0003      	movs	r3, r0
 80016f0:	0019      	movs	r1, r3
 80016f2:	193b      	adds	r3, r7, r4
 80016f4:	193a      	adds	r2, r7, r4
 80016f6:	7812      	ldrb	r2, [r2, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	701a      	strb	r2, [r3, #0]
	return status;
 80016fc:	193b      	adds	r3, r7, r4
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b25b      	sxtb	r3, r3
}
 8001702:	0018      	movs	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	b005      	add	sp, #20
 8001708:	bd90      	pop	{r4, r7, pc}

0800170a <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800170a:	b5b0      	push	{r4, r5, r7, lr}
 800170c:	b084      	sub	sp, #16
 800170e:	af00      	add	r7, sp, #0
 8001710:	0002      	movs	r2, r0
 8001712:	6039      	str	r1, [r7, #0]
 8001714:	1dbb      	adds	r3, r7, #6
 8001716:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8001718:	240f      	movs	r4, #15
 800171a:	193b      	adds	r3, r7, r4
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8001720:	250e      	movs	r5, #14
 8001722:	197a      	adds	r2, r7, r5
 8001724:	1dbb      	adds	r3, r7, #6
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	2130      	movs	r1, #48	@ 0x30
 800172a:	0018      	movs	r0, r3
 800172c:	f000 fdcc 	bl	80022c8 <VL53L1_RdByte>
 8001730:	0003      	movs	r3, r0
 8001732:	0019      	movs	r1, r3
 8001734:	0020      	movs	r0, r4
 8001736:	183b      	adds	r3, r7, r0
 8001738:	183a      	adds	r2, r7, r0
 800173a:	7812      	ldrb	r2, [r2, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x10;
 8001740:	197b      	adds	r3, r7, r5
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2210      	movs	r2, #16
 8001746:	4013      	ands	r3, r2
 8001748:	b2da      	uxtb	r2, r3
 800174a:	197b      	adds	r3, r7, r5
 800174c:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 800174e:	197b      	adds	r3, r7, r5
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	b2db      	uxtb	r3, r3
 8001756:	425a      	negs	r2, r3
 8001758:	4153      	adcs	r3, r2
 800175a:	b2db      	uxtb	r3, r3
 800175c:	001a      	movs	r2, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	701a      	strb	r2, [r3, #0]
	return status;
 8001762:	183b      	adds	r3, r7, r0
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	b25b      	sxtb	r3, r3
}
 8001768:	0018      	movs	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	b004      	add	sp, #16
 800176e:	bdb0      	pop	{r4, r5, r7, pc}

08001770 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	0002      	movs	r2, r0
 8001778:	1dbb      	adds	r3, r7, #6
 800177a:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800177c:	240f      	movs	r4, #15
 800177e:	193b      	adds	r3, r7, r4
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8001784:	1dbb      	adds	r3, r7, #6
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	2240      	movs	r2, #64	@ 0x40
 800178a:	2187      	movs	r1, #135	@ 0x87
 800178c:	0018      	movs	r0, r3
 800178e:	f000 fcff 	bl	8002190 <VL53L1_WrByte>
 8001792:	0003      	movs	r3, r0
 8001794:	0019      	movs	r1, r3
 8001796:	193b      	adds	r3, r7, r4
 8001798:	193a      	adds	r2, r7, r4
 800179a:	7812      	ldrb	r2, [r2, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	701a      	strb	r2, [r3, #0]
	return status;
 80017a0:	193b      	adds	r3, r7, r4
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b25b      	sxtb	r3, r3
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b005      	add	sp, #20
 80017ac:	bd90      	pop	{r4, r7, pc}

080017ae <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 80017ae:	b590      	push	{r4, r7, lr}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	0002      	movs	r2, r0
 80017b6:	1dbb      	adds	r3, r7, #6
 80017b8:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80017ba:	240f      	movs	r4, #15
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 80017c2:	1dbb      	adds	r3, r7, #6
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	2187      	movs	r1, #135	@ 0x87
 80017ca:	0018      	movs	r0, r3
 80017cc:	f000 fce0 	bl	8002190 <VL53L1_WrByte>
 80017d0:	0003      	movs	r3, r0
 80017d2:	0019      	movs	r1, r3
 80017d4:	193b      	adds	r3, r7, r4
 80017d6:	193a      	adds	r2, r7, r4
 80017d8:	7812      	ldrb	r2, [r2, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	701a      	strb	r2, [r3, #0]
	return status;
 80017de:	193b      	adds	r3, r7, r4
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b25b      	sxtb	r3, r3
}
 80017e4:	0018      	movs	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b005      	add	sp, #20
 80017ea:	bd90      	pop	{r4, r7, pc}

080017ec <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 80017ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	0002      	movs	r2, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	1dbb      	adds	r3, r7, #6
 80017f8:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 80017fa:	240f      	movs	r4, #15
 80017fc:	193b      	adds	r3, r7, r4
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8001802:	250d      	movs	r5, #13
 8001804:	197a      	adds	r2, r7, r5
 8001806:	1dbb      	adds	r3, r7, #6
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	0011      	movs	r1, r2
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff ff7c 	bl	800170a <VL53L1X_GetInterruptPolarity>
 8001812:	0003      	movs	r3, r0
 8001814:	0019      	movs	r1, r3
 8001816:	193b      	adds	r3, r7, r4
 8001818:	193a      	adds	r2, r7, r4
 800181a:	7812      	ldrb	r2, [r2, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8001820:	260e      	movs	r6, #14
 8001822:	19ba      	adds	r2, r7, r6
 8001824:	1dbb      	adds	r3, r7, #6
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	2131      	movs	r1, #49	@ 0x31
 800182a:	0018      	movs	r0, r3
 800182c:	f000 fd4c 	bl	80022c8 <VL53L1_RdByte>
 8001830:	0003      	movs	r3, r0
 8001832:	0019      	movs	r1, r3
 8001834:	193b      	adds	r3, r7, r4
 8001836:	193a      	adds	r2, r7, r4
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 800183e:	193b      	adds	r3, r7, r4
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b25b      	sxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10f      	bne.n	8001868 <VL53L1X_CheckForDataReady+0x7c>
		if ((Temp & 1) == IntPol)
 8001848:	19bb      	adds	r3, r7, r6
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	001a      	movs	r2, r3
 800184e:	2301      	movs	r3, #1
 8001850:	4013      	ands	r3, r2
 8001852:	197a      	adds	r2, r7, r5
 8001854:	7812      	ldrb	r2, [r2, #0]
 8001856:	4293      	cmp	r3, r2
 8001858:	d103      	bne.n	8001862 <VL53L1X_CheckForDataReady+0x76>
			*isDataReady = 1;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e002      	b.n	8001868 <VL53L1X_CheckForDataReady+0x7c>
		else
			*isDataReady = 0;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8001868:	230f      	movs	r3, #15
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b25b      	sxtb	r3, r3
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b005      	add	sp, #20
 8001876:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001878 <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	0002      	movs	r2, r0
 8001880:	1dbb      	adds	r3, r7, #6
 8001882:	801a      	strh	r2, [r3, #0]
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	1c0a      	adds	r2, r1, #0
 8001888:	801a      	strh	r2, [r3, #0]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 800188a:	240f      	movs	r4, #15
 800188c:	193b      	adds	r3, r7, r4
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetDistanceMode(dev, &DM);
 8001892:	250c      	movs	r5, #12
 8001894:	197a      	adds	r2, r7, r5
 8001896:	1dbb      	adds	r3, r7, #6
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	0011      	movs	r1, r2
 800189c:	0018      	movs	r0, r3
 800189e:	f000 faa5 	bl	8001dec <VL53L1X_GetDistanceMode>
 80018a2:	0003      	movs	r3, r0
 80018a4:	0019      	movs	r1, r3
 80018a6:	193b      	adds	r3, r7, r4
 80018a8:	193a      	adds	r2, r7, r4
 80018aa:	7812      	ldrb	r2, [r2, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	701a      	strb	r2, [r3, #0]
	if (DM == 0)
 80018b0:	197b      	adds	r3, r7, r5
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <VL53L1X_SetTimingBudgetInMs+0x44>
		return 1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e11a      	b.n	8001af2 <VL53L1X_SetTimingBudgetInMs+0x27a>
	else if (DM == 1) {	/* Short DistanceMode */
 80018bc:	230c      	movs	r3, #12
 80018be:	18fb      	adds	r3, r7, r3
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d000      	beq.n	80018c8 <VL53L1X_SetTimingBudgetInMs+0x50>
 80018c6:	e092      	b.n	80019ee <VL53L1X_SetTimingBudgetInMs+0x176>
		switch (TimingBudgetInMs) {
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	22fa      	movs	r2, #250	@ 0xfa
 80018ce:	0052      	lsls	r2, r2, #1
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d100      	bne.n	80018d6 <VL53L1X_SetTimingBudgetInMs+0x5e>
 80018d4:	e077      	b.n	80019c6 <VL53L1X_SetTimingBudgetInMs+0x14e>
 80018d6:	22fa      	movs	r2, #250	@ 0xfa
 80018d8:	0052      	lsls	r2, r2, #1
 80018da:	4293      	cmp	r3, r2
 80018dc:	dd00      	ble.n	80018e0 <VL53L1X_SetTimingBudgetInMs+0x68>
 80018de:	e081      	b.n	80019e4 <VL53L1X_SetTimingBudgetInMs+0x16c>
 80018e0:	2bc8      	cmp	r3, #200	@ 0xc8
 80018e2:	d100      	bne.n	80018e6 <VL53L1X_SetTimingBudgetInMs+0x6e>
 80018e4:	e060      	b.n	80019a8 <VL53L1X_SetTimingBudgetInMs+0x130>
 80018e6:	dd00      	ble.n	80018ea <VL53L1X_SetTimingBudgetInMs+0x72>
 80018e8:	e07c      	b.n	80019e4 <VL53L1X_SetTimingBudgetInMs+0x16c>
 80018ea:	2b64      	cmp	r3, #100	@ 0x64
 80018ec:	d04c      	beq.n	8001988 <VL53L1X_SetTimingBudgetInMs+0x110>
 80018ee:	dd00      	ble.n	80018f2 <VL53L1X_SetTimingBudgetInMs+0x7a>
 80018f0:	e078      	b.n	80019e4 <VL53L1X_SetTimingBudgetInMs+0x16c>
 80018f2:	2b32      	cmp	r3, #50	@ 0x32
 80018f4:	d037      	beq.n	8001966 <VL53L1X_SetTimingBudgetInMs+0xee>
 80018f6:	dd00      	ble.n	80018fa <VL53L1X_SetTimingBudgetInMs+0x82>
 80018f8:	e074      	b.n	80019e4 <VL53L1X_SetTimingBudgetInMs+0x16c>
 80018fa:	2b21      	cmp	r3, #33	@ 0x21
 80018fc:	d024      	beq.n	8001948 <VL53L1X_SetTimingBudgetInMs+0xd0>
 80018fe:	dd00      	ble.n	8001902 <VL53L1X_SetTimingBudgetInMs+0x8a>
 8001900:	e070      	b.n	80019e4 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8001902:	2b0f      	cmp	r3, #15
 8001904:	d002      	beq.n	800190c <VL53L1X_SetTimingBudgetInMs+0x94>
 8001906:	2b14      	cmp	r3, #20
 8001908:	d00f      	beq.n	800192a <VL53L1X_SetTimingBudgetInMs+0xb2>
 800190a:	e06b      	b.n	80019e4 <VL53L1X_SetTimingBudgetInMs+0x16c>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800190c:	1dbb      	adds	r3, r7, #6
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	221d      	movs	r2, #29
 8001912:	215e      	movs	r1, #94	@ 0x5e
 8001914:	0018      	movs	r0, r3
 8001916:	f000 fc69 	bl	80021ec <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800191a:	1dbb      	adds	r3, r7, #6
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	2227      	movs	r2, #39	@ 0x27
 8001920:	2161      	movs	r1, #97	@ 0x61
 8001922:	0018      	movs	r0, r3
 8001924:	f000 fc62 	bl	80021ec <VL53L1_WrWord>
					0x0027);
			break;
 8001928:	e0df      	b.n	8001aea <VL53L1X_SetTimingBudgetInMs+0x272>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800192a:	1dbb      	adds	r3, r7, #6
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	2251      	movs	r2, #81	@ 0x51
 8001930:	215e      	movs	r1, #94	@ 0x5e
 8001932:	0018      	movs	r0, r3
 8001934:	f000 fc5a 	bl	80021ec <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001938:	1dbb      	adds	r3, r7, #6
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	226e      	movs	r2, #110	@ 0x6e
 800193e:	2161      	movs	r1, #97	@ 0x61
 8001940:	0018      	movs	r0, r3
 8001942:	f000 fc53 	bl	80021ec <VL53L1_WrWord>
					0x006E);
			break;
 8001946:	e0d0      	b.n	8001aea <VL53L1X_SetTimingBudgetInMs+0x272>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001948:	1dbb      	adds	r3, r7, #6
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	22d6      	movs	r2, #214	@ 0xd6
 800194e:	215e      	movs	r1, #94	@ 0x5e
 8001950:	0018      	movs	r0, r3
 8001952:	f000 fc4b 	bl	80021ec <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001956:	1dbb      	adds	r3, r7, #6
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	226e      	movs	r2, #110	@ 0x6e
 800195c:	2161      	movs	r1, #97	@ 0x61
 800195e:	0018      	movs	r0, r3
 8001960:	f000 fc44 	bl	80021ec <VL53L1_WrWord>
					0x006E);
			break;
 8001964:	e0c1      	b.n	8001aea <VL53L1X_SetTimingBudgetInMs+0x272>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001966:	23d7      	movs	r3, #215	@ 0xd7
 8001968:	005a      	lsls	r2, r3, #1
 800196a:	1dbb      	adds	r3, r7, #6
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	215e      	movs	r1, #94	@ 0x5e
 8001970:	0018      	movs	r0, r3
 8001972:	f000 fc3b 	bl	80021ec <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001976:	23f4      	movs	r3, #244	@ 0xf4
 8001978:	005a      	lsls	r2, r3, #1
 800197a:	1dbb      	adds	r3, r7, #6
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	2161      	movs	r1, #97	@ 0x61
 8001980:	0018      	movs	r0, r3
 8001982:	f000 fc33 	bl	80021ec <VL53L1_WrWord>
					0x01E8);
			break;
 8001986:	e0b0      	b.n	8001aea <VL53L1X_SetTimingBudgetInMs+0x272>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001988:	4a5c      	ldr	r2, [pc, #368]	@ (8001afc <VL53L1X_SetTimingBudgetInMs+0x284>)
 800198a:	1dbb      	adds	r3, r7, #6
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	215e      	movs	r1, #94	@ 0x5e
 8001990:	0018      	movs	r0, r3
 8001992:	f000 fc2b 	bl	80021ec <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001996:	23e2      	movs	r3, #226	@ 0xe2
 8001998:	009a      	lsls	r2, r3, #2
 800199a:	1dbb      	adds	r3, r7, #6
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	2161      	movs	r1, #97	@ 0x61
 80019a0:	0018      	movs	r0, r3
 80019a2:	f000 fc23 	bl	80021ec <VL53L1_WrWord>
					0x0388);
			break;
 80019a6:	e0a0      	b.n	8001aea <VL53L1X_SetTimingBudgetInMs+0x272>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80019a8:	4a55      	ldr	r2, [pc, #340]	@ (8001b00 <VL53L1X_SetTimingBudgetInMs+0x288>)
 80019aa:	1dbb      	adds	r3, r7, #6
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	215e      	movs	r1, #94	@ 0x5e
 80019b0:	0018      	movs	r0, r3
 80019b2:	f000 fc1b 	bl	80021ec <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80019b6:	4a53      	ldr	r2, [pc, #332]	@ (8001b04 <VL53L1X_SetTimingBudgetInMs+0x28c>)
 80019b8:	1dbb      	adds	r3, r7, #6
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	2161      	movs	r1, #97	@ 0x61
 80019be:	0018      	movs	r0, r3
 80019c0:	f000 fc14 	bl	80021ec <VL53L1_WrWord>
					0x0496);
			break;
 80019c4:	e091      	b.n	8001aea <VL53L1X_SetTimingBudgetInMs+0x272>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80019c6:	4a50      	ldr	r2, [pc, #320]	@ (8001b08 <VL53L1X_SetTimingBudgetInMs+0x290>)
 80019c8:	1dbb      	adds	r3, r7, #6
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	215e      	movs	r1, #94	@ 0x5e
 80019ce:	0018      	movs	r0, r3
 80019d0:	f000 fc0c 	bl	80021ec <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80019d4:	4a4d      	ldr	r2, [pc, #308]	@ (8001b0c <VL53L1X_SetTimingBudgetInMs+0x294>)
 80019d6:	1dbb      	adds	r3, r7, #6
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	2161      	movs	r1, #97	@ 0x61
 80019dc:	0018      	movs	r0, r3
 80019de:	f000 fc05 	bl	80021ec <VL53L1_WrWord>
					0x05C1);
			break;
 80019e2:	e082      	b.n	8001aea <VL53L1X_SetTimingBudgetInMs+0x272>
		default:
			status = 1;
 80019e4:	230f      	movs	r3, #15
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
			break;
 80019ec:	e07d      	b.n	8001aea <VL53L1X_SetTimingBudgetInMs+0x272>
		}
	} else {
		switch (TimingBudgetInMs) {
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	22fa      	movs	r2, #250	@ 0xfa
 80019f4:	0052      	lsls	r2, r2, #1
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d100      	bne.n	80019fc <VL53L1X_SetTimingBudgetInMs+0x184>
 80019fa:	e062      	b.n	8001ac2 <VL53L1X_SetTimingBudgetInMs+0x24a>
 80019fc:	22fa      	movs	r2, #250	@ 0xfa
 80019fe:	0052      	lsls	r2, r2, #1
 8001a00:	4293      	cmp	r3, r2
 8001a02:	dd00      	ble.n	8001a06 <VL53L1X_SetTimingBudgetInMs+0x18e>
 8001a04:	e06c      	b.n	8001ae0 <VL53L1X_SetTimingBudgetInMs+0x268>
 8001a06:	2bc8      	cmp	r3, #200	@ 0xc8
 8001a08:	d04b      	beq.n	8001aa2 <VL53L1X_SetTimingBudgetInMs+0x22a>
 8001a0a:	dd00      	ble.n	8001a0e <VL53L1X_SetTimingBudgetInMs+0x196>
 8001a0c:	e068      	b.n	8001ae0 <VL53L1X_SetTimingBudgetInMs+0x268>
 8001a0e:	2b64      	cmp	r3, #100	@ 0x64
 8001a10:	d036      	beq.n	8001a80 <VL53L1X_SetTimingBudgetInMs+0x208>
 8001a12:	dd00      	ble.n	8001a16 <VL53L1X_SetTimingBudgetInMs+0x19e>
 8001a14:	e064      	b.n	8001ae0 <VL53L1X_SetTimingBudgetInMs+0x268>
 8001a16:	2b32      	cmp	r3, #50	@ 0x32
 8001a18:	d023      	beq.n	8001a62 <VL53L1X_SetTimingBudgetInMs+0x1ea>
 8001a1a:	dc61      	bgt.n	8001ae0 <VL53L1X_SetTimingBudgetInMs+0x268>
 8001a1c:	2b14      	cmp	r3, #20
 8001a1e:	d002      	beq.n	8001a26 <VL53L1X_SetTimingBudgetInMs+0x1ae>
 8001a20:	2b21      	cmp	r3, #33	@ 0x21
 8001a22:	d00f      	beq.n	8001a44 <VL53L1X_SetTimingBudgetInMs+0x1cc>
 8001a24:	e05c      	b.n	8001ae0 <VL53L1X_SetTimingBudgetInMs+0x268>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001a26:	1dbb      	adds	r3, r7, #6
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	221e      	movs	r2, #30
 8001a2c:	215e      	movs	r1, #94	@ 0x5e
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f000 fbdc 	bl	80021ec <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001a34:	1dbb      	adds	r3, r7, #6
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	2222      	movs	r2, #34	@ 0x22
 8001a3a:	2161      	movs	r1, #97	@ 0x61
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f000 fbd5 	bl	80021ec <VL53L1_WrWord>
					0x0022);
			break;
 8001a42:	e052      	b.n	8001aea <VL53L1X_SetTimingBudgetInMs+0x272>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001a44:	1dbb      	adds	r3, r7, #6
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	2260      	movs	r2, #96	@ 0x60
 8001a4a:	215e      	movs	r1, #94	@ 0x5e
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f000 fbcd 	bl	80021ec <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001a52:	1dbb      	adds	r3, r7, #6
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	226e      	movs	r2, #110	@ 0x6e
 8001a58:	2161      	movs	r1, #97	@ 0x61
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f000 fbc6 	bl	80021ec <VL53L1_WrWord>
					0x006E);
			break;
 8001a60:	e043      	b.n	8001aea <VL53L1X_SetTimingBudgetInMs+0x272>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001a62:	1dbb      	adds	r3, r7, #6
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	22ad      	movs	r2, #173	@ 0xad
 8001a68:	215e      	movs	r1, #94	@ 0x5e
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f000 fbbe 	bl	80021ec <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001a70:	1dbb      	adds	r3, r7, #6
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	22c6      	movs	r2, #198	@ 0xc6
 8001a76:	2161      	movs	r1, #97	@ 0x61
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f000 fbb7 	bl	80021ec <VL53L1_WrWord>
					0x00C6);
			break;
 8001a7e:	e034      	b.n	8001aea <VL53L1X_SetTimingBudgetInMs+0x272>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001a80:	23e6      	movs	r3, #230	@ 0xe6
 8001a82:	005a      	lsls	r2, r3, #1
 8001a84:	1dbb      	adds	r3, r7, #6
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	215e      	movs	r1, #94	@ 0x5e
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f000 fbae 	bl	80021ec <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001a90:	23f5      	movs	r3, #245	@ 0xf5
 8001a92:	005a      	lsls	r2, r3, #1
 8001a94:	1dbb      	adds	r3, r7, #6
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	2161      	movs	r1, #97	@ 0x61
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f000 fba6 	bl	80021ec <VL53L1_WrWord>
					0x01EA);
			break;
 8001aa0:	e023      	b.n	8001aea <VL53L1X_SetTimingBudgetInMs+0x272>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b10 <VL53L1X_SetTimingBudgetInMs+0x298>)
 8001aa4:	1dbb      	adds	r3, r7, #6
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	215e      	movs	r1, #94	@ 0x5e
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f000 fb9e 	bl	80021ec <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001ab0:	23be      	movs	r3, #190	@ 0xbe
 8001ab2:	009a      	lsls	r2, r3, #2
 8001ab4:	1dbb      	adds	r3, r7, #6
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	2161      	movs	r1, #97	@ 0x61
 8001aba:	0018      	movs	r0, r3
 8001abc:	f000 fb96 	bl	80021ec <VL53L1_WrWord>
					0x02F8);
			break;
 8001ac0:	e013      	b.n	8001aea <VL53L1X_SetTimingBudgetInMs+0x272>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001ac2:	4a14      	ldr	r2, [pc, #80]	@ (8001b14 <VL53L1X_SetTimingBudgetInMs+0x29c>)
 8001ac4:	1dbb      	adds	r3, r7, #6
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	215e      	movs	r1, #94	@ 0x5e
 8001aca:	0018      	movs	r0, r3
 8001acc:	f000 fb8e 	bl	80021ec <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001ad0:	4a11      	ldr	r2, [pc, #68]	@ (8001b18 <VL53L1X_SetTimingBudgetInMs+0x2a0>)
 8001ad2:	1dbb      	adds	r3, r7, #6
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	2161      	movs	r1, #97	@ 0x61
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f000 fb87 	bl	80021ec <VL53L1_WrWord>
					0x04A4);
			break;
 8001ade:	e004      	b.n	8001aea <VL53L1X_SetTimingBudgetInMs+0x272>
		default:
			status = 1;
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
			break;
 8001ae8:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return status;
 8001aea:	230f      	movs	r3, #15
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	b25b      	sxtb	r3, r3
}
 8001af2:	0018      	movs	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b004      	add	sp, #16
 8001af8:	bdb0      	pop	{r4, r5, r7, pc}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	000002e1 	.word	0x000002e1
 8001b00:	000003e1 	.word	0x000003e1
 8001b04:	00000496 	.word	0x00000496
 8001b08:	00000591 	.word	0x00000591
 8001b0c:	000005c1 	.word	0x000005c1
 8001b10:	000002d9 	.word	0x000002d9
 8001b14:	0000048f 	.word	0x0000048f
 8001b18:	000004a4 	.word	0x000004a4

08001b1c <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 8001b1c:	b5b0      	push	{r4, r5, r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	0002      	movs	r2, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	1dbb      	adds	r3, r7, #6
 8001b28:	801a      	strh	r2, [r3, #0]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 8001b2a:	240f      	movs	r4, #15
 8001b2c:	193b      	adds	r3, r7, r4
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 8001b32:	250c      	movs	r5, #12
 8001b34:	197a      	adds	r2, r7, r5
 8001b36:	1dbb      	adds	r3, r7, #6
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	215e      	movs	r1, #94	@ 0x5e
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f000 fbef 	bl	8002320 <VL53L1_RdWord>
 8001b42:	0003      	movs	r3, r0
 8001b44:	0019      	movs	r1, r3
 8001b46:	193b      	adds	r3, r7, r4
 8001b48:	193a      	adds	r2, r7, r4
 8001b4a:	7812      	ldrb	r2, [r2, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	701a      	strb	r2, [r3, #0]
	switch (Temp) {
 8001b50:	197b      	adds	r3, r7, r5
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	4a37      	ldr	r2, [pc, #220]	@ (8001c34 <VL53L1X_GetTimingBudgetInMs+0x118>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d100      	bne.n	8001b5c <VL53L1X_GetTimingBudgetInMs+0x40>
 8001b5a:	e057      	b.n	8001c0c <VL53L1X_GetTimingBudgetInMs+0xf0>
 8001b5c:	4a35      	ldr	r2, [pc, #212]	@ (8001c34 <VL53L1X_GetTimingBudgetInMs+0x118>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	dd00      	ble.n	8001b64 <VL53L1X_GetTimingBudgetInMs+0x48>
 8001b62:	e058      	b.n	8001c16 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8001b64:	4a34      	ldr	r2, [pc, #208]	@ (8001c38 <VL53L1X_GetTimingBudgetInMs+0x11c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d100      	bne.n	8001b6c <VL53L1X_GetTimingBudgetInMs+0x50>
 8001b6a:	e04f      	b.n	8001c0c <VL53L1X_GetTimingBudgetInMs+0xf0>
 8001b6c:	2292      	movs	r2, #146	@ 0x92
 8001b6e:	00d2      	lsls	r2, r2, #3
 8001b70:	4293      	cmp	r3, r2
 8001b72:	db00      	blt.n	8001b76 <VL53L1X_GetTimingBudgetInMs+0x5a>
 8001b74:	e04f      	b.n	8001c16 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8001b76:	4a31      	ldr	r2, [pc, #196]	@ (8001c3c <VL53L1X_GetTimingBudgetInMs+0x120>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d043      	beq.n	8001c04 <VL53L1X_GetTimingBudgetInMs+0xe8>
 8001b7c:	4a2f      	ldr	r2, [pc, #188]	@ (8001c3c <VL53L1X_GetTimingBudgetInMs+0x120>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	dc49      	bgt.n	8001c16 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8001b82:	4a2f      	ldr	r2, [pc, #188]	@ (8001c40 <VL53L1X_GetTimingBudgetInMs+0x124>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d039      	beq.n	8001bfc <VL53L1X_GetTimingBudgetInMs+0xe0>
 8001b88:	4a2d      	ldr	r2, [pc, #180]	@ (8001c40 <VL53L1X_GetTimingBudgetInMs+0x124>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	dc43      	bgt.n	8001c16 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8001b8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c44 <VL53L1X_GetTimingBudgetInMs+0x128>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d037      	beq.n	8001c04 <VL53L1X_GetTimingBudgetInMs+0xe8>
 8001b94:	4a2b      	ldr	r2, [pc, #172]	@ (8001c44 <VL53L1X_GetTimingBudgetInMs+0x128>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	dc3d      	bgt.n	8001c16 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8001b9a:	22e6      	movs	r2, #230	@ 0xe6
 8001b9c:	0052      	lsls	r2, r2, #1
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d02c      	beq.n	8001bfc <VL53L1X_GetTimingBudgetInMs+0xe0>
 8001ba2:	22e6      	movs	r2, #230	@ 0xe6
 8001ba4:	0052      	lsls	r2, r2, #1
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	dc35      	bgt.n	8001c16 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8001baa:	22d7      	movs	r2, #215	@ 0xd7
 8001bac:	0052      	lsls	r2, r2, #1
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d020      	beq.n	8001bf4 <VL53L1X_GetTimingBudgetInMs+0xd8>
 8001bb2:	22d7      	movs	r2, #215	@ 0xd7
 8001bb4:	0052      	lsls	r2, r2, #1
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	dc2d      	bgt.n	8001c16 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8001bba:	2bd6      	cmp	r3, #214	@ 0xd6
 8001bbc:	d016      	beq.n	8001bec <VL53L1X_GetTimingBudgetInMs+0xd0>
 8001bbe:	dc2a      	bgt.n	8001c16 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8001bc0:	2bad      	cmp	r3, #173	@ 0xad
 8001bc2:	d017      	beq.n	8001bf4 <VL53L1X_GetTimingBudgetInMs+0xd8>
 8001bc4:	dc27      	bgt.n	8001c16 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8001bc6:	2b60      	cmp	r3, #96	@ 0x60
 8001bc8:	d010      	beq.n	8001bec <VL53L1X_GetTimingBudgetInMs+0xd0>
 8001bca:	dc24      	bgt.n	8001c16 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8001bcc:	2b51      	cmp	r3, #81	@ 0x51
 8001bce:	d009      	beq.n	8001be4 <VL53L1X_GetTimingBudgetInMs+0xc8>
 8001bd0:	dc21      	bgt.n	8001c16 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8001bd2:	2b1d      	cmp	r3, #29
 8001bd4:	d002      	beq.n	8001bdc <VL53L1X_GetTimingBudgetInMs+0xc0>
 8001bd6:	2b1e      	cmp	r3, #30
 8001bd8:	d004      	beq.n	8001be4 <VL53L1X_GetTimingBudgetInMs+0xc8>
 8001bda:	e01c      	b.n	8001c16 <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x001D :
			*pTimingBudget = 15;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	220f      	movs	r2, #15
 8001be0:	801a      	strh	r2, [r3, #0]
			break;
 8001be2:	e01f      	b.n	8001c24 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2214      	movs	r2, #20
 8001be8:	801a      	strh	r2, [r3, #0]
			break;
 8001bea:	e01b      	b.n	8001c24 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2221      	movs	r2, #33	@ 0x21
 8001bf0:	801a      	strh	r2, [r3, #0]
			break;
 8001bf2:	e017      	b.n	8001c24 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2232      	movs	r2, #50	@ 0x32
 8001bf8:	801a      	strh	r2, [r3, #0]
			break;
 8001bfa:	e013      	b.n	8001c24 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	2264      	movs	r2, #100	@ 0x64
 8001c00:	801a      	strh	r2, [r3, #0]
			break;
 8001c02:	e00f      	b.n	8001c24 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	22c8      	movs	r2, #200	@ 0xc8
 8001c08:	801a      	strh	r2, [r3, #0]
			break;
 8001c0a:	e00b      	b.n	8001c24 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	22fa      	movs	r2, #250	@ 0xfa
 8001c10:	0052      	lsls	r2, r2, #1
 8001c12:	801a      	strh	r2, [r3, #0]
			break;
 8001c14:	e006      	b.n	8001c24 <VL53L1X_GetTimingBudgetInMs+0x108>
		default:
			status = 1;
 8001c16:	230f      	movs	r3, #15
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]
			*pTimingBudget = 0;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2200      	movs	r2, #0
 8001c22:	801a      	strh	r2, [r3, #0]
	}
	return status;
 8001c24:	230f      	movs	r3, #15
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	b25b      	sxtb	r3, r3
}
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b004      	add	sp, #16
 8001c32:	bdb0      	pop	{r4, r5, r7, pc}
 8001c34:	00000591 	.word	0x00000591
 8001c38:	0000048f 	.word	0x0000048f
 8001c3c:	000003e1 	.word	0x000003e1
 8001c40:	000002e1 	.word	0x000002e1
 8001c44:	000002d9 	.word	0x000002d9

08001c48 <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 8001c48:	b5b0      	push	{r4, r5, r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	0002      	movs	r2, r0
 8001c50:	1dbb      	adds	r3, r7, #6
 8001c52:	801a      	strh	r2, [r3, #0]
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	1c0a      	adds	r2, r1, #0
 8001c58:	801a      	strh	r2, [r3, #0]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 8001c5a:	240f      	movs	r4, #15
 8001c5c:	193b      	adds	r3, r7, r4
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 8001c62:	230c      	movs	r3, #12
 8001c64:	18fa      	adds	r2, r7, r3
 8001c66:	1dbb      	adds	r3, r7, #6
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	0011      	movs	r1, r2
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff ff55 	bl	8001b1c <VL53L1X_GetTimingBudgetInMs>
 8001c72:	0003      	movs	r3, r0
 8001c74:	0019      	movs	r1, r3
 8001c76:	193b      	adds	r3, r7, r4
 8001c78:	193a      	adds	r2, r7, r4
 8001c7a:	7812      	ldrb	r2, [r2, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	701a      	strb	r2, [r3, #0]
	if (status != 0)
 8001c80:	193b      	adds	r3, r7, r4
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	b25b      	sxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <VL53L1X_SetDistanceMode+0x46>
		return 1;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0a1      	b.n	8001dd2 <VL53L1X_SetDistanceMode+0x18a>
	switch (DM) {
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d002      	beq.n	8001c9c <VL53L1X_SetDistanceMode+0x54>
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d03e      	beq.n	8001d18 <VL53L1X_SetDistanceMode+0xd0>
 8001c9a:	e07b      	b.n	8001d94 <VL53L1X_SetDistanceMode+0x14c>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 8001c9c:	250f      	movs	r5, #15
 8001c9e:	197c      	adds	r4, r7, r5
 8001ca0:	1dbb      	adds	r3, r7, #6
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	2214      	movs	r2, #20
 8001ca6:	214b      	movs	r1, #75	@ 0x4b
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f000 fa71 	bl	8002190 <VL53L1_WrByte>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8001cb2:	197c      	adds	r4, r7, r5
 8001cb4:	1dbb      	adds	r3, r7, #6
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	2207      	movs	r2, #7
 8001cba:	2160      	movs	r1, #96	@ 0x60
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f000 fa67 	bl	8002190 <VL53L1_WrByte>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8001cc6:	197c      	adds	r4, r7, r5
 8001cc8:	1dbb      	adds	r3, r7, #6
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	2205      	movs	r2, #5
 8001cce:	2163      	movs	r1, #99	@ 0x63
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f000 fa5d 	bl	8002190 <VL53L1_WrByte>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8001cda:	197c      	adds	r4, r7, r5
 8001cdc:	1dbb      	adds	r3, r7, #6
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	2238      	movs	r2, #56	@ 0x38
 8001ce2:	2169      	movs	r1, #105	@ 0x69
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f000 fa53 	bl	8002190 <VL53L1_WrByte>
 8001cea:	0003      	movs	r3, r0
 8001cec:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8001cee:	197c      	adds	r4, r7, r5
 8001cf0:	4a3a      	ldr	r2, [pc, #232]	@ (8001ddc <VL53L1X_SetDistanceMode+0x194>)
 8001cf2:	1dbb      	adds	r3, r7, #6
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	2178      	movs	r1, #120	@ 0x78
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f000 fa77 	bl	80021ec <VL53L1_WrWord>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8001d02:	197c      	adds	r4, r7, r5
 8001d04:	4a36      	ldr	r2, [pc, #216]	@ (8001de0 <VL53L1X_SetDistanceMode+0x198>)
 8001d06:	1dbb      	adds	r3, r7, #6
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	217a      	movs	r1, #122	@ 0x7a
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f000 fa6d 	bl	80021ec <VL53L1_WrWord>
 8001d12:	0003      	movs	r3, r0
 8001d14:	7023      	strb	r3, [r4, #0]
		break;
 8001d16:	e042      	b.n	8001d9e <VL53L1X_SetDistanceMode+0x156>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 8001d18:	250f      	movs	r5, #15
 8001d1a:	197c      	adds	r4, r7, r5
 8001d1c:	1dbb      	adds	r3, r7, #6
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	220a      	movs	r2, #10
 8001d22:	214b      	movs	r1, #75	@ 0x4b
 8001d24:	0018      	movs	r0, r3
 8001d26:	f000 fa33 	bl	8002190 <VL53L1_WrByte>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8001d2e:	197c      	adds	r4, r7, r5
 8001d30:	1dbb      	adds	r3, r7, #6
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	220f      	movs	r2, #15
 8001d36:	2160      	movs	r1, #96	@ 0x60
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f000 fa29 	bl	8002190 <VL53L1_WrByte>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8001d42:	197c      	adds	r4, r7, r5
 8001d44:	1dbb      	adds	r3, r7, #6
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	220d      	movs	r2, #13
 8001d4a:	2163      	movs	r1, #99	@ 0x63
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f000 fa1f 	bl	8002190 <VL53L1_WrByte>
 8001d52:	0003      	movs	r3, r0
 8001d54:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8001d56:	197c      	adds	r4, r7, r5
 8001d58:	1dbb      	adds	r3, r7, #6
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	22b8      	movs	r2, #184	@ 0xb8
 8001d5e:	2169      	movs	r1, #105	@ 0x69
 8001d60:	0018      	movs	r0, r3
 8001d62:	f000 fa15 	bl	8002190 <VL53L1_WrByte>
 8001d66:	0003      	movs	r3, r0
 8001d68:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8001d6a:	197c      	adds	r4, r7, r5
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001de4 <VL53L1X_SetDistanceMode+0x19c>)
 8001d6e:	1dbb      	adds	r3, r7, #6
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	2178      	movs	r1, #120	@ 0x78
 8001d74:	0018      	movs	r0, r3
 8001d76:	f000 fa39 	bl	80021ec <VL53L1_WrWord>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 8001d7e:	197c      	adds	r4, r7, r5
 8001d80:	4a19      	ldr	r2, [pc, #100]	@ (8001de8 <VL53L1X_SetDistanceMode+0x1a0>)
 8001d82:	1dbb      	adds	r3, r7, #6
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	217a      	movs	r1, #122	@ 0x7a
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 fa2f 	bl	80021ec <VL53L1_WrWord>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	7023      	strb	r3, [r4, #0]
		break;
 8001d92:	e004      	b.n	8001d9e <VL53L1X_SetDistanceMode+0x156>
	default:
		status = 1;
 8001d94:	230f      	movs	r3, #15
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
		break;
 8001d9c:	46c0      	nop			@ (mov r8, r8)
	}

	if (status == 0)
 8001d9e:	240f      	movs	r4, #15
 8001da0:	193b      	adds	r3, r7, r4
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10f      	bne.n	8001dca <VL53L1X_SetDistanceMode+0x182>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 8001daa:	230c      	movs	r3, #12
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	881a      	ldrh	r2, [r3, #0]
 8001db0:	1dbb      	adds	r3, r7, #6
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	0011      	movs	r1, r2
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7ff fd5e 	bl	8001878 <VL53L1X_SetTimingBudgetInMs>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	193b      	adds	r3, r7, r4
 8001dc2:	193a      	adds	r2, r7, r4
 8001dc4:	7812      	ldrb	r2, [r2, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	701a      	strb	r2, [r3, #0]
	return status;
 8001dca:	230f      	movs	r3, #15
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b25b      	sxtb	r3, r3
}
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b004      	add	sp, #16
 8001dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	00000705 	.word	0x00000705
 8001de0:	00000606 	.word	0x00000606
 8001de4:	00000f0d 	.word	0x00000f0d
 8001de8:	00000e0e 	.word	0x00000e0e

08001dec <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8001dec:	b5b0      	push	{r4, r5, r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	0002      	movs	r2, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	1dbb      	adds	r3, r7, #6
 8001df8:	801a      	strh	r2, [r3, #0]
	uint8_t TempDM, status=0;
 8001dfa:	240f      	movs	r4, #15
 8001dfc:	193b      	adds	r3, r7, r4
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8001e02:	250e      	movs	r5, #14
 8001e04:	197a      	adds	r2, r7, r5
 8001e06:	1dbb      	adds	r3, r7, #6
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	214b      	movs	r1, #75	@ 0x4b
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f000 fa5b 	bl	80022c8 <VL53L1_RdByte>
 8001e12:	0003      	movs	r3, r0
 8001e14:	001a      	movs	r2, r3
 8001e16:	193b      	adds	r3, r7, r4
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	b25a      	sxtb	r2, r3
 8001e20:	193b      	adds	r3, r7, r4
 8001e22:	701a      	strb	r2, [r3, #0]
	if (TempDM == 0x14)
 8001e24:	197b      	adds	r3, r7, r5
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b14      	cmp	r3, #20
 8001e2a:	d102      	bne.n	8001e32 <VL53L1X_GetDistanceMode+0x46>
		*DM=1;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8001e32:	230e      	movs	r3, #14
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b0a      	cmp	r3, #10
 8001e3a:	d102      	bne.n	8001e42 <VL53L1X_GetDistanceMode+0x56>
		*DM=2;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	801a      	strh	r2, [r3, #0]
	return status;
 8001e42:	230f      	movs	r3, #15
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b25b      	sxtb	r3, r3
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b004      	add	sp, #16
 8001e50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001e54 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8001e54:	b5b0      	push	{r4, r5, r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	6039      	str	r1, [r7, #0]
 8001e5e:	1dbb      	adds	r3, r7, #6
 8001e60:	801a      	strh	r2, [r3, #0]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 8001e62:	240f      	movs	r4, #15
 8001e64:	193b      	adds	r3, r7, r4
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8001e6a:	250c      	movs	r5, #12
 8001e6c:	197a      	adds	r2, r7, r5
 8001e6e:	1dbb      	adds	r3, r7, #6
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	21de      	movs	r1, #222	@ 0xde
 8001e74:	0018      	movs	r0, r3
 8001e76:	f000 fa53 	bl	8002320 <VL53L1_RdWord>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	193b      	adds	r3, r7, r4
 8001e80:	193a      	adds	r2, r7, r4
 8001e82:	7812      	ldrb	r2, [r2, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	701a      	strb	r2, [r3, #0]
	ClockPLL = ClockPLL&0x3FF;
 8001e88:	197b      	adds	r3, r7, r5
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	059b      	lsls	r3, r3, #22
 8001e8e:	0d9b      	lsrs	r3, r3, #22
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	197b      	adds	r3, r7, r5
 8001e94:	801a      	strh	r2, [r3, #0]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 8001e96:	197b      	adds	r3, r7, r5
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	001a      	movs	r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4353      	muls	r3, r2
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7ff f99f 	bl	80011e4 <__aeabi_ui2d>
 8001ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed8 <VL53L1X_SetInterMeasurementInMs+0x84>)
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <VL53L1X_SetInterMeasurementInMs+0x88>)
 8001eaa:	f7fe fafb 	bl	80004a4 <__aeabi_dmul>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	000b      	movs	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 8001eb2:	0010      	movs	r0, r2
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	f7fe fa0b 	bl	80002d0 <__aeabi_d2uiz>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	1dbb      	adds	r3, r7, #6
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	216c      	movs	r1, #108	@ 0x6c
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f000 f9c8 	bl	8002258 <VL53L1_WrDWord>
	return status;
 8001ec8:	193b      	adds	r3, r7, r4
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b25b      	sxtb	r3, r3

}
 8001ece:	0018      	movs	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b004      	add	sp, #16
 8001ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	33333333 	.word	0x33333333
 8001edc:	3ff13333 	.word	0x3ff13333

08001ee0 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	1dbb      	adds	r3, r7, #6
 8001eec:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8001eee:	240f      	movs	r4, #15
 8001ef0:	193b      	adds	r3, r7, r4
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = 0;
 8001ef6:	250e      	movs	r5, #14
 8001ef8:	197b      	adds	r3, r7, r5
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8001efe:	197a      	adds	r2, r7, r5
 8001f00:	1dbb      	adds	r3, r7, #6
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	21e5      	movs	r1, #229	@ 0xe5
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 f9de 	bl	80022c8 <VL53L1_RdByte>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	0019      	movs	r1, r3
 8001f10:	193b      	adds	r3, r7, r4
 8001f12:	193a      	adds	r2, r7, r4
 8001f14:	7812      	ldrb	r2, [r2, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	701a      	strb	r2, [r3, #0]
	*state = tmp;
 8001f1a:	197b      	adds	r3, r7, r5
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	701a      	strb	r2, [r3, #0]
	return status;
 8001f22:	193b      	adds	r3, r7, r4
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b25b      	sxtb	r3, r3
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b004      	add	sp, #16
 8001f2e:	bdb0      	pop	{r4, r5, r7, pc}

08001f30 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	0002      	movs	r2, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	1dbb      	adds	r3, r7, #6
 8001f3c:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8001f3e:	240f      	movs	r4, #15
 8001f40:	193b      	adds	r3, r7, r4
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8001f46:	250c      	movs	r5, #12
 8001f48:	197a      	adds	r2, r7, r5
 8001f4a:	1dbb      	adds	r3, r7, #6
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	2196      	movs	r1, #150	@ 0x96
 8001f50:	0018      	movs	r0, r3
 8001f52:	f000 f9e5 	bl	8002320 <VL53L1_RdWord>
 8001f56:	0003      	movs	r3, r0
 8001f58:	0019      	movs	r1, r3
 8001f5a:	0020      	movs	r0, r4
 8001f5c:	183b      	adds	r3, r7, r0
 8001f5e:	183a      	adds	r2, r7, r0
 8001f60:	7812      	ldrb	r2, [r2, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	701a      	strb	r2, [r3, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8001f66:	197b      	adds	r3, r7, r5
 8001f68:	881a      	ldrh	r2, [r3, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	801a      	strh	r2, [r3, #0]
	return status;
 8001f6e:	183b      	adds	r3, r7, r0
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	b25b      	sxtb	r3, r3
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b004      	add	sp, #16
 8001f7a:	bdb0      	pop	{r4, r5, r7, pc}

08001f7c <tof_ctrl_boot>:
#include "tof_ctrl.h"
#include "VL53L1X_api.h"

#define RANGEMODE 1	//0 = Longrange, 1 = Shortrange

void tof_ctrl_boot(VL53L1_DEV dev, uint8_t addr){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	000a      	movs	r2, r1
 8001f86:	1cfb      	adds	r3, r7, #3
 8001f88:	701a      	strb	r2, [r3, #0]
	VL53L1_SensorOn(dev);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f000 f9fd 	bl	800238c <VL53L1_SensorOn>
	HAL_Delay(500);
 8001f92:	23fa      	movs	r3, #250	@ 0xfa
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 fee4 	bl	8002d64 <HAL_Delay>

    uint8_t booted = 0;
 8001f9c:	230f      	movs	r3, #15
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]

	printf("Start Sensor: %x\r\n", (uint8_t)dev->tof_addr);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	001a      	movs	r2, r3
 8001fac:	4b28      	ldr	r3, [pc, #160]	@ (8002050 <tof_ctrl_boot+0xd4>)
 8001fae:	0011      	movs	r1, r2
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f003 fc8b 	bl	80058cc <iprintf>
	while(booted == 0){
 8001fb6:	e011      	b.n	8001fdc <tof_ctrl_boot+0x60>
	    VL53L1X_BootState(dev->tof_addr, &booted);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	18ba      	adds	r2, r7, r2
 8001fc2:	0011      	movs	r1, r2
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f7ff ff8b 	bl	8001ee0 <VL53L1X_BootState>
	    HAL_Delay(1000);
 8001fca:	23fa      	movs	r3, #250	@ 0xfa
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f000 fec8 	bl	8002d64 <HAL_Delay>
	    printf("Booting\r\n");
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002054 <tof_ctrl_boot+0xd8>)
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f003 fcde 	bl	8005998 <puts>
	while(booted == 0){
 8001fdc:	230f      	movs	r3, #15
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0e8      	beq.n	8001fb8 <tof_ctrl_boot+0x3c>
	}
	VL53L1X_SensorInit(dev->tof_addr);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7ff fad5 	bl	800159c <VL53L1X_SensorInit>
	VL53L1X_SetI2CAddress(dev->tof_addr, addr);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	1cfb      	adds	r3, r7, #3
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	0010      	movs	r0, r2
 8002000:	f7ff faa6 	bl	8001550 <VL53L1X_SetI2CAddress>
	dev->tof_addr = addr;
 8002004:	1cfb      	adds	r3, r7, #3
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	601a      	str	r2, [r3, #0]
	VL53L1X_SetDistanceMode(dev->tof_addr, RANGEMODE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	b29b      	uxth	r3, r3
 8002012:	2101      	movs	r1, #1
 8002014:	0018      	movs	r0, r3
 8002016:	f7ff fe17 	bl	8001c48 <VL53L1X_SetDistanceMode>
	VL53L1X_SetInterMeasurementInMs(dev->tof_addr, 250);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	b29b      	uxth	r3, r3
 8002020:	21fa      	movs	r1, #250	@ 0xfa
 8002022:	0018      	movs	r0, r3
 8002024:	f7ff ff16 	bl	8001e54 <VL53L1X_SetInterMeasurementInMs>
	VL53L1X_SetTimingBudgetInMs(dev->tof_addr, 200);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	21c8      	movs	r1, #200	@ 0xc8
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff fc21 	bl	8001878 <VL53L1X_SetTimingBudgetInMs>
	printf("Ready Sensor: %x\r\n", (uint8_t)dev->tof_addr);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	001a      	movs	r2, r3
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <tof_ctrl_boot+0xdc>)
 8002040:	0011      	movs	r1, r2
 8002042:	0018      	movs	r0, r3
 8002044:	f003 fc42 	bl	80058cc <iprintf>
}
 8002048:	46c0      	nop			@ (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b004      	add	sp, #16
 800204e:	bd80      	pop	{r7, pc}
 8002050:	080066e0 	.word	0x080066e0
 8002054:	080066f4 	.word	0x080066f4
 8002058:	08006700 	.word	0x08006700

0800205c <tof_ctrl_get_distance>:

void tof_ctrl_get_distance(VL53L1_DEV dev, uint16_t* pDistance, uint32_t timeout){
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
    uint8_t dataReady = 0;
 8002068:	2313      	movs	r3, #19
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
    uint32_t timestamp = HAL_GetTick();
 8002070:	f000 fe6e 	bl	8002d50 <HAL_GetTick>
 8002074:	0003      	movs	r3, r0
 8002076:	617b      	str	r3, [r7, #20]

    VL53L1X_ClearInterrupt(dev->tof_addr);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	b29b      	uxth	r3, r3
 800207e:	0018      	movs	r0, r3
 8002080:	f7ff fb24 	bl	80016cc <VL53L1X_ClearInterrupt>
    VL53L1X_StartRanging(dev->tof_addr);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	0018      	movs	r0, r3
 800208c:	f7ff fb70 	bl	8001770 <VL53L1X_StartRanging>
    while(dataReady == 0){
 8002090:	e021      	b.n	80020d6 <tof_ctrl_get_distance+0x7a>
        VL53L1X_CheckForDataReady(dev->tof_addr, &dataReady);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	b29b      	uxth	r3, r3
 8002098:	2213      	movs	r2, #19
 800209a:	18ba      	adds	r2, r7, r2
 800209c:	0011      	movs	r1, r2
 800209e:	0018      	movs	r0, r3
 80020a0:	f7ff fba4 	bl	80017ec <VL53L1X_CheckForDataReady>
        if((HAL_GetTick() - timestamp) > timeout){
 80020a4:	f000 fe54 	bl	8002d50 <HAL_GetTick>
 80020a8:	0002      	movs	r2, r0
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d210      	bcs.n	80020d6 <tof_ctrl_get_distance+0x7a>
        	VL53L1X_ClearInterrupt(dev->tof_addr);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	0018      	movs	r0, r3
 80020bc:	f7ff fb06 	bl	80016cc <VL53L1X_ClearInterrupt>
        	VL53L1X_StopRanging(dev->tof_addr);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	0018      	movs	r0, r3
 80020c8:	f7ff fb71 	bl	80017ae <VL53L1X_StopRanging>
        	printf("TIMEOUT!\n\r");
 80020cc:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <tof_ctrl_get_distance+0xb4>)
 80020ce:	0018      	movs	r0, r3
 80020d0:	f003 fbfc 	bl	80058cc <iprintf>
 80020d4:	e018      	b.n	8002108 <tof_ctrl_get_distance+0xac>
    while(dataReady == 0){
 80020d6:	2313      	movs	r3, #19
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0d8      	beq.n	8002092 <tof_ctrl_get_distance+0x36>
        	return;
        }
    }
    VL53L1X_GetDistance(dev->tof_addr, pDistance);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	0011      	movs	r1, r2
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7ff ff20 	bl	8001f30 <VL53L1X_GetDistance>
    VL53L1X_ClearInterrupt(dev->tof_addr);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	0018      	movs	r0, r3
 80020f8:	f7ff fae8 	bl	80016cc <VL53L1X_ClearInterrupt>
    VL53L1X_StopRanging(dev->tof_addr);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	0018      	movs	r0, r3
 8002104:	f7ff fb53 	bl	80017ae <VL53L1X_StopRanging>
}
 8002108:	46bd      	mov	sp, r7
 800210a:	b006      	add	sp, #24
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			@ (mov r8, r8)
 8002110:	08006714 	.word	0x08006714

08002114 <_I2CWrite>:
#define I2C_TIME_OUT_BASE   10
#define I2C_TIME_OUT_BYTE   1

uint8_t _I2CBuffer[256];

static void _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af02      	add	r7, sp, #8
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	210e      	movs	r1, #14
 8002120:	187b      	adds	r3, r7, r1
 8002122:	1c02      	adds	r2, r0, #0
 8002124:	801a      	strh	r2, [r3, #0]

    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	330a      	adds	r3, #10
 800212a:	617b      	str	r3, [r7, #20]

    HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, i2c_time_out);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	b29d      	uxth	r5, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	68bc      	ldr	r4, [r7, #8]
 8002134:	187a      	adds	r2, r7, r1
 8002136:	8811      	ldrh	r1, [r2, #0]
 8002138:	4804      	ldr	r0, [pc, #16]	@ (800214c <_I2CWrite+0x38>)
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	002b      	movs	r3, r5
 800213e:	0022      	movs	r2, r4
 8002140:	f001 f976 	bl	8003430 <HAL_I2C_Master_Transmit>
}
 8002144:	46c0      	nop			@ (mov r8, r8)
 8002146:	46bd      	mov	sp, r7
 8002148:	b006      	add	sp, #24
 800214a:	bdb0      	pop	{r4, r5, r7, pc}
 800214c:	20000184 	.word	0x20000184

08002150 <_I2CRead>:

static void _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b089      	sub	sp, #36	@ 0x24
 8002154:	af02      	add	r7, sp, #8
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	210e      	movs	r1, #14
 800215c:	187b      	adds	r3, r7, r1
 800215e:	1c02      	adds	r2, r0, #0
 8002160:	801a      	strh	r2, [r3, #0]

    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	330a      	adds	r3, #10
 8002166:	617b      	str	r3, [r7, #20]

    HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, i2c_time_out);
 8002168:	187b      	adds	r3, r7, r1
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	2201      	movs	r2, #1
 800216e:	4313      	orrs	r3, r2
 8002170:	b299      	uxth	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	b29c      	uxth	r4, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	4804      	ldr	r0, [pc, #16]	@ (800218c <_I2CRead+0x3c>)
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	0023      	movs	r3, r4
 8002180:	f001 fa5e 	bl	8003640 <HAL_I2C_Master_Receive>
}
 8002184:	46c0      	nop			@ (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b007      	add	sp, #28
 800218a:	bd90      	pop	{r4, r7, pc}
 800218c:	20000184 	.word	0x20000184

08002190 <VL53L1_WrByte>:
    _I2CRead(dev, pdata, count);

    return 0;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	0004      	movs	r4, r0
 8002198:	0008      	movs	r0, r1
 800219a:	0011      	movs	r1, r2
 800219c:	1dbb      	adds	r3, r7, #6
 800219e:	1c22      	adds	r2, r4, #0
 80021a0:	801a      	strh	r2, [r3, #0]
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	1c02      	adds	r2, r0, #0
 80021a6:	801a      	strh	r2, [r3, #0]
 80021a8:	1cfb      	adds	r3, r7, #3
 80021aa:	1c0a      	adds	r2, r1, #0
 80021ac:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[0] = index>>8;
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <VL53L1_WrByte+0x58>)
 80021ba:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <VL53L1_WrByte+0x58>)
 80021c4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 80021c6:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <VL53L1_WrByte+0x58>)
 80021c8:	1cfa      	adds	r2, r7, #3
 80021ca:	7812      	ldrb	r2, [r2, #0]
 80021cc:	709a      	strb	r2, [r3, #2]

    _I2CWrite(dev, _I2CBuffer, 3);
 80021ce:	4906      	ldr	r1, [pc, #24]	@ (80021e8 <VL53L1_WrByte+0x58>)
 80021d0:	1dbb      	adds	r3, r7, #6
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	2203      	movs	r2, #3
 80021d6:	0018      	movs	r0, r3
 80021d8:	f7ff ff9c 	bl	8002114 <_I2CWrite>
	return 0;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b003      	add	sp, #12
 80021e4:	bd90      	pop	{r4, r7, pc}
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	20000084 	.word	0x20000084

080021ec <VL53L1_WrWord>:

int8_t VL53L1_WrWord(uint16_t dev, uint16_t index, uint16_t data) {
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	0004      	movs	r4, r0
 80021f4:	0008      	movs	r0, r1
 80021f6:	0011      	movs	r1, r2
 80021f8:	1dbb      	adds	r3, r7, #6
 80021fa:	1c22      	adds	r2, r4, #0
 80021fc:	801a      	strh	r2, [r3, #0]
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	1c02      	adds	r2, r0, #0
 8002202:	801a      	strh	r2, [r3, #0]
 8002204:	1cbb      	adds	r3, r7, #2
 8002206:	1c0a      	adds	r2, r1, #0
 8002208:	801a      	strh	r2, [r3, #0]
    _I2CBuffer[0] = index>>8;
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	b29b      	uxth	r3, r3
 8002212:	b2da      	uxtb	r2, r3
 8002214:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <VL53L1_WrWord+0x68>)
 8002216:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4b0d      	ldr	r3, [pc, #52]	@ (8002254 <VL53L1_WrWord+0x68>)
 8002220:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8002222:	1cbb      	adds	r3, r7, #2
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	b29b      	uxth	r3, r3
 800222a:	b2da      	uxtb	r2, r3
 800222c:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <VL53L1_WrWord+0x68>)
 800222e:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8002230:	1cbb      	adds	r3, r7, #2
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4b07      	ldr	r3, [pc, #28]	@ (8002254 <VL53L1_WrWord+0x68>)
 8002238:	70da      	strb	r2, [r3, #3]

    _I2CWrite(dev, _I2CBuffer, 4);
 800223a:	4906      	ldr	r1, [pc, #24]	@ (8002254 <VL53L1_WrWord+0x68>)
 800223c:	1dbb      	adds	r3, r7, #6
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	2204      	movs	r2, #4
 8002242:	0018      	movs	r0, r3
 8002244:	f7ff ff66 	bl	8002114 <_I2CWrite>
	return 0;
 8002248:	2300      	movs	r3, #0
}
 800224a:	0018      	movs	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	b003      	add	sp, #12
 8002250:	bd90      	pop	{r4, r7, pc}
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	20000084 	.word	0x20000084

08002258 <VL53L1_WrDWord>:

int8_t VL53L1_WrDWord(uint16_t dev, uint16_t index, uint32_t data) {
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	603a      	str	r2, [r7, #0]
 8002260:	1dbb      	adds	r3, r7, #6
 8002262:	1c02      	adds	r2, r0, #0
 8002264:	801a      	strh	r2, [r3, #0]
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	1c0a      	adds	r2, r1, #0
 800226a:	801a      	strh	r2, [r3, #0]
    _I2CBuffer[0] = index>>8;
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	b29b      	uxth	r3, r3
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <VL53L1_WrDWord+0x6c>)
 8002278:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b10      	ldr	r3, [pc, #64]	@ (80022c4 <VL53L1_WrDWord+0x6c>)
 8002282:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 24) & 0xFF;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	0e1b      	lsrs	r3, r3, #24
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4b0e      	ldr	r3, [pc, #56]	@ (80022c4 <VL53L1_WrDWord+0x6c>)
 800228c:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 16) & 0xFF;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	0c1b      	lsrs	r3, r3, #16
 8002292:	b2da      	uxtb	r2, r3
 8002294:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <VL53L1_WrDWord+0x6c>)
 8002296:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 8)  & 0xFF;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <VL53L1_WrDWord+0x6c>)
 80022a0:	711a      	strb	r2, [r3, #4]
    _I2CBuffer[5] = (data >> 0 ) & 0xFF;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b07      	ldr	r3, [pc, #28]	@ (80022c4 <VL53L1_WrDWord+0x6c>)
 80022a8:	715a      	strb	r2, [r3, #5]
    _I2CWrite(dev, _I2CBuffer, 6);
 80022aa:	4906      	ldr	r1, [pc, #24]	@ (80022c4 <VL53L1_WrDWord+0x6c>)
 80022ac:	1dbb      	adds	r3, r7, #6
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	2206      	movs	r2, #6
 80022b2:	0018      	movs	r0, r3
 80022b4:	f7ff ff2e 	bl	8002114 <_I2CWrite>

	return 0;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b002      	add	sp, #8
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	20000084 	.word	0x20000084

080022c8 <VL53L1_RdByte>:

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	603a      	str	r2, [r7, #0]
 80022d0:	1dbb      	adds	r3, r7, #6
 80022d2:	1c02      	adds	r2, r0, #0
 80022d4:	801a      	strh	r2, [r3, #0]
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	1c0a      	adds	r2, r1, #0
 80022da:	801a      	strh	r2, [r3, #0]
	_I2CBuffer[0] = index>>8;
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4b0d      	ldr	r3, [pc, #52]	@ (800231c <VL53L1_RdByte+0x54>)
 80022e8:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <VL53L1_RdByte+0x54>)
 80022f2:	705a      	strb	r2, [r3, #1]
    _I2CWrite(dev, _I2CBuffer, 2);
 80022f4:	4909      	ldr	r1, [pc, #36]	@ (800231c <VL53L1_RdByte+0x54>)
 80022f6:	1dbb      	adds	r3, r7, #6
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	2202      	movs	r2, #2
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7ff ff09 	bl	8002114 <_I2CWrite>
    _I2CRead(dev, data, 1);
 8002302:	6839      	ldr	r1, [r7, #0]
 8002304:	1dbb      	adds	r3, r7, #6
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	2201      	movs	r2, #1
 800230a:	0018      	movs	r0, r3
 800230c:	f7ff ff20 	bl	8002150 <_I2CRead>

	return 0;
 8002310:	2300      	movs	r3, #0
}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	b002      	add	sp, #8
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	20000084 	.word	0x20000084

08002320 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	603a      	str	r2, [r7, #0]
 8002328:	1dbb      	adds	r3, r7, #6
 800232a:	1c02      	adds	r2, r0, #0
 800232c:	801a      	strh	r2, [r3, #0]
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	1c0a      	adds	r2, r1, #0
 8002332:	801a      	strh	r2, [r3, #0]
    _I2CBuffer[0] = index>>8;
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	b29b      	uxth	r3, r3
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <VL53L1_RdWord+0x68>)
 8002340:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	b2da      	uxtb	r2, r3
 8002348:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <VL53L1_RdWord+0x68>)
 800234a:	705a      	strb	r2, [r3, #1]
    _I2CWrite(dev, _I2CBuffer, 2);
 800234c:	490e      	ldr	r1, [pc, #56]	@ (8002388 <VL53L1_RdWord+0x68>)
 800234e:	1dbb      	adds	r3, r7, #6
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	2202      	movs	r2, #2
 8002354:	0018      	movs	r0, r3
 8002356:	f7ff fedd 	bl	8002114 <_I2CWrite>
    _I2CRead(dev, _I2CBuffer, 2);
 800235a:	490b      	ldr	r1, [pc, #44]	@ (8002388 <VL53L1_RdWord+0x68>)
 800235c:	1dbb      	adds	r3, r7, #6
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	2202      	movs	r2, #2
 8002362:	0018      	movs	r0, r3
 8002364:	f7ff fef4 	bl	8002150 <_I2CRead>

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8002368:	4b07      	ldr	r3, [pc, #28]	@ (8002388 <VL53L1_RdWord+0x68>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	b29b      	uxth	r3, r3
 8002370:	4a05      	ldr	r2, [pc, #20]	@ (8002388 <VL53L1_RdWord+0x68>)
 8002372:	7852      	ldrb	r2, [r2, #1]
 8002374:	189b      	adds	r3, r3, r2
 8002376:	b29a      	uxth	r2, r3
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	801a      	strh	r2, [r3, #0]

	return 0;
 800237c:	2300      	movs	r3, #0
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b002      	add	sp, #8
 8002384:	bd80      	pop	{r7, pc}
 8002386:	46c0      	nop			@ (mov r8, r8)
 8002388:	20000084 	.word	0x20000084

0800238c <VL53L1_SensorOn>:
	(void)dev;
	HAL_Delay(wait_ms);
	return 0;
}

int8_t VL53L1_SensorOn (VL53L1_DEV dev){
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dev->tof_port, dev->tof_pin, GPIO_PIN_SET);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6858      	ldr	r0, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	899b      	ldrh	r3, [r3, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	0019      	movs	r1, r3
 80023a0:	f000 ff6d 	bl	800327e <HAL_GPIO_WritePin>
	return 0;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b002      	add	sp, #8
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023b0:	b590      	push	{r4, r7, lr}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b6:	f000 fc65 	bl	8002c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023ba:	f000 f8a9 	bl	8002510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023be:	f000 f9a3 	bl	8002708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80023c2:	f000 f971 	bl	80026a8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80023c6:	f000 f92f 	bl	8002628 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80023ca:	f000 f917 	bl	80025fc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  TOF1_Init();
 80023ce:	f000 fa3d 	bl	800284c <TOF1_Init>
  TOF2_Init();
 80023d2:	f000 fa55 	bl	8002880 <TOF2_Init>
  TOF3_Init();
 80023d6:	f000 fa6d 	bl	80028b4 <TOF3_Init>
  TOF4_Init();
 80023da:	f000 fa83 	bl	80028e4 <TOF4_Init>
  tof_ctrl_boot(&tof_1, 0x10);
 80023de:	4b46      	ldr	r3, [pc, #280]	@ (80024f8 <main+0x148>)
 80023e0:	2110      	movs	r1, #16
 80023e2:	0018      	movs	r0, r3
 80023e4:	f7ff fdca 	bl	8001f7c <tof_ctrl_boot>
  //tof_ctrl_boot(&tof_2, 0x20);
  //tof_ctrl_boot(&tof_3, 0x30);
  //tof_ctrl_boot(&tof_4, 0x40);

  uint16_t distance = 0;
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	2200      	movs	r2, #0
 80023ec:	801a      	strh	r2, [r3, #0]
  uint16_t minDistance = 0;
 80023ee:	1dbb      	adds	r3, r7, #6
 80023f0:	2200      	movs	r2, #0
 80023f2:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  minDistance = 1000;
 80023f4:	1dbb      	adds	r3, r7, #6
 80023f6:	22fa      	movs	r2, #250	@ 0xfa
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	801a      	strh	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(X_DIR_IN_GPIO_Port, X_DIR_IN_Pin) == GPIO_PIN_RESET){
 80023fc:	23a0      	movs	r3, #160	@ 0xa0
 80023fe:	05db      	lsls	r3, r3, #23
 8002400:	2101      	movs	r1, #1
 8002402:	0018      	movs	r0, r3
 8002404:	f000 ff1e 	bl	8003244 <HAL_GPIO_ReadPin>
 8002408:	1e03      	subs	r3, r0, #0
 800240a:	d112      	bne.n	8002432 <main+0x82>
		  tof_ctrl_get_distance(&tof_1, &distance, 500);
 800240c:	23fa      	movs	r3, #250	@ 0xfa
 800240e:	005a      	lsls	r2, r3, #1
 8002410:	1d39      	adds	r1, r7, #4
 8002412:	4b39      	ldr	r3, [pc, #228]	@ (80024f8 <main+0x148>)
 8002414:	0018      	movs	r0, r3
 8002416:	f7ff fe21 	bl	800205c <tof_ctrl_get_distance>
		  minDistance = MIN(distance, minDistance);
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	8819      	ldrh	r1, [r3, #0]
 800241e:	1dba      	adds	r2, r7, #6
 8002420:	1dbb      	adds	r3, r7, #6
 8002422:	1c0c      	adds	r4, r1, #0
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	b298      	uxth	r0, r3
 8002428:	b2a1      	uxth	r1, r4
 800242a:	4288      	cmp	r0, r1
 800242c:	d900      	bls.n	8002430 <main+0x80>
 800242e:	1c23      	adds	r3, r4, #0
 8002430:	8013      	strh	r3, [r2, #0]
		  //tof_ctrl_get_distance(&tof_2, &distance, 200);
		  //minDistance = MIN(distance, minDistance);
	  }

	  if(HAL_GPIO_ReadPin(Y_DIR_IN_GPIO_Port, Y_DIR_IN_Pin) == GPIO_PIN_SET){
 8002432:	23a0      	movs	r3, #160	@ 0xa0
 8002434:	05db      	lsls	r3, r3, #23
 8002436:	2102      	movs	r1, #2
 8002438:	0018      	movs	r0, r3
 800243a:	f000 ff03 	bl	8003244 <HAL_GPIO_ReadPin>
 800243e:	0003      	movs	r3, r0
 8002440:	2b01      	cmp	r3, #1
 8002442:	d123      	bne.n	800248c <main+0xdc>
		  tof_ctrl_get_distance(&tof_3, &distance, 200);
 8002444:	1d39      	adds	r1, r7, #4
 8002446:	4b2d      	ldr	r3, [pc, #180]	@ (80024fc <main+0x14c>)
 8002448:	22c8      	movs	r2, #200	@ 0xc8
 800244a:	0018      	movs	r0, r3
 800244c:	f7ff fe06 	bl	800205c <tof_ctrl_get_distance>
		  minDistance = MIN(distance, minDistance);
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	8819      	ldrh	r1, [r3, #0]
 8002454:	1dba      	adds	r2, r7, #6
 8002456:	1dbb      	adds	r3, r7, #6
 8002458:	1c0c      	adds	r4, r1, #0
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b298      	uxth	r0, r3
 800245e:	b2a1      	uxth	r1, r4
 8002460:	4288      	cmp	r0, r1
 8002462:	d900      	bls.n	8002466 <main+0xb6>
 8002464:	1c23      	adds	r3, r4, #0
 8002466:	8013      	strh	r3, [r2, #0]
		  tof_ctrl_get_distance(&tof_4, &distance, 200);
 8002468:	1d39      	adds	r1, r7, #4
 800246a:	4b25      	ldr	r3, [pc, #148]	@ (8002500 <main+0x150>)
 800246c:	22c8      	movs	r2, #200	@ 0xc8
 800246e:	0018      	movs	r0, r3
 8002470:	f7ff fdf4 	bl	800205c <tof_ctrl_get_distance>
		  minDistance = MIN(distance, minDistance);
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	8819      	ldrh	r1, [r3, #0]
 8002478:	1dba      	adds	r2, r7, #6
 800247a:	1dbb      	adds	r3, r7, #6
 800247c:	1c0c      	adds	r4, r1, #0
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	b298      	uxth	r0, r3
 8002482:	b2a1      	uxth	r1, r4
 8002484:	4288      	cmp	r0, r1
 8002486:	d900      	bls.n	800248a <main+0xda>
 8002488:	1c23      	adds	r3, r4, #0
 800248a:	8013      	strh	r3, [r2, #0]
	  }

	  printf("Min. Distance: %dmm\r\n", minDistance);
 800248c:	1dbb      	adds	r3, r7, #6
 800248e:	881a      	ldrh	r2, [r3, #0]
 8002490:	4b1c      	ldr	r3, [pc, #112]	@ (8002504 <main+0x154>)
 8002492:	0011      	movs	r1, r2
 8002494:	0018      	movs	r0, r3
 8002496:	f003 fa19 	bl	80058cc <iprintf>

	  if(minDistance < DISTANCE_SLOW){
 800249a:	1dbb      	adds	r3, r7, #6
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	2b45      	cmp	r3, #69	@ 0x45
 80024a0:	d80b      	bhi.n	80024ba <main+0x10a>
		  HAL_GPIO_WritePin(SLOW_OUT_GPIO_Port, SLOW_OUT_Pin, GPIO_PIN_SET);
 80024a2:	23a0      	movs	r3, #160	@ 0xa0
 80024a4:	05db      	lsls	r3, r3, #23
 80024a6:	2201      	movs	r2, #1
 80024a8:	2110      	movs	r1, #16
 80024aa:	0018      	movs	r0, r3
 80024ac:	f000 fee7 	bl	800327e <HAL_GPIO_WritePin>
		  printf("SLOW!\r\n");
 80024b0:	4b15      	ldr	r3, [pc, #84]	@ (8002508 <main+0x158>)
 80024b2:	0018      	movs	r0, r3
 80024b4:	f003 fa70 	bl	8005998 <puts>
 80024b8:	e006      	b.n	80024c8 <main+0x118>
	  } else {
		  HAL_GPIO_WritePin(SLOW_OUT_GPIO_Port, SLOW_OUT_Pin, GPIO_PIN_RESET);
 80024ba:	23a0      	movs	r3, #160	@ 0xa0
 80024bc:	05db      	lsls	r3, r3, #23
 80024be:	2200      	movs	r2, #0
 80024c0:	2110      	movs	r1, #16
 80024c2:	0018      	movs	r0, r3
 80024c4:	f000 fedb 	bl	800327e <HAL_GPIO_WritePin>
	  }

	  if(minDistance < DISTANCE_STOP){
 80024c8:	1dbb      	adds	r3, r7, #6
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	2b13      	cmp	r3, #19
 80024ce:	d80b      	bhi.n	80024e8 <main+0x138>
		  HAL_GPIO_WritePin(STOP_OUT_GPIO_Port, SLOW_OUT_Pin, GPIO_PIN_SET);
 80024d0:	23a0      	movs	r3, #160	@ 0xa0
 80024d2:	05db      	lsls	r3, r3, #23
 80024d4:	2201      	movs	r2, #1
 80024d6:	2110      	movs	r1, #16
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 fed0 	bl	800327e <HAL_GPIO_WritePin>
		  printf("STOP!\r\n");
 80024de:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <main+0x15c>)
 80024e0:	0018      	movs	r0, r3
 80024e2:	f003 fa59 	bl	8005998 <puts>
 80024e6:	e785      	b.n	80023f4 <main+0x44>
	  } else {
		  HAL_GPIO_WritePin(STOP_OUT_GPIO_Port, SLOW_OUT_Pin, GPIO_PIN_RESET);
 80024e8:	23a0      	movs	r3, #160	@ 0xa0
 80024ea:	05db      	lsls	r3, r3, #23
 80024ec:	2200      	movs	r2, #0
 80024ee:	2110      	movs	r1, #16
 80024f0:	0018      	movs	r0, r3
 80024f2:	f000 fec4 	bl	800327e <HAL_GPIO_WritePin>
	  minDistance = 1000;
 80024f6:	e77d      	b.n	80023f4 <main+0x44>
 80024f8:	20000260 	.word	0x20000260
 80024fc:	20000288 	.word	0x20000288
 8002500:	2000029c 	.word	0x2000029c
 8002504:	08006720 	.word	0x08006720
 8002508:	08006738 	.word	0x08006738
 800250c:	08006740 	.word	0x08006740

08002510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b099      	sub	sp, #100	@ 0x64
 8002514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002516:	242c      	movs	r4, #44	@ 0x2c
 8002518:	193b      	adds	r3, r7, r4
 800251a:	0018      	movs	r0, r3
 800251c:	2334      	movs	r3, #52	@ 0x34
 800251e:	001a      	movs	r2, r3
 8002520:	2100      	movs	r1, #0
 8002522:	f003 fb2f 	bl	8005b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002526:	2318      	movs	r3, #24
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	0018      	movs	r0, r3
 800252c:	2314      	movs	r3, #20
 800252e:	001a      	movs	r2, r3
 8002530:	2100      	movs	r1, #0
 8002532:	f003 fb27 	bl	8005b84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002536:	003b      	movs	r3, r7
 8002538:	0018      	movs	r0, r3
 800253a:	2318      	movs	r3, #24
 800253c:	001a      	movs	r2, r3
 800253e:	2100      	movs	r1, #0
 8002540:	f003 fb20 	bl	8005b84 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002544:	4b2b      	ldr	r3, [pc, #172]	@ (80025f4 <SystemClock_Config+0xe4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a2b      	ldr	r2, [pc, #172]	@ (80025f8 <SystemClock_Config+0xe8>)
 800254a:	401a      	ands	r2, r3
 800254c:	4b29      	ldr	r3, [pc, #164]	@ (80025f4 <SystemClock_Config+0xe4>)
 800254e:	2180      	movs	r1, #128	@ 0x80
 8002550:	0109      	lsls	r1, r1, #4
 8002552:	430a      	orrs	r2, r1
 8002554:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002556:	0021      	movs	r1, r4
 8002558:	187b      	adds	r3, r7, r1
 800255a:	2202      	movs	r2, #2
 800255c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800255e:	187b      	adds	r3, r7, r1
 8002560:	2201      	movs	r2, #1
 8002562:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002564:	187b      	adds	r3, r7, r1
 8002566:	2210      	movs	r2, #16
 8002568:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800256a:	187b      	adds	r3, r7, r1
 800256c:	2202      	movs	r2, #2
 800256e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002570:	187b      	adds	r3, r7, r1
 8002572:	2200      	movs	r2, #0
 8002574:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002576:	187b      	adds	r3, r7, r1
 8002578:	2280      	movs	r2, #128	@ 0x80
 800257a:	02d2      	lsls	r2, r2, #11
 800257c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800257e:	187b      	adds	r3, r7, r1
 8002580:	2280      	movs	r2, #128	@ 0x80
 8002582:	03d2      	lsls	r2, r2, #15
 8002584:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002586:	187b      	adds	r3, r7, r1
 8002588:	0018      	movs	r0, r3
 800258a:	f001 fca7 	bl	8003edc <HAL_RCC_OscConfig>
 800258e:	1e03      	subs	r3, r0, #0
 8002590:	d001      	beq.n	8002596 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002592:	f000 f9d5 	bl	8002940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002596:	2118      	movs	r1, #24
 8002598:	187b      	adds	r3, r7, r1
 800259a:	220f      	movs	r2, #15
 800259c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800259e:	187b      	adds	r3, r7, r1
 80025a0:	2203      	movs	r2, #3
 80025a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025a4:	187b      	adds	r3, r7, r1
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025aa:	187b      	adds	r3, r7, r1
 80025ac:	2200      	movs	r2, #0
 80025ae:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025b0:	187b      	adds	r3, r7, r1
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80025b6:	187b      	adds	r3, r7, r1
 80025b8:	2101      	movs	r1, #1
 80025ba:	0018      	movs	r0, r3
 80025bc:	f002 f80a 	bl	80045d4 <HAL_RCC_ClockConfig>
 80025c0:	1e03      	subs	r3, r0, #0
 80025c2:	d001      	beq.n	80025c8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80025c4:	f000 f9bc 	bl	8002940 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80025c8:	003b      	movs	r3, r7
 80025ca:	220a      	movs	r2, #10
 80025cc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025ce:	003b      	movs	r3, r7
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025d4:	003b      	movs	r3, r7
 80025d6:	2200      	movs	r2, #0
 80025d8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025da:	003b      	movs	r3, r7
 80025dc:	0018      	movs	r0, r3
 80025de:	f002 fa1d 	bl	8004a1c <HAL_RCCEx_PeriphCLKConfig>
 80025e2:	1e03      	subs	r3, r0, #0
 80025e4:	d001      	beq.n	80025ea <SystemClock_Config+0xda>
  {
    Error_Handler();
 80025e6:	f000 f9ab 	bl	8002940 <Error_Handler>
  }
}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b019      	add	sp, #100	@ 0x64
 80025f0:	bd90      	pop	{r4, r7, pc}
 80025f2:	46c0      	nop			@ (mov r8, r8)
 80025f4:	40007000 	.word	0x40007000
 80025f8:	ffffe7ff 	.word	0xffffe7ff

080025fc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002600:	2200      	movs	r2, #0
 8002602:	2100      	movs	r1, #0
 8002604:	2007      	movs	r0, #7
 8002606:	f000 fc7d 	bl	8002f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800260a:	2007      	movs	r0, #7
 800260c:	f000 fc8f 	bl	8002f2e <HAL_NVIC_EnableIRQ>
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	2100      	movs	r1, #0
 8002614:	2005      	movs	r0, #5
 8002616:	f000 fc75 	bl	8002f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800261a:	2005      	movs	r0, #5
 800261c:	f000 fc87 	bl	8002f2e <HAL_NVIC_EnableIRQ>
}
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800262c:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <MX_I2C1_Init+0x74>)
 800262e:	4a1c      	ldr	r2, [pc, #112]	@ (80026a0 <MX_I2C1_Init+0x78>)
 8002630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8002632:	4b1a      	ldr	r3, [pc, #104]	@ (800269c <MX_I2C1_Init+0x74>)
 8002634:	4a1b      	ldr	r2, [pc, #108]	@ (80026a4 <MX_I2C1_Init+0x7c>)
 8002636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002638:	4b18      	ldr	r3, [pc, #96]	@ (800269c <MX_I2C1_Init+0x74>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800263e:	4b17      	ldr	r3, [pc, #92]	@ (800269c <MX_I2C1_Init+0x74>)
 8002640:	2201      	movs	r2, #1
 8002642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002644:	4b15      	ldr	r3, [pc, #84]	@ (800269c <MX_I2C1_Init+0x74>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800264a:	4b14      	ldr	r3, [pc, #80]	@ (800269c <MX_I2C1_Init+0x74>)
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002650:	4b12      	ldr	r3, [pc, #72]	@ (800269c <MX_I2C1_Init+0x74>)
 8002652:	2200      	movs	r2, #0
 8002654:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002656:	4b11      	ldr	r3, [pc, #68]	@ (800269c <MX_I2C1_Init+0x74>)
 8002658:	2200      	movs	r2, #0
 800265a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800265c:	4b0f      	ldr	r3, [pc, #60]	@ (800269c <MX_I2C1_Init+0x74>)
 800265e:	2200      	movs	r2, #0
 8002660:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002662:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <MX_I2C1_Init+0x74>)
 8002664:	0018      	movs	r0, r3
 8002666:	f000 fe4d 	bl	8003304 <HAL_I2C_Init>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d001      	beq.n	8002672 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800266e:	f000 f967 	bl	8002940 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002672:	4b0a      	ldr	r3, [pc, #40]	@ (800269c <MX_I2C1_Init+0x74>)
 8002674:	2100      	movs	r1, #0
 8002676:	0018      	movs	r0, r3
 8002678:	f001 fb98 	bl	8003dac <HAL_I2CEx_ConfigAnalogFilter>
 800267c:	1e03      	subs	r3, r0, #0
 800267e:	d001      	beq.n	8002684 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002680:	f000 f95e 	bl	8002940 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002684:	4b05      	ldr	r3, [pc, #20]	@ (800269c <MX_I2C1_Init+0x74>)
 8002686:	2100      	movs	r1, #0
 8002688:	0018      	movs	r0, r3
 800268a:	f001 fbdb 	bl	8003e44 <HAL_I2CEx_ConfigDigitalFilter>
 800268e:	1e03      	subs	r3, r0, #0
 8002690:	d001      	beq.n	8002696 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002692:	f000 f955 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000184 	.word	0x20000184
 80026a0:	40005400 	.word	0x40005400
 80026a4:	00b07cb4 	.word	0x00b07cb4

080026a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026ac:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <MX_USART2_UART_Init+0x58>)
 80026ae:	4a15      	ldr	r2, [pc, #84]	@ (8002704 <MX_USART2_UART_Init+0x5c>)
 80026b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026b2:	4b13      	ldr	r3, [pc, #76]	@ (8002700 <MX_USART2_UART_Init+0x58>)
 80026b4:	22e1      	movs	r2, #225	@ 0xe1
 80026b6:	0252      	lsls	r2, r2, #9
 80026b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026ba:	4b11      	ldr	r3, [pc, #68]	@ (8002700 <MX_USART2_UART_Init+0x58>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002700 <MX_USART2_UART_Init+0x58>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002700 <MX_USART2_UART_Init+0x58>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002700 <MX_USART2_UART_Init+0x58>)
 80026ce:	220c      	movs	r2, #12
 80026d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <MX_USART2_UART_Init+0x58>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d8:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <MX_USART2_UART_Init+0x58>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026de:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <MX_USART2_UART_Init+0x58>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026e4:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <MX_USART2_UART_Init+0x58>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026ea:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <MX_USART2_UART_Init+0x58>)
 80026ec:	0018      	movs	r0, r3
 80026ee:	f002 fac1 	bl	8004c74 <HAL_UART_Init>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	d001      	beq.n	80026fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80026f6:	f000 f923 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026fa:	46c0      	nop			@ (mov r8, r8)
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	200001d8 	.word	0x200001d8
 8002704:	40004400 	.word	0x40004400

08002708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b089      	sub	sp, #36	@ 0x24
 800270c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270e:	240c      	movs	r4, #12
 8002710:	193b      	adds	r3, r7, r4
 8002712:	0018      	movs	r0, r3
 8002714:	2314      	movs	r3, #20
 8002716:	001a      	movs	r2, r3
 8002718:	2100      	movs	r1, #0
 800271a:	f003 fa33 	bl	8005b84 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800271e:	4b49      	ldr	r3, [pc, #292]	@ (8002844 <MX_GPIO_Init+0x13c>)
 8002720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002722:	4b48      	ldr	r3, [pc, #288]	@ (8002844 <MX_GPIO_Init+0x13c>)
 8002724:	2104      	movs	r1, #4
 8002726:	430a      	orrs	r2, r1
 8002728:	62da      	str	r2, [r3, #44]	@ 0x2c
 800272a:	4b46      	ldr	r3, [pc, #280]	@ (8002844 <MX_GPIO_Init+0x13c>)
 800272c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272e:	2204      	movs	r2, #4
 8002730:	4013      	ands	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002736:	4b43      	ldr	r3, [pc, #268]	@ (8002844 <MX_GPIO_Init+0x13c>)
 8002738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800273a:	4b42      	ldr	r3, [pc, #264]	@ (8002844 <MX_GPIO_Init+0x13c>)
 800273c:	2101      	movs	r1, #1
 800273e:	430a      	orrs	r2, r1
 8002740:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002742:	4b40      	ldr	r3, [pc, #256]	@ (8002844 <MX_GPIO_Init+0x13c>)
 8002744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002746:	2201      	movs	r2, #1
 8002748:	4013      	ands	r3, r2
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800274e:	4b3d      	ldr	r3, [pc, #244]	@ (8002844 <MX_GPIO_Init+0x13c>)
 8002750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002752:	4b3c      	ldr	r3, [pc, #240]	@ (8002844 <MX_GPIO_Init+0x13c>)
 8002754:	2102      	movs	r1, #2
 8002756:	430a      	orrs	r2, r1
 8002758:	62da      	str	r2, [r3, #44]	@ 0x2c
 800275a:	4b3a      	ldr	r3, [pc, #232]	@ (8002844 <MX_GPIO_Init+0x13c>)
 800275c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275e:	2202      	movs	r2, #2
 8002760:	4013      	ands	r3, r2
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STOP_OUT_Pin|SLOW_OUT_Pin|SHUT_ToF1_Pin, GPIO_PIN_RESET);
 8002766:	238c      	movs	r3, #140	@ 0x8c
 8002768:	0059      	lsls	r1, r3, #1
 800276a:	23a0      	movs	r3, #160	@ 0xa0
 800276c:	05db      	lsls	r3, r3, #23
 800276e:	2200      	movs	r2, #0
 8002770:	0018      	movs	r0, r3
 8002772:	f000 fd84 	bl	800327e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHUT_ToF2_Pin|SHUT_ToF3_Pin|SHUT_ToF4_Pin, GPIO_PIN_RESET);
 8002776:	4b34      	ldr	r3, [pc, #208]	@ (8002848 <MX_GPIO_Init+0x140>)
 8002778:	2200      	movs	r2, #0
 800277a:	2129      	movs	r1, #41	@ 0x29
 800277c:	0018      	movs	r0, r3
 800277e:	f000 fd7e 	bl	800327e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : X_DIR_IN_Pin Y_DIR_IN_Pin */
  GPIO_InitStruct.Pin = X_DIR_IN_Pin|Y_DIR_IN_Pin;
 8002782:	193b      	adds	r3, r7, r4
 8002784:	2203      	movs	r2, #3
 8002786:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002788:	193b      	adds	r3, r7, r4
 800278a:	2200      	movs	r2, #0
 800278c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800278e:	193b      	adds	r3, r7, r4
 8002790:	2202      	movs	r2, #2
 8002792:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002794:	193a      	adds	r2, r7, r4
 8002796:	23a0      	movs	r3, #160	@ 0xa0
 8002798:	05db      	lsls	r3, r3, #23
 800279a:	0011      	movs	r1, r2
 800279c:	0018      	movs	r0, r3
 800279e:	f000 fbe3 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_OUT_Pin SLOW_OUT_Pin SHUT_ToF1_Pin */
  GPIO_InitStruct.Pin = STOP_OUT_Pin|SLOW_OUT_Pin|SHUT_ToF1_Pin;
 80027a2:	0021      	movs	r1, r4
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	228c      	movs	r2, #140	@ 0x8c
 80027a8:	0052      	lsls	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ac:	000c      	movs	r4, r1
 80027ae:	193b      	adds	r3, r7, r4
 80027b0:	2201      	movs	r2, #1
 80027b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	193b      	adds	r3, r7, r4
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	193b      	adds	r3, r7, r4
 80027bc:	2200      	movs	r2, #0
 80027be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c0:	193a      	adds	r2, r7, r4
 80027c2:	23a0      	movs	r3, #160	@ 0xa0
 80027c4:	05db      	lsls	r3, r3, #23
 80027c6:	0011      	movs	r1, r2
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 fbcd 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHUT_ToF2_Pin SHUT_ToF3_Pin SHUT_ToF4_Pin */
  GPIO_InitStruct.Pin = SHUT_ToF2_Pin|SHUT_ToF3_Pin|SHUT_ToF4_Pin;
 80027ce:	193b      	adds	r3, r7, r4
 80027d0:	2229      	movs	r2, #41	@ 0x29
 80027d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d4:	193b      	adds	r3, r7, r4
 80027d6:	2201      	movs	r2, #1
 80027d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	193b      	adds	r3, r7, r4
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e0:	193b      	adds	r3, r7, r4
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e6:	193b      	adds	r3, r7, r4
 80027e8:	4a17      	ldr	r2, [pc, #92]	@ (8002848 <MX_GPIO_Init+0x140>)
 80027ea:	0019      	movs	r1, r3
 80027ec:	0010      	movs	r0, r2
 80027ee:	f000 fbbb 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ToF1_Pin INT_ToF3_Pin */
  GPIO_InitStruct.Pin = INT_ToF1_Pin|INT_ToF3_Pin;
 80027f2:	0021      	movs	r1, r4
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	2212      	movs	r2, #18
 80027f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	2284      	movs	r2, #132	@ 0x84
 80027fe:	0392      	lsls	r2, r2, #14
 8002800:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	187b      	adds	r3, r7, r1
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002808:	000c      	movs	r4, r1
 800280a:	187b      	adds	r3, r7, r1
 800280c:	4a0e      	ldr	r2, [pc, #56]	@ (8002848 <MX_GPIO_Init+0x140>)
 800280e:	0019      	movs	r1, r3
 8002810:	0010      	movs	r0, r2
 8002812:	f000 fba9 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ToF4_Pin INT_ToF2_Pin */
  GPIO_InitStruct.Pin = INT_ToF4_Pin|INT_ToF2_Pin;
 8002816:	0021      	movs	r1, r4
 8002818:	187b      	adds	r3, r7, r1
 800281a:	22c0      	movs	r2, #192	@ 0xc0
 800281c:	0152      	lsls	r2, r2, #5
 800281e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002820:	187b      	adds	r3, r7, r1
 8002822:	2284      	movs	r2, #132	@ 0x84
 8002824:	0392      	lsls	r2, r2, #14
 8002826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	187b      	adds	r3, r7, r1
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282e:	187a      	adds	r2, r7, r1
 8002830:	23a0      	movs	r3, #160	@ 0xa0
 8002832:	05db      	lsls	r3, r3, #23
 8002834:	0011      	movs	r1, r2
 8002836:	0018      	movs	r0, r3
 8002838:	f000 fb96 	bl	8002f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800283c:	46c0      	nop			@ (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	b009      	add	sp, #36	@ 0x24
 8002842:	bd90      	pop	{r4, r7, pc}
 8002844:	40021000 	.word	0x40021000
 8002848:	50000400 	.word	0x50000400

0800284c <TOF1_Init>:

/* USER CODE BEGIN 4 */

static void TOF1_Init(){
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
	tof_1.tof_addr = 0x52;
 8002850:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <TOF1_Init+0x2c>)
 8002852:	2252      	movs	r2, #82	@ 0x52
 8002854:	601a      	str	r2, [r3, #0]
	tof_1.tof_port = SHUT_ToF1_GPIO_Port;
 8002856:	4b08      	ldr	r3, [pc, #32]	@ (8002878 <TOF1_Init+0x2c>)
 8002858:	22a0      	movs	r2, #160	@ 0xa0
 800285a:	05d2      	lsls	r2, r2, #23
 800285c:	605a      	str	r2, [r3, #4]
	tof_1.tof_pin = SHUT_ToF1_Pin;
 800285e:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <TOF1_Init+0x2c>)
 8002860:	2280      	movs	r2, #128	@ 0x80
 8002862:	0052      	lsls	r2, r2, #1
 8002864:	819a      	strh	r2, [r3, #12]
	tof_1.tof_intport = INT_ToF1_GPIO_Port;
 8002866:	4b04      	ldr	r3, [pc, #16]	@ (8002878 <TOF1_Init+0x2c>)
 8002868:	4a04      	ldr	r2, [pc, #16]	@ (800287c <TOF1_Init+0x30>)
 800286a:	609a      	str	r2, [r3, #8]
	tof_1.tof_intpin = INT_ToF1_Pin;
 800286c:	4b02      	ldr	r3, [pc, #8]	@ (8002878 <TOF1_Init+0x2c>)
 800286e:	2202      	movs	r2, #2
 8002870:	81da      	strh	r2, [r3, #14]
}
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000260 	.word	0x20000260
 800287c:	50000400 	.word	0x50000400

08002880 <TOF2_Init>:

static void TOF2_Init(){
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
	tof_2.tof_addr = 0x52;
 8002884:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <TOF2_Init+0x2c>)
 8002886:	2252      	movs	r2, #82	@ 0x52
 8002888:	601a      	str	r2, [r3, #0]
	tof_2.tof_port = SHUT_ToF2_GPIO_Port;
 800288a:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <TOF2_Init+0x2c>)
 800288c:	4a08      	ldr	r2, [pc, #32]	@ (80028b0 <TOF2_Init+0x30>)
 800288e:	605a      	str	r2, [r3, #4]
	tof_2.tof_pin = SHUT_ToF2_Pin;
 8002890:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <TOF2_Init+0x2c>)
 8002892:	2201      	movs	r2, #1
 8002894:	819a      	strh	r2, [r3, #12]
	tof_2.tof_intport = INT_ToF2_GPIO_Port;
 8002896:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <TOF2_Init+0x2c>)
 8002898:	22a0      	movs	r2, #160	@ 0xa0
 800289a:	05d2      	lsls	r2, r2, #23
 800289c:	609a      	str	r2, [r3, #8]
	tof_2.tof_intpin = INT_ToF2_Pin;
 800289e:	4b03      	ldr	r3, [pc, #12]	@ (80028ac <TOF2_Init+0x2c>)
 80028a0:	2280      	movs	r2, #128	@ 0x80
 80028a2:	0152      	lsls	r2, r2, #5
 80028a4:	81da      	strh	r2, [r3, #14]
}
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000274 	.word	0x20000274
 80028b0:	50000400 	.word	0x50000400

080028b4 <TOF3_Init>:

static void TOF3_Init(){
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
	tof_3.tof_addr = 0x52;
 80028b8:	4b08      	ldr	r3, [pc, #32]	@ (80028dc <TOF3_Init+0x28>)
 80028ba:	2252      	movs	r2, #82	@ 0x52
 80028bc:	601a      	str	r2, [r3, #0]
	tof_3.tof_port = SHUT_ToF3_GPIO_Port;
 80028be:	4b07      	ldr	r3, [pc, #28]	@ (80028dc <TOF3_Init+0x28>)
 80028c0:	4a07      	ldr	r2, [pc, #28]	@ (80028e0 <TOF3_Init+0x2c>)
 80028c2:	605a      	str	r2, [r3, #4]
	tof_3.tof_pin = SHUT_ToF3_Pin;
 80028c4:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <TOF3_Init+0x28>)
 80028c6:	2208      	movs	r2, #8
 80028c8:	819a      	strh	r2, [r3, #12]
	tof_3.tof_intport = INT_ToF3_GPIO_Port;
 80028ca:	4b04      	ldr	r3, [pc, #16]	@ (80028dc <TOF3_Init+0x28>)
 80028cc:	4a04      	ldr	r2, [pc, #16]	@ (80028e0 <TOF3_Init+0x2c>)
 80028ce:	609a      	str	r2, [r3, #8]
	tof_3.tof_intpin = INT_ToF3_Pin;
 80028d0:	4b02      	ldr	r3, [pc, #8]	@ (80028dc <TOF3_Init+0x28>)
 80028d2:	2210      	movs	r2, #16
 80028d4:	81da      	strh	r2, [r3, #14]
}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20000288 	.word	0x20000288
 80028e0:	50000400 	.word	0x50000400

080028e4 <TOF4_Init>:

static void TOF4_Init(){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	tof_4.tof_addr = 0x52;
 80028e8:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <TOF4_Init+0x2c>)
 80028ea:	2252      	movs	r2, #82	@ 0x52
 80028ec:	601a      	str	r2, [r3, #0]
	tof_4.tof_port = SHUT_ToF4_GPIO_Port;
 80028ee:	4b08      	ldr	r3, [pc, #32]	@ (8002910 <TOF4_Init+0x2c>)
 80028f0:	4a08      	ldr	r2, [pc, #32]	@ (8002914 <TOF4_Init+0x30>)
 80028f2:	605a      	str	r2, [r3, #4]
	tof_4.tof_pin = SHUT_ToF4_Pin;
 80028f4:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <TOF4_Init+0x2c>)
 80028f6:	2220      	movs	r2, #32
 80028f8:	819a      	strh	r2, [r3, #12]
	tof_4.tof_intport = INT_ToF4_GPIO_Port;
 80028fa:	4b05      	ldr	r3, [pc, #20]	@ (8002910 <TOF4_Init+0x2c>)
 80028fc:	22a0      	movs	r2, #160	@ 0xa0
 80028fe:	05d2      	lsls	r2, r2, #23
 8002900:	609a      	str	r2, [r3, #8]
	tof_4.tof_intpin = INT_ToF4_Pin;
 8002902:	4b03      	ldr	r3, [pc, #12]	@ (8002910 <TOF4_Init+0x2c>)
 8002904:	2280      	movs	r2, #128	@ 0x80
 8002906:	0112      	lsls	r2, r2, #4
 8002908:	81da      	strh	r2, [r3, #14]
}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	2000029c 	.word	0x2000029c
 8002914:	50000400 	.word	0x50000400

08002918 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002920:	4b05      	ldr	r3, [pc, #20]	@ (8002938 <__io_putchar+0x20>)
 8002922:	1d39      	adds	r1, r7, #4
 8002924:	4805      	ldr	r0, [pc, #20]	@ (800293c <__io_putchar+0x24>)
 8002926:	2201      	movs	r2, #1
 8002928:	f002 f9f8 	bl	8004d1c <HAL_UART_Transmit>

  return ch;
 800292c:	687b      	ldr	r3, [r7, #4]
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b002      	add	sp, #8
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	0000ffff 	.word	0x0000ffff
 800293c:	200001d8 	.word	0x200001d8

08002940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002944:	b672      	cpsid	i
}
 8002946:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002948:	46c0      	nop			@ (mov r8, r8)
 800294a:	e7fd      	b.n	8002948 <Error_Handler+0x8>

0800294c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002950:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <HAL_MspInit+0x24>)
 8002952:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <HAL_MspInit+0x24>)
 8002956:	2101      	movs	r1, #1
 8002958:	430a      	orrs	r2, r1
 800295a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800295c:	4b04      	ldr	r3, [pc, #16]	@ (8002970 <HAL_MspInit+0x24>)
 800295e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002960:	4b03      	ldr	r3, [pc, #12]	@ (8002970 <HAL_MspInit+0x24>)
 8002962:	2180      	movs	r1, #128	@ 0x80
 8002964:	0549      	lsls	r1, r1, #21
 8002966:	430a      	orrs	r2, r1
 8002968:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000

08002974 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b089      	sub	sp, #36	@ 0x24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	240c      	movs	r4, #12
 800297e:	193b      	adds	r3, r7, r4
 8002980:	0018      	movs	r0, r3
 8002982:	2314      	movs	r3, #20
 8002984:	001a      	movs	r2, r3
 8002986:	2100      	movs	r1, #0
 8002988:	f003 f8fc 	bl	8005b84 <memset>
  if(hi2c->Instance==I2C1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a17      	ldr	r2, [pc, #92]	@ (80029f0 <HAL_I2C_MspInit+0x7c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d128      	bne.n	80029e8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002996:	4b17      	ldr	r3, [pc, #92]	@ (80029f4 <HAL_I2C_MspInit+0x80>)
 8002998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800299a:	4b16      	ldr	r3, [pc, #88]	@ (80029f4 <HAL_I2C_MspInit+0x80>)
 800299c:	2102      	movs	r1, #2
 800299e:	430a      	orrs	r2, r1
 80029a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029a2:	4b14      	ldr	r3, [pc, #80]	@ (80029f4 <HAL_I2C_MspInit+0x80>)
 80029a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a6:	2202      	movs	r2, #2
 80029a8:	4013      	ands	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029ae:	0021      	movs	r1, r4
 80029b0:	187b      	adds	r3, r7, r1
 80029b2:	22c0      	movs	r2, #192	@ 0xc0
 80029b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029b6:	187b      	adds	r3, r7, r1
 80029b8:	2212      	movs	r2, #18
 80029ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	2201      	movs	r2, #1
 80029c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	2203      	movs	r2, #3
 80029c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	2201      	movs	r2, #1
 80029cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	4a09      	ldr	r2, [pc, #36]	@ (80029f8 <HAL_I2C_MspInit+0x84>)
 80029d2:	0019      	movs	r1, r3
 80029d4:	0010      	movs	r0, r2
 80029d6:	f000 fac7 	bl	8002f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029da:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <HAL_I2C_MspInit+0x80>)
 80029dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029de:	4b05      	ldr	r3, [pc, #20]	@ (80029f4 <HAL_I2C_MspInit+0x80>)
 80029e0:	2180      	movs	r1, #128	@ 0x80
 80029e2:	0389      	lsls	r1, r1, #14
 80029e4:	430a      	orrs	r2, r1
 80029e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80029e8:	46c0      	nop			@ (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b009      	add	sp, #36	@ 0x24
 80029ee:	bd90      	pop	{r4, r7, pc}
 80029f0:	40005400 	.word	0x40005400
 80029f4:	40021000 	.word	0x40021000
 80029f8:	50000400 	.word	0x50000400

080029fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b089      	sub	sp, #36	@ 0x24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	240c      	movs	r4, #12
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	0018      	movs	r0, r3
 8002a0a:	2314      	movs	r3, #20
 8002a0c:	001a      	movs	r2, r3
 8002a0e:	2100      	movs	r1, #0
 8002a10:	f003 f8b8 	bl	8005b84 <memset>
  if(huart->Instance==USART2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a18      	ldr	r2, [pc, #96]	@ (8002a7c <HAL_UART_MspInit+0x80>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d129      	bne.n	8002a72 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a1e:	4b18      	ldr	r3, [pc, #96]	@ (8002a80 <HAL_UART_MspInit+0x84>)
 8002a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a22:	4b17      	ldr	r3, [pc, #92]	@ (8002a80 <HAL_UART_MspInit+0x84>)
 8002a24:	2180      	movs	r1, #128	@ 0x80
 8002a26:	0289      	lsls	r1, r1, #10
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2c:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <HAL_UART_MspInit+0x84>)
 8002a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a30:	4b13      	ldr	r3, [pc, #76]	@ (8002a80 <HAL_UART_MspInit+0x84>)
 8002a32:	2101      	movs	r1, #1
 8002a34:	430a      	orrs	r2, r1
 8002a36:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a38:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <HAL_UART_MspInit+0x84>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	4013      	ands	r3, r2
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002a44:	0021      	movs	r1, r4
 8002a46:	187b      	adds	r3, r7, r1
 8002a48:	4a0e      	ldr	r2, [pc, #56]	@ (8002a84 <HAL_UART_MspInit+0x88>)
 8002a4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	2202      	movs	r2, #2
 8002a50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2204      	movs	r2, #4
 8002a62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a64:	187a      	adds	r2, r7, r1
 8002a66:	23a0      	movs	r3, #160	@ 0xa0
 8002a68:	05db      	lsls	r3, r3, #23
 8002a6a:	0011      	movs	r1, r2
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f000 fa7b 	bl	8002f68 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b009      	add	sp, #36	@ 0x24
 8002a78:	bd90      	pop	{r4, r7, pc}
 8002a7a:	46c0      	nop			@ (mov r8, r8)
 8002a7c:	40004400 	.word	0x40004400
 8002a80:	40021000 	.word	0x40021000
 8002a84:	00008004 	.word	0x00008004

08002a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a8c:	46c0      	nop			@ (mov r8, r8)
 8002a8e:	e7fd      	b.n	8002a8c <NMI_Handler+0x4>

08002a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a94:	46c0      	nop			@ (mov r8, r8)
 8002a96:	e7fd      	b.n	8002a94 <HardFault_Handler+0x4>

08002a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a9c:	46c0      	nop			@ (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aa6:	46c0      	nop			@ (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab0:	f000 f93c 	bl	8002d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ab4:	46c0      	nop			@ (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ToF1_Pin);
 8002abe:	2002      	movs	r0, #2
 8002ac0:	f000 fbfa 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002ac4:	46c0      	nop			@ (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ToF3_Pin);
 8002ace:	2010      	movs	r0, #16
 8002ad0:	f000 fbf2 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ToF4_Pin);
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 fbed 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ToF2_Pin);
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	015b      	lsls	r3, r3, #5
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 fbe8 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002ae8:	46c0      	nop			@ (mov r8, r8)
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e00a      	b.n	8002b16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b00:	e000      	b.n	8002b04 <_read+0x16>
 8002b02:	bf00      	nop
 8002b04:	0001      	movs	r1, r0
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	60ba      	str	r2, [r7, #8]
 8002b0c:	b2ca      	uxtb	r2, r1
 8002b0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	3301      	adds	r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	dbf0      	blt.n	8002b00 <_read+0x12>
  }

  return len;
 8002b1e:	687b      	ldr	r3, [r7, #4]
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b006      	add	sp, #24
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	e009      	b.n	8002b4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	60ba      	str	r2, [r7, #8]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	0018      	movs	r0, r3
 8002b44:	f7ff fee8 	bl	8002918 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	dbf1      	blt.n	8002b3a <_write+0x12>
  }
  return len;
 8002b56:	687b      	ldr	r3, [r7, #4]
}
 8002b58:	0018      	movs	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b006      	add	sp, #24
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_close>:

int _close(int file)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	425b      	negs	r3, r3
}
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b002      	add	sp, #8
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2280      	movs	r2, #128	@ 0x80
 8002b82:	0192      	lsls	r2, r2, #6
 8002b84:	605a      	str	r2, [r3, #4]
  return 0;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <_isatty>:

int _isatty(int file)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b98:	2301      	movs	r3, #1
}
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b002      	add	sp, #8
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b004      	add	sp, #16
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc0:	4a14      	ldr	r2, [pc, #80]	@ (8002c14 <_sbrk+0x5c>)
 8002bc2:	4b15      	ldr	r3, [pc, #84]	@ (8002c18 <_sbrk+0x60>)
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bcc:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <_sbrk+0x64>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd4:	4b11      	ldr	r3, [pc, #68]	@ (8002c1c <_sbrk+0x64>)
 8002bd6:	4a12      	ldr	r2, [pc, #72]	@ (8002c20 <_sbrk+0x68>)
 8002bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bda:	4b10      	ldr	r3, [pc, #64]	@ (8002c1c <_sbrk+0x64>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	18d3      	adds	r3, r2, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d207      	bcs.n	8002bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be8:	f003 f822 	bl	8005c30 <__errno>
 8002bec:	0003      	movs	r3, r0
 8002bee:	220c      	movs	r2, #12
 8002bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	425b      	negs	r3, r3
 8002bf6:	e009      	b.n	8002c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf8:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <_sbrk+0x64>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bfe:	4b07      	ldr	r3, [pc, #28]	@ (8002c1c <_sbrk+0x64>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	18d2      	adds	r2, r2, r3
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <_sbrk+0x64>)
 8002c08:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b006      	add	sp, #24
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20002000 	.word	0x20002000
 8002c18:	00000400 	.word	0x00000400
 8002c1c:	200002b0 	.word	0x200002b0
 8002c20:	20000408 	.word	0x20000408

08002c24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c28:	46c0      	nop			@ (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002c30:	480d      	ldr	r0, [pc, #52]	@ (8002c68 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002c32:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c34:	f7ff fff6 	bl	8002c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c38:	480c      	ldr	r0, [pc, #48]	@ (8002c6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002c3a:	490d      	ldr	r1, [pc, #52]	@ (8002c70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c74 <LoopForever+0xe>)
  movs r3, #0
 8002c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c40:	e002      	b.n	8002c48 <LoopCopyDataInit>

08002c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c46:	3304      	adds	r3, #4

08002c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c4c:	d3f9      	bcc.n	8002c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c50:	4c0a      	ldr	r4, [pc, #40]	@ (8002c7c <LoopForever+0x16>)
  movs r3, #0
 8002c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c54:	e001      	b.n	8002c5a <LoopFillZerobss>

08002c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c58:	3204      	adds	r2, #4

08002c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c5c:	d3fb      	bcc.n	8002c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c5e:	f002 ffed 	bl	8005c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c62:	f7ff fba5 	bl	80023b0 <main>

08002c66 <LoopForever>:

LoopForever:
    b LoopForever
 8002c66:	e7fe      	b.n	8002c66 <LoopForever>
   ldr   r0, =_estack
 8002c68:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c70:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002c74:	08006854 	.word	0x08006854
  ldr r2, =_sbss
 8002c78:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002c7c:	20000404 	.word	0x20000404

08002c80 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c80:	e7fe      	b.n	8002c80 <ADC1_COMP_IRQHandler>
	...

08002c84 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002c90:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <HAL_Init+0x3c>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc0 <HAL_Init+0x3c>)
 8002c96:	2140      	movs	r1, #64	@ 0x40
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f000 f811 	bl	8002cc4 <HAL_InitTick>
 8002ca2:	1e03      	subs	r3, r0, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002ca6:	1dfb      	adds	r3, r7, #7
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
 8002cac:	e001      	b.n	8002cb2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cae:	f7ff fe4d 	bl	800294c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cb2:	1dfb      	adds	r3, r7, #7
 8002cb4:	781b      	ldrb	r3, [r3, #0]
}
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b002      	add	sp, #8
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	40022000 	.word	0x40022000

08002cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc4:	b590      	push	{r4, r7, lr}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ccc:	4b14      	ldr	r3, [pc, #80]	@ (8002d20 <HAL_InitTick+0x5c>)
 8002cce:	681c      	ldr	r4, [r3, #0]
 8002cd0:	4b14      	ldr	r3, [pc, #80]	@ (8002d24 <HAL_InitTick+0x60>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	23fa      	movs	r3, #250	@ 0xfa
 8002cd8:	0098      	lsls	r0, r3, #2
 8002cda:	f7fd fa1f 	bl	800011c <__udivsi3>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	0019      	movs	r1, r3
 8002ce2:	0020      	movs	r0, r4
 8002ce4:	f7fd fa1a 	bl	800011c <__udivsi3>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	0018      	movs	r0, r3
 8002cec:	f000 f92f 	bl	8002f4e <HAL_SYSTICK_Config>
 8002cf0:	1e03      	subs	r3, r0, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e00f      	b.n	8002d18 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d80b      	bhi.n	8002d16 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	2301      	movs	r3, #1
 8002d02:	425b      	negs	r3, r3
 8002d04:	2200      	movs	r2, #0
 8002d06:	0018      	movs	r0, r3
 8002d08:	f000 f8fc 	bl	8002f04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_InitTick+0x64>)
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e000      	b.n	8002d18 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b003      	add	sp, #12
 8002d1e:	bd90      	pop	{r4, r7, pc}
 8002d20:	20000000 	.word	0x20000000
 8002d24:	20000008 	.word	0x20000008
 8002d28:	20000004 	.word	0x20000004

08002d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d30:	4b05      	ldr	r3, [pc, #20]	@ (8002d48 <HAL_IncTick+0x1c>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	001a      	movs	r2, r3
 8002d36:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <HAL_IncTick+0x20>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	18d2      	adds	r2, r2, r3
 8002d3c:	4b03      	ldr	r3, [pc, #12]	@ (8002d4c <HAL_IncTick+0x20>)
 8002d3e:	601a      	str	r2, [r3, #0]
}
 8002d40:	46c0      	nop			@ (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			@ (mov r8, r8)
 8002d48:	20000008 	.word	0x20000008
 8002d4c:	200002b4 	.word	0x200002b4

08002d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  return uwTick;
 8002d54:	4b02      	ldr	r3, [pc, #8]	@ (8002d60 <HAL_GetTick+0x10>)
 8002d56:	681b      	ldr	r3, [r3, #0]
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	200002b4 	.word	0x200002b4

08002d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d6c:	f7ff fff0 	bl	8002d50 <HAL_GetTick>
 8002d70:	0003      	movs	r3, r0
 8002d72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	d005      	beq.n	8002d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002da8 <HAL_Delay+0x44>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	001a      	movs	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	189b      	adds	r3, r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d8a:	46c0      	nop			@ (mov r8, r8)
 8002d8c:	f7ff ffe0 	bl	8002d50 <HAL_GetTick>
 8002d90:	0002      	movs	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d8f7      	bhi.n	8002d8c <HAL_Delay+0x28>
  {
  }
}
 8002d9c:	46c0      	nop			@ (mov r8, r8)
 8002d9e:	46c0      	nop			@ (mov r8, r8)
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b004      	add	sp, #16
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	46c0      	nop			@ (mov r8, r8)
 8002da8:	20000008 	.word	0x20000008

08002dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	0002      	movs	r2, r0
 8002db4:	1dfb      	adds	r3, r7, #7
 8002db6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002db8:	1dfb      	adds	r3, r7, #7
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dbe:	d809      	bhi.n	8002dd4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc0:	1dfb      	adds	r3, r7, #7
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	001a      	movs	r2, r3
 8002dc6:	231f      	movs	r3, #31
 8002dc8:	401a      	ands	r2, r3
 8002dca:	4b04      	ldr	r3, [pc, #16]	@ (8002ddc <__NVIC_EnableIRQ+0x30>)
 8002dcc:	2101      	movs	r1, #1
 8002dce:	4091      	lsls	r1, r2
 8002dd0:	000a      	movs	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]
  }
}
 8002dd4:	46c0      	nop			@ (mov r8, r8)
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b002      	add	sp, #8
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	e000e100 	.word	0xe000e100

08002de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	0002      	movs	r2, r0
 8002de8:	6039      	str	r1, [r7, #0]
 8002dea:	1dfb      	adds	r3, r7, #7
 8002dec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002dee:	1dfb      	adds	r3, r7, #7
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b7f      	cmp	r3, #127	@ 0x7f
 8002df4:	d828      	bhi.n	8002e48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002df6:	4a2f      	ldr	r2, [pc, #188]	@ (8002eb4 <__NVIC_SetPriority+0xd4>)
 8002df8:	1dfb      	adds	r3, r7, #7
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	b25b      	sxtb	r3, r3
 8002dfe:	089b      	lsrs	r3, r3, #2
 8002e00:	33c0      	adds	r3, #192	@ 0xc0
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	589b      	ldr	r3, [r3, r2]
 8002e06:	1dfa      	adds	r2, r7, #7
 8002e08:	7812      	ldrb	r2, [r2, #0]
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	400a      	ands	r2, r1
 8002e10:	00d2      	lsls	r2, r2, #3
 8002e12:	21ff      	movs	r1, #255	@ 0xff
 8002e14:	4091      	lsls	r1, r2
 8002e16:	000a      	movs	r2, r1
 8002e18:	43d2      	mvns	r2, r2
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	019b      	lsls	r3, r3, #6
 8002e22:	22ff      	movs	r2, #255	@ 0xff
 8002e24:	401a      	ands	r2, r3
 8002e26:	1dfb      	adds	r3, r7, #7
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	4003      	ands	r3, r0
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e34:	481f      	ldr	r0, [pc, #124]	@ (8002eb4 <__NVIC_SetPriority+0xd4>)
 8002e36:	1dfb      	adds	r3, r7, #7
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	b25b      	sxtb	r3, r3
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	33c0      	adds	r3, #192	@ 0xc0
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e46:	e031      	b.n	8002eac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e48:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb8 <__NVIC_SetPriority+0xd8>)
 8002e4a:	1dfb      	adds	r3, r7, #7
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	0019      	movs	r1, r3
 8002e50:	230f      	movs	r3, #15
 8002e52:	400b      	ands	r3, r1
 8002e54:	3b08      	subs	r3, #8
 8002e56:	089b      	lsrs	r3, r3, #2
 8002e58:	3306      	adds	r3, #6
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	18d3      	adds	r3, r2, r3
 8002e5e:	3304      	adds	r3, #4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	1dfa      	adds	r2, r7, #7
 8002e64:	7812      	ldrb	r2, [r2, #0]
 8002e66:	0011      	movs	r1, r2
 8002e68:	2203      	movs	r2, #3
 8002e6a:	400a      	ands	r2, r1
 8002e6c:	00d2      	lsls	r2, r2, #3
 8002e6e:	21ff      	movs	r1, #255	@ 0xff
 8002e70:	4091      	lsls	r1, r2
 8002e72:	000a      	movs	r2, r1
 8002e74:	43d2      	mvns	r2, r2
 8002e76:	401a      	ands	r2, r3
 8002e78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	019b      	lsls	r3, r3, #6
 8002e7e:	22ff      	movs	r2, #255	@ 0xff
 8002e80:	401a      	ands	r2, r3
 8002e82:	1dfb      	adds	r3, r7, #7
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	0018      	movs	r0, r3
 8002e88:	2303      	movs	r3, #3
 8002e8a:	4003      	ands	r3, r0
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e90:	4809      	ldr	r0, [pc, #36]	@ (8002eb8 <__NVIC_SetPriority+0xd8>)
 8002e92:	1dfb      	adds	r3, r7, #7
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	001c      	movs	r4, r3
 8002e98:	230f      	movs	r3, #15
 8002e9a:	4023      	ands	r3, r4
 8002e9c:	3b08      	subs	r3, #8
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	3306      	adds	r3, #6
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	18c3      	adds	r3, r0, r3
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	601a      	str	r2, [r3, #0]
}
 8002eac:	46c0      	nop			@ (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b003      	add	sp, #12
 8002eb2:	bd90      	pop	{r4, r7, pc}
 8002eb4:	e000e100 	.word	0xe000e100
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	1e5a      	subs	r2, r3, #1
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	045b      	lsls	r3, r3, #17
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d301      	bcc.n	8002ed4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e010      	b.n	8002ef6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <SysTick_Config+0x44>)
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	3a01      	subs	r2, #1
 8002eda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002edc:	2301      	movs	r3, #1
 8002ede:	425b      	negs	r3, r3
 8002ee0:	2103      	movs	r1, #3
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f7ff ff7c 	bl	8002de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee8:	4b05      	ldr	r3, [pc, #20]	@ (8002f00 <SysTick_Config+0x44>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eee:	4b04      	ldr	r3, [pc, #16]	@ (8002f00 <SysTick_Config+0x44>)
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b002      	add	sp, #8
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			@ (mov r8, r8)
 8002f00:	e000e010 	.word	0xe000e010

08002f04 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	210f      	movs	r1, #15
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	1c02      	adds	r2, r0, #0
 8002f14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	b25b      	sxtb	r3, r3
 8002f1e:	0011      	movs	r1, r2
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7ff ff5d 	bl	8002de0 <__NVIC_SetPriority>
}
 8002f26:	46c0      	nop			@ (mov r8, r8)
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b004      	add	sp, #16
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	0002      	movs	r2, r0
 8002f36:	1dfb      	adds	r3, r7, #7
 8002f38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f3a:	1dfb      	adds	r3, r7, #7
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	b25b      	sxtb	r3, r3
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7ff ff33 	bl	8002dac <__NVIC_EnableIRQ>
}
 8002f46:	46c0      	nop			@ (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b002      	add	sp, #8
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f7ff ffaf 	bl	8002ebc <SysTick_Config>
 8002f5e:	0003      	movs	r3, r0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b002      	add	sp, #8
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f7e:	e149      	b.n	8003214 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2101      	movs	r1, #1
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4091      	lsls	r1, r2
 8002f8a:	000a      	movs	r2, r1
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d100      	bne.n	8002f98 <HAL_GPIO_Init+0x30>
 8002f96:	e13a      	b.n	800320e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d005      	beq.n	8002fb0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2203      	movs	r2, #3
 8002faa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d130      	bne.n	8003012 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	0013      	movs	r3, r2
 8002fc0:	43da      	mvns	r2, r3
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	409a      	lsls	r2, r3
 8002fd2:	0013      	movs	r3, r2
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	409a      	lsls	r2, r3
 8002fec:	0013      	movs	r3, r2
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	091b      	lsrs	r3, r3, #4
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	401a      	ands	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	409a      	lsls	r2, r3
 8003004:	0013      	movs	r3, r2
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2203      	movs	r2, #3
 8003018:	4013      	ands	r3, r2
 800301a:	2b03      	cmp	r3, #3
 800301c:	d017      	beq.n	800304e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	2203      	movs	r2, #3
 800302a:	409a      	lsls	r2, r3
 800302c:	0013      	movs	r3, r2
 800302e:	43da      	mvns	r2, r3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	409a      	lsls	r2, r3
 8003040:	0013      	movs	r3, r2
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2203      	movs	r2, #3
 8003054:	4013      	ands	r3, r2
 8003056:	2b02      	cmp	r3, #2
 8003058:	d123      	bne.n	80030a2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	08da      	lsrs	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3208      	adds	r2, #8
 8003062:	0092      	lsls	r2, r2, #2
 8003064:	58d3      	ldr	r3, [r2, r3]
 8003066:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2207      	movs	r2, #7
 800306c:	4013      	ands	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	220f      	movs	r2, #15
 8003072:	409a      	lsls	r2, r3
 8003074:	0013      	movs	r3, r2
 8003076:	43da      	mvns	r2, r3
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4013      	ands	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2107      	movs	r1, #7
 8003086:	400b      	ands	r3, r1
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	409a      	lsls	r2, r3
 800308c:	0013      	movs	r3, r2
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	08da      	lsrs	r2, r3, #3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3208      	adds	r2, #8
 800309c:	0092      	lsls	r2, r2, #2
 800309e:	6939      	ldr	r1, [r7, #16]
 80030a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	2203      	movs	r2, #3
 80030ae:	409a      	lsls	r2, r3
 80030b0:	0013      	movs	r3, r2
 80030b2:	43da      	mvns	r2, r3
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2203      	movs	r2, #3
 80030c0:	401a      	ands	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	409a      	lsls	r2, r3
 80030c8:	0013      	movs	r3, r2
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	23c0      	movs	r3, #192	@ 0xc0
 80030dc:	029b      	lsls	r3, r3, #10
 80030de:	4013      	ands	r3, r2
 80030e0:	d100      	bne.n	80030e4 <HAL_GPIO_Init+0x17c>
 80030e2:	e094      	b.n	800320e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e4:	4b51      	ldr	r3, [pc, #324]	@ (800322c <HAL_GPIO_Init+0x2c4>)
 80030e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030e8:	4b50      	ldr	r3, [pc, #320]	@ (800322c <HAL_GPIO_Init+0x2c4>)
 80030ea:	2101      	movs	r1, #1
 80030ec:	430a      	orrs	r2, r1
 80030ee:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f0:	4a4f      	ldr	r2, [pc, #316]	@ (8003230 <HAL_GPIO_Init+0x2c8>)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	3302      	adds	r3, #2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	589b      	ldr	r3, [r3, r2]
 80030fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2203      	movs	r2, #3
 8003102:	4013      	ands	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220f      	movs	r2, #15
 8003108:	409a      	lsls	r2, r3
 800310a:	0013      	movs	r3, r2
 800310c:	43da      	mvns	r2, r3
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	23a0      	movs	r3, #160	@ 0xa0
 8003118:	05db      	lsls	r3, r3, #23
 800311a:	429a      	cmp	r2, r3
 800311c:	d013      	beq.n	8003146 <HAL_GPIO_Init+0x1de>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a44      	ldr	r2, [pc, #272]	@ (8003234 <HAL_GPIO_Init+0x2cc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00d      	beq.n	8003142 <HAL_GPIO_Init+0x1da>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a43      	ldr	r2, [pc, #268]	@ (8003238 <HAL_GPIO_Init+0x2d0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <HAL_GPIO_Init+0x1d6>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a42      	ldr	r2, [pc, #264]	@ (800323c <HAL_GPIO_Init+0x2d4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_GPIO_Init+0x1d2>
 8003136:	2305      	movs	r3, #5
 8003138:	e006      	b.n	8003148 <HAL_GPIO_Init+0x1e0>
 800313a:	2306      	movs	r3, #6
 800313c:	e004      	b.n	8003148 <HAL_GPIO_Init+0x1e0>
 800313e:	2302      	movs	r3, #2
 8003140:	e002      	b.n	8003148 <HAL_GPIO_Init+0x1e0>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_GPIO_Init+0x1e0>
 8003146:	2300      	movs	r3, #0
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	2103      	movs	r1, #3
 800314c:	400a      	ands	r2, r1
 800314e:	0092      	lsls	r2, r2, #2
 8003150:	4093      	lsls	r3, r2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003158:	4935      	ldr	r1, [pc, #212]	@ (8003230 <HAL_GPIO_Init+0x2c8>)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	3302      	adds	r3, #2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003166:	4b36      	ldr	r3, [pc, #216]	@ (8003240 <HAL_GPIO_Init+0x2d8>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	43da      	mvns	r2, r3
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4013      	ands	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	2380      	movs	r3, #128	@ 0x80
 800317c:	035b      	lsls	r3, r3, #13
 800317e:	4013      	ands	r3, r2
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800318a:	4b2d      	ldr	r3, [pc, #180]	@ (8003240 <HAL_GPIO_Init+0x2d8>)
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003190:	4b2b      	ldr	r3, [pc, #172]	@ (8003240 <HAL_GPIO_Init+0x2d8>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	43da      	mvns	r2, r3
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	2380      	movs	r3, #128	@ 0x80
 80031a6:	039b      	lsls	r3, r3, #14
 80031a8:	4013      	ands	r3, r2
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031b4:	4b22      	ldr	r3, [pc, #136]	@ (8003240 <HAL_GPIO_Init+0x2d8>)
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80031ba:	4b21      	ldr	r3, [pc, #132]	@ (8003240 <HAL_GPIO_Init+0x2d8>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	43da      	mvns	r2, r3
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	2380      	movs	r3, #128	@ 0x80
 80031d0:	029b      	lsls	r3, r3, #10
 80031d2:	4013      	ands	r3, r2
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031de:	4b18      	ldr	r3, [pc, #96]	@ (8003240 <HAL_GPIO_Init+0x2d8>)
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031e4:	4b16      	ldr	r3, [pc, #88]	@ (8003240 <HAL_GPIO_Init+0x2d8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	43da      	mvns	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4013      	ands	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	2380      	movs	r3, #128	@ 0x80
 80031fa:	025b      	lsls	r3, r3, #9
 80031fc:	4013      	ands	r3, r2
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003208:	4b0d      	ldr	r3, [pc, #52]	@ (8003240 <HAL_GPIO_Init+0x2d8>)
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	3301      	adds	r3, #1
 8003212:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	40da      	lsrs	r2, r3
 800321c:	1e13      	subs	r3, r2, #0
 800321e:	d000      	beq.n	8003222 <HAL_GPIO_Init+0x2ba>
 8003220:	e6ae      	b.n	8002f80 <HAL_GPIO_Init+0x18>
  }
}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	46c0      	nop			@ (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	b006      	add	sp, #24
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40021000 	.word	0x40021000
 8003230:	40010000 	.word	0x40010000
 8003234:	50000400 	.word	0x50000400
 8003238:	50000800 	.word	0x50000800
 800323c:	50001c00 	.word	0x50001c00
 8003240:	40010400 	.word	0x40010400

08003244 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	000a      	movs	r2, r1
 800324e:	1cbb      	adds	r3, r7, #2
 8003250:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	1cba      	adds	r2, r7, #2
 8003258:	8812      	ldrh	r2, [r2, #0]
 800325a:	4013      	ands	r3, r2
 800325c:	d004      	beq.n	8003268 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800325e:	230f      	movs	r3, #15
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e003      	b.n	8003270 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003268:	230f      	movs	r3, #15
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003270:	230f      	movs	r3, #15
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	781b      	ldrb	r3, [r3, #0]
}
 8003276:	0018      	movs	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	b004      	add	sp, #16
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	0008      	movs	r0, r1
 8003288:	0011      	movs	r1, r2
 800328a:	1cbb      	adds	r3, r7, #2
 800328c:	1c02      	adds	r2, r0, #0
 800328e:	801a      	strh	r2, [r3, #0]
 8003290:	1c7b      	adds	r3, r7, #1
 8003292:	1c0a      	adds	r2, r1, #0
 8003294:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003296:	1c7b      	adds	r3, r7, #1
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d004      	beq.n	80032a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800329e:	1cbb      	adds	r3, r7, #2
 80032a0:	881a      	ldrh	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80032a6:	e003      	b.n	80032b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80032a8:	1cbb      	adds	r3, r7, #2
 80032aa:	881a      	ldrh	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032b0:	46c0      	nop			@ (mov r8, r8)
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b002      	add	sp, #8
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	0002      	movs	r2, r0
 80032c0:	1dbb      	adds	r3, r7, #6
 80032c2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032c4:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	1dba      	adds	r2, r7, #6
 80032ca:	8812      	ldrh	r2, [r2, #0]
 80032cc:	4013      	ands	r3, r2
 80032ce:	d008      	beq.n	80032e2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032d0:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80032d2:	1dba      	adds	r2, r7, #6
 80032d4:	8812      	ldrh	r2, [r2, #0]
 80032d6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032d8:	1dbb      	adds	r3, r7, #6
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	0018      	movs	r0, r3
 80032de:	f000 f807 	bl	80032f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b002      	add	sp, #8
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	46c0      	nop			@ (mov r8, r8)
 80032ec:	40010400 	.word	0x40010400

080032f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	0002      	movs	r2, r0
 80032f8:	1dbb      	adds	r3, r7, #6
 80032fa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032fc:	46c0      	nop			@ (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e082      	b.n	800341c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2241      	movs	r2, #65	@ 0x41
 800331a:	5c9b      	ldrb	r3, [r3, r2]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d107      	bne.n	8003332 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2240      	movs	r2, #64	@ 0x40
 8003326:	2100      	movs	r1, #0
 8003328:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	0018      	movs	r0, r3
 800332e:	f7ff fb21 	bl	8002974 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2241      	movs	r2, #65	@ 0x41
 8003336:	2124      	movs	r1, #36	@ 0x24
 8003338:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2101      	movs	r1, #1
 8003346:	438a      	bics	r2, r1
 8003348:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4934      	ldr	r1, [pc, #208]	@ (8003424 <HAL_I2C_Init+0x120>)
 8003354:	400a      	ands	r2, r1
 8003356:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4931      	ldr	r1, [pc, #196]	@ (8003428 <HAL_I2C_Init+0x124>)
 8003364:	400a      	ands	r2, r1
 8003366:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d108      	bne.n	8003382 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2180      	movs	r1, #128	@ 0x80
 800337a:	0209      	lsls	r1, r1, #8
 800337c:	430a      	orrs	r2, r1
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	e007      	b.n	8003392 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2184      	movs	r1, #132	@ 0x84
 800338c:	0209      	lsls	r1, r1, #8
 800338e:	430a      	orrs	r2, r1
 8003390:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d104      	bne.n	80033a4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2280      	movs	r2, #128	@ 0x80
 80033a0:	0112      	lsls	r2, r2, #4
 80033a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	491f      	ldr	r1, [pc, #124]	@ (800342c <HAL_I2C_Init+0x128>)
 80033b0:	430a      	orrs	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	491a      	ldr	r1, [pc, #104]	@ (8003428 <HAL_I2C_Init+0x124>)
 80033c0:	400a      	ands	r2, r1
 80033c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	431a      	orrs	r2, r3
 80033ce:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69d9      	ldr	r1, [r3, #28]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1a      	ldr	r2, [r3, #32]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	430a      	orrs	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2241      	movs	r2, #65	@ 0x41
 8003408:	2120      	movs	r1, #32
 800340a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2242      	movs	r2, #66	@ 0x42
 8003416:	2100      	movs	r1, #0
 8003418:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b002      	add	sp, #8
 8003422:	bd80      	pop	{r7, pc}
 8003424:	f0ffffff 	.word	0xf0ffffff
 8003428:	ffff7fff 	.word	0xffff7fff
 800342c:	02008000 	.word	0x02008000

08003430 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b089      	sub	sp, #36	@ 0x24
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	0008      	movs	r0, r1
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	0019      	movs	r1, r3
 800343e:	230a      	movs	r3, #10
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	1c02      	adds	r2, r0, #0
 8003444:	801a      	strh	r2, [r3, #0]
 8003446:	2308      	movs	r3, #8
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	1c0a      	adds	r2, r1, #0
 800344c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2241      	movs	r2, #65	@ 0x41
 8003452:	5c9b      	ldrb	r3, [r3, r2]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b20      	cmp	r3, #32
 8003458:	d000      	beq.n	800345c <HAL_I2C_Master_Transmit+0x2c>
 800345a:	e0e7      	b.n	800362c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2240      	movs	r2, #64	@ 0x40
 8003460:	5c9b      	ldrb	r3, [r3, r2]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_I2C_Master_Transmit+0x3a>
 8003466:	2302      	movs	r3, #2
 8003468:	e0e1      	b.n	800362e <HAL_I2C_Master_Transmit+0x1fe>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2240      	movs	r2, #64	@ 0x40
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003472:	f7ff fc6d 	bl	8002d50 <HAL_GetTick>
 8003476:	0003      	movs	r3, r0
 8003478:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800347a:	2380      	movs	r3, #128	@ 0x80
 800347c:	0219      	lsls	r1, r3, #8
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	2319      	movs	r3, #25
 8003486:	2201      	movs	r2, #1
 8003488:	f000 fa04 	bl	8003894 <I2C_WaitOnFlagUntilTimeout>
 800348c:	1e03      	subs	r3, r0, #0
 800348e:	d001      	beq.n	8003494 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0cc      	b.n	800362e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2241      	movs	r2, #65	@ 0x41
 8003498:	2121      	movs	r1, #33	@ 0x21
 800349a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2242      	movs	r2, #66	@ 0x42
 80034a0:	2110      	movs	r1, #16
 80034a2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2208      	movs	r2, #8
 80034b4:	18ba      	adds	r2, r7, r2
 80034b6:	8812      	ldrh	r2, [r2, #0]
 80034b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2bff      	cmp	r3, #255	@ 0xff
 80034c8:	d911      	bls.n	80034ee <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	22ff      	movs	r2, #255	@ 0xff
 80034ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	2380      	movs	r3, #128	@ 0x80
 80034d8:	045c      	lsls	r4, r3, #17
 80034da:	230a      	movs	r3, #10
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	8819      	ldrh	r1, [r3, #0]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	4b55      	ldr	r3, [pc, #340]	@ (8003638 <HAL_I2C_Master_Transmit+0x208>)
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	0023      	movs	r3, r4
 80034e8:	f000 fc26 	bl	8003d38 <I2C_TransferConfig>
 80034ec:	e075      	b.n	80035da <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	2380      	movs	r3, #128	@ 0x80
 8003500:	049c      	lsls	r4, r3, #18
 8003502:	230a      	movs	r3, #10
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	8819      	ldrh	r1, [r3, #0]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	4b4b      	ldr	r3, [pc, #300]	@ (8003638 <HAL_I2C_Master_Transmit+0x208>)
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	0023      	movs	r3, r4
 8003510:	f000 fc12 	bl	8003d38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003514:	e061      	b.n	80035da <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	0018      	movs	r0, r3
 800351e:	f000 fa07 	bl	8003930 <I2C_WaitOnTXISFlagUntilTimeout>
 8003522:	1e03      	subs	r3, r0, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e081      	b.n	800362e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	781a      	ldrb	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d03a      	beq.n	80035da <HAL_I2C_Master_Transmit+0x1aa>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003568:	2b00      	cmp	r3, #0
 800356a:	d136      	bne.n	80035da <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800356c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	0013      	movs	r3, r2
 8003576:	2200      	movs	r2, #0
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	f000 f98b 	bl	8003894 <I2C_WaitOnFlagUntilTimeout>
 800357e:	1e03      	subs	r3, r0, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e053      	b.n	800362e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	2bff      	cmp	r3, #255	@ 0xff
 800358e:	d911      	bls.n	80035b4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	22ff      	movs	r2, #255	@ 0xff
 8003594:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359a:	b2da      	uxtb	r2, r3
 800359c:	2380      	movs	r3, #128	@ 0x80
 800359e:	045c      	lsls	r4, r3, #17
 80035a0:	230a      	movs	r3, #10
 80035a2:	18fb      	adds	r3, r7, r3
 80035a4:	8819      	ldrh	r1, [r3, #0]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	2300      	movs	r3, #0
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	0023      	movs	r3, r4
 80035ae:	f000 fbc3 	bl	8003d38 <I2C_TransferConfig>
 80035b2:	e012      	b.n	80035da <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	2380      	movs	r3, #128	@ 0x80
 80035c6:	049c      	lsls	r4, r3, #18
 80035c8:	230a      	movs	r3, #10
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	8819      	ldrh	r1, [r3, #0]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	2300      	movs	r3, #0
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	0023      	movs	r3, r4
 80035d6:	f000 fbaf 	bl	8003d38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d198      	bne.n	8003516 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 f9e6 	bl	80039bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80035f0:	1e03      	subs	r3, r0, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e01a      	b.n	800362e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2220      	movs	r2, #32
 80035fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	490c      	ldr	r1, [pc, #48]	@ (800363c <HAL_I2C_Master_Transmit+0x20c>)
 800360c:	400a      	ands	r2, r1
 800360e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2241      	movs	r2, #65	@ 0x41
 8003614:	2120      	movs	r1, #32
 8003616:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2242      	movs	r2, #66	@ 0x42
 800361c:	2100      	movs	r1, #0
 800361e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2240      	movs	r2, #64	@ 0x40
 8003624:	2100      	movs	r1, #0
 8003626:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	e000      	b.n	800362e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800362c:	2302      	movs	r3, #2
  }
}
 800362e:	0018      	movs	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	b007      	add	sp, #28
 8003634:	bd90      	pop	{r4, r7, pc}
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	80002000 	.word	0x80002000
 800363c:	fe00e800 	.word	0xfe00e800

08003640 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b089      	sub	sp, #36	@ 0x24
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	0008      	movs	r0, r1
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	0019      	movs	r1, r3
 800364e:	230a      	movs	r3, #10
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	1c02      	adds	r2, r0, #0
 8003654:	801a      	strh	r2, [r3, #0]
 8003656:	2308      	movs	r3, #8
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	1c0a      	adds	r2, r1, #0
 800365c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2241      	movs	r2, #65	@ 0x41
 8003662:	5c9b      	ldrb	r3, [r3, r2]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b20      	cmp	r3, #32
 8003668:	d000      	beq.n	800366c <HAL_I2C_Master_Receive+0x2c>
 800366a:	e0e8      	b.n	800383e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2240      	movs	r2, #64	@ 0x40
 8003670:	5c9b      	ldrb	r3, [r3, r2]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_I2C_Master_Receive+0x3a>
 8003676:	2302      	movs	r3, #2
 8003678:	e0e2      	b.n	8003840 <HAL_I2C_Master_Receive+0x200>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2240      	movs	r2, #64	@ 0x40
 800367e:	2101      	movs	r1, #1
 8003680:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003682:	f7ff fb65 	bl	8002d50 <HAL_GetTick>
 8003686:	0003      	movs	r3, r0
 8003688:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800368a:	2380      	movs	r3, #128	@ 0x80
 800368c:	0219      	lsls	r1, r3, #8
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2319      	movs	r3, #25
 8003696:	2201      	movs	r2, #1
 8003698:	f000 f8fc 	bl	8003894 <I2C_WaitOnFlagUntilTimeout>
 800369c:	1e03      	subs	r3, r0, #0
 800369e:	d001      	beq.n	80036a4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0cd      	b.n	8003840 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2241      	movs	r2, #65	@ 0x41
 80036a8:	2122      	movs	r1, #34	@ 0x22
 80036aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2242      	movs	r2, #66	@ 0x42
 80036b0:	2110      	movs	r1, #16
 80036b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2208      	movs	r2, #8
 80036c4:	18ba      	adds	r2, r7, r2
 80036c6:	8812      	ldrh	r2, [r2, #0]
 80036c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2bff      	cmp	r3, #255	@ 0xff
 80036d8:	d911      	bls.n	80036fe <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	22ff      	movs	r2, #255	@ 0xff
 80036de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	2380      	movs	r3, #128	@ 0x80
 80036e8:	045c      	lsls	r4, r3, #17
 80036ea:	230a      	movs	r3, #10
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	8819      	ldrh	r1, [r3, #0]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	4b55      	ldr	r3, [pc, #340]	@ (8003848 <HAL_I2C_Master_Receive+0x208>)
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	0023      	movs	r3, r4
 80036f8:	f000 fb1e 	bl	8003d38 <I2C_TransferConfig>
 80036fc:	e076      	b.n	80037ec <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370c:	b2da      	uxtb	r2, r3
 800370e:	2380      	movs	r3, #128	@ 0x80
 8003710:	049c      	lsls	r4, r3, #18
 8003712:	230a      	movs	r3, #10
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	8819      	ldrh	r1, [r3, #0]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	4b4b      	ldr	r3, [pc, #300]	@ (8003848 <HAL_I2C_Master_Receive+0x208>)
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	0023      	movs	r3, r4
 8003720:	f000 fb0a 	bl	8003d38 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003724:	e062      	b.n	80037ec <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	0018      	movs	r0, r3
 800372e:	f000 f989 	bl	8003a44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003732:	1e03      	subs	r3, r0, #0
 8003734:	d001      	beq.n	800373a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e082      	b.n	8003840 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d03a      	beq.n	80037ec <HAL_I2C_Master_Receive+0x1ac>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377a:	2b00      	cmp	r3, #0
 800377c:	d136      	bne.n	80037ec <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800377e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	0013      	movs	r3, r2
 8003788:	2200      	movs	r2, #0
 800378a:	2180      	movs	r1, #128	@ 0x80
 800378c:	f000 f882 	bl	8003894 <I2C_WaitOnFlagUntilTimeout>
 8003790:	1e03      	subs	r3, r0, #0
 8003792:	d001      	beq.n	8003798 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e053      	b.n	8003840 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	2bff      	cmp	r3, #255	@ 0xff
 80037a0:	d911      	bls.n	80037c6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	22ff      	movs	r2, #255	@ 0xff
 80037a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	2380      	movs	r3, #128	@ 0x80
 80037b0:	045c      	lsls	r4, r3, #17
 80037b2:	230a      	movs	r3, #10
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	8819      	ldrh	r1, [r3, #0]
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	2300      	movs	r3, #0
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	0023      	movs	r3, r4
 80037c0:	f000 faba 	bl	8003d38 <I2C_TransferConfig>
 80037c4:	e012      	b.n	80037ec <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	2380      	movs	r3, #128	@ 0x80
 80037d8:	049c      	lsls	r4, r3, #18
 80037da:	230a      	movs	r3, #10
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	8819      	ldrh	r1, [r3, #0]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	2300      	movs	r3, #0
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	0023      	movs	r3, r4
 80037e8:	f000 faa6 	bl	8003d38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d197      	bne.n	8003726 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 f8dd 	bl	80039bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003802:	1e03      	subs	r3, r0, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e01a      	b.n	8003840 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2220      	movs	r2, #32
 8003810:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	490b      	ldr	r1, [pc, #44]	@ (800384c <HAL_I2C_Master_Receive+0x20c>)
 800381e:	400a      	ands	r2, r1
 8003820:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2241      	movs	r2, #65	@ 0x41
 8003826:	2120      	movs	r1, #32
 8003828:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2242      	movs	r2, #66	@ 0x42
 800382e:	2100      	movs	r1, #0
 8003830:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2240      	movs	r2, #64	@ 0x40
 8003836:	2100      	movs	r1, #0
 8003838:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b007      	add	sp, #28
 8003846:	bd90      	pop	{r4, r7, pc}
 8003848:	80002400 	.word	0x80002400
 800384c:	fe00e800 	.word	0xfe00e800

08003850 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2202      	movs	r2, #2
 8003860:	4013      	ands	r3, r2
 8003862:	2b02      	cmp	r3, #2
 8003864:	d103      	bne.n	800386e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2200      	movs	r2, #0
 800386c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	2201      	movs	r2, #1
 8003876:	4013      	ands	r3, r2
 8003878:	2b01      	cmp	r3, #1
 800387a:	d007      	beq.n	800388c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2101      	movs	r1, #1
 8003888:	430a      	orrs	r2, r1
 800388a:	619a      	str	r2, [r3, #24]
  }
}
 800388c:	46c0      	nop			@ (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	b002      	add	sp, #8
 8003892:	bd80      	pop	{r7, pc}

08003894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038a4:	e030      	b.n	8003908 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	d02d      	beq.n	8003908 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ac:	f7ff fa50 	bl	8002d50 <HAL_GetTick>
 80038b0:	0002      	movs	r2, r0
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d302      	bcc.n	80038c2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d122      	bne.n	8003908 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	425a      	negs	r2, r3
 80038d2:	4153      	adcs	r3, r2
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	001a      	movs	r2, r3
 80038d8:	1dfb      	adds	r3, r7, #7
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d113      	bne.n	8003908 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e4:	2220      	movs	r2, #32
 80038e6:	431a      	orrs	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2241      	movs	r2, #65	@ 0x41
 80038f0:	2120      	movs	r1, #32
 80038f2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2242      	movs	r2, #66	@ 0x42
 80038f8:	2100      	movs	r1, #0
 80038fa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2240      	movs	r2, #64	@ 0x40
 8003900:	2100      	movs	r1, #0
 8003902:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e00f      	b.n	8003928 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	4013      	ands	r3, r2
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	425a      	negs	r2, r3
 8003918:	4153      	adcs	r3, r2
 800391a:	b2db      	uxtb	r3, r3
 800391c:	001a      	movs	r2, r3
 800391e:	1dfb      	adds	r3, r7, #7
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d0bf      	beq.n	80038a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	0018      	movs	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	b004      	add	sp, #16
 800392e:	bd80      	pop	{r7, pc}

08003930 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800393c:	e032      	b.n	80039a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	0018      	movs	r0, r3
 8003946:	f000 f8ff 	bl	8003b48 <I2C_IsErrorOccurred>
 800394a:	1e03      	subs	r3, r0, #0
 800394c:	d001      	beq.n	8003952 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e030      	b.n	80039b4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	3301      	adds	r3, #1
 8003956:	d025      	beq.n	80039a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003958:	f7ff f9fa 	bl	8002d50 <HAL_GetTick>
 800395c:	0002      	movs	r2, r0
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	429a      	cmp	r2, r3
 8003966:	d302      	bcc.n	800396e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d11a      	bne.n	80039a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2202      	movs	r2, #2
 8003976:	4013      	ands	r3, r2
 8003978:	2b02      	cmp	r3, #2
 800397a:	d013      	beq.n	80039a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003980:	2220      	movs	r2, #32
 8003982:	431a      	orrs	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2241      	movs	r2, #65	@ 0x41
 800398c:	2120      	movs	r1, #32
 800398e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2242      	movs	r2, #66	@ 0x42
 8003994:	2100      	movs	r1, #0
 8003996:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2240      	movs	r2, #64	@ 0x40
 800399c:	2100      	movs	r1, #0
 800399e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e007      	b.n	80039b4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2202      	movs	r2, #2
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d1c5      	bne.n	800393e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	0018      	movs	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b004      	add	sp, #16
 80039ba:	bd80      	pop	{r7, pc}

080039bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039c8:	e02f      	b.n	8003a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f000 f8b9 	bl	8003b48 <I2C_IsErrorOccurred>
 80039d6:	1e03      	subs	r3, r0, #0
 80039d8:	d001      	beq.n	80039de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e02d      	b.n	8003a3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039de:	f7ff f9b7 	bl	8002d50 <HAL_GetTick>
 80039e2:	0002      	movs	r2, r0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d302      	bcc.n	80039f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d11a      	bne.n	8003a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2220      	movs	r2, #32
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d013      	beq.n	8003a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	2220      	movs	r2, #32
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2241      	movs	r2, #65	@ 0x41
 8003a12:	2120      	movs	r1, #32
 8003a14:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2242      	movs	r2, #66	@ 0x42
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2240      	movs	r2, #64	@ 0x40
 8003a22:	2100      	movs	r1, #0
 8003a24:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e007      	b.n	8003a3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2220      	movs	r2, #32
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d1c8      	bne.n	80039ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b004      	add	sp, #16
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a50:	e06b      	b.n	8003b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f000 f875 	bl	8003b48 <I2C_IsErrorOccurred>
 8003a5e:	1e03      	subs	r3, r0, #0
 8003a60:	d001      	beq.n	8003a66 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e069      	b.n	8003b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d138      	bne.n	8003ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d105      	bne.n	8003a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e055      	b.n	8003b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2210      	movs	r2, #16
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b10      	cmp	r3, #16
 8003a9a:	d107      	bne.n	8003aac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2210      	movs	r2, #16
 8003aa2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	645a      	str	r2, [r3, #68]	@ 0x44
 8003aaa:	e002      	b.n	8003ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	491f      	ldr	r1, [pc, #124]	@ (8003b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003ac6:	400a      	ands	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2241      	movs	r2, #65	@ 0x41
 8003ace:	2120      	movs	r1, #32
 8003ad0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2242      	movs	r2, #66	@ 0x42
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2240      	movs	r2, #64	@ 0x40
 8003ade:	2100      	movs	r1, #0
 8003ae0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e029      	b.n	8003b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae6:	f7ff f933 	bl	8002d50 <HAL_GetTick>
 8003aea:	0002      	movs	r2, r0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d302      	bcc.n	8003afc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d116      	bne.n	8003b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2204      	movs	r2, #4
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d00f      	beq.n	8003b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	2220      	movs	r2, #32
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2241      	movs	r2, #65	@ 0x41
 8003b1a:	2120      	movs	r1, #32
 8003b1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2240      	movs	r2, #64	@ 0x40
 8003b22:	2100      	movs	r1, #0
 8003b24:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e007      	b.n	8003b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	2204      	movs	r2, #4
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d18c      	bne.n	8003a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b004      	add	sp, #16
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	fe00e800 	.word	0xfe00e800

08003b48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08a      	sub	sp, #40	@ 0x28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b54:	2327      	movs	r3, #39	@ 0x27
 8003b56:	18fb      	adds	r3, r7, r3
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	2210      	movs	r2, #16
 8003b70:	4013      	ands	r3, r2
 8003b72:	d100      	bne.n	8003b76 <I2C_IsErrorOccurred+0x2e>
 8003b74:	e079      	b.n	8003c6a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2210      	movs	r2, #16
 8003b7c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b7e:	e057      	b.n	8003c30 <I2C_IsErrorOccurred+0xe8>
 8003b80:	2227      	movs	r2, #39	@ 0x27
 8003b82:	18bb      	adds	r3, r7, r2
 8003b84:	18ba      	adds	r2, r7, r2
 8003b86:	7812      	ldrb	r2, [r2, #0]
 8003b88:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	d04f      	beq.n	8003c30 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b90:	f7ff f8de 	bl	8002d50 <HAL_GetTick>
 8003b94:	0002      	movs	r2, r0
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d302      	bcc.n	8003ba6 <I2C_IsErrorOccurred+0x5e>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d144      	bne.n	8003c30 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	2380      	movs	r3, #128	@ 0x80
 8003bae:	01db      	lsls	r3, r3, #7
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003bb4:	2013      	movs	r0, #19
 8003bb6:	183b      	adds	r3, r7, r0
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	2142      	movs	r1, #66	@ 0x42
 8003bbc:	5c52      	ldrb	r2, [r2, r1]
 8003bbe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	2380      	movs	r3, #128	@ 0x80
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	401a      	ands	r2, r3
 8003bcc:	2380      	movs	r3, #128	@ 0x80
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d126      	bne.n	8003c22 <I2C_IsErrorOccurred+0xda>
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	2380      	movs	r3, #128	@ 0x80
 8003bd8:	01db      	lsls	r3, r3, #7
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d021      	beq.n	8003c22 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003bde:	183b      	adds	r3, r7, r0
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	d01d      	beq.n	8003c22 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2180      	movs	r1, #128	@ 0x80
 8003bf2:	01c9      	lsls	r1, r1, #7
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003bf8:	f7ff f8aa 	bl	8002d50 <HAL_GetTick>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c00:	e00f      	b.n	8003c22 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c02:	f7ff f8a5 	bl	8002d50 <HAL_GetTick>
 8003c06:	0002      	movs	r2, r0
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b19      	cmp	r3, #25
 8003c0e:	d908      	bls.n	8003c22 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	2220      	movs	r2, #32
 8003c14:	4313      	orrs	r3, r2
 8003c16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c18:	2327      	movs	r3, #39	@ 0x27
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]

              break;
 8003c20:	e006      	b.n	8003c30 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d1e8      	bne.n	8003c02 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2220      	movs	r2, #32
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	d004      	beq.n	8003c48 <I2C_IsErrorOccurred+0x100>
 8003c3e:	2327      	movs	r3, #39	@ 0x27
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d09b      	beq.n	8003b80 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c48:	2327      	movs	r3, #39	@ 0x27
 8003c4a:	18fb      	adds	r3, r7, r3
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2220      	movs	r2, #32
 8003c58:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c62:	2327      	movs	r3, #39	@ 0x27
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	2201      	movs	r2, #1
 8003c68:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	2380      	movs	r3, #128	@ 0x80
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d00c      	beq.n	8003c96 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	4313      	orrs	r3, r2
 8003c82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2280      	movs	r2, #128	@ 0x80
 8003c8a:	0052      	lsls	r2, r2, #1
 8003c8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c8e:	2327      	movs	r3, #39	@ 0x27
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	2201      	movs	r2, #1
 8003c94:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	2380      	movs	r3, #128	@ 0x80
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d00c      	beq.n	8003cba <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	2208      	movs	r2, #8
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2280      	movs	r2, #128	@ 0x80
 8003cae:	00d2      	lsls	r2, r2, #3
 8003cb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cb2:	2327      	movs	r3, #39	@ 0x27
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	2380      	movs	r3, #128	@ 0x80
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d00c      	beq.n	8003cde <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2280      	movs	r2, #128	@ 0x80
 8003cd2:	0092      	lsls	r2, r2, #2
 8003cd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cd6:	2327      	movs	r3, #39	@ 0x27
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	2201      	movs	r2, #1
 8003cdc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003cde:	2327      	movs	r3, #39	@ 0x27
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01d      	beq.n	8003d24 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	0018      	movs	r0, r3
 8003cec:	f7ff fdb0 	bl	8003850 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	490e      	ldr	r1, [pc, #56]	@ (8003d34 <I2C_IsErrorOccurred+0x1ec>)
 8003cfc:	400a      	ands	r2, r1
 8003cfe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2241      	movs	r2, #65	@ 0x41
 8003d10:	2120      	movs	r1, #32
 8003d12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2242      	movs	r2, #66	@ 0x42
 8003d18:	2100      	movs	r1, #0
 8003d1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2240      	movs	r2, #64	@ 0x40
 8003d20:	2100      	movs	r1, #0
 8003d22:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003d24:	2327      	movs	r3, #39	@ 0x27
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	781b      	ldrb	r3, [r3, #0]
}
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b00a      	add	sp, #40	@ 0x28
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	46c0      	nop			@ (mov r8, r8)
 8003d34:	fe00e800 	.word	0xfe00e800

08003d38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	0008      	movs	r0, r1
 8003d42:	0011      	movs	r1, r2
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	240a      	movs	r4, #10
 8003d48:	193b      	adds	r3, r7, r4
 8003d4a:	1c02      	adds	r2, r0, #0
 8003d4c:	801a      	strh	r2, [r3, #0]
 8003d4e:	2009      	movs	r0, #9
 8003d50:	183b      	adds	r3, r7, r0
 8003d52:	1c0a      	adds	r2, r1, #0
 8003d54:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d56:	193b      	adds	r3, r7, r4
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	059b      	lsls	r3, r3, #22
 8003d5c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d5e:	183b      	adds	r3, r7, r0
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	0419      	lsls	r1, r3, #16
 8003d64:	23ff      	movs	r3, #255	@ 0xff
 8003d66:	041b      	lsls	r3, r3, #16
 8003d68:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d6a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d72:	4313      	orrs	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d82:	0d51      	lsrs	r1, r2, #21
 8003d84:	2280      	movs	r2, #128	@ 0x80
 8003d86:	00d2      	lsls	r2, r2, #3
 8003d88:	400a      	ands	r2, r1
 8003d8a:	4907      	ldr	r1, [pc, #28]	@ (8003da8 <I2C_TransferConfig+0x70>)
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	43d2      	mvns	r2, r2
 8003d90:	401a      	ands	r2, r3
 8003d92:	0011      	movs	r1, r2
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b007      	add	sp, #28
 8003da4:	bd90      	pop	{r4, r7, pc}
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	03ff63ff 	.word	0x03ff63ff

08003dac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2241      	movs	r2, #65	@ 0x41
 8003dba:	5c9b      	ldrb	r3, [r3, r2]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d138      	bne.n	8003e34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2240      	movs	r2, #64	@ 0x40
 8003dc6:	5c9b      	ldrb	r3, [r3, r2]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e032      	b.n	8003e36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2240      	movs	r2, #64	@ 0x40
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2241      	movs	r2, #65	@ 0x41
 8003ddc:	2124      	movs	r1, #36	@ 0x24
 8003dde:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2101      	movs	r1, #1
 8003dec:	438a      	bics	r2, r1
 8003dee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4911      	ldr	r1, [pc, #68]	@ (8003e40 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003dfc:	400a      	ands	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6819      	ldr	r1, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2241      	movs	r2, #65	@ 0x41
 8003e24:	2120      	movs	r1, #32
 8003e26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2240      	movs	r2, #64	@ 0x40
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e000      	b.n	8003e36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e34:	2302      	movs	r3, #2
  }
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b002      	add	sp, #8
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	ffffefff 	.word	0xffffefff

08003e44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2241      	movs	r2, #65	@ 0x41
 8003e52:	5c9b      	ldrb	r3, [r3, r2]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d139      	bne.n	8003ece <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2240      	movs	r2, #64	@ 0x40
 8003e5e:	5c9b      	ldrb	r3, [r3, r2]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e033      	b.n	8003ed0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2240      	movs	r2, #64	@ 0x40
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2241      	movs	r2, #65	@ 0x41
 8003e74:	2124      	movs	r1, #36	@ 0x24
 8003e76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2101      	movs	r1, #1
 8003e84:	438a      	bics	r2, r1
 8003e86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4a11      	ldr	r2, [pc, #68]	@ (8003ed8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2241      	movs	r2, #65	@ 0x41
 8003ebe:	2120      	movs	r1, #32
 8003ec0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2240      	movs	r2, #64	@ 0x40
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e000      	b.n	8003ed0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
  }
}
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b004      	add	sp, #16
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	fffff0ff 	.word	0xfffff0ff

08003edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003edc:	b5b0      	push	{r4, r5, r7, lr}
 8003ede:	b08a      	sub	sp, #40	@ 0x28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d102      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f000 fb6c 	bl	80045c8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ef0:	4bc8      	ldr	r3, [pc, #800]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	220c      	movs	r2, #12
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003efa:	4bc6      	ldr	r3, [pc, #792]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	2380      	movs	r3, #128	@ 0x80
 8003f00:	025b      	lsls	r3, r3, #9
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <HAL_RCC_OscConfig+0x36>
 8003f10:	e07d      	b.n	800400e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d007      	beq.n	8003f28 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b0c      	cmp	r3, #12
 8003f1c:	d112      	bne.n	8003f44 <HAL_RCC_OscConfig+0x68>
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	2380      	movs	r3, #128	@ 0x80
 8003f22:	025b      	lsls	r3, r3, #9
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d10d      	bne.n	8003f44 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f28:	4bba      	ldr	r3, [pc, #744]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	2380      	movs	r3, #128	@ 0x80
 8003f2e:	029b      	lsls	r3, r3, #10
 8003f30:	4013      	ands	r3, r2
 8003f32:	d100      	bne.n	8003f36 <HAL_RCC_OscConfig+0x5a>
 8003f34:	e06a      	b.n	800400c <HAL_RCC_OscConfig+0x130>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d166      	bne.n	800400c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f000 fb42 	bl	80045c8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	2380      	movs	r3, #128	@ 0x80
 8003f4a:	025b      	lsls	r3, r3, #9
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d107      	bne.n	8003f60 <HAL_RCC_OscConfig+0x84>
 8003f50:	4bb0      	ldr	r3, [pc, #704]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4baf      	ldr	r3, [pc, #700]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8003f56:	2180      	movs	r1, #128	@ 0x80
 8003f58:	0249      	lsls	r1, r1, #9
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e027      	b.n	8003fb0 <HAL_RCC_OscConfig+0xd4>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	23a0      	movs	r3, #160	@ 0xa0
 8003f66:	02db      	lsls	r3, r3, #11
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d10e      	bne.n	8003f8a <HAL_RCC_OscConfig+0xae>
 8003f6c:	4ba9      	ldr	r3, [pc, #676]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4ba8      	ldr	r3, [pc, #672]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8003f72:	2180      	movs	r1, #128	@ 0x80
 8003f74:	02c9      	lsls	r1, r1, #11
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	4ba6      	ldr	r3, [pc, #664]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4ba5      	ldr	r3, [pc, #660]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8003f80:	2180      	movs	r1, #128	@ 0x80
 8003f82:	0249      	lsls	r1, r1, #9
 8003f84:	430a      	orrs	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e012      	b.n	8003fb0 <HAL_RCC_OscConfig+0xd4>
 8003f8a:	4ba2      	ldr	r3, [pc, #648]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4ba1      	ldr	r3, [pc, #644]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8003f90:	49a1      	ldr	r1, [pc, #644]	@ (8004218 <HAL_RCC_OscConfig+0x33c>)
 8003f92:	400a      	ands	r2, r1
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	4b9f      	ldr	r3, [pc, #636]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	2380      	movs	r3, #128	@ 0x80
 8003f9c:	025b      	lsls	r3, r3, #9
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4b9b      	ldr	r3, [pc, #620]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	4b9a      	ldr	r3, [pc, #616]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8003faa:	499c      	ldr	r1, [pc, #624]	@ (800421c <HAL_RCC_OscConfig+0x340>)
 8003fac:	400a      	ands	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d014      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7fe feca 	bl	8002d50 <HAL_GetTick>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc2:	f7fe fec5 	bl	8002d50 <HAL_GetTick>
 8003fc6:	0002      	movs	r2, r0
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b64      	cmp	r3, #100	@ 0x64
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e2f9      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fd4:	4b8f      	ldr	r3, [pc, #572]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	2380      	movs	r3, #128	@ 0x80
 8003fda:	029b      	lsls	r3, r3, #10
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0xe6>
 8003fe0:	e015      	b.n	800400e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe2:	f7fe feb5 	bl	8002d50 <HAL_GetTick>
 8003fe6:	0003      	movs	r3, r0
 8003fe8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fec:	f7fe feb0 	bl	8002d50 <HAL_GetTick>
 8003ff0:	0002      	movs	r2, r0
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b64      	cmp	r3, #100	@ 0x64
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e2e4      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ffe:	4b85      	ldr	r3, [pc, #532]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	2380      	movs	r3, #128	@ 0x80
 8004004:	029b      	lsls	r3, r3, #10
 8004006:	4013      	ands	r3, r2
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x110>
 800400a:	e000      	b.n	800400e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2202      	movs	r2, #2
 8004014:	4013      	ands	r3, r2
 8004016:	d100      	bne.n	800401a <HAL_RCC_OscConfig+0x13e>
 8004018:	e099      	b.n	800414e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	2220      	movs	r2, #32
 8004024:	4013      	ands	r3, r2
 8004026:	d009      	beq.n	800403c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004028:	4b7a      	ldr	r3, [pc, #488]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	4b79      	ldr	r3, [pc, #484]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 800402e:	2120      	movs	r1, #32
 8004030:	430a      	orrs	r2, r1
 8004032:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	2220      	movs	r2, #32
 8004038:	4393      	bics	r3, r2
 800403a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b04      	cmp	r3, #4
 8004040:	d005      	beq.n	800404e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	2b0c      	cmp	r3, #12
 8004046:	d13e      	bne.n	80040c6 <HAL_RCC_OscConfig+0x1ea>
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d13b      	bne.n	80040c6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800404e:	4b71      	ldr	r3, [pc, #452]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2204      	movs	r2, #4
 8004054:	4013      	ands	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_RCC_OscConfig+0x186>
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e2b2      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004062:	4b6c      	ldr	r3, [pc, #432]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4a6e      	ldr	r2, [pc, #440]	@ (8004220 <HAL_RCC_OscConfig+0x344>)
 8004068:	4013      	ands	r3, r2
 800406a:	0019      	movs	r1, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	021a      	lsls	r2, r3, #8
 8004072:	4b68      	ldr	r3, [pc, #416]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004078:	4b66      	ldr	r3, [pc, #408]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2209      	movs	r2, #9
 800407e:	4393      	bics	r3, r2
 8004080:	0019      	movs	r1, r3
 8004082:	4b64      	ldr	r3, [pc, #400]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8004084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004086:	430a      	orrs	r2, r1
 8004088:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800408a:	f000 fbeb 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 800408e:	0001      	movs	r1, r0
 8004090:	4b60      	ldr	r3, [pc, #384]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	220f      	movs	r2, #15
 8004098:	4013      	ands	r3, r2
 800409a:	4a62      	ldr	r2, [pc, #392]	@ (8004224 <HAL_RCC_OscConfig+0x348>)
 800409c:	5cd3      	ldrb	r3, [r2, r3]
 800409e:	000a      	movs	r2, r1
 80040a0:	40da      	lsrs	r2, r3
 80040a2:	4b61      	ldr	r3, [pc, #388]	@ (8004228 <HAL_RCC_OscConfig+0x34c>)
 80040a4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80040a6:	4b61      	ldr	r3, [pc, #388]	@ (800422c <HAL_RCC_OscConfig+0x350>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2513      	movs	r5, #19
 80040ac:	197c      	adds	r4, r7, r5
 80040ae:	0018      	movs	r0, r3
 80040b0:	f7fe fe08 	bl	8002cc4 <HAL_InitTick>
 80040b4:	0003      	movs	r3, r0
 80040b6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80040b8:	197b      	adds	r3, r7, r5
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d046      	beq.n	800414e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80040c0:	197b      	adds	r3, r7, r5
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	e280      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d027      	beq.n	800411c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80040cc:	4b51      	ldr	r3, [pc, #324]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2209      	movs	r2, #9
 80040d2:	4393      	bics	r3, r2
 80040d4:	0019      	movs	r1, r3
 80040d6:	4b4f      	ldr	r3, [pc, #316]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 80040d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040da:	430a      	orrs	r2, r1
 80040dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040de:	f7fe fe37 	bl	8002d50 <HAL_GetTick>
 80040e2:	0003      	movs	r3, r0
 80040e4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e8:	f7fe fe32 	bl	8002d50 <HAL_GetTick>
 80040ec:	0002      	movs	r2, r0
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e266      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040fa:	4b46      	ldr	r3, [pc, #280]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2204      	movs	r2, #4
 8004100:	4013      	ands	r3, r2
 8004102:	d0f1      	beq.n	80040e8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004104:	4b43      	ldr	r3, [pc, #268]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4a45      	ldr	r2, [pc, #276]	@ (8004220 <HAL_RCC_OscConfig+0x344>)
 800410a:	4013      	ands	r3, r2
 800410c:	0019      	movs	r1, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	021a      	lsls	r2, r3, #8
 8004114:	4b3f      	ldr	r3, [pc, #252]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	e018      	b.n	800414e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800411c:	4b3d      	ldr	r3, [pc, #244]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4b3c      	ldr	r3, [pc, #240]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8004122:	2101      	movs	r1, #1
 8004124:	438a      	bics	r2, r1
 8004126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004128:	f7fe fe12 	bl	8002d50 <HAL_GetTick>
 800412c:	0003      	movs	r3, r0
 800412e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004132:	f7fe fe0d 	bl	8002d50 <HAL_GetTick>
 8004136:	0002      	movs	r2, r0
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e241      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004144:	4b33      	ldr	r3, [pc, #204]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2204      	movs	r2, #4
 800414a:	4013      	ands	r3, r2
 800414c:	d1f1      	bne.n	8004132 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2210      	movs	r2, #16
 8004154:	4013      	ands	r3, r2
 8004156:	d100      	bne.n	800415a <HAL_RCC_OscConfig+0x27e>
 8004158:	e0a1      	b.n	800429e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d140      	bne.n	80041e2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004160:	4b2c      	ldr	r3, [pc, #176]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	2380      	movs	r3, #128	@ 0x80
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4013      	ands	r3, r2
 800416a:	d005      	beq.n	8004178 <HAL_RCC_OscConfig+0x29c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e227      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004178:	4b26      	ldr	r3, [pc, #152]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4a2c      	ldr	r2, [pc, #176]	@ (8004230 <HAL_RCC_OscConfig+0x354>)
 800417e:	4013      	ands	r3, r2
 8004180:	0019      	movs	r1, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	4b23      	ldr	r3, [pc, #140]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800418c:	4b21      	ldr	r3, [pc, #132]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	0a19      	lsrs	r1, r3, #8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	061a      	lsls	r2, r3, #24
 800419a:	4b1e      	ldr	r3, [pc, #120]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 800419c:	430a      	orrs	r2, r1
 800419e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	0b5b      	lsrs	r3, r3, #13
 80041a6:	3301      	adds	r3, #1
 80041a8:	2280      	movs	r2, #128	@ 0x80
 80041aa:	0212      	lsls	r2, r2, #8
 80041ac:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80041ae:	4b19      	ldr	r3, [pc, #100]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	210f      	movs	r1, #15
 80041b6:	400b      	ands	r3, r1
 80041b8:	491a      	ldr	r1, [pc, #104]	@ (8004224 <HAL_RCC_OscConfig+0x348>)
 80041ba:	5ccb      	ldrb	r3, [r1, r3]
 80041bc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80041be:	4b1a      	ldr	r3, [pc, #104]	@ (8004228 <HAL_RCC_OscConfig+0x34c>)
 80041c0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80041c2:	4b1a      	ldr	r3, [pc, #104]	@ (800422c <HAL_RCC_OscConfig+0x350>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2513      	movs	r5, #19
 80041c8:	197c      	adds	r4, r7, r5
 80041ca:	0018      	movs	r0, r3
 80041cc:	f7fe fd7a 	bl	8002cc4 <HAL_InitTick>
 80041d0:	0003      	movs	r3, r0
 80041d2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80041d4:	197b      	adds	r3, r7, r5
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d060      	beq.n	800429e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80041dc:	197b      	adds	r3, r7, r5
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	e1f2      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d03f      	beq.n	800426a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	4b09      	ldr	r3, [pc, #36]	@ (8004214 <HAL_RCC_OscConfig+0x338>)
 80041f0:	2180      	movs	r1, #128	@ 0x80
 80041f2:	0049      	lsls	r1, r1, #1
 80041f4:	430a      	orrs	r2, r1
 80041f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7fe fdaa 	bl	8002d50 <HAL_GetTick>
 80041fc:	0003      	movs	r3, r0
 80041fe:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004200:	e018      	b.n	8004234 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004202:	f7fe fda5 	bl	8002d50 <HAL_GetTick>
 8004206:	0002      	movs	r2, r0
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d911      	bls.n	8004234 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e1d9      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
 8004214:	40021000 	.word	0x40021000
 8004218:	fffeffff 	.word	0xfffeffff
 800421c:	fffbffff 	.word	0xfffbffff
 8004220:	ffffe0ff 	.word	0xffffe0ff
 8004224:	080067a4 	.word	0x080067a4
 8004228:	20000000 	.word	0x20000000
 800422c:	20000004 	.word	0x20000004
 8004230:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004234:	4bc9      	ldr	r3, [pc, #804]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	2380      	movs	r3, #128	@ 0x80
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4013      	ands	r3, r2
 800423e:	d0e0      	beq.n	8004202 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004240:	4bc6      	ldr	r3, [pc, #792]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4ac6      	ldr	r2, [pc, #792]	@ (8004560 <HAL_RCC_OscConfig+0x684>)
 8004246:	4013      	ands	r3, r2
 8004248:	0019      	movs	r1, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1a      	ldr	r2, [r3, #32]
 800424e:	4bc3      	ldr	r3, [pc, #780]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 8004250:	430a      	orrs	r2, r1
 8004252:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004254:	4bc1      	ldr	r3, [pc, #772]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	0a19      	lsrs	r1, r3, #8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	061a      	lsls	r2, r3, #24
 8004262:	4bbe      	ldr	r3, [pc, #760]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 8004264:	430a      	orrs	r2, r1
 8004266:	605a      	str	r2, [r3, #4]
 8004268:	e019      	b.n	800429e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800426a:	4bbc      	ldr	r3, [pc, #752]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4bbb      	ldr	r3, [pc, #748]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 8004270:	49bc      	ldr	r1, [pc, #752]	@ (8004564 <HAL_RCC_OscConfig+0x688>)
 8004272:	400a      	ands	r2, r1
 8004274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004276:	f7fe fd6b 	bl	8002d50 <HAL_GetTick>
 800427a:	0003      	movs	r3, r0
 800427c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004280:	f7fe fd66 	bl	8002d50 <HAL_GetTick>
 8004284:	0002      	movs	r2, r0
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e19a      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004292:	4bb2      	ldr	r3, [pc, #712]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	2380      	movs	r3, #128	@ 0x80
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4013      	ands	r3, r2
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2208      	movs	r2, #8
 80042a4:	4013      	ands	r3, r2
 80042a6:	d036      	beq.n	8004316 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d019      	beq.n	80042e4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042b0:	4baa      	ldr	r3, [pc, #680]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80042b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042b4:	4ba9      	ldr	r3, [pc, #676]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80042b6:	2101      	movs	r1, #1
 80042b8:	430a      	orrs	r2, r1
 80042ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042bc:	f7fe fd48 	bl	8002d50 <HAL_GetTick>
 80042c0:	0003      	movs	r3, r0
 80042c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c6:	f7fe fd43 	bl	8002d50 <HAL_GetTick>
 80042ca:	0002      	movs	r2, r0
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e177      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042d8:	4ba0      	ldr	r3, [pc, #640]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80042da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042dc:	2202      	movs	r2, #2
 80042de:	4013      	ands	r3, r2
 80042e0:	d0f1      	beq.n	80042c6 <HAL_RCC_OscConfig+0x3ea>
 80042e2:	e018      	b.n	8004316 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e4:	4b9d      	ldr	r3, [pc, #628]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80042e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042e8:	4b9c      	ldr	r3, [pc, #624]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80042ea:	2101      	movs	r1, #1
 80042ec:	438a      	bics	r2, r1
 80042ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f0:	f7fe fd2e 	bl	8002d50 <HAL_GetTick>
 80042f4:	0003      	movs	r3, r0
 80042f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042fa:	f7fe fd29 	bl	8002d50 <HAL_GetTick>
 80042fe:	0002      	movs	r2, r0
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e15d      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800430c:	4b93      	ldr	r3, [pc, #588]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 800430e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004310:	2202      	movs	r2, #2
 8004312:	4013      	ands	r3, r2
 8004314:	d1f1      	bne.n	80042fa <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2204      	movs	r2, #4
 800431c:	4013      	ands	r3, r2
 800431e:	d100      	bne.n	8004322 <HAL_RCC_OscConfig+0x446>
 8004320:	e0ae      	b.n	8004480 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004322:	2023      	movs	r0, #35	@ 0x23
 8004324:	183b      	adds	r3, r7, r0
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800432a:	4b8c      	ldr	r3, [pc, #560]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 800432c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800432e:	2380      	movs	r3, #128	@ 0x80
 8004330:	055b      	lsls	r3, r3, #21
 8004332:	4013      	ands	r3, r2
 8004334:	d109      	bne.n	800434a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004336:	4b89      	ldr	r3, [pc, #548]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 8004338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800433a:	4b88      	ldr	r3, [pc, #544]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 800433c:	2180      	movs	r1, #128	@ 0x80
 800433e:	0549      	lsls	r1, r1, #21
 8004340:	430a      	orrs	r2, r1
 8004342:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004344:	183b      	adds	r3, r7, r0
 8004346:	2201      	movs	r2, #1
 8004348:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434a:	4b87      	ldr	r3, [pc, #540]	@ (8004568 <HAL_RCC_OscConfig+0x68c>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	2380      	movs	r3, #128	@ 0x80
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	4013      	ands	r3, r2
 8004354:	d11a      	bne.n	800438c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004356:	4b84      	ldr	r3, [pc, #528]	@ (8004568 <HAL_RCC_OscConfig+0x68c>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4b83      	ldr	r3, [pc, #524]	@ (8004568 <HAL_RCC_OscConfig+0x68c>)
 800435c:	2180      	movs	r1, #128	@ 0x80
 800435e:	0049      	lsls	r1, r1, #1
 8004360:	430a      	orrs	r2, r1
 8004362:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004364:	f7fe fcf4 	bl	8002d50 <HAL_GetTick>
 8004368:	0003      	movs	r3, r0
 800436a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436e:	f7fe fcef 	bl	8002d50 <HAL_GetTick>
 8004372:	0002      	movs	r2, r0
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b64      	cmp	r3, #100	@ 0x64
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e123      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004380:	4b79      	ldr	r3, [pc, #484]	@ (8004568 <HAL_RCC_OscConfig+0x68c>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	2380      	movs	r3, #128	@ 0x80
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	4013      	ands	r3, r2
 800438a:	d0f0      	beq.n	800436e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	2380      	movs	r3, #128	@ 0x80
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	429a      	cmp	r2, r3
 8004396:	d107      	bne.n	80043a8 <HAL_RCC_OscConfig+0x4cc>
 8004398:	4b70      	ldr	r3, [pc, #448]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 800439a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800439c:	4b6f      	ldr	r3, [pc, #444]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 800439e:	2180      	movs	r1, #128	@ 0x80
 80043a0:	0049      	lsls	r1, r1, #1
 80043a2:	430a      	orrs	r2, r1
 80043a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80043a6:	e031      	b.n	800440c <HAL_RCC_OscConfig+0x530>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10c      	bne.n	80043ca <HAL_RCC_OscConfig+0x4ee>
 80043b0:	4b6a      	ldr	r3, [pc, #424]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80043b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043b4:	4b69      	ldr	r3, [pc, #420]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80043b6:	496b      	ldr	r1, [pc, #428]	@ (8004564 <HAL_RCC_OscConfig+0x688>)
 80043b8:	400a      	ands	r2, r1
 80043ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80043bc:	4b67      	ldr	r3, [pc, #412]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80043be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043c0:	4b66      	ldr	r3, [pc, #408]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80043c2:	496a      	ldr	r1, [pc, #424]	@ (800456c <HAL_RCC_OscConfig+0x690>)
 80043c4:	400a      	ands	r2, r1
 80043c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80043c8:	e020      	b.n	800440c <HAL_RCC_OscConfig+0x530>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	23a0      	movs	r3, #160	@ 0xa0
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d10e      	bne.n	80043f4 <HAL_RCC_OscConfig+0x518>
 80043d6:	4b61      	ldr	r3, [pc, #388]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80043d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043da:	4b60      	ldr	r3, [pc, #384]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80043dc:	2180      	movs	r1, #128	@ 0x80
 80043de:	00c9      	lsls	r1, r1, #3
 80043e0:	430a      	orrs	r2, r1
 80043e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80043e4:	4b5d      	ldr	r3, [pc, #372]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80043e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043e8:	4b5c      	ldr	r3, [pc, #368]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80043ea:	2180      	movs	r1, #128	@ 0x80
 80043ec:	0049      	lsls	r1, r1, #1
 80043ee:	430a      	orrs	r2, r1
 80043f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80043f2:	e00b      	b.n	800440c <HAL_RCC_OscConfig+0x530>
 80043f4:	4b59      	ldr	r3, [pc, #356]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80043f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043f8:	4b58      	ldr	r3, [pc, #352]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80043fa:	495a      	ldr	r1, [pc, #360]	@ (8004564 <HAL_RCC_OscConfig+0x688>)
 80043fc:	400a      	ands	r2, r1
 80043fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8004400:	4b56      	ldr	r3, [pc, #344]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 8004402:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004404:	4b55      	ldr	r3, [pc, #340]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 8004406:	4959      	ldr	r1, [pc, #356]	@ (800456c <HAL_RCC_OscConfig+0x690>)
 8004408:	400a      	ands	r2, r1
 800440a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d015      	beq.n	8004440 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004414:	f7fe fc9c 	bl	8002d50 <HAL_GetTick>
 8004418:	0003      	movs	r3, r0
 800441a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800441c:	e009      	b.n	8004432 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800441e:	f7fe fc97 	bl	8002d50 <HAL_GetTick>
 8004422:	0002      	movs	r2, r0
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	4a51      	ldr	r2, [pc, #324]	@ (8004570 <HAL_RCC_OscConfig+0x694>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e0ca      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004432:	4b4a      	ldr	r3, [pc, #296]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 8004434:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004436:	2380      	movs	r3, #128	@ 0x80
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4013      	ands	r3, r2
 800443c:	d0ef      	beq.n	800441e <HAL_RCC_OscConfig+0x542>
 800443e:	e014      	b.n	800446a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004440:	f7fe fc86 	bl	8002d50 <HAL_GetTick>
 8004444:	0003      	movs	r3, r0
 8004446:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004448:	e009      	b.n	800445e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800444a:	f7fe fc81 	bl	8002d50 <HAL_GetTick>
 800444e:	0002      	movs	r2, r0
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	4a46      	ldr	r2, [pc, #280]	@ (8004570 <HAL_RCC_OscConfig+0x694>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e0b4      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800445e:	4b3f      	ldr	r3, [pc, #252]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 8004460:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004462:	2380      	movs	r3, #128	@ 0x80
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4013      	ands	r3, r2
 8004468:	d1ef      	bne.n	800444a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800446a:	2323      	movs	r3, #35	@ 0x23
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d105      	bne.n	8004480 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004474:	4b39      	ldr	r3, [pc, #228]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 8004476:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004478:	4b38      	ldr	r3, [pc, #224]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 800447a:	493e      	ldr	r1, [pc, #248]	@ (8004574 <HAL_RCC_OscConfig+0x698>)
 800447c:	400a      	ands	r2, r1
 800447e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004484:	2b00      	cmp	r3, #0
 8004486:	d100      	bne.n	800448a <HAL_RCC_OscConfig+0x5ae>
 8004488:	e09d      	b.n	80045c6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	2b0c      	cmp	r3, #12
 800448e:	d100      	bne.n	8004492 <HAL_RCC_OscConfig+0x5b6>
 8004490:	e076      	b.n	8004580 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004496:	2b02      	cmp	r3, #2
 8004498:	d145      	bne.n	8004526 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449a:	4b30      	ldr	r3, [pc, #192]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b2f      	ldr	r3, [pc, #188]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80044a0:	4935      	ldr	r1, [pc, #212]	@ (8004578 <HAL_RCC_OscConfig+0x69c>)
 80044a2:	400a      	ands	r2, r1
 80044a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fe fc53 	bl	8002d50 <HAL_GetTick>
 80044aa:	0003      	movs	r3, r0
 80044ac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fe fc4e 	bl	8002d50 <HAL_GetTick>
 80044b4:	0002      	movs	r2, r0
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e082      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044c2:	4b26      	ldr	r3, [pc, #152]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	2380      	movs	r3, #128	@ 0x80
 80044c8:	049b      	lsls	r3, r3, #18
 80044ca:	4013      	ands	r3, r2
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ce:	4b23      	ldr	r3, [pc, #140]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	4a2a      	ldr	r2, [pc, #168]	@ (800457c <HAL_RCC_OscConfig+0x6a0>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	0019      	movs	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	431a      	orrs	r2, r3
 80044e8:	4b1c      	ldr	r3, [pc, #112]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80044ea:	430a      	orrs	r2, r1
 80044ec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ee:	4b1b      	ldr	r3, [pc, #108]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	4b1a      	ldr	r3, [pc, #104]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 80044f4:	2180      	movs	r1, #128	@ 0x80
 80044f6:	0449      	lsls	r1, r1, #17
 80044f8:	430a      	orrs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fc:	f7fe fc28 	bl	8002d50 <HAL_GetTick>
 8004500:	0003      	movs	r3, r0
 8004502:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004506:	f7fe fc23 	bl	8002d50 <HAL_GetTick>
 800450a:	0002      	movs	r2, r0
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e057      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004518:	4b10      	ldr	r3, [pc, #64]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	2380      	movs	r3, #128	@ 0x80
 800451e:	049b      	lsls	r3, r3, #18
 8004520:	4013      	ands	r3, r2
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x62a>
 8004524:	e04f      	b.n	80045c6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004526:	4b0d      	ldr	r3, [pc, #52]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	4b0c      	ldr	r3, [pc, #48]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 800452c:	4912      	ldr	r1, [pc, #72]	@ (8004578 <HAL_RCC_OscConfig+0x69c>)
 800452e:	400a      	ands	r2, r1
 8004530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004532:	f7fe fc0d 	bl	8002d50 <HAL_GetTick>
 8004536:	0003      	movs	r3, r0
 8004538:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800453c:	f7fe fc08 	bl	8002d50 <HAL_GetTick>
 8004540:	0002      	movs	r2, r0
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e03c      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800454e:	4b03      	ldr	r3, [pc, #12]	@ (800455c <HAL_RCC_OscConfig+0x680>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	2380      	movs	r3, #128	@ 0x80
 8004554:	049b      	lsls	r3, r3, #18
 8004556:	4013      	ands	r3, r2
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x660>
 800455a:	e034      	b.n	80045c6 <HAL_RCC_OscConfig+0x6ea>
 800455c:	40021000 	.word	0x40021000
 8004560:	ffff1fff 	.word	0xffff1fff
 8004564:	fffffeff 	.word	0xfffffeff
 8004568:	40007000 	.word	0x40007000
 800456c:	fffffbff 	.word	0xfffffbff
 8004570:	00001388 	.word	0x00001388
 8004574:	efffffff 	.word	0xefffffff
 8004578:	feffffff 	.word	0xfeffffff
 800457c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e01d      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800458c:	4b10      	ldr	r3, [pc, #64]	@ (80045d0 <HAL_RCC_OscConfig+0x6f4>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	2380      	movs	r3, #128	@ 0x80
 8004596:	025b      	lsls	r3, r3, #9
 8004598:	401a      	ands	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459e:	429a      	cmp	r2, r3
 80045a0:	d10f      	bne.n	80045c2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	23f0      	movs	r3, #240	@ 0xf0
 80045a6:	039b      	lsls	r3, r3, #14
 80045a8:	401a      	ands	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d107      	bne.n	80045c2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	23c0      	movs	r3, #192	@ 0xc0
 80045b6:	041b      	lsls	r3, r3, #16
 80045b8:	401a      	ands	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80045be:	429a      	cmp	r2, r3
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	0018      	movs	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b00a      	add	sp, #40	@ 0x28
 80045ce:	bdb0      	pop	{r4, r5, r7, pc}
 80045d0:	40021000 	.word	0x40021000

080045d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d4:	b5b0      	push	{r4, r5, r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e128      	b.n	800483a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e8:	4b96      	ldr	r3, [pc, #600]	@ (8004844 <HAL_RCC_ClockConfig+0x270>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2201      	movs	r2, #1
 80045ee:	4013      	ands	r3, r2
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d91e      	bls.n	8004634 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f6:	4b93      	ldr	r3, [pc, #588]	@ (8004844 <HAL_RCC_ClockConfig+0x270>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2201      	movs	r2, #1
 80045fc:	4393      	bics	r3, r2
 80045fe:	0019      	movs	r1, r3
 8004600:	4b90      	ldr	r3, [pc, #576]	@ (8004844 <HAL_RCC_ClockConfig+0x270>)
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004608:	f7fe fba2 	bl	8002d50 <HAL_GetTick>
 800460c:	0003      	movs	r3, r0
 800460e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004610:	e009      	b.n	8004626 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004612:	f7fe fb9d 	bl	8002d50 <HAL_GetTick>
 8004616:	0002      	movs	r2, r0
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	4a8a      	ldr	r2, [pc, #552]	@ (8004848 <HAL_RCC_ClockConfig+0x274>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e109      	b.n	800483a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b87      	ldr	r3, [pc, #540]	@ (8004844 <HAL_RCC_ClockConfig+0x270>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2201      	movs	r2, #1
 800462c:	4013      	ands	r3, r2
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d1ee      	bne.n	8004612 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d009      	beq.n	8004652 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800463e:	4b83      	ldr	r3, [pc, #524]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	22f0      	movs	r2, #240	@ 0xf0
 8004644:	4393      	bics	r3, r2
 8004646:	0019      	movs	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	4b7f      	ldr	r3, [pc, #508]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 800464e:	430a      	orrs	r2, r1
 8004650:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2201      	movs	r2, #1
 8004658:	4013      	ands	r3, r2
 800465a:	d100      	bne.n	800465e <HAL_RCC_ClockConfig+0x8a>
 800465c:	e089      	b.n	8004772 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d107      	bne.n	8004676 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004666:	4b79      	ldr	r3, [pc, #484]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	2380      	movs	r3, #128	@ 0x80
 800466c:	029b      	lsls	r3, r3, #10
 800466e:	4013      	ands	r3, r2
 8004670:	d120      	bne.n	80046b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e0e1      	b.n	800483a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b03      	cmp	r3, #3
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800467e:	4b73      	ldr	r3, [pc, #460]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	2380      	movs	r3, #128	@ 0x80
 8004684:	049b      	lsls	r3, r3, #18
 8004686:	4013      	ands	r3, r2
 8004688:	d114      	bne.n	80046b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e0d5      	b.n	800483a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d106      	bne.n	80046a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004696:	4b6d      	ldr	r3, [pc, #436]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2204      	movs	r2, #4
 800469c:	4013      	ands	r3, r2
 800469e:	d109      	bne.n	80046b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0ca      	b.n	800483a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046a4:	4b69      	ldr	r3, [pc, #420]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	2380      	movs	r3, #128	@ 0x80
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4013      	ands	r3, r2
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0c2      	b.n	800483a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046b4:	4b65      	ldr	r3, [pc, #404]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2203      	movs	r2, #3
 80046ba:	4393      	bics	r3, r2
 80046bc:	0019      	movs	r1, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	4b62      	ldr	r3, [pc, #392]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 80046c4:	430a      	orrs	r2, r1
 80046c6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046c8:	f7fe fb42 	bl	8002d50 <HAL_GetTick>
 80046cc:	0003      	movs	r3, r0
 80046ce:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d111      	bne.n	80046fc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046d8:	e009      	b.n	80046ee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046da:	f7fe fb39 	bl	8002d50 <HAL_GetTick>
 80046de:	0002      	movs	r2, r0
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	4a58      	ldr	r2, [pc, #352]	@ (8004848 <HAL_RCC_ClockConfig+0x274>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e0a5      	b.n	800483a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046ee:	4b57      	ldr	r3, [pc, #348]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	220c      	movs	r2, #12
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d1ef      	bne.n	80046da <HAL_RCC_ClockConfig+0x106>
 80046fa:	e03a      	b.n	8004772 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d111      	bne.n	8004728 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004704:	e009      	b.n	800471a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004706:	f7fe fb23 	bl	8002d50 <HAL_GetTick>
 800470a:	0002      	movs	r2, r0
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	4a4d      	ldr	r2, [pc, #308]	@ (8004848 <HAL_RCC_ClockConfig+0x274>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e08f      	b.n	800483a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800471a:	4b4c      	ldr	r3, [pc, #304]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	220c      	movs	r2, #12
 8004720:	4013      	ands	r3, r2
 8004722:	2b0c      	cmp	r3, #12
 8004724:	d1ef      	bne.n	8004706 <HAL_RCC_ClockConfig+0x132>
 8004726:	e024      	b.n	8004772 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d11b      	bne.n	8004768 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004730:	e009      	b.n	8004746 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004732:	f7fe fb0d 	bl	8002d50 <HAL_GetTick>
 8004736:	0002      	movs	r2, r0
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	4a42      	ldr	r2, [pc, #264]	@ (8004848 <HAL_RCC_ClockConfig+0x274>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e079      	b.n	800483a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004746:	4b41      	ldr	r3, [pc, #260]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	220c      	movs	r2, #12
 800474c:	4013      	ands	r3, r2
 800474e:	2b04      	cmp	r3, #4
 8004750:	d1ef      	bne.n	8004732 <HAL_RCC_ClockConfig+0x15e>
 8004752:	e00e      	b.n	8004772 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004754:	f7fe fafc 	bl	8002d50 <HAL_GetTick>
 8004758:	0002      	movs	r2, r0
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	4a3a      	ldr	r2, [pc, #232]	@ (8004848 <HAL_RCC_ClockConfig+0x274>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e068      	b.n	800483a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004768:	4b38      	ldr	r3, [pc, #224]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	220c      	movs	r2, #12
 800476e:	4013      	ands	r3, r2
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004772:	4b34      	ldr	r3, [pc, #208]	@ (8004844 <HAL_RCC_ClockConfig+0x270>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2201      	movs	r2, #1
 8004778:	4013      	ands	r3, r2
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d21e      	bcs.n	80047be <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004780:	4b30      	ldr	r3, [pc, #192]	@ (8004844 <HAL_RCC_ClockConfig+0x270>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2201      	movs	r2, #1
 8004786:	4393      	bics	r3, r2
 8004788:	0019      	movs	r1, r3
 800478a:	4b2e      	ldr	r3, [pc, #184]	@ (8004844 <HAL_RCC_ClockConfig+0x270>)
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004792:	f7fe fadd 	bl	8002d50 <HAL_GetTick>
 8004796:	0003      	movs	r3, r0
 8004798:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	e009      	b.n	80047b0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800479c:	f7fe fad8 	bl	8002d50 <HAL_GetTick>
 80047a0:	0002      	movs	r2, r0
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	4a28      	ldr	r2, [pc, #160]	@ (8004848 <HAL_RCC_ClockConfig+0x274>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e044      	b.n	800483a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b0:	4b24      	ldr	r3, [pc, #144]	@ (8004844 <HAL_RCC_ClockConfig+0x270>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2201      	movs	r2, #1
 80047b6:	4013      	ands	r3, r2
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d1ee      	bne.n	800479c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2204      	movs	r2, #4
 80047c4:	4013      	ands	r3, r2
 80047c6:	d009      	beq.n	80047dc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c8:	4b20      	ldr	r3, [pc, #128]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4a20      	ldr	r2, [pc, #128]	@ (8004850 <HAL_RCC_ClockConfig+0x27c>)
 80047ce:	4013      	ands	r3, r2
 80047d0:	0019      	movs	r1, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	4b1d      	ldr	r3, [pc, #116]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 80047d8:	430a      	orrs	r2, r1
 80047da:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2208      	movs	r2, #8
 80047e2:	4013      	ands	r3, r2
 80047e4:	d00a      	beq.n	80047fc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047e6:	4b19      	ldr	r3, [pc, #100]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004854 <HAL_RCC_ClockConfig+0x280>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	0019      	movs	r1, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	00da      	lsls	r2, r3, #3
 80047f6:	4b15      	ldr	r3, [pc, #84]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 80047f8:	430a      	orrs	r2, r1
 80047fa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047fc:	f000 f832 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8004800:	0001      	movs	r1, r0
 8004802:	4b12      	ldr	r3, [pc, #72]	@ (800484c <HAL_RCC_ClockConfig+0x278>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	220f      	movs	r2, #15
 800480a:	4013      	ands	r3, r2
 800480c:	4a12      	ldr	r2, [pc, #72]	@ (8004858 <HAL_RCC_ClockConfig+0x284>)
 800480e:	5cd3      	ldrb	r3, [r2, r3]
 8004810:	000a      	movs	r2, r1
 8004812:	40da      	lsrs	r2, r3
 8004814:	4b11      	ldr	r3, [pc, #68]	@ (800485c <HAL_RCC_ClockConfig+0x288>)
 8004816:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004818:	4b11      	ldr	r3, [pc, #68]	@ (8004860 <HAL_RCC_ClockConfig+0x28c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	250b      	movs	r5, #11
 800481e:	197c      	adds	r4, r7, r5
 8004820:	0018      	movs	r0, r3
 8004822:	f7fe fa4f 	bl	8002cc4 <HAL_InitTick>
 8004826:	0003      	movs	r3, r0
 8004828:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800482a:	197b      	adds	r3, r7, r5
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004832:	197b      	adds	r3, r7, r5
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	e000      	b.n	800483a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	0018      	movs	r0, r3
 800483c:	46bd      	mov	sp, r7
 800483e:	b004      	add	sp, #16
 8004840:	bdb0      	pop	{r4, r5, r7, pc}
 8004842:	46c0      	nop			@ (mov r8, r8)
 8004844:	40022000 	.word	0x40022000
 8004848:	00001388 	.word	0x00001388
 800484c:	40021000 	.word	0x40021000
 8004850:	fffff8ff 	.word	0xfffff8ff
 8004854:	ffffc7ff 	.word	0xffffc7ff
 8004858:	080067a4 	.word	0x080067a4
 800485c:	20000000 	.word	0x20000000
 8004860:	20000004 	.word	0x20000004

08004864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004864:	b5b0      	push	{r4, r5, r7, lr}
 8004866:	b08e      	sub	sp, #56	@ 0x38
 8004868:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800486a:	4b4c      	ldr	r3, [pc, #304]	@ (800499c <HAL_RCC_GetSysClockFreq+0x138>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004872:	230c      	movs	r3, #12
 8004874:	4013      	ands	r3, r2
 8004876:	2b0c      	cmp	r3, #12
 8004878:	d014      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x40>
 800487a:	d900      	bls.n	800487e <HAL_RCC_GetSysClockFreq+0x1a>
 800487c:	e07b      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x112>
 800487e:	2b04      	cmp	r3, #4
 8004880:	d002      	beq.n	8004888 <HAL_RCC_GetSysClockFreq+0x24>
 8004882:	2b08      	cmp	r3, #8
 8004884:	d00b      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x3a>
 8004886:	e076      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004888:	4b44      	ldr	r3, [pc, #272]	@ (800499c <HAL_RCC_GetSysClockFreq+0x138>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2210      	movs	r2, #16
 800488e:	4013      	ands	r3, r2
 8004890:	d002      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004892:	4b43      	ldr	r3, [pc, #268]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004894:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004896:	e07c      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004898:	4b42      	ldr	r3, [pc, #264]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800489a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800489c:	e079      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800489e:	4b42      	ldr	r3, [pc, #264]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80048a0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80048a2:	e076      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80048a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a6:	0c9a      	lsrs	r2, r3, #18
 80048a8:	230f      	movs	r3, #15
 80048aa:	401a      	ands	r2, r3
 80048ac:	4b3f      	ldr	r3, [pc, #252]	@ (80049ac <HAL_RCC_GetSysClockFreq+0x148>)
 80048ae:	5c9b      	ldrb	r3, [r3, r2]
 80048b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80048b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b4:	0d9a      	lsrs	r2, r3, #22
 80048b6:	2303      	movs	r3, #3
 80048b8:	4013      	ands	r3, r2
 80048ba:	3301      	adds	r3, #1
 80048bc:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048be:	4b37      	ldr	r3, [pc, #220]	@ (800499c <HAL_RCC_GetSysClockFreq+0x138>)
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	2380      	movs	r3, #128	@ 0x80
 80048c4:	025b      	lsls	r3, r3, #9
 80048c6:	4013      	ands	r3, r2
 80048c8:	d01a      	beq.n	8004900 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	2300      	movs	r3, #0
 80048d0:	61fb      	str	r3, [r7, #28]
 80048d2:	4a35      	ldr	r2, [pc, #212]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80048d4:	2300      	movs	r3, #0
 80048d6:	69b8      	ldr	r0, [r7, #24]
 80048d8:	69f9      	ldr	r1, [r7, #28]
 80048da:	f7fb fccb 	bl	8000274 <__aeabi_lmul>
 80048de:	0002      	movs	r2, r0
 80048e0:	000b      	movs	r3, r1
 80048e2:	0010      	movs	r0, r2
 80048e4:	0019      	movs	r1, r3
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f7fb fc9f 	bl	8000234 <__aeabi_uldivmod>
 80048f6:	0002      	movs	r2, r0
 80048f8:	000b      	movs	r3, r1
 80048fa:	0013      	movs	r3, r2
 80048fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80048fe:	e037      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004900:	4b26      	ldr	r3, [pc, #152]	@ (800499c <HAL_RCC_GetSysClockFreq+0x138>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2210      	movs	r2, #16
 8004906:	4013      	ands	r3, r2
 8004908:	d01a      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800490a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	4a23      	ldr	r2, [pc, #140]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004914:	2300      	movs	r3, #0
 8004916:	68b8      	ldr	r0, [r7, #8]
 8004918:	68f9      	ldr	r1, [r7, #12]
 800491a:	f7fb fcab 	bl	8000274 <__aeabi_lmul>
 800491e:	0002      	movs	r2, r0
 8004920:	000b      	movs	r3, r1
 8004922:	0010      	movs	r0, r2
 8004924:	0019      	movs	r1, r3
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	603b      	str	r3, [r7, #0]
 800492a:	2300      	movs	r3, #0
 800492c:	607b      	str	r3, [r7, #4]
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f7fb fc7f 	bl	8000234 <__aeabi_uldivmod>
 8004936:	0002      	movs	r2, r0
 8004938:	000b      	movs	r3, r1
 800493a:	0013      	movs	r3, r2
 800493c:	637b      	str	r3, [r7, #52]	@ 0x34
 800493e:	e017      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004942:	0018      	movs	r0, r3
 8004944:	2300      	movs	r3, #0
 8004946:	0019      	movs	r1, r3
 8004948:	4a16      	ldr	r2, [pc, #88]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800494a:	2300      	movs	r3, #0
 800494c:	f7fb fc92 	bl	8000274 <__aeabi_lmul>
 8004950:	0002      	movs	r2, r0
 8004952:	000b      	movs	r3, r1
 8004954:	0010      	movs	r0, r2
 8004956:	0019      	movs	r1, r3
 8004958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495a:	001c      	movs	r4, r3
 800495c:	2300      	movs	r3, #0
 800495e:	001d      	movs	r5, r3
 8004960:	0022      	movs	r2, r4
 8004962:	002b      	movs	r3, r5
 8004964:	f7fb fc66 	bl	8000234 <__aeabi_uldivmod>
 8004968:	0002      	movs	r2, r0
 800496a:	000b      	movs	r3, r1
 800496c:	0013      	movs	r3, r2
 800496e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8004970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004972:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004974:	e00d      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004976:	4b09      	ldr	r3, [pc, #36]	@ (800499c <HAL_RCC_GetSysClockFreq+0x138>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	0b5b      	lsrs	r3, r3, #13
 800497c:	2207      	movs	r2, #7
 800497e:	4013      	ands	r3, r2
 8004980:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	3301      	adds	r3, #1
 8004986:	2280      	movs	r2, #128	@ 0x80
 8004988:	0212      	lsls	r2, r2, #8
 800498a:	409a      	lsls	r2, r3
 800498c:	0013      	movs	r3, r2
 800498e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004990:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8004994:	0018      	movs	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	b00e      	add	sp, #56	@ 0x38
 800499a:	bdb0      	pop	{r4, r5, r7, pc}
 800499c:	40021000 	.word	0x40021000
 80049a0:	003d0900 	.word	0x003d0900
 80049a4:	00f42400 	.word	0x00f42400
 80049a8:	007a1200 	.word	0x007a1200
 80049ac:	080067bc 	.word	0x080067bc

080049b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b4:	4b02      	ldr	r3, [pc, #8]	@ (80049c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80049b6:	681b      	ldr	r3, [r3, #0]
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	20000000 	.word	0x20000000

080049c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049c8:	f7ff fff2 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049cc:	0001      	movs	r1, r0
 80049ce:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	2207      	movs	r2, #7
 80049d6:	4013      	ands	r3, r2
 80049d8:	4a04      	ldr	r2, [pc, #16]	@ (80049ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80049da:	5cd3      	ldrb	r3, [r2, r3]
 80049dc:	40d9      	lsrs	r1, r3
 80049de:	000b      	movs	r3, r1
}
 80049e0:	0018      	movs	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			@ (mov r8, r8)
 80049e8:	40021000 	.word	0x40021000
 80049ec:	080067b4 	.word	0x080067b4

080049f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049f4:	f7ff ffdc 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049f8:	0001      	movs	r1, r0
 80049fa:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	0adb      	lsrs	r3, r3, #11
 8004a00:	2207      	movs	r2, #7
 8004a02:	4013      	ands	r3, r2
 8004a04:	4a04      	ldr	r2, [pc, #16]	@ (8004a18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a06:	5cd3      	ldrb	r3, [r2, r3]
 8004a08:	40d9      	lsrs	r1, r3
 8004a0a:	000b      	movs	r3, r1
}
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	40021000 	.word	0x40021000
 8004a18:	080067b4 	.word	0x080067b4

08004a1c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004a24:	2017      	movs	r0, #23
 8004a26:	183b      	adds	r3, r7, r0
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2220      	movs	r2, #32
 8004a32:	4013      	ands	r3, r2
 8004a34:	d100      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004a36:	e0c7      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a38:	4b84      	ldr	r3, [pc, #528]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a3c:	2380      	movs	r3, #128	@ 0x80
 8004a3e:	055b      	lsls	r3, r3, #21
 8004a40:	4013      	ands	r3, r2
 8004a42:	d109      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a44:	4b81      	ldr	r3, [pc, #516]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a48:	4b80      	ldr	r3, [pc, #512]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a4a:	2180      	movs	r1, #128	@ 0x80
 8004a4c:	0549      	lsls	r1, r1, #21
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004a52:	183b      	adds	r3, r7, r0
 8004a54:	2201      	movs	r2, #1
 8004a56:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a58:	4b7d      	ldr	r3, [pc, #500]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	2380      	movs	r3, #128	@ 0x80
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	4013      	ands	r3, r2
 8004a62:	d11a      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a64:	4b7a      	ldr	r3, [pc, #488]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b79      	ldr	r3, [pc, #484]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004a6a:	2180      	movs	r1, #128	@ 0x80
 8004a6c:	0049      	lsls	r1, r1, #1
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a72:	f7fe f96d 	bl	8002d50 <HAL_GetTick>
 8004a76:	0003      	movs	r3, r0
 8004a78:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7a:	e008      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7c:	f7fe f968 	bl	8002d50 <HAL_GetTick>
 8004a80:	0002      	movs	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b64      	cmp	r3, #100	@ 0x64
 8004a88:	d901      	bls.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e0d9      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8e:	4b70      	ldr	r3, [pc, #448]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	2380      	movs	r3, #128	@ 0x80
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	4013      	ands	r3, r2
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004a9a:	4b6c      	ldr	r3, [pc, #432]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	23c0      	movs	r3, #192	@ 0xc0
 8004aa0:	039b      	lsls	r3, r3, #14
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	23c0      	movs	r3, #192	@ 0xc0
 8004aac:	039b      	lsls	r3, r3, #14
 8004aae:	4013      	ands	r3, r2
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d013      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	23c0      	movs	r3, #192	@ 0xc0
 8004abc:	029b      	lsls	r3, r3, #10
 8004abe:	401a      	ands	r2, r3
 8004ac0:	23c0      	movs	r3, #192	@ 0xc0
 8004ac2:	029b      	lsls	r3, r3, #10
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d10a      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004ac8:	4b60      	ldr	r3, [pc, #384]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	2380      	movs	r3, #128	@ 0x80
 8004ace:	029b      	lsls	r3, r3, #10
 8004ad0:	401a      	ands	r2, r3
 8004ad2:	2380      	movs	r3, #128	@ 0x80
 8004ad4:	029b      	lsls	r3, r3, #10
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d101      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e0b1      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004ade:	4b5b      	ldr	r3, [pc, #364]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ae0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ae2:	23c0      	movs	r3, #192	@ 0xc0
 8004ae4:	029b      	lsls	r3, r3, #10
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d03b      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	23c0      	movs	r3, #192	@ 0xc0
 8004af6:	029b      	lsls	r3, r3, #10
 8004af8:	4013      	ands	r3, r2
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d033      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2220      	movs	r2, #32
 8004b06:	4013      	ands	r3, r2
 8004b08:	d02e      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004b0a:	4b50      	ldr	r3, [pc, #320]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b0e:	4a51      	ldr	r2, [pc, #324]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b14:	4b4d      	ldr	r3, [pc, #308]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b18:	4b4c      	ldr	r3, [pc, #304]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b1a:	2180      	movs	r1, #128	@ 0x80
 8004b1c:	0309      	lsls	r1, r1, #12
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b22:	4b4a      	ldr	r3, [pc, #296]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b26:	4b49      	ldr	r3, [pc, #292]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b28:	494b      	ldr	r1, [pc, #300]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004b2a:	400a      	ands	r2, r1
 8004b2c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004b2e:	4b47      	ldr	r3, [pc, #284]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	2380      	movs	r3, #128	@ 0x80
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d014      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3e:	f7fe f907 	bl	8002d50 <HAL_GetTick>
 8004b42:	0003      	movs	r3, r0
 8004b44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b46:	e009      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b48:	f7fe f902 	bl	8002d50 <HAL_GetTick>
 8004b4c:	0002      	movs	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	4a42      	ldr	r2, [pc, #264]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e072      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b60:	2380      	movs	r3, #128	@ 0x80
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4013      	ands	r3, r2
 8004b66:	d0ef      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d01f      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	23c0      	movs	r3, #192	@ 0xc0
 8004b78:	029b      	lsls	r3, r3, #10
 8004b7a:	401a      	ands	r2, r3
 8004b7c:	23c0      	movs	r3, #192	@ 0xc0
 8004b7e:	029b      	lsls	r3, r3, #10
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d10c      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004b84:	4b31      	ldr	r3, [pc, #196]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a35      	ldr	r2, [pc, #212]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	23c0      	movs	r3, #192	@ 0xc0
 8004b94:	039b      	lsls	r3, r3, #14
 8004b96:	401a      	ands	r2, r3
 8004b98:	4b2c      	ldr	r3, [pc, #176]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ba0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	23c0      	movs	r3, #192	@ 0xc0
 8004ba8:	029b      	lsls	r3, r3, #10
 8004baa:	401a      	ands	r2, r3
 8004bac:	4b27      	ldr	r3, [pc, #156]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bb2:	2317      	movs	r3, #23
 8004bb4:	18fb      	adds	r3, r7, r3
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d105      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bbc:	4b23      	ldr	r3, [pc, #140]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004bbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bc0:	4b22      	ldr	r3, [pc, #136]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004bc2:	4928      	ldr	r1, [pc, #160]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bc4:	400a      	ands	r2, r1
 8004bc6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d009      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd6:	220c      	movs	r2, #12
 8004bd8:	4393      	bics	r3, r2
 8004bda:	0019      	movs	r1, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004be2:	430a      	orrs	r2, r1
 8004be4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2204      	movs	r2, #4
 8004bec:	4013      	ands	r3, r2
 8004bee:	d009      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bf0:	4b16      	ldr	r3, [pc, #88]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	0019      	movs	r1, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	4b13      	ldr	r3, [pc, #76]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c00:	430a      	orrs	r2, r1
 8004c02:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2208      	movs	r2, #8
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d009      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c12:	4a16      	ldr	r2, [pc, #88]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	0019      	movs	r1, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2280      	movs	r2, #128	@ 0x80
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d009      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004c2c:	4b07      	ldr	r3, [pc, #28]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c30:	4a0f      	ldr	r2, [pc, #60]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	0019      	movs	r1, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695a      	ldr	r2, [r3, #20]
 8004c3a:	4b04      	ldr	r3, [pc, #16]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	0018      	movs	r0, r3
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b006      	add	sp, #24
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	40007000 	.word	0x40007000
 8004c54:	fffcffff 	.word	0xfffcffff
 8004c58:	fff7ffff 	.word	0xfff7ffff
 8004c5c:	00001388 	.word	0x00001388
 8004c60:	ffcfffff 	.word	0xffcfffff
 8004c64:	efffffff 	.word	0xefffffff
 8004c68:	fffff3ff 	.word	0xfffff3ff
 8004c6c:	ffffcfff 	.word	0xffffcfff
 8004c70:	fff3ffff 	.word	0xfff3ffff

08004c74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e044      	b.n	8004d10 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d107      	bne.n	8004c9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2278      	movs	r2, #120	@ 0x78
 8004c92:	2100      	movs	r1, #0
 8004c94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7fd feaf 	bl	80029fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2224      	movs	r2, #36	@ 0x24
 8004ca2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2101      	movs	r1, #1
 8004cb0:	438a      	bics	r2, r1
 8004cb2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f000 f8d0 	bl	8004e5c <UART_SetConfig>
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e024      	b.n	8004d10 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f000 fb0d 	bl	80052f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	490d      	ldr	r1, [pc, #52]	@ (8004d18 <HAL_UART_Init+0xa4>)
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	212a      	movs	r1, #42	@ 0x2a
 8004cf2:	438a      	bics	r2, r1
 8004cf4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2101      	movs	r1, #1
 8004d02:	430a      	orrs	r2, r1
 8004d04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f000 fba5 	bl	8005458 <UART_CheckIdleState>
 8004d0e:	0003      	movs	r3, r0
}
 8004d10:	0018      	movs	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b002      	add	sp, #8
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	ffffb7ff 	.word	0xffffb7ff

08004d1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	@ 0x28
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	1dbb      	adds	r3, r7, #6
 8004d2a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d000      	beq.n	8004d36 <HAL_UART_Transmit+0x1a>
 8004d34:	e08c      	b.n	8004e50 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_UART_Transmit+0x28>
 8004d3c:	1dbb      	adds	r3, r7, #6
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e084      	b.n	8004e52 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	2380      	movs	r3, #128	@ 0x80
 8004d4e:	015b      	lsls	r3, r3, #5
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d109      	bne.n	8004d68 <HAL_UART_Transmit+0x4c>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d105      	bne.n	8004d68 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	4013      	ands	r3, r2
 8004d62:	d001      	beq.n	8004d68 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e074      	b.n	8004e52 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2284      	movs	r2, #132	@ 0x84
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2221      	movs	r2, #33	@ 0x21
 8004d74:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d76:	f7fd ffeb 	bl	8002d50 <HAL_GetTick>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1dba      	adds	r2, r7, #6
 8004d82:	2150      	movs	r1, #80	@ 0x50
 8004d84:	8812      	ldrh	r2, [r2, #0]
 8004d86:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1dba      	adds	r2, r7, #6
 8004d8c:	2152      	movs	r1, #82	@ 0x52
 8004d8e:	8812      	ldrh	r2, [r2, #0]
 8004d90:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	2380      	movs	r3, #128	@ 0x80
 8004d98:	015b      	lsls	r3, r3, #5
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d108      	bne.n	8004db0 <HAL_UART_Transmit+0x94>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d104      	bne.n	8004db0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	e003      	b.n	8004db8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004db8:	e02f      	b.n	8004e1a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	0013      	movs	r3, r2
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2180      	movs	r1, #128	@ 0x80
 8004dc8:	f000 fbee 	bl	80055a8 <UART_WaitOnFlagUntilTimeout>
 8004dcc:	1e03      	subs	r3, r0, #0
 8004dce:	d004      	beq.n	8004dda <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e03b      	b.n	8004e52 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10b      	bne.n	8004df8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	001a      	movs	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	05d2      	lsls	r2, r2, #23
 8004dec:	0dd2      	lsrs	r2, r2, #23
 8004dee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	3302      	adds	r3, #2
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	e007      	b.n	8004e08 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	781a      	ldrb	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	3301      	adds	r3, #1
 8004e06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2252      	movs	r2, #82	@ 0x52
 8004e0c:	5a9b      	ldrh	r3, [r3, r2]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b299      	uxth	r1, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2252      	movs	r2, #82	@ 0x52
 8004e18:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2252      	movs	r2, #82	@ 0x52
 8004e1e:	5a9b      	ldrh	r3, [r3, r2]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1c9      	bne.n	8004dba <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	0013      	movs	r3, r2
 8004e30:	2200      	movs	r2, #0
 8004e32:	2140      	movs	r1, #64	@ 0x40
 8004e34:	f000 fbb8 	bl	80055a8 <UART_WaitOnFlagUntilTimeout>
 8004e38:	1e03      	subs	r3, r0, #0
 8004e3a:	d004      	beq.n	8004e46 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e005      	b.n	8004e52 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e000      	b.n	8004e52 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004e50:	2302      	movs	r3, #2
  }
}
 8004e52:	0018      	movs	r0, r3
 8004e54:	46bd      	mov	sp, r7
 8004e56:	b008      	add	sp, #32
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e5c:	b5b0      	push	{r4, r5, r7, lr}
 8004e5e:	b08e      	sub	sp, #56	@ 0x38
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e64:	231a      	movs	r3, #26
 8004e66:	2218      	movs	r2, #24
 8004e68:	189b      	adds	r3, r3, r2
 8004e6a:	19db      	adds	r3, r3, r7
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4ab4      	ldr	r2, [pc, #720]	@ (8005160 <UART_SetConfig+0x304>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	0019      	movs	r1, r3
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4aaf      	ldr	r2, [pc, #700]	@ (8005164 <UART_SetConfig+0x308>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	0019      	movs	r1, r3
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4aa9      	ldr	r2, [pc, #676]	@ (8005168 <UART_SetConfig+0x30c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d004      	beq.n	8004ed0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	4aa5      	ldr	r2, [pc, #660]	@ (800516c <UART_SetConfig+0x310>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	0019      	movs	r1, r3
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4aa1      	ldr	r2, [pc, #644]	@ (8005170 <UART_SetConfig+0x314>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d131      	bne.n	8004f54 <UART_SetConfig+0xf8>
 8004ef0:	4ba0      	ldr	r3, [pc, #640]	@ (8005174 <UART_SetConfig+0x318>)
 8004ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ef4:	220c      	movs	r2, #12
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b0c      	cmp	r3, #12
 8004efa:	d01d      	beq.n	8004f38 <UART_SetConfig+0xdc>
 8004efc:	d823      	bhi.n	8004f46 <UART_SetConfig+0xea>
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d00c      	beq.n	8004f1c <UART_SetConfig+0xc0>
 8004f02:	d820      	bhi.n	8004f46 <UART_SetConfig+0xea>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <UART_SetConfig+0xb2>
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d00e      	beq.n	8004f2a <UART_SetConfig+0xce>
 8004f0c:	e01b      	b.n	8004f46 <UART_SetConfig+0xea>
 8004f0e:	231b      	movs	r3, #27
 8004f10:	2218      	movs	r2, #24
 8004f12:	189b      	adds	r3, r3, r2
 8004f14:	19db      	adds	r3, r3, r7
 8004f16:	2200      	movs	r2, #0
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	e065      	b.n	8004fe8 <UART_SetConfig+0x18c>
 8004f1c:	231b      	movs	r3, #27
 8004f1e:	2218      	movs	r2, #24
 8004f20:	189b      	adds	r3, r3, r2
 8004f22:	19db      	adds	r3, r3, r7
 8004f24:	2202      	movs	r2, #2
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	e05e      	b.n	8004fe8 <UART_SetConfig+0x18c>
 8004f2a:	231b      	movs	r3, #27
 8004f2c:	2218      	movs	r2, #24
 8004f2e:	189b      	adds	r3, r3, r2
 8004f30:	19db      	adds	r3, r3, r7
 8004f32:	2204      	movs	r2, #4
 8004f34:	701a      	strb	r2, [r3, #0]
 8004f36:	e057      	b.n	8004fe8 <UART_SetConfig+0x18c>
 8004f38:	231b      	movs	r3, #27
 8004f3a:	2218      	movs	r2, #24
 8004f3c:	189b      	adds	r3, r3, r2
 8004f3e:	19db      	adds	r3, r3, r7
 8004f40:	2208      	movs	r2, #8
 8004f42:	701a      	strb	r2, [r3, #0]
 8004f44:	e050      	b.n	8004fe8 <UART_SetConfig+0x18c>
 8004f46:	231b      	movs	r3, #27
 8004f48:	2218      	movs	r2, #24
 8004f4a:	189b      	adds	r3, r3, r2
 8004f4c:	19db      	adds	r3, r3, r7
 8004f4e:	2210      	movs	r2, #16
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	e049      	b.n	8004fe8 <UART_SetConfig+0x18c>
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a83      	ldr	r2, [pc, #524]	@ (8005168 <UART_SetConfig+0x30c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d13e      	bne.n	8004fdc <UART_SetConfig+0x180>
 8004f5e:	4b85      	ldr	r3, [pc, #532]	@ (8005174 <UART_SetConfig+0x318>)
 8004f60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f62:	23c0      	movs	r3, #192	@ 0xc0
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	4013      	ands	r3, r2
 8004f68:	22c0      	movs	r2, #192	@ 0xc0
 8004f6a:	0112      	lsls	r2, r2, #4
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d027      	beq.n	8004fc0 <UART_SetConfig+0x164>
 8004f70:	22c0      	movs	r2, #192	@ 0xc0
 8004f72:	0112      	lsls	r2, r2, #4
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d82a      	bhi.n	8004fce <UART_SetConfig+0x172>
 8004f78:	2280      	movs	r2, #128	@ 0x80
 8004f7a:	0112      	lsls	r2, r2, #4
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d011      	beq.n	8004fa4 <UART_SetConfig+0x148>
 8004f80:	2280      	movs	r2, #128	@ 0x80
 8004f82:	0112      	lsls	r2, r2, #4
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d822      	bhi.n	8004fce <UART_SetConfig+0x172>
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d004      	beq.n	8004f96 <UART_SetConfig+0x13a>
 8004f8c:	2280      	movs	r2, #128	@ 0x80
 8004f8e:	00d2      	lsls	r2, r2, #3
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00e      	beq.n	8004fb2 <UART_SetConfig+0x156>
 8004f94:	e01b      	b.n	8004fce <UART_SetConfig+0x172>
 8004f96:	231b      	movs	r3, #27
 8004f98:	2218      	movs	r2, #24
 8004f9a:	189b      	adds	r3, r3, r2
 8004f9c:	19db      	adds	r3, r3, r7
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	e021      	b.n	8004fe8 <UART_SetConfig+0x18c>
 8004fa4:	231b      	movs	r3, #27
 8004fa6:	2218      	movs	r2, #24
 8004fa8:	189b      	adds	r3, r3, r2
 8004faa:	19db      	adds	r3, r3, r7
 8004fac:	2202      	movs	r2, #2
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	e01a      	b.n	8004fe8 <UART_SetConfig+0x18c>
 8004fb2:	231b      	movs	r3, #27
 8004fb4:	2218      	movs	r2, #24
 8004fb6:	189b      	adds	r3, r3, r2
 8004fb8:	19db      	adds	r3, r3, r7
 8004fba:	2204      	movs	r2, #4
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	e013      	b.n	8004fe8 <UART_SetConfig+0x18c>
 8004fc0:	231b      	movs	r3, #27
 8004fc2:	2218      	movs	r2, #24
 8004fc4:	189b      	adds	r3, r3, r2
 8004fc6:	19db      	adds	r3, r3, r7
 8004fc8:	2208      	movs	r2, #8
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	e00c      	b.n	8004fe8 <UART_SetConfig+0x18c>
 8004fce:	231b      	movs	r3, #27
 8004fd0:	2218      	movs	r2, #24
 8004fd2:	189b      	adds	r3, r3, r2
 8004fd4:	19db      	adds	r3, r3, r7
 8004fd6:	2210      	movs	r2, #16
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	e005      	b.n	8004fe8 <UART_SetConfig+0x18c>
 8004fdc:	231b      	movs	r3, #27
 8004fde:	2218      	movs	r2, #24
 8004fe0:	189b      	adds	r3, r3, r2
 8004fe2:	19db      	adds	r3, r3, r7
 8004fe4:	2210      	movs	r2, #16
 8004fe6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a5e      	ldr	r2, [pc, #376]	@ (8005168 <UART_SetConfig+0x30c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d000      	beq.n	8004ff4 <UART_SetConfig+0x198>
 8004ff2:	e084      	b.n	80050fe <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ff4:	231b      	movs	r3, #27
 8004ff6:	2218      	movs	r2, #24
 8004ff8:	189b      	adds	r3, r3, r2
 8004ffa:	19db      	adds	r3, r3, r7
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d01d      	beq.n	800503e <UART_SetConfig+0x1e2>
 8005002:	dc20      	bgt.n	8005046 <UART_SetConfig+0x1ea>
 8005004:	2b04      	cmp	r3, #4
 8005006:	d015      	beq.n	8005034 <UART_SetConfig+0x1d8>
 8005008:	dc1d      	bgt.n	8005046 <UART_SetConfig+0x1ea>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <UART_SetConfig+0x1b8>
 800500e:	2b02      	cmp	r3, #2
 8005010:	d005      	beq.n	800501e <UART_SetConfig+0x1c2>
 8005012:	e018      	b.n	8005046 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005014:	f7ff fcd6 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8005018:	0003      	movs	r3, r0
 800501a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800501c:	e01c      	b.n	8005058 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800501e:	4b55      	ldr	r3, [pc, #340]	@ (8005174 <UART_SetConfig+0x318>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2210      	movs	r2, #16
 8005024:	4013      	ands	r3, r2
 8005026:	d002      	beq.n	800502e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005028:	4b53      	ldr	r3, [pc, #332]	@ (8005178 <UART_SetConfig+0x31c>)
 800502a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800502c:	e014      	b.n	8005058 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800502e:	4b53      	ldr	r3, [pc, #332]	@ (800517c <UART_SetConfig+0x320>)
 8005030:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005032:	e011      	b.n	8005058 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005034:	f7ff fc16 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8005038:	0003      	movs	r3, r0
 800503a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800503c:	e00c      	b.n	8005058 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800503e:	2380      	movs	r3, #128	@ 0x80
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005044:	e008      	b.n	8005058 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800504a:	231a      	movs	r3, #26
 800504c:	2218      	movs	r2, #24
 800504e:	189b      	adds	r3, r3, r2
 8005050:	19db      	adds	r3, r3, r7
 8005052:	2201      	movs	r2, #1
 8005054:	701a      	strb	r2, [r3, #0]
        break;
 8005056:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800505a:	2b00      	cmp	r3, #0
 800505c:	d100      	bne.n	8005060 <UART_SetConfig+0x204>
 800505e:	e12f      	b.n	80052c0 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	0013      	movs	r3, r2
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	189b      	adds	r3, r3, r2
 800506a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800506c:	429a      	cmp	r2, r3
 800506e:	d305      	bcc.n	800507c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005078:	429a      	cmp	r2, r3
 800507a:	d906      	bls.n	800508a <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 800507c:	231a      	movs	r3, #26
 800507e:	2218      	movs	r2, #24
 8005080:	189b      	adds	r3, r3, r2
 8005082:	19db      	adds	r3, r3, r7
 8005084:	2201      	movs	r2, #1
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	e11a      	b.n	80052c0 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800508a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	6939      	ldr	r1, [r7, #16]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	000b      	movs	r3, r1
 8005098:	0e1b      	lsrs	r3, r3, #24
 800509a:	0010      	movs	r0, r2
 800509c:	0205      	lsls	r5, r0, #8
 800509e:	431d      	orrs	r5, r3
 80050a0:	000b      	movs	r3, r1
 80050a2:	021c      	lsls	r4, r3, #8
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	085b      	lsrs	r3, r3, #1
 80050aa:	60bb      	str	r3, [r7, #8]
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	68b8      	ldr	r0, [r7, #8]
 80050b2:	68f9      	ldr	r1, [r7, #12]
 80050b4:	1900      	adds	r0, r0, r4
 80050b6:	4169      	adcs	r1, r5
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	603b      	str	r3, [r7, #0]
 80050be:	2300      	movs	r3, #0
 80050c0:	607b      	str	r3, [r7, #4]
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f7fb f8b5 	bl	8000234 <__aeabi_uldivmod>
 80050ca:	0002      	movs	r2, r0
 80050cc:	000b      	movs	r3, r1
 80050ce:	0013      	movs	r3, r2
 80050d0:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050d4:	23c0      	movs	r3, #192	@ 0xc0
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	429a      	cmp	r2, r3
 80050da:	d309      	bcc.n	80050f0 <UART_SetConfig+0x294>
 80050dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050de:	2380      	movs	r3, #128	@ 0x80
 80050e0:	035b      	lsls	r3, r3, #13
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d204      	bcs.n	80050f0 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050ec:	60da      	str	r2, [r3, #12]
 80050ee:	e0e7      	b.n	80052c0 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80050f0:	231a      	movs	r3, #26
 80050f2:	2218      	movs	r2, #24
 80050f4:	189b      	adds	r3, r3, r2
 80050f6:	19db      	adds	r3, r3, r7
 80050f8:	2201      	movs	r2, #1
 80050fa:	701a      	strb	r2, [r3, #0]
 80050fc:	e0e0      	b.n	80052c0 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	69da      	ldr	r2, [r3, #28]
 8005102:	2380      	movs	r3, #128	@ 0x80
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	429a      	cmp	r2, r3
 8005108:	d000      	beq.n	800510c <UART_SetConfig+0x2b0>
 800510a:	e082      	b.n	8005212 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 800510c:	231b      	movs	r3, #27
 800510e:	2218      	movs	r2, #24
 8005110:	189b      	adds	r3, r3, r2
 8005112:	19db      	adds	r3, r3, r7
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b08      	cmp	r3, #8
 8005118:	d834      	bhi.n	8005184 <UART_SetConfig+0x328>
 800511a:	009a      	lsls	r2, r3, #2
 800511c:	4b18      	ldr	r3, [pc, #96]	@ (8005180 <UART_SetConfig+0x324>)
 800511e:	18d3      	adds	r3, r2, r3
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005124:	f7ff fc4e 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8005128:	0003      	movs	r3, r0
 800512a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800512c:	e033      	b.n	8005196 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800512e:	f7ff fc5f 	bl	80049f0 <HAL_RCC_GetPCLK2Freq>
 8005132:	0003      	movs	r3, r0
 8005134:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005136:	e02e      	b.n	8005196 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005138:	4b0e      	ldr	r3, [pc, #56]	@ (8005174 <UART_SetConfig+0x318>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2210      	movs	r2, #16
 800513e:	4013      	ands	r3, r2
 8005140:	d002      	beq.n	8005148 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005142:	4b0d      	ldr	r3, [pc, #52]	@ (8005178 <UART_SetConfig+0x31c>)
 8005144:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005146:	e026      	b.n	8005196 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8005148:	4b0c      	ldr	r3, [pc, #48]	@ (800517c <UART_SetConfig+0x320>)
 800514a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800514c:	e023      	b.n	8005196 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800514e:	f7ff fb89 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8005152:	0003      	movs	r3, r0
 8005154:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005156:	e01e      	b.n	8005196 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005158:	2380      	movs	r3, #128	@ 0x80
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800515e:	e01a      	b.n	8005196 <UART_SetConfig+0x33a>
 8005160:	efff69f3 	.word	0xefff69f3
 8005164:	ffffcfff 	.word	0xffffcfff
 8005168:	40004800 	.word	0x40004800
 800516c:	fffff4ff 	.word	0xfffff4ff
 8005170:	40004400 	.word	0x40004400
 8005174:	40021000 	.word	0x40021000
 8005178:	003d0900 	.word	0x003d0900
 800517c:	00f42400 	.word	0x00f42400
 8005180:	080067c8 	.word	0x080067c8
      default:
        pclk = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005188:	231a      	movs	r3, #26
 800518a:	2218      	movs	r2, #24
 800518c:	189b      	adds	r3, r3, r2
 800518e:	19db      	adds	r3, r3, r7
 8005190:	2201      	movs	r2, #1
 8005192:	701a      	strb	r2, [r3, #0]
        break;
 8005194:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005198:	2b00      	cmp	r3, #0
 800519a:	d100      	bne.n	800519e <UART_SetConfig+0x342>
 800519c:	e090      	b.n	80052c0 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800519e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a0:	005a      	lsls	r2, r3, #1
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	085b      	lsrs	r3, r3, #1
 80051a8:	18d2      	adds	r2, r2, r3
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	0019      	movs	r1, r3
 80051b0:	0010      	movs	r0, r2
 80051b2:	f7fa ffb3 	bl	800011c <__udivsi3>
 80051b6:	0003      	movs	r3, r0
 80051b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051bc:	2b0f      	cmp	r3, #15
 80051be:	d921      	bls.n	8005204 <UART_SetConfig+0x3a8>
 80051c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051c2:	2380      	movs	r3, #128	@ 0x80
 80051c4:	025b      	lsls	r3, r3, #9
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d21c      	bcs.n	8005204 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	200e      	movs	r0, #14
 80051d0:	2418      	movs	r4, #24
 80051d2:	1903      	adds	r3, r0, r4
 80051d4:	19db      	adds	r3, r3, r7
 80051d6:	210f      	movs	r1, #15
 80051d8:	438a      	bics	r2, r1
 80051da:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051de:	085b      	lsrs	r3, r3, #1
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2207      	movs	r2, #7
 80051e4:	4013      	ands	r3, r2
 80051e6:	b299      	uxth	r1, r3
 80051e8:	1903      	adds	r3, r0, r4
 80051ea:	19db      	adds	r3, r3, r7
 80051ec:	1902      	adds	r2, r0, r4
 80051ee:	19d2      	adds	r2, r2, r7
 80051f0:	8812      	ldrh	r2, [r2, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	1902      	adds	r2, r0, r4
 80051fc:	19d2      	adds	r2, r2, r7
 80051fe:	8812      	ldrh	r2, [r2, #0]
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	e05d      	b.n	80052c0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005204:	231a      	movs	r3, #26
 8005206:	2218      	movs	r2, #24
 8005208:	189b      	adds	r3, r3, r2
 800520a:	19db      	adds	r3, r3, r7
 800520c:	2201      	movs	r2, #1
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	e056      	b.n	80052c0 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005212:	231b      	movs	r3, #27
 8005214:	2218      	movs	r2, #24
 8005216:	189b      	adds	r3, r3, r2
 8005218:	19db      	adds	r3, r3, r7
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b08      	cmp	r3, #8
 800521e:	d822      	bhi.n	8005266 <UART_SetConfig+0x40a>
 8005220:	009a      	lsls	r2, r3, #2
 8005222:	4b2f      	ldr	r3, [pc, #188]	@ (80052e0 <UART_SetConfig+0x484>)
 8005224:	18d3      	adds	r3, r2, r3
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800522a:	f7ff fbcb 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 800522e:	0003      	movs	r3, r0
 8005230:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005232:	e021      	b.n	8005278 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005234:	f7ff fbdc 	bl	80049f0 <HAL_RCC_GetPCLK2Freq>
 8005238:	0003      	movs	r3, r0
 800523a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800523c:	e01c      	b.n	8005278 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800523e:	4b29      	ldr	r3, [pc, #164]	@ (80052e4 <UART_SetConfig+0x488>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2210      	movs	r2, #16
 8005244:	4013      	ands	r3, r2
 8005246:	d002      	beq.n	800524e <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005248:	4b27      	ldr	r3, [pc, #156]	@ (80052e8 <UART_SetConfig+0x48c>)
 800524a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800524c:	e014      	b.n	8005278 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800524e:	4b27      	ldr	r3, [pc, #156]	@ (80052ec <UART_SetConfig+0x490>)
 8005250:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005252:	e011      	b.n	8005278 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005254:	f7ff fb06 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8005258:	0003      	movs	r3, r0
 800525a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800525c:	e00c      	b.n	8005278 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800525e:	2380      	movs	r3, #128	@ 0x80
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005264:	e008      	b.n	8005278 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800526a:	231a      	movs	r3, #26
 800526c:	2218      	movs	r2, #24
 800526e:	189b      	adds	r3, r3, r2
 8005270:	19db      	adds	r3, r3, r7
 8005272:	2201      	movs	r2, #1
 8005274:	701a      	strb	r2, [r3, #0]
        break;
 8005276:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d020      	beq.n	80052c0 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	085a      	lsrs	r2, r3, #1
 8005284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005286:	18d2      	adds	r2, r2, r3
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	0019      	movs	r1, r3
 800528e:	0010      	movs	r0, r2
 8005290:	f7fa ff44 	bl	800011c <__udivsi3>
 8005294:	0003      	movs	r3, r0
 8005296:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	2b0f      	cmp	r3, #15
 800529c:	d90a      	bls.n	80052b4 <UART_SetConfig+0x458>
 800529e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052a0:	2380      	movs	r3, #128	@ 0x80
 80052a2:	025b      	lsls	r3, r3, #9
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d205      	bcs.n	80052b4 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60da      	str	r2, [r3, #12]
 80052b2:	e005      	b.n	80052c0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80052b4:	231a      	movs	r3, #26
 80052b6:	2218      	movs	r2, #24
 80052b8:	189b      	adds	r3, r3, r2
 80052ba:	19db      	adds	r3, r3, r7
 80052bc:	2201      	movs	r2, #1
 80052be:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	2200      	movs	r2, #0
 80052c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	2200      	movs	r2, #0
 80052ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80052cc:	231a      	movs	r3, #26
 80052ce:	2218      	movs	r2, #24
 80052d0:	189b      	adds	r3, r3, r2
 80052d2:	19db      	adds	r3, r3, r7
 80052d4:	781b      	ldrb	r3, [r3, #0]
}
 80052d6:	0018      	movs	r0, r3
 80052d8:	46bd      	mov	sp, r7
 80052da:	b00e      	add	sp, #56	@ 0x38
 80052dc:	bdb0      	pop	{r4, r5, r7, pc}
 80052de:	46c0      	nop			@ (mov r8, r8)
 80052e0:	080067ec 	.word	0x080067ec
 80052e4:	40021000 	.word	0x40021000
 80052e8:	003d0900 	.word	0x003d0900
 80052ec:	00f42400 	.word	0x00f42400

080052f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fc:	2201      	movs	r2, #1
 80052fe:	4013      	ands	r3, r2
 8005300:	d00b      	beq.n	800531a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	4a4a      	ldr	r2, [pc, #296]	@ (8005434 <UART_AdvFeatureConfig+0x144>)
 800530a:	4013      	ands	r3, r2
 800530c:	0019      	movs	r1, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531e:	2202      	movs	r2, #2
 8005320:	4013      	ands	r3, r2
 8005322:	d00b      	beq.n	800533c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	4a43      	ldr	r2, [pc, #268]	@ (8005438 <UART_AdvFeatureConfig+0x148>)
 800532c:	4013      	ands	r3, r2
 800532e:	0019      	movs	r1, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005340:	2204      	movs	r2, #4
 8005342:	4013      	ands	r3, r2
 8005344:	d00b      	beq.n	800535e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4a3b      	ldr	r2, [pc, #236]	@ (800543c <UART_AdvFeatureConfig+0x14c>)
 800534e:	4013      	ands	r3, r2
 8005350:	0019      	movs	r1, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005362:	2208      	movs	r2, #8
 8005364:	4013      	ands	r3, r2
 8005366:	d00b      	beq.n	8005380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	4a34      	ldr	r2, [pc, #208]	@ (8005440 <UART_AdvFeatureConfig+0x150>)
 8005370:	4013      	ands	r3, r2
 8005372:	0019      	movs	r1, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005384:	2210      	movs	r2, #16
 8005386:	4013      	ands	r3, r2
 8005388:	d00b      	beq.n	80053a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4a2c      	ldr	r2, [pc, #176]	@ (8005444 <UART_AdvFeatureConfig+0x154>)
 8005392:	4013      	ands	r3, r2
 8005394:	0019      	movs	r1, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a6:	2220      	movs	r2, #32
 80053a8:	4013      	ands	r3, r2
 80053aa:	d00b      	beq.n	80053c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	4a25      	ldr	r2, [pc, #148]	@ (8005448 <UART_AdvFeatureConfig+0x158>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	0019      	movs	r1, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c8:	2240      	movs	r2, #64	@ 0x40
 80053ca:	4013      	ands	r3, r2
 80053cc:	d01d      	beq.n	800540a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	4a1d      	ldr	r2, [pc, #116]	@ (800544c <UART_AdvFeatureConfig+0x15c>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	0019      	movs	r1, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053ea:	2380      	movs	r3, #128	@ 0x80
 80053ec:	035b      	lsls	r3, r3, #13
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d10b      	bne.n	800540a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	4a15      	ldr	r2, [pc, #84]	@ (8005450 <UART_AdvFeatureConfig+0x160>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	0019      	movs	r1, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540e:	2280      	movs	r2, #128	@ 0x80
 8005410:	4013      	ands	r3, r2
 8005412:	d00b      	beq.n	800542c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4a0e      	ldr	r2, [pc, #56]	@ (8005454 <UART_AdvFeatureConfig+0x164>)
 800541c:	4013      	ands	r3, r2
 800541e:	0019      	movs	r1, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	605a      	str	r2, [r3, #4]
  }
}
 800542c:	46c0      	nop			@ (mov r8, r8)
 800542e:	46bd      	mov	sp, r7
 8005430:	b002      	add	sp, #8
 8005432:	bd80      	pop	{r7, pc}
 8005434:	fffdffff 	.word	0xfffdffff
 8005438:	fffeffff 	.word	0xfffeffff
 800543c:	fffbffff 	.word	0xfffbffff
 8005440:	ffff7fff 	.word	0xffff7fff
 8005444:	ffffefff 	.word	0xffffefff
 8005448:	ffffdfff 	.word	0xffffdfff
 800544c:	ffefffff 	.word	0xffefffff
 8005450:	ff9fffff 	.word	0xff9fffff
 8005454:	fff7ffff 	.word	0xfff7ffff

08005458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b092      	sub	sp, #72	@ 0x48
 800545c:	af02      	add	r7, sp, #8
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2284      	movs	r2, #132	@ 0x84
 8005464:	2100      	movs	r1, #0
 8005466:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005468:	f7fd fc72 	bl	8002d50 <HAL_GetTick>
 800546c:	0003      	movs	r3, r0
 800546e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2208      	movs	r2, #8
 8005478:	4013      	ands	r3, r2
 800547a:	2b08      	cmp	r3, #8
 800547c:	d12c      	bne.n	80054d8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800547e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005480:	2280      	movs	r2, #128	@ 0x80
 8005482:	0391      	lsls	r1, r2, #14
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	4a46      	ldr	r2, [pc, #280]	@ (80055a0 <UART_CheckIdleState+0x148>)
 8005488:	9200      	str	r2, [sp, #0]
 800548a:	2200      	movs	r2, #0
 800548c:	f000 f88c 	bl	80055a8 <UART_WaitOnFlagUntilTimeout>
 8005490:	1e03      	subs	r3, r0, #0
 8005492:	d021      	beq.n	80054d8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005494:	f3ef 8310 	mrs	r3, PRIMASK
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800549c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800549e:	2301      	movs	r3, #1
 80054a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a4:	f383 8810 	msr	PRIMASK, r3
}
 80054a8:	46c0      	nop			@ (mov r8, r8)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2180      	movs	r1, #128	@ 0x80
 80054b6:	438a      	bics	r2, r1
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c0:	f383 8810 	msr	PRIMASK, r3
}
 80054c4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2278      	movs	r2, #120	@ 0x78
 80054d0:	2100      	movs	r1, #0
 80054d2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e05f      	b.n	8005598 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2204      	movs	r2, #4
 80054e0:	4013      	ands	r3, r2
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d146      	bne.n	8005574 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e8:	2280      	movs	r2, #128	@ 0x80
 80054ea:	03d1      	lsls	r1, r2, #15
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	4a2c      	ldr	r2, [pc, #176]	@ (80055a0 <UART_CheckIdleState+0x148>)
 80054f0:	9200      	str	r2, [sp, #0]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f000 f858 	bl	80055a8 <UART_WaitOnFlagUntilTimeout>
 80054f8:	1e03      	subs	r3, r0, #0
 80054fa:	d03b      	beq.n	8005574 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005500:	60fb      	str	r3, [r7, #12]
  return(result);
 8005502:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005504:	637b      	str	r3, [r7, #52]	@ 0x34
 8005506:	2301      	movs	r3, #1
 8005508:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f383 8810 	msr	PRIMASK, r3
}
 8005510:	46c0      	nop			@ (mov r8, r8)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4921      	ldr	r1, [pc, #132]	@ (80055a4 <UART_CheckIdleState+0x14c>)
 800551e:	400a      	ands	r2, r1
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005524:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f383 8810 	msr	PRIMASK, r3
}
 800552c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800552e:	f3ef 8310 	mrs	r3, PRIMASK
 8005532:	61bb      	str	r3, [r7, #24]
  return(result);
 8005534:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005536:	633b      	str	r3, [r7, #48]	@ 0x30
 8005538:	2301      	movs	r3, #1
 800553a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f383 8810 	msr	PRIMASK, r3
}
 8005542:	46c0      	nop			@ (mov r8, r8)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2101      	movs	r1, #1
 8005550:	438a      	bics	r2, r1
 8005552:	609a      	str	r2, [r3, #8]
 8005554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005556:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	f383 8810 	msr	PRIMASK, r3
}
 800555e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2280      	movs	r2, #128	@ 0x80
 8005564:	2120      	movs	r1, #32
 8005566:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2278      	movs	r2, #120	@ 0x78
 800556c:	2100      	movs	r1, #0
 800556e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e011      	b.n	8005598 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2280      	movs	r2, #128	@ 0x80
 800557e:	2120      	movs	r1, #32
 8005580:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2278      	movs	r2, #120	@ 0x78
 8005592:	2100      	movs	r1, #0
 8005594:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	0018      	movs	r0, r3
 800559a:	46bd      	mov	sp, r7
 800559c:	b010      	add	sp, #64	@ 0x40
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	01ffffff 	.word	0x01ffffff
 80055a4:	fffffedf 	.word	0xfffffedf

080055a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	1dfb      	adds	r3, r7, #7
 80055b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b8:	e04b      	b.n	8005652 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	3301      	adds	r3, #1
 80055be:	d048      	beq.n	8005652 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c0:	f7fd fbc6 	bl	8002d50 <HAL_GetTick>
 80055c4:	0002      	movs	r2, r0
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d302      	bcc.n	80055d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e04b      	b.n	8005672 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2204      	movs	r2, #4
 80055e2:	4013      	ands	r3, r2
 80055e4:	d035      	beq.n	8005652 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	2208      	movs	r2, #8
 80055ee:	4013      	ands	r3, r2
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d111      	bne.n	8005618 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2208      	movs	r2, #8
 80055fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	0018      	movs	r0, r3
 8005600:	f000 f83c 	bl	800567c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2284      	movs	r2, #132	@ 0x84
 8005608:	2108      	movs	r1, #8
 800560a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2278      	movs	r2, #120	@ 0x78
 8005610:	2100      	movs	r1, #0
 8005612:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e02c      	b.n	8005672 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69da      	ldr	r2, [r3, #28]
 800561e:	2380      	movs	r3, #128	@ 0x80
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	401a      	ands	r2, r3
 8005624:	2380      	movs	r3, #128	@ 0x80
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	429a      	cmp	r2, r3
 800562a:	d112      	bne.n	8005652 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2280      	movs	r2, #128	@ 0x80
 8005632:	0112      	lsls	r2, r2, #4
 8005634:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	0018      	movs	r0, r3
 800563a:	f000 f81f 	bl	800567c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2284      	movs	r2, #132	@ 0x84
 8005642:	2120      	movs	r1, #32
 8005644:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2278      	movs	r2, #120	@ 0x78
 800564a:	2100      	movs	r1, #0
 800564c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e00f      	b.n	8005672 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	4013      	ands	r3, r2
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	425a      	negs	r2, r3
 8005662:	4153      	adcs	r3, r2
 8005664:	b2db      	uxtb	r3, r3
 8005666:	001a      	movs	r2, r3
 8005668:	1dfb      	adds	r3, r7, #7
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	429a      	cmp	r2, r3
 800566e:	d0a4      	beq.n	80055ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	0018      	movs	r0, r3
 8005674:	46bd      	mov	sp, r7
 8005676:	b004      	add	sp, #16
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08e      	sub	sp, #56	@ 0x38
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005684:	f3ef 8310 	mrs	r3, PRIMASK
 8005688:	617b      	str	r3, [r7, #20]
  return(result);
 800568a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800568c:	637b      	str	r3, [r7, #52]	@ 0x34
 800568e:	2301      	movs	r3, #1
 8005690:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	f383 8810 	msr	PRIMASK, r3
}
 8005698:	46c0      	nop			@ (mov r8, r8)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4926      	ldr	r1, [pc, #152]	@ (8005740 <UART_EndRxTransfer+0xc4>)
 80056a6:	400a      	ands	r2, r1
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f383 8810 	msr	PRIMASK, r3
}
 80056b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056b6:	f3ef 8310 	mrs	r3, PRIMASK
 80056ba:	623b      	str	r3, [r7, #32]
  return(result);
 80056bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056be:	633b      	str	r3, [r7, #48]	@ 0x30
 80056c0:	2301      	movs	r3, #1
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	f383 8810 	msr	PRIMASK, r3
}
 80056ca:	46c0      	nop			@ (mov r8, r8)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2101      	movs	r1, #1
 80056d8:	438a      	bics	r2, r1
 80056da:	609a      	str	r2, [r3, #8]
 80056dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056de:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e2:	f383 8810 	msr	PRIMASK, r3
}
 80056e6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d118      	bne.n	8005722 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056f0:	f3ef 8310 	mrs	r3, PRIMASK
 80056f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80056f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056fa:	2301      	movs	r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f383 8810 	msr	PRIMASK, r3
}
 8005704:	46c0      	nop			@ (mov r8, r8)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2110      	movs	r1, #16
 8005712:	438a      	bics	r2, r1
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005718:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f383 8810 	msr	PRIMASK, r3
}
 8005720:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2280      	movs	r2, #128	@ 0x80
 8005726:	2120      	movs	r1, #32
 8005728:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	46bd      	mov	sp, r7
 800573a:	b00e      	add	sp, #56	@ 0x38
 800573c:	bd80      	pop	{r7, pc}
 800573e:	46c0      	nop			@ (mov r8, r8)
 8005740:	fffffedf 	.word	0xfffffedf

08005744 <std>:
 8005744:	2300      	movs	r3, #0
 8005746:	b510      	push	{r4, lr}
 8005748:	0004      	movs	r4, r0
 800574a:	6003      	str	r3, [r0, #0]
 800574c:	6043      	str	r3, [r0, #4]
 800574e:	6083      	str	r3, [r0, #8]
 8005750:	8181      	strh	r1, [r0, #12]
 8005752:	6643      	str	r3, [r0, #100]	@ 0x64
 8005754:	81c2      	strh	r2, [r0, #14]
 8005756:	6103      	str	r3, [r0, #16]
 8005758:	6143      	str	r3, [r0, #20]
 800575a:	6183      	str	r3, [r0, #24]
 800575c:	0019      	movs	r1, r3
 800575e:	2208      	movs	r2, #8
 8005760:	305c      	adds	r0, #92	@ 0x5c
 8005762:	f000 fa0f 	bl	8005b84 <memset>
 8005766:	4b0b      	ldr	r3, [pc, #44]	@ (8005794 <std+0x50>)
 8005768:	6224      	str	r4, [r4, #32]
 800576a:	6263      	str	r3, [r4, #36]	@ 0x24
 800576c:	4b0a      	ldr	r3, [pc, #40]	@ (8005798 <std+0x54>)
 800576e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005770:	4b0a      	ldr	r3, [pc, #40]	@ (800579c <std+0x58>)
 8005772:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005774:	4b0a      	ldr	r3, [pc, #40]	@ (80057a0 <std+0x5c>)
 8005776:	6323      	str	r3, [r4, #48]	@ 0x30
 8005778:	4b0a      	ldr	r3, [pc, #40]	@ (80057a4 <std+0x60>)
 800577a:	429c      	cmp	r4, r3
 800577c:	d005      	beq.n	800578a <std+0x46>
 800577e:	4b0a      	ldr	r3, [pc, #40]	@ (80057a8 <std+0x64>)
 8005780:	429c      	cmp	r4, r3
 8005782:	d002      	beq.n	800578a <std+0x46>
 8005784:	4b09      	ldr	r3, [pc, #36]	@ (80057ac <std+0x68>)
 8005786:	429c      	cmp	r4, r3
 8005788:	d103      	bne.n	8005792 <std+0x4e>
 800578a:	0020      	movs	r0, r4
 800578c:	3058      	adds	r0, #88	@ 0x58
 800578e:	f000 fa79 	bl	8005c84 <__retarget_lock_init_recursive>
 8005792:	bd10      	pop	{r4, pc}
 8005794:	080059ad 	.word	0x080059ad
 8005798:	080059d5 	.word	0x080059d5
 800579c:	08005a0d 	.word	0x08005a0d
 80057a0:	08005a39 	.word	0x08005a39
 80057a4:	200002b8 	.word	0x200002b8
 80057a8:	20000320 	.word	0x20000320
 80057ac:	20000388 	.word	0x20000388

080057b0 <stdio_exit_handler>:
 80057b0:	b510      	push	{r4, lr}
 80057b2:	4a03      	ldr	r2, [pc, #12]	@ (80057c0 <stdio_exit_handler+0x10>)
 80057b4:	4903      	ldr	r1, [pc, #12]	@ (80057c4 <stdio_exit_handler+0x14>)
 80057b6:	4804      	ldr	r0, [pc, #16]	@ (80057c8 <stdio_exit_handler+0x18>)
 80057b8:	f000 f86c 	bl	8005894 <_fwalk_sglue>
 80057bc:	bd10      	pop	{r4, pc}
 80057be:	46c0      	nop			@ (mov r8, r8)
 80057c0:	2000000c 	.word	0x2000000c
 80057c4:	08006515 	.word	0x08006515
 80057c8:	2000001c 	.word	0x2000001c

080057cc <cleanup_stdio>:
 80057cc:	6841      	ldr	r1, [r0, #4]
 80057ce:	4b0b      	ldr	r3, [pc, #44]	@ (80057fc <cleanup_stdio+0x30>)
 80057d0:	b510      	push	{r4, lr}
 80057d2:	0004      	movs	r4, r0
 80057d4:	4299      	cmp	r1, r3
 80057d6:	d001      	beq.n	80057dc <cleanup_stdio+0x10>
 80057d8:	f000 fe9c 	bl	8006514 <_fflush_r>
 80057dc:	68a1      	ldr	r1, [r4, #8]
 80057de:	4b08      	ldr	r3, [pc, #32]	@ (8005800 <cleanup_stdio+0x34>)
 80057e0:	4299      	cmp	r1, r3
 80057e2:	d002      	beq.n	80057ea <cleanup_stdio+0x1e>
 80057e4:	0020      	movs	r0, r4
 80057e6:	f000 fe95 	bl	8006514 <_fflush_r>
 80057ea:	68e1      	ldr	r1, [r4, #12]
 80057ec:	4b05      	ldr	r3, [pc, #20]	@ (8005804 <cleanup_stdio+0x38>)
 80057ee:	4299      	cmp	r1, r3
 80057f0:	d002      	beq.n	80057f8 <cleanup_stdio+0x2c>
 80057f2:	0020      	movs	r0, r4
 80057f4:	f000 fe8e 	bl	8006514 <_fflush_r>
 80057f8:	bd10      	pop	{r4, pc}
 80057fa:	46c0      	nop			@ (mov r8, r8)
 80057fc:	200002b8 	.word	0x200002b8
 8005800:	20000320 	.word	0x20000320
 8005804:	20000388 	.word	0x20000388

08005808 <global_stdio_init.part.0>:
 8005808:	b510      	push	{r4, lr}
 800580a:	4b09      	ldr	r3, [pc, #36]	@ (8005830 <global_stdio_init.part.0+0x28>)
 800580c:	4a09      	ldr	r2, [pc, #36]	@ (8005834 <global_stdio_init.part.0+0x2c>)
 800580e:	2104      	movs	r1, #4
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	4809      	ldr	r0, [pc, #36]	@ (8005838 <global_stdio_init.part.0+0x30>)
 8005814:	2200      	movs	r2, #0
 8005816:	f7ff ff95 	bl	8005744 <std>
 800581a:	2201      	movs	r2, #1
 800581c:	2109      	movs	r1, #9
 800581e:	4807      	ldr	r0, [pc, #28]	@ (800583c <global_stdio_init.part.0+0x34>)
 8005820:	f7ff ff90 	bl	8005744 <std>
 8005824:	2202      	movs	r2, #2
 8005826:	2112      	movs	r1, #18
 8005828:	4805      	ldr	r0, [pc, #20]	@ (8005840 <global_stdio_init.part.0+0x38>)
 800582a:	f7ff ff8b 	bl	8005744 <std>
 800582e:	bd10      	pop	{r4, pc}
 8005830:	200003f0 	.word	0x200003f0
 8005834:	080057b1 	.word	0x080057b1
 8005838:	200002b8 	.word	0x200002b8
 800583c:	20000320 	.word	0x20000320
 8005840:	20000388 	.word	0x20000388

08005844 <__sfp_lock_acquire>:
 8005844:	b510      	push	{r4, lr}
 8005846:	4802      	ldr	r0, [pc, #8]	@ (8005850 <__sfp_lock_acquire+0xc>)
 8005848:	f000 fa1d 	bl	8005c86 <__retarget_lock_acquire_recursive>
 800584c:	bd10      	pop	{r4, pc}
 800584e:	46c0      	nop			@ (mov r8, r8)
 8005850:	200003f9 	.word	0x200003f9

08005854 <__sfp_lock_release>:
 8005854:	b510      	push	{r4, lr}
 8005856:	4802      	ldr	r0, [pc, #8]	@ (8005860 <__sfp_lock_release+0xc>)
 8005858:	f000 fa16 	bl	8005c88 <__retarget_lock_release_recursive>
 800585c:	bd10      	pop	{r4, pc}
 800585e:	46c0      	nop			@ (mov r8, r8)
 8005860:	200003f9 	.word	0x200003f9

08005864 <__sinit>:
 8005864:	b510      	push	{r4, lr}
 8005866:	0004      	movs	r4, r0
 8005868:	f7ff ffec 	bl	8005844 <__sfp_lock_acquire>
 800586c:	6a23      	ldr	r3, [r4, #32]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <__sinit+0x14>
 8005872:	f7ff ffef 	bl	8005854 <__sfp_lock_release>
 8005876:	bd10      	pop	{r4, pc}
 8005878:	4b04      	ldr	r3, [pc, #16]	@ (800588c <__sinit+0x28>)
 800587a:	6223      	str	r3, [r4, #32]
 800587c:	4b04      	ldr	r3, [pc, #16]	@ (8005890 <__sinit+0x2c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1f6      	bne.n	8005872 <__sinit+0xe>
 8005884:	f7ff ffc0 	bl	8005808 <global_stdio_init.part.0>
 8005888:	e7f3      	b.n	8005872 <__sinit+0xe>
 800588a:	46c0      	nop			@ (mov r8, r8)
 800588c:	080057cd 	.word	0x080057cd
 8005890:	200003f0 	.word	0x200003f0

08005894 <_fwalk_sglue>:
 8005894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005896:	0014      	movs	r4, r2
 8005898:	2600      	movs	r6, #0
 800589a:	9000      	str	r0, [sp, #0]
 800589c:	9101      	str	r1, [sp, #4]
 800589e:	68a5      	ldr	r5, [r4, #8]
 80058a0:	6867      	ldr	r7, [r4, #4]
 80058a2:	3f01      	subs	r7, #1
 80058a4:	d504      	bpl.n	80058b0 <_fwalk_sglue+0x1c>
 80058a6:	6824      	ldr	r4, [r4, #0]
 80058a8:	2c00      	cmp	r4, #0
 80058aa:	d1f8      	bne.n	800589e <_fwalk_sglue+0xa>
 80058ac:	0030      	movs	r0, r6
 80058ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058b0:	89ab      	ldrh	r3, [r5, #12]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d908      	bls.n	80058c8 <_fwalk_sglue+0x34>
 80058b6:	220e      	movs	r2, #14
 80058b8:	5eab      	ldrsh	r3, [r5, r2]
 80058ba:	3301      	adds	r3, #1
 80058bc:	d004      	beq.n	80058c8 <_fwalk_sglue+0x34>
 80058be:	0029      	movs	r1, r5
 80058c0:	9800      	ldr	r0, [sp, #0]
 80058c2:	9b01      	ldr	r3, [sp, #4]
 80058c4:	4798      	blx	r3
 80058c6:	4306      	orrs	r6, r0
 80058c8:	3568      	adds	r5, #104	@ 0x68
 80058ca:	e7ea      	b.n	80058a2 <_fwalk_sglue+0xe>

080058cc <iprintf>:
 80058cc:	b40f      	push	{r0, r1, r2, r3}
 80058ce:	b507      	push	{r0, r1, r2, lr}
 80058d0:	4905      	ldr	r1, [pc, #20]	@ (80058e8 <iprintf+0x1c>)
 80058d2:	ab04      	add	r3, sp, #16
 80058d4:	6808      	ldr	r0, [r1, #0]
 80058d6:	cb04      	ldmia	r3!, {r2}
 80058d8:	6881      	ldr	r1, [r0, #8]
 80058da:	9301      	str	r3, [sp, #4]
 80058dc:	f000 fafa 	bl	8005ed4 <_vfiprintf_r>
 80058e0:	b003      	add	sp, #12
 80058e2:	bc08      	pop	{r3}
 80058e4:	b004      	add	sp, #16
 80058e6:	4718      	bx	r3
 80058e8:	20000018 	.word	0x20000018

080058ec <_puts_r>:
 80058ec:	6a03      	ldr	r3, [r0, #32]
 80058ee:	b570      	push	{r4, r5, r6, lr}
 80058f0:	0005      	movs	r5, r0
 80058f2:	000e      	movs	r6, r1
 80058f4:	6884      	ldr	r4, [r0, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <_puts_r+0x12>
 80058fa:	f7ff ffb3 	bl	8005864 <__sinit>
 80058fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005900:	07db      	lsls	r3, r3, #31
 8005902:	d405      	bmi.n	8005910 <_puts_r+0x24>
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	059b      	lsls	r3, r3, #22
 8005908:	d402      	bmi.n	8005910 <_puts_r+0x24>
 800590a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800590c:	f000 f9bb 	bl	8005c86 <__retarget_lock_acquire_recursive>
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	071b      	lsls	r3, r3, #28
 8005914:	d502      	bpl.n	800591c <_puts_r+0x30>
 8005916:	6923      	ldr	r3, [r4, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d11f      	bne.n	800595c <_puts_r+0x70>
 800591c:	0021      	movs	r1, r4
 800591e:	0028      	movs	r0, r5
 8005920:	f000 f8d2 	bl	8005ac8 <__swsetup_r>
 8005924:	2800      	cmp	r0, #0
 8005926:	d019      	beq.n	800595c <_puts_r+0x70>
 8005928:	2501      	movs	r5, #1
 800592a:	426d      	negs	r5, r5
 800592c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800592e:	07db      	lsls	r3, r3, #31
 8005930:	d405      	bmi.n	800593e <_puts_r+0x52>
 8005932:	89a3      	ldrh	r3, [r4, #12]
 8005934:	059b      	lsls	r3, r3, #22
 8005936:	d402      	bmi.n	800593e <_puts_r+0x52>
 8005938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800593a:	f000 f9a5 	bl	8005c88 <__retarget_lock_release_recursive>
 800593e:	0028      	movs	r0, r5
 8005940:	bd70      	pop	{r4, r5, r6, pc}
 8005942:	3601      	adds	r6, #1
 8005944:	60a3      	str	r3, [r4, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	da04      	bge.n	8005954 <_puts_r+0x68>
 800594a:	69a2      	ldr	r2, [r4, #24]
 800594c:	429a      	cmp	r2, r3
 800594e:	dc16      	bgt.n	800597e <_puts_r+0x92>
 8005950:	290a      	cmp	r1, #10
 8005952:	d014      	beq.n	800597e <_puts_r+0x92>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	6022      	str	r2, [r4, #0]
 800595a:	7019      	strb	r1, [r3, #0]
 800595c:	68a3      	ldr	r3, [r4, #8]
 800595e:	7831      	ldrb	r1, [r6, #0]
 8005960:	3b01      	subs	r3, #1
 8005962:	2900      	cmp	r1, #0
 8005964:	d1ed      	bne.n	8005942 <_puts_r+0x56>
 8005966:	60a3      	str	r3, [r4, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	da0f      	bge.n	800598c <_puts_r+0xa0>
 800596c:	0022      	movs	r2, r4
 800596e:	0028      	movs	r0, r5
 8005970:	310a      	adds	r1, #10
 8005972:	f000 f867 	bl	8005a44 <__swbuf_r>
 8005976:	3001      	adds	r0, #1
 8005978:	d0d6      	beq.n	8005928 <_puts_r+0x3c>
 800597a:	250a      	movs	r5, #10
 800597c:	e7d6      	b.n	800592c <_puts_r+0x40>
 800597e:	0022      	movs	r2, r4
 8005980:	0028      	movs	r0, r5
 8005982:	f000 f85f 	bl	8005a44 <__swbuf_r>
 8005986:	3001      	adds	r0, #1
 8005988:	d1e8      	bne.n	800595c <_puts_r+0x70>
 800598a:	e7cd      	b.n	8005928 <_puts_r+0x3c>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	6022      	str	r2, [r4, #0]
 8005992:	220a      	movs	r2, #10
 8005994:	701a      	strb	r2, [r3, #0]
 8005996:	e7f0      	b.n	800597a <_puts_r+0x8e>

08005998 <puts>:
 8005998:	b510      	push	{r4, lr}
 800599a:	4b03      	ldr	r3, [pc, #12]	@ (80059a8 <puts+0x10>)
 800599c:	0001      	movs	r1, r0
 800599e:	6818      	ldr	r0, [r3, #0]
 80059a0:	f7ff ffa4 	bl	80058ec <_puts_r>
 80059a4:	bd10      	pop	{r4, pc}
 80059a6:	46c0      	nop			@ (mov r8, r8)
 80059a8:	20000018 	.word	0x20000018

080059ac <__sread>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	000c      	movs	r4, r1
 80059b0:	250e      	movs	r5, #14
 80059b2:	5f49      	ldrsh	r1, [r1, r5]
 80059b4:	f000 f914 	bl	8005be0 <_read_r>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	db03      	blt.n	80059c4 <__sread+0x18>
 80059bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80059be:	181b      	adds	r3, r3, r0
 80059c0:	6563      	str	r3, [r4, #84]	@ 0x54
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	4a02      	ldr	r2, [pc, #8]	@ (80059d0 <__sread+0x24>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	81a3      	strh	r3, [r4, #12]
 80059cc:	e7f9      	b.n	80059c2 <__sread+0x16>
 80059ce:	46c0      	nop			@ (mov r8, r8)
 80059d0:	ffffefff 	.word	0xffffefff

080059d4 <__swrite>:
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	001f      	movs	r7, r3
 80059d8:	898b      	ldrh	r3, [r1, #12]
 80059da:	0005      	movs	r5, r0
 80059dc:	000c      	movs	r4, r1
 80059de:	0016      	movs	r6, r2
 80059e0:	05db      	lsls	r3, r3, #23
 80059e2:	d505      	bpl.n	80059f0 <__swrite+0x1c>
 80059e4:	230e      	movs	r3, #14
 80059e6:	5ec9      	ldrsh	r1, [r1, r3]
 80059e8:	2200      	movs	r2, #0
 80059ea:	2302      	movs	r3, #2
 80059ec:	f000 f8e4 	bl	8005bb8 <_lseek_r>
 80059f0:	89a3      	ldrh	r3, [r4, #12]
 80059f2:	4a05      	ldr	r2, [pc, #20]	@ (8005a08 <__swrite+0x34>)
 80059f4:	0028      	movs	r0, r5
 80059f6:	4013      	ands	r3, r2
 80059f8:	81a3      	strh	r3, [r4, #12]
 80059fa:	0032      	movs	r2, r6
 80059fc:	230e      	movs	r3, #14
 80059fe:	5ee1      	ldrsh	r1, [r4, r3]
 8005a00:	003b      	movs	r3, r7
 8005a02:	f000 f901 	bl	8005c08 <_write_r>
 8005a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a08:	ffffefff 	.word	0xffffefff

08005a0c <__sseek>:
 8005a0c:	b570      	push	{r4, r5, r6, lr}
 8005a0e:	000c      	movs	r4, r1
 8005a10:	250e      	movs	r5, #14
 8005a12:	5f49      	ldrsh	r1, [r1, r5]
 8005a14:	f000 f8d0 	bl	8005bb8 <_lseek_r>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	1c42      	adds	r2, r0, #1
 8005a1c:	d103      	bne.n	8005a26 <__sseek+0x1a>
 8005a1e:	4a05      	ldr	r2, [pc, #20]	@ (8005a34 <__sseek+0x28>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	81a3      	strh	r3, [r4, #12]
 8005a24:	bd70      	pop	{r4, r5, r6, pc}
 8005a26:	2280      	movs	r2, #128	@ 0x80
 8005a28:	0152      	lsls	r2, r2, #5
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	81a3      	strh	r3, [r4, #12]
 8005a2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a30:	e7f8      	b.n	8005a24 <__sseek+0x18>
 8005a32:	46c0      	nop			@ (mov r8, r8)
 8005a34:	ffffefff 	.word	0xffffefff

08005a38 <__sclose>:
 8005a38:	b510      	push	{r4, lr}
 8005a3a:	230e      	movs	r3, #14
 8005a3c:	5ec9      	ldrsh	r1, [r1, r3]
 8005a3e:	f000 f8a9 	bl	8005b94 <_close_r>
 8005a42:	bd10      	pop	{r4, pc}

08005a44 <__swbuf_r>:
 8005a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a46:	0006      	movs	r6, r0
 8005a48:	000d      	movs	r5, r1
 8005a4a:	0014      	movs	r4, r2
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d004      	beq.n	8005a5a <__swbuf_r+0x16>
 8005a50:	6a03      	ldr	r3, [r0, #32]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <__swbuf_r+0x16>
 8005a56:	f7ff ff05 	bl	8005864 <__sinit>
 8005a5a:	69a3      	ldr	r3, [r4, #24]
 8005a5c:	60a3      	str	r3, [r4, #8]
 8005a5e:	89a3      	ldrh	r3, [r4, #12]
 8005a60:	071b      	lsls	r3, r3, #28
 8005a62:	d502      	bpl.n	8005a6a <__swbuf_r+0x26>
 8005a64:	6923      	ldr	r3, [r4, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d109      	bne.n	8005a7e <__swbuf_r+0x3a>
 8005a6a:	0021      	movs	r1, r4
 8005a6c:	0030      	movs	r0, r6
 8005a6e:	f000 f82b 	bl	8005ac8 <__swsetup_r>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d003      	beq.n	8005a7e <__swbuf_r+0x3a>
 8005a76:	2501      	movs	r5, #1
 8005a78:	426d      	negs	r5, r5
 8005a7a:	0028      	movs	r0, r5
 8005a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a7e:	6923      	ldr	r3, [r4, #16]
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	b2ef      	uxtb	r7, r5
 8005a84:	1ac0      	subs	r0, r0, r3
 8005a86:	6963      	ldr	r3, [r4, #20]
 8005a88:	b2ed      	uxtb	r5, r5
 8005a8a:	4283      	cmp	r3, r0
 8005a8c:	dc05      	bgt.n	8005a9a <__swbuf_r+0x56>
 8005a8e:	0021      	movs	r1, r4
 8005a90:	0030      	movs	r0, r6
 8005a92:	f000 fd3f 	bl	8006514 <_fflush_r>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d1ed      	bne.n	8005a76 <__swbuf_r+0x32>
 8005a9a:	68a3      	ldr	r3, [r4, #8]
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	60a3      	str	r3, [r4, #8]
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	6022      	str	r2, [r4, #0]
 8005aa8:	701f      	strb	r7, [r3, #0]
 8005aaa:	6963      	ldr	r3, [r4, #20]
 8005aac:	4283      	cmp	r3, r0
 8005aae:	d004      	beq.n	8005aba <__swbuf_r+0x76>
 8005ab0:	89a3      	ldrh	r3, [r4, #12]
 8005ab2:	07db      	lsls	r3, r3, #31
 8005ab4:	d5e1      	bpl.n	8005a7a <__swbuf_r+0x36>
 8005ab6:	2d0a      	cmp	r5, #10
 8005ab8:	d1df      	bne.n	8005a7a <__swbuf_r+0x36>
 8005aba:	0021      	movs	r1, r4
 8005abc:	0030      	movs	r0, r6
 8005abe:	f000 fd29 	bl	8006514 <_fflush_r>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d0d9      	beq.n	8005a7a <__swbuf_r+0x36>
 8005ac6:	e7d6      	b.n	8005a76 <__swbuf_r+0x32>

08005ac8 <__swsetup_r>:
 8005ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8005b80 <__swsetup_r+0xb8>)
 8005aca:	b570      	push	{r4, r5, r6, lr}
 8005acc:	0005      	movs	r5, r0
 8005ace:	6818      	ldr	r0, [r3, #0]
 8005ad0:	000c      	movs	r4, r1
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d004      	beq.n	8005ae0 <__swsetup_r+0x18>
 8005ad6:	6a03      	ldr	r3, [r0, #32]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <__swsetup_r+0x18>
 8005adc:	f7ff fec2 	bl	8005864 <__sinit>
 8005ae0:	230c      	movs	r3, #12
 8005ae2:	5ee2      	ldrsh	r2, [r4, r3]
 8005ae4:	0713      	lsls	r3, r2, #28
 8005ae6:	d423      	bmi.n	8005b30 <__swsetup_r+0x68>
 8005ae8:	06d3      	lsls	r3, r2, #27
 8005aea:	d407      	bmi.n	8005afc <__swsetup_r+0x34>
 8005aec:	2309      	movs	r3, #9
 8005aee:	602b      	str	r3, [r5, #0]
 8005af0:	2340      	movs	r3, #64	@ 0x40
 8005af2:	2001      	movs	r0, #1
 8005af4:	4313      	orrs	r3, r2
 8005af6:	81a3      	strh	r3, [r4, #12]
 8005af8:	4240      	negs	r0, r0
 8005afa:	e03a      	b.n	8005b72 <__swsetup_r+0xaa>
 8005afc:	0752      	lsls	r2, r2, #29
 8005afe:	d513      	bpl.n	8005b28 <__swsetup_r+0x60>
 8005b00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b02:	2900      	cmp	r1, #0
 8005b04:	d008      	beq.n	8005b18 <__swsetup_r+0x50>
 8005b06:	0023      	movs	r3, r4
 8005b08:	3344      	adds	r3, #68	@ 0x44
 8005b0a:	4299      	cmp	r1, r3
 8005b0c:	d002      	beq.n	8005b14 <__swsetup_r+0x4c>
 8005b0e:	0028      	movs	r0, r5
 8005b10:	f000 f8bc 	bl	8005c8c <_free_r>
 8005b14:	2300      	movs	r3, #0
 8005b16:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b18:	2224      	movs	r2, #36	@ 0x24
 8005b1a:	89a3      	ldrh	r3, [r4, #12]
 8005b1c:	4393      	bics	r3, r2
 8005b1e:	81a3      	strh	r3, [r4, #12]
 8005b20:	2300      	movs	r3, #0
 8005b22:	6063      	str	r3, [r4, #4]
 8005b24:	6923      	ldr	r3, [r4, #16]
 8005b26:	6023      	str	r3, [r4, #0]
 8005b28:	2308      	movs	r3, #8
 8005b2a:	89a2      	ldrh	r2, [r4, #12]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	81a3      	strh	r3, [r4, #12]
 8005b30:	6923      	ldr	r3, [r4, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10b      	bne.n	8005b4e <__swsetup_r+0x86>
 8005b36:	21a0      	movs	r1, #160	@ 0xa0
 8005b38:	2280      	movs	r2, #128	@ 0x80
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	0089      	lsls	r1, r1, #2
 8005b3e:	0092      	lsls	r2, r2, #2
 8005b40:	400b      	ands	r3, r1
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d003      	beq.n	8005b4e <__swsetup_r+0x86>
 8005b46:	0021      	movs	r1, r4
 8005b48:	0028      	movs	r0, r5
 8005b4a:	f000 fd39 	bl	80065c0 <__smakebuf_r>
 8005b4e:	230c      	movs	r3, #12
 8005b50:	5ee2      	ldrsh	r2, [r4, r3]
 8005b52:	2101      	movs	r1, #1
 8005b54:	0013      	movs	r3, r2
 8005b56:	400b      	ands	r3, r1
 8005b58:	420a      	tst	r2, r1
 8005b5a:	d00b      	beq.n	8005b74 <__swsetup_r+0xac>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60a3      	str	r3, [r4, #8]
 8005b60:	6963      	ldr	r3, [r4, #20]
 8005b62:	425b      	negs	r3, r3
 8005b64:	61a3      	str	r3, [r4, #24]
 8005b66:	2000      	movs	r0, #0
 8005b68:	6923      	ldr	r3, [r4, #16]
 8005b6a:	4283      	cmp	r3, r0
 8005b6c:	d101      	bne.n	8005b72 <__swsetup_r+0xaa>
 8005b6e:	0613      	lsls	r3, r2, #24
 8005b70:	d4be      	bmi.n	8005af0 <__swsetup_r+0x28>
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	0791      	lsls	r1, r2, #30
 8005b76:	d400      	bmi.n	8005b7a <__swsetup_r+0xb2>
 8005b78:	6963      	ldr	r3, [r4, #20]
 8005b7a:	60a3      	str	r3, [r4, #8]
 8005b7c:	e7f3      	b.n	8005b66 <__swsetup_r+0x9e>
 8005b7e:	46c0      	nop			@ (mov r8, r8)
 8005b80:	20000018 	.word	0x20000018

08005b84 <memset>:
 8005b84:	0003      	movs	r3, r0
 8005b86:	1882      	adds	r2, r0, r2
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d100      	bne.n	8005b8e <memset+0xa>
 8005b8c:	4770      	bx	lr
 8005b8e:	7019      	strb	r1, [r3, #0]
 8005b90:	3301      	adds	r3, #1
 8005b92:	e7f9      	b.n	8005b88 <memset+0x4>

08005b94 <_close_r>:
 8005b94:	2300      	movs	r3, #0
 8005b96:	b570      	push	{r4, r5, r6, lr}
 8005b98:	4d06      	ldr	r5, [pc, #24]	@ (8005bb4 <_close_r+0x20>)
 8005b9a:	0004      	movs	r4, r0
 8005b9c:	0008      	movs	r0, r1
 8005b9e:	602b      	str	r3, [r5, #0]
 8005ba0:	f7fc ffde 	bl	8002b60 <_close>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	d103      	bne.n	8005bb0 <_close_r+0x1c>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d000      	beq.n	8005bb0 <_close_r+0x1c>
 8005bae:	6023      	str	r3, [r4, #0]
 8005bb0:	bd70      	pop	{r4, r5, r6, pc}
 8005bb2:	46c0      	nop			@ (mov r8, r8)
 8005bb4:	200003f4 	.word	0x200003f4

08005bb8 <_lseek_r>:
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	0004      	movs	r4, r0
 8005bbc:	0008      	movs	r0, r1
 8005bbe:	0011      	movs	r1, r2
 8005bc0:	001a      	movs	r2, r3
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	4d05      	ldr	r5, [pc, #20]	@ (8005bdc <_lseek_r+0x24>)
 8005bc6:	602b      	str	r3, [r5, #0]
 8005bc8:	f7fc ffeb 	bl	8002ba2 <_lseek>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d103      	bne.n	8005bd8 <_lseek_r+0x20>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d000      	beq.n	8005bd8 <_lseek_r+0x20>
 8005bd6:	6023      	str	r3, [r4, #0]
 8005bd8:	bd70      	pop	{r4, r5, r6, pc}
 8005bda:	46c0      	nop			@ (mov r8, r8)
 8005bdc:	200003f4 	.word	0x200003f4

08005be0 <_read_r>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	0004      	movs	r4, r0
 8005be4:	0008      	movs	r0, r1
 8005be6:	0011      	movs	r1, r2
 8005be8:	001a      	movs	r2, r3
 8005bea:	2300      	movs	r3, #0
 8005bec:	4d05      	ldr	r5, [pc, #20]	@ (8005c04 <_read_r+0x24>)
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	f7fc ff7d 	bl	8002aee <_read>
 8005bf4:	1c43      	adds	r3, r0, #1
 8005bf6:	d103      	bne.n	8005c00 <_read_r+0x20>
 8005bf8:	682b      	ldr	r3, [r5, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d000      	beq.n	8005c00 <_read_r+0x20>
 8005bfe:	6023      	str	r3, [r4, #0]
 8005c00:	bd70      	pop	{r4, r5, r6, pc}
 8005c02:	46c0      	nop			@ (mov r8, r8)
 8005c04:	200003f4 	.word	0x200003f4

08005c08 <_write_r>:
 8005c08:	b570      	push	{r4, r5, r6, lr}
 8005c0a:	0004      	movs	r4, r0
 8005c0c:	0008      	movs	r0, r1
 8005c0e:	0011      	movs	r1, r2
 8005c10:	001a      	movs	r2, r3
 8005c12:	2300      	movs	r3, #0
 8005c14:	4d05      	ldr	r5, [pc, #20]	@ (8005c2c <_write_r+0x24>)
 8005c16:	602b      	str	r3, [r5, #0]
 8005c18:	f7fc ff86 	bl	8002b28 <_write>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d103      	bne.n	8005c28 <_write_r+0x20>
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d000      	beq.n	8005c28 <_write_r+0x20>
 8005c26:	6023      	str	r3, [r4, #0]
 8005c28:	bd70      	pop	{r4, r5, r6, pc}
 8005c2a:	46c0      	nop			@ (mov r8, r8)
 8005c2c:	200003f4 	.word	0x200003f4

08005c30 <__errno>:
 8005c30:	4b01      	ldr	r3, [pc, #4]	@ (8005c38 <__errno+0x8>)
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	4770      	bx	lr
 8005c36:	46c0      	nop			@ (mov r8, r8)
 8005c38:	20000018 	.word	0x20000018

08005c3c <__libc_init_array>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	2600      	movs	r6, #0
 8005c40:	4c0c      	ldr	r4, [pc, #48]	@ (8005c74 <__libc_init_array+0x38>)
 8005c42:	4d0d      	ldr	r5, [pc, #52]	@ (8005c78 <__libc_init_array+0x3c>)
 8005c44:	1b64      	subs	r4, r4, r5
 8005c46:	10a4      	asrs	r4, r4, #2
 8005c48:	42a6      	cmp	r6, r4
 8005c4a:	d109      	bne.n	8005c60 <__libc_init_array+0x24>
 8005c4c:	2600      	movs	r6, #0
 8005c4e:	f000 fd3b 	bl	80066c8 <_init>
 8005c52:	4c0a      	ldr	r4, [pc, #40]	@ (8005c7c <__libc_init_array+0x40>)
 8005c54:	4d0a      	ldr	r5, [pc, #40]	@ (8005c80 <__libc_init_array+0x44>)
 8005c56:	1b64      	subs	r4, r4, r5
 8005c58:	10a4      	asrs	r4, r4, #2
 8005c5a:	42a6      	cmp	r6, r4
 8005c5c:	d105      	bne.n	8005c6a <__libc_init_array+0x2e>
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}
 8005c60:	00b3      	lsls	r3, r6, #2
 8005c62:	58eb      	ldr	r3, [r5, r3]
 8005c64:	4798      	blx	r3
 8005c66:	3601      	adds	r6, #1
 8005c68:	e7ee      	b.n	8005c48 <__libc_init_array+0xc>
 8005c6a:	00b3      	lsls	r3, r6, #2
 8005c6c:	58eb      	ldr	r3, [r5, r3]
 8005c6e:	4798      	blx	r3
 8005c70:	3601      	adds	r6, #1
 8005c72:	e7f2      	b.n	8005c5a <__libc_init_array+0x1e>
 8005c74:	0800684c 	.word	0x0800684c
 8005c78:	0800684c 	.word	0x0800684c
 8005c7c:	08006850 	.word	0x08006850
 8005c80:	0800684c 	.word	0x0800684c

08005c84 <__retarget_lock_init_recursive>:
 8005c84:	4770      	bx	lr

08005c86 <__retarget_lock_acquire_recursive>:
 8005c86:	4770      	bx	lr

08005c88 <__retarget_lock_release_recursive>:
 8005c88:	4770      	bx	lr
	...

08005c8c <_free_r>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	0005      	movs	r5, r0
 8005c90:	1e0c      	subs	r4, r1, #0
 8005c92:	d010      	beq.n	8005cb6 <_free_r+0x2a>
 8005c94:	3c04      	subs	r4, #4
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	da00      	bge.n	8005c9e <_free_r+0x12>
 8005c9c:	18e4      	adds	r4, r4, r3
 8005c9e:	0028      	movs	r0, r5
 8005ca0:	f000 f8e0 	bl	8005e64 <__malloc_lock>
 8005ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d1c <_free_r+0x90>)
 8005ca6:	6813      	ldr	r3, [r2, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d105      	bne.n	8005cb8 <_free_r+0x2c>
 8005cac:	6063      	str	r3, [r4, #4]
 8005cae:	6014      	str	r4, [r2, #0]
 8005cb0:	0028      	movs	r0, r5
 8005cb2:	f000 f8df 	bl	8005e74 <__malloc_unlock>
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	d908      	bls.n	8005cce <_free_r+0x42>
 8005cbc:	6820      	ldr	r0, [r4, #0]
 8005cbe:	1821      	adds	r1, r4, r0
 8005cc0:	428b      	cmp	r3, r1
 8005cc2:	d1f3      	bne.n	8005cac <_free_r+0x20>
 8005cc4:	6819      	ldr	r1, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	1809      	adds	r1, r1, r0
 8005cca:	6021      	str	r1, [r4, #0]
 8005ccc:	e7ee      	b.n	8005cac <_free_r+0x20>
 8005cce:	001a      	movs	r2, r3
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <_free_r+0x4e>
 8005cd6:	42a3      	cmp	r3, r4
 8005cd8:	d9f9      	bls.n	8005cce <_free_r+0x42>
 8005cda:	6811      	ldr	r1, [r2, #0]
 8005cdc:	1850      	adds	r0, r2, r1
 8005cde:	42a0      	cmp	r0, r4
 8005ce0:	d10b      	bne.n	8005cfa <_free_r+0x6e>
 8005ce2:	6820      	ldr	r0, [r4, #0]
 8005ce4:	1809      	adds	r1, r1, r0
 8005ce6:	1850      	adds	r0, r2, r1
 8005ce8:	6011      	str	r1, [r2, #0]
 8005cea:	4283      	cmp	r3, r0
 8005cec:	d1e0      	bne.n	8005cb0 <_free_r+0x24>
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	1841      	adds	r1, r0, r1
 8005cf4:	6011      	str	r1, [r2, #0]
 8005cf6:	6053      	str	r3, [r2, #4]
 8005cf8:	e7da      	b.n	8005cb0 <_free_r+0x24>
 8005cfa:	42a0      	cmp	r0, r4
 8005cfc:	d902      	bls.n	8005d04 <_free_r+0x78>
 8005cfe:	230c      	movs	r3, #12
 8005d00:	602b      	str	r3, [r5, #0]
 8005d02:	e7d5      	b.n	8005cb0 <_free_r+0x24>
 8005d04:	6820      	ldr	r0, [r4, #0]
 8005d06:	1821      	adds	r1, r4, r0
 8005d08:	428b      	cmp	r3, r1
 8005d0a:	d103      	bne.n	8005d14 <_free_r+0x88>
 8005d0c:	6819      	ldr	r1, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	1809      	adds	r1, r1, r0
 8005d12:	6021      	str	r1, [r4, #0]
 8005d14:	6063      	str	r3, [r4, #4]
 8005d16:	6054      	str	r4, [r2, #4]
 8005d18:	e7ca      	b.n	8005cb0 <_free_r+0x24>
 8005d1a:	46c0      	nop			@ (mov r8, r8)
 8005d1c:	20000400 	.word	0x20000400

08005d20 <sbrk_aligned>:
 8005d20:	b570      	push	{r4, r5, r6, lr}
 8005d22:	4e0f      	ldr	r6, [pc, #60]	@ (8005d60 <sbrk_aligned+0x40>)
 8005d24:	000d      	movs	r5, r1
 8005d26:	6831      	ldr	r1, [r6, #0]
 8005d28:	0004      	movs	r4, r0
 8005d2a:	2900      	cmp	r1, #0
 8005d2c:	d102      	bne.n	8005d34 <sbrk_aligned+0x14>
 8005d2e:	f000 fcad 	bl	800668c <_sbrk_r>
 8005d32:	6030      	str	r0, [r6, #0]
 8005d34:	0029      	movs	r1, r5
 8005d36:	0020      	movs	r0, r4
 8005d38:	f000 fca8 	bl	800668c <_sbrk_r>
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d103      	bne.n	8005d48 <sbrk_aligned+0x28>
 8005d40:	2501      	movs	r5, #1
 8005d42:	426d      	negs	r5, r5
 8005d44:	0028      	movs	r0, r5
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
 8005d48:	2303      	movs	r3, #3
 8005d4a:	1cc5      	adds	r5, r0, #3
 8005d4c:	439d      	bics	r5, r3
 8005d4e:	42a8      	cmp	r0, r5
 8005d50:	d0f8      	beq.n	8005d44 <sbrk_aligned+0x24>
 8005d52:	1a29      	subs	r1, r5, r0
 8005d54:	0020      	movs	r0, r4
 8005d56:	f000 fc99 	bl	800668c <_sbrk_r>
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d1f2      	bne.n	8005d44 <sbrk_aligned+0x24>
 8005d5e:	e7ef      	b.n	8005d40 <sbrk_aligned+0x20>
 8005d60:	200003fc 	.word	0x200003fc

08005d64 <_malloc_r>:
 8005d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d66:	2203      	movs	r2, #3
 8005d68:	1ccb      	adds	r3, r1, #3
 8005d6a:	4393      	bics	r3, r2
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	0005      	movs	r5, r0
 8005d70:	001f      	movs	r7, r3
 8005d72:	2b0c      	cmp	r3, #12
 8005d74:	d234      	bcs.n	8005de0 <_malloc_r+0x7c>
 8005d76:	270c      	movs	r7, #12
 8005d78:	42b9      	cmp	r1, r7
 8005d7a:	d833      	bhi.n	8005de4 <_malloc_r+0x80>
 8005d7c:	0028      	movs	r0, r5
 8005d7e:	f000 f871 	bl	8005e64 <__malloc_lock>
 8005d82:	4e37      	ldr	r6, [pc, #220]	@ (8005e60 <_malloc_r+0xfc>)
 8005d84:	6833      	ldr	r3, [r6, #0]
 8005d86:	001c      	movs	r4, r3
 8005d88:	2c00      	cmp	r4, #0
 8005d8a:	d12f      	bne.n	8005dec <_malloc_r+0x88>
 8005d8c:	0039      	movs	r1, r7
 8005d8e:	0028      	movs	r0, r5
 8005d90:	f7ff ffc6 	bl	8005d20 <sbrk_aligned>
 8005d94:	0004      	movs	r4, r0
 8005d96:	1c43      	adds	r3, r0, #1
 8005d98:	d15f      	bne.n	8005e5a <_malloc_r+0xf6>
 8005d9a:	6834      	ldr	r4, [r6, #0]
 8005d9c:	9400      	str	r4, [sp, #0]
 8005d9e:	9b00      	ldr	r3, [sp, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d14a      	bne.n	8005e3a <_malloc_r+0xd6>
 8005da4:	2c00      	cmp	r4, #0
 8005da6:	d052      	beq.n	8005e4e <_malloc_r+0xea>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	0028      	movs	r0, r5
 8005dac:	18e3      	adds	r3, r4, r3
 8005dae:	9900      	ldr	r1, [sp, #0]
 8005db0:	9301      	str	r3, [sp, #4]
 8005db2:	f000 fc6b 	bl	800668c <_sbrk_r>
 8005db6:	9b01      	ldr	r3, [sp, #4]
 8005db8:	4283      	cmp	r3, r0
 8005dba:	d148      	bne.n	8005e4e <_malloc_r+0xea>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	0028      	movs	r0, r5
 8005dc0:	1aff      	subs	r7, r7, r3
 8005dc2:	0039      	movs	r1, r7
 8005dc4:	f7ff ffac 	bl	8005d20 <sbrk_aligned>
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d040      	beq.n	8005e4e <_malloc_r+0xea>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	19db      	adds	r3, r3, r7
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	6833      	ldr	r3, [r6, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	2a00      	cmp	r2, #0
 8005dd8:	d133      	bne.n	8005e42 <_malloc_r+0xde>
 8005dda:	9b00      	ldr	r3, [sp, #0]
 8005ddc:	6033      	str	r3, [r6, #0]
 8005dde:	e019      	b.n	8005e14 <_malloc_r+0xb0>
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dac9      	bge.n	8005d78 <_malloc_r+0x14>
 8005de4:	230c      	movs	r3, #12
 8005de6:	602b      	str	r3, [r5, #0]
 8005de8:	2000      	movs	r0, #0
 8005dea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005dec:	6821      	ldr	r1, [r4, #0]
 8005dee:	1bc9      	subs	r1, r1, r7
 8005df0:	d420      	bmi.n	8005e34 <_malloc_r+0xd0>
 8005df2:	290b      	cmp	r1, #11
 8005df4:	d90a      	bls.n	8005e0c <_malloc_r+0xa8>
 8005df6:	19e2      	adds	r2, r4, r7
 8005df8:	6027      	str	r7, [r4, #0]
 8005dfa:	42a3      	cmp	r3, r4
 8005dfc:	d104      	bne.n	8005e08 <_malloc_r+0xa4>
 8005dfe:	6032      	str	r2, [r6, #0]
 8005e00:	6863      	ldr	r3, [r4, #4]
 8005e02:	6011      	str	r1, [r2, #0]
 8005e04:	6053      	str	r3, [r2, #4]
 8005e06:	e005      	b.n	8005e14 <_malloc_r+0xb0>
 8005e08:	605a      	str	r2, [r3, #4]
 8005e0a:	e7f9      	b.n	8005e00 <_malloc_r+0x9c>
 8005e0c:	6862      	ldr	r2, [r4, #4]
 8005e0e:	42a3      	cmp	r3, r4
 8005e10:	d10e      	bne.n	8005e30 <_malloc_r+0xcc>
 8005e12:	6032      	str	r2, [r6, #0]
 8005e14:	0028      	movs	r0, r5
 8005e16:	f000 f82d 	bl	8005e74 <__malloc_unlock>
 8005e1a:	0020      	movs	r0, r4
 8005e1c:	2207      	movs	r2, #7
 8005e1e:	300b      	adds	r0, #11
 8005e20:	1d23      	adds	r3, r4, #4
 8005e22:	4390      	bics	r0, r2
 8005e24:	1ac2      	subs	r2, r0, r3
 8005e26:	4298      	cmp	r0, r3
 8005e28:	d0df      	beq.n	8005dea <_malloc_r+0x86>
 8005e2a:	1a1b      	subs	r3, r3, r0
 8005e2c:	50a3      	str	r3, [r4, r2]
 8005e2e:	e7dc      	b.n	8005dea <_malloc_r+0x86>
 8005e30:	605a      	str	r2, [r3, #4]
 8005e32:	e7ef      	b.n	8005e14 <_malloc_r+0xb0>
 8005e34:	0023      	movs	r3, r4
 8005e36:	6864      	ldr	r4, [r4, #4]
 8005e38:	e7a6      	b.n	8005d88 <_malloc_r+0x24>
 8005e3a:	9c00      	ldr	r4, [sp, #0]
 8005e3c:	6863      	ldr	r3, [r4, #4]
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	e7ad      	b.n	8005d9e <_malloc_r+0x3a>
 8005e42:	001a      	movs	r2, r3
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	42a3      	cmp	r3, r4
 8005e48:	d1fb      	bne.n	8005e42 <_malloc_r+0xde>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e7da      	b.n	8005e04 <_malloc_r+0xa0>
 8005e4e:	230c      	movs	r3, #12
 8005e50:	0028      	movs	r0, r5
 8005e52:	602b      	str	r3, [r5, #0]
 8005e54:	f000 f80e 	bl	8005e74 <__malloc_unlock>
 8005e58:	e7c6      	b.n	8005de8 <_malloc_r+0x84>
 8005e5a:	6007      	str	r7, [r0, #0]
 8005e5c:	e7da      	b.n	8005e14 <_malloc_r+0xb0>
 8005e5e:	46c0      	nop			@ (mov r8, r8)
 8005e60:	20000400 	.word	0x20000400

08005e64 <__malloc_lock>:
 8005e64:	b510      	push	{r4, lr}
 8005e66:	4802      	ldr	r0, [pc, #8]	@ (8005e70 <__malloc_lock+0xc>)
 8005e68:	f7ff ff0d 	bl	8005c86 <__retarget_lock_acquire_recursive>
 8005e6c:	bd10      	pop	{r4, pc}
 8005e6e:	46c0      	nop			@ (mov r8, r8)
 8005e70:	200003f8 	.word	0x200003f8

08005e74 <__malloc_unlock>:
 8005e74:	b510      	push	{r4, lr}
 8005e76:	4802      	ldr	r0, [pc, #8]	@ (8005e80 <__malloc_unlock+0xc>)
 8005e78:	f7ff ff06 	bl	8005c88 <__retarget_lock_release_recursive>
 8005e7c:	bd10      	pop	{r4, pc}
 8005e7e:	46c0      	nop			@ (mov r8, r8)
 8005e80:	200003f8 	.word	0x200003f8

08005e84 <__sfputc_r>:
 8005e84:	6893      	ldr	r3, [r2, #8]
 8005e86:	b510      	push	{r4, lr}
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	6093      	str	r3, [r2, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	da04      	bge.n	8005e9a <__sfputc_r+0x16>
 8005e90:	6994      	ldr	r4, [r2, #24]
 8005e92:	42a3      	cmp	r3, r4
 8005e94:	db07      	blt.n	8005ea6 <__sfputc_r+0x22>
 8005e96:	290a      	cmp	r1, #10
 8005e98:	d005      	beq.n	8005ea6 <__sfputc_r+0x22>
 8005e9a:	6813      	ldr	r3, [r2, #0]
 8005e9c:	1c58      	adds	r0, r3, #1
 8005e9e:	6010      	str	r0, [r2, #0]
 8005ea0:	7019      	strb	r1, [r3, #0]
 8005ea2:	0008      	movs	r0, r1
 8005ea4:	bd10      	pop	{r4, pc}
 8005ea6:	f7ff fdcd 	bl	8005a44 <__swbuf_r>
 8005eaa:	0001      	movs	r1, r0
 8005eac:	e7f9      	b.n	8005ea2 <__sfputc_r+0x1e>

08005eae <__sfputs_r>:
 8005eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb0:	0006      	movs	r6, r0
 8005eb2:	000f      	movs	r7, r1
 8005eb4:	0014      	movs	r4, r2
 8005eb6:	18d5      	adds	r5, r2, r3
 8005eb8:	42ac      	cmp	r4, r5
 8005eba:	d101      	bne.n	8005ec0 <__sfputs_r+0x12>
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	e007      	b.n	8005ed0 <__sfputs_r+0x22>
 8005ec0:	7821      	ldrb	r1, [r4, #0]
 8005ec2:	003a      	movs	r2, r7
 8005ec4:	0030      	movs	r0, r6
 8005ec6:	f7ff ffdd 	bl	8005e84 <__sfputc_r>
 8005eca:	3401      	adds	r4, #1
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d1f3      	bne.n	8005eb8 <__sfputs_r+0xa>
 8005ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ed4 <_vfiprintf_r>:
 8005ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ed6:	b0a1      	sub	sp, #132	@ 0x84
 8005ed8:	000f      	movs	r7, r1
 8005eda:	0015      	movs	r5, r2
 8005edc:	001e      	movs	r6, r3
 8005ede:	9003      	str	r0, [sp, #12]
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d004      	beq.n	8005eee <_vfiprintf_r+0x1a>
 8005ee4:	6a03      	ldr	r3, [r0, #32]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <_vfiprintf_r+0x1a>
 8005eea:	f7ff fcbb 	bl	8005864 <__sinit>
 8005eee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ef0:	07db      	lsls	r3, r3, #31
 8005ef2:	d405      	bmi.n	8005f00 <_vfiprintf_r+0x2c>
 8005ef4:	89bb      	ldrh	r3, [r7, #12]
 8005ef6:	059b      	lsls	r3, r3, #22
 8005ef8:	d402      	bmi.n	8005f00 <_vfiprintf_r+0x2c>
 8005efa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005efc:	f7ff fec3 	bl	8005c86 <__retarget_lock_acquire_recursive>
 8005f00:	89bb      	ldrh	r3, [r7, #12]
 8005f02:	071b      	lsls	r3, r3, #28
 8005f04:	d502      	bpl.n	8005f0c <_vfiprintf_r+0x38>
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d113      	bne.n	8005f34 <_vfiprintf_r+0x60>
 8005f0c:	0039      	movs	r1, r7
 8005f0e:	9803      	ldr	r0, [sp, #12]
 8005f10:	f7ff fdda 	bl	8005ac8 <__swsetup_r>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	d00d      	beq.n	8005f34 <_vfiprintf_r+0x60>
 8005f18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f1a:	07db      	lsls	r3, r3, #31
 8005f1c:	d503      	bpl.n	8005f26 <_vfiprintf_r+0x52>
 8005f1e:	2001      	movs	r0, #1
 8005f20:	4240      	negs	r0, r0
 8005f22:	b021      	add	sp, #132	@ 0x84
 8005f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f26:	89bb      	ldrh	r3, [r7, #12]
 8005f28:	059b      	lsls	r3, r3, #22
 8005f2a:	d4f8      	bmi.n	8005f1e <_vfiprintf_r+0x4a>
 8005f2c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005f2e:	f7ff feab 	bl	8005c88 <__retarget_lock_release_recursive>
 8005f32:	e7f4      	b.n	8005f1e <_vfiprintf_r+0x4a>
 8005f34:	2300      	movs	r3, #0
 8005f36:	ac08      	add	r4, sp, #32
 8005f38:	6163      	str	r3, [r4, #20]
 8005f3a:	3320      	adds	r3, #32
 8005f3c:	7663      	strb	r3, [r4, #25]
 8005f3e:	3310      	adds	r3, #16
 8005f40:	76a3      	strb	r3, [r4, #26]
 8005f42:	9607      	str	r6, [sp, #28]
 8005f44:	002e      	movs	r6, r5
 8005f46:	7833      	ldrb	r3, [r6, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <_vfiprintf_r+0x7c>
 8005f4c:	2b25      	cmp	r3, #37	@ 0x25
 8005f4e:	d148      	bne.n	8005fe2 <_vfiprintf_r+0x10e>
 8005f50:	1b73      	subs	r3, r6, r5
 8005f52:	9305      	str	r3, [sp, #20]
 8005f54:	42ae      	cmp	r6, r5
 8005f56:	d00b      	beq.n	8005f70 <_vfiprintf_r+0x9c>
 8005f58:	002a      	movs	r2, r5
 8005f5a:	0039      	movs	r1, r7
 8005f5c:	9803      	ldr	r0, [sp, #12]
 8005f5e:	f7ff ffa6 	bl	8005eae <__sfputs_r>
 8005f62:	3001      	adds	r0, #1
 8005f64:	d100      	bne.n	8005f68 <_vfiprintf_r+0x94>
 8005f66:	e0ae      	b.n	80060c6 <_vfiprintf_r+0x1f2>
 8005f68:	6963      	ldr	r3, [r4, #20]
 8005f6a:	9a05      	ldr	r2, [sp, #20]
 8005f6c:	189b      	adds	r3, r3, r2
 8005f6e:	6163      	str	r3, [r4, #20]
 8005f70:	7833      	ldrb	r3, [r6, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d100      	bne.n	8005f78 <_vfiprintf_r+0xa4>
 8005f76:	e0a6      	b.n	80060c6 <_vfiprintf_r+0x1f2>
 8005f78:	2201      	movs	r2, #1
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	4252      	negs	r2, r2
 8005f7e:	6062      	str	r2, [r4, #4]
 8005f80:	a904      	add	r1, sp, #16
 8005f82:	3254      	adds	r2, #84	@ 0x54
 8005f84:	1852      	adds	r2, r2, r1
 8005f86:	1c75      	adds	r5, r6, #1
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	60e3      	str	r3, [r4, #12]
 8005f8c:	60a3      	str	r3, [r4, #8]
 8005f8e:	7013      	strb	r3, [r2, #0]
 8005f90:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005f92:	4b59      	ldr	r3, [pc, #356]	@ (80060f8 <_vfiprintf_r+0x224>)
 8005f94:	2205      	movs	r2, #5
 8005f96:	0018      	movs	r0, r3
 8005f98:	7829      	ldrb	r1, [r5, #0]
 8005f9a:	9305      	str	r3, [sp, #20]
 8005f9c:	f000 fb88 	bl	80066b0 <memchr>
 8005fa0:	1c6e      	adds	r6, r5, #1
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d11f      	bne.n	8005fe6 <_vfiprintf_r+0x112>
 8005fa6:	6822      	ldr	r2, [r4, #0]
 8005fa8:	06d3      	lsls	r3, r2, #27
 8005faa:	d504      	bpl.n	8005fb6 <_vfiprintf_r+0xe2>
 8005fac:	2353      	movs	r3, #83	@ 0x53
 8005fae:	a904      	add	r1, sp, #16
 8005fb0:	185b      	adds	r3, r3, r1
 8005fb2:	2120      	movs	r1, #32
 8005fb4:	7019      	strb	r1, [r3, #0]
 8005fb6:	0713      	lsls	r3, r2, #28
 8005fb8:	d504      	bpl.n	8005fc4 <_vfiprintf_r+0xf0>
 8005fba:	2353      	movs	r3, #83	@ 0x53
 8005fbc:	a904      	add	r1, sp, #16
 8005fbe:	185b      	adds	r3, r3, r1
 8005fc0:	212b      	movs	r1, #43	@ 0x2b
 8005fc2:	7019      	strb	r1, [r3, #0]
 8005fc4:	782b      	ldrb	r3, [r5, #0]
 8005fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fc8:	d016      	beq.n	8005ff8 <_vfiprintf_r+0x124>
 8005fca:	002e      	movs	r6, r5
 8005fcc:	2100      	movs	r1, #0
 8005fce:	200a      	movs	r0, #10
 8005fd0:	68e3      	ldr	r3, [r4, #12]
 8005fd2:	7832      	ldrb	r2, [r6, #0]
 8005fd4:	1c75      	adds	r5, r6, #1
 8005fd6:	3a30      	subs	r2, #48	@ 0x30
 8005fd8:	2a09      	cmp	r2, #9
 8005fda:	d950      	bls.n	800607e <_vfiprintf_r+0x1aa>
 8005fdc:	2900      	cmp	r1, #0
 8005fde:	d111      	bne.n	8006004 <_vfiprintf_r+0x130>
 8005fe0:	e017      	b.n	8006012 <_vfiprintf_r+0x13e>
 8005fe2:	3601      	adds	r6, #1
 8005fe4:	e7af      	b.n	8005f46 <_vfiprintf_r+0x72>
 8005fe6:	9b05      	ldr	r3, [sp, #20]
 8005fe8:	6822      	ldr	r2, [r4, #0]
 8005fea:	1ac0      	subs	r0, r0, r3
 8005fec:	2301      	movs	r3, #1
 8005fee:	4083      	lsls	r3, r0
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	0035      	movs	r5, r6
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	e7cc      	b.n	8005f92 <_vfiprintf_r+0xbe>
 8005ff8:	9b07      	ldr	r3, [sp, #28]
 8005ffa:	1d19      	adds	r1, r3, #4
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	9107      	str	r1, [sp, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	db01      	blt.n	8006008 <_vfiprintf_r+0x134>
 8006004:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006006:	e004      	b.n	8006012 <_vfiprintf_r+0x13e>
 8006008:	425b      	negs	r3, r3
 800600a:	60e3      	str	r3, [r4, #12]
 800600c:	2302      	movs	r3, #2
 800600e:	4313      	orrs	r3, r2
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	7833      	ldrb	r3, [r6, #0]
 8006014:	2b2e      	cmp	r3, #46	@ 0x2e
 8006016:	d10c      	bne.n	8006032 <_vfiprintf_r+0x15e>
 8006018:	7873      	ldrb	r3, [r6, #1]
 800601a:	2b2a      	cmp	r3, #42	@ 0x2a
 800601c:	d134      	bne.n	8006088 <_vfiprintf_r+0x1b4>
 800601e:	9b07      	ldr	r3, [sp, #28]
 8006020:	3602      	adds	r6, #2
 8006022:	1d1a      	adds	r2, r3, #4
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	9207      	str	r2, [sp, #28]
 8006028:	2b00      	cmp	r3, #0
 800602a:	da01      	bge.n	8006030 <_vfiprintf_r+0x15c>
 800602c:	2301      	movs	r3, #1
 800602e:	425b      	negs	r3, r3
 8006030:	9309      	str	r3, [sp, #36]	@ 0x24
 8006032:	4d32      	ldr	r5, [pc, #200]	@ (80060fc <_vfiprintf_r+0x228>)
 8006034:	2203      	movs	r2, #3
 8006036:	0028      	movs	r0, r5
 8006038:	7831      	ldrb	r1, [r6, #0]
 800603a:	f000 fb39 	bl	80066b0 <memchr>
 800603e:	2800      	cmp	r0, #0
 8006040:	d006      	beq.n	8006050 <_vfiprintf_r+0x17c>
 8006042:	2340      	movs	r3, #64	@ 0x40
 8006044:	1b40      	subs	r0, r0, r5
 8006046:	4083      	lsls	r3, r0
 8006048:	6822      	ldr	r2, [r4, #0]
 800604a:	3601      	adds	r6, #1
 800604c:	4313      	orrs	r3, r2
 800604e:	6023      	str	r3, [r4, #0]
 8006050:	7831      	ldrb	r1, [r6, #0]
 8006052:	2206      	movs	r2, #6
 8006054:	482a      	ldr	r0, [pc, #168]	@ (8006100 <_vfiprintf_r+0x22c>)
 8006056:	1c75      	adds	r5, r6, #1
 8006058:	7621      	strb	r1, [r4, #24]
 800605a:	f000 fb29 	bl	80066b0 <memchr>
 800605e:	2800      	cmp	r0, #0
 8006060:	d040      	beq.n	80060e4 <_vfiprintf_r+0x210>
 8006062:	4b28      	ldr	r3, [pc, #160]	@ (8006104 <_vfiprintf_r+0x230>)
 8006064:	2b00      	cmp	r3, #0
 8006066:	d122      	bne.n	80060ae <_vfiprintf_r+0x1da>
 8006068:	2207      	movs	r2, #7
 800606a:	9b07      	ldr	r3, [sp, #28]
 800606c:	3307      	adds	r3, #7
 800606e:	4393      	bics	r3, r2
 8006070:	3308      	adds	r3, #8
 8006072:	9307      	str	r3, [sp, #28]
 8006074:	6963      	ldr	r3, [r4, #20]
 8006076:	9a04      	ldr	r2, [sp, #16]
 8006078:	189b      	adds	r3, r3, r2
 800607a:	6163      	str	r3, [r4, #20]
 800607c:	e762      	b.n	8005f44 <_vfiprintf_r+0x70>
 800607e:	4343      	muls	r3, r0
 8006080:	002e      	movs	r6, r5
 8006082:	2101      	movs	r1, #1
 8006084:	189b      	adds	r3, r3, r2
 8006086:	e7a4      	b.n	8005fd2 <_vfiprintf_r+0xfe>
 8006088:	2300      	movs	r3, #0
 800608a:	200a      	movs	r0, #10
 800608c:	0019      	movs	r1, r3
 800608e:	3601      	adds	r6, #1
 8006090:	6063      	str	r3, [r4, #4]
 8006092:	7832      	ldrb	r2, [r6, #0]
 8006094:	1c75      	adds	r5, r6, #1
 8006096:	3a30      	subs	r2, #48	@ 0x30
 8006098:	2a09      	cmp	r2, #9
 800609a:	d903      	bls.n	80060a4 <_vfiprintf_r+0x1d0>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0c8      	beq.n	8006032 <_vfiprintf_r+0x15e>
 80060a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80060a2:	e7c6      	b.n	8006032 <_vfiprintf_r+0x15e>
 80060a4:	4341      	muls	r1, r0
 80060a6:	002e      	movs	r6, r5
 80060a8:	2301      	movs	r3, #1
 80060aa:	1889      	adds	r1, r1, r2
 80060ac:	e7f1      	b.n	8006092 <_vfiprintf_r+0x1be>
 80060ae:	aa07      	add	r2, sp, #28
 80060b0:	9200      	str	r2, [sp, #0]
 80060b2:	0021      	movs	r1, r4
 80060b4:	003a      	movs	r2, r7
 80060b6:	4b14      	ldr	r3, [pc, #80]	@ (8006108 <_vfiprintf_r+0x234>)
 80060b8:	9803      	ldr	r0, [sp, #12]
 80060ba:	e000      	b.n	80060be <_vfiprintf_r+0x1ea>
 80060bc:	bf00      	nop
 80060be:	9004      	str	r0, [sp, #16]
 80060c0:	9b04      	ldr	r3, [sp, #16]
 80060c2:	3301      	adds	r3, #1
 80060c4:	d1d6      	bne.n	8006074 <_vfiprintf_r+0x1a0>
 80060c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060c8:	07db      	lsls	r3, r3, #31
 80060ca:	d405      	bmi.n	80060d8 <_vfiprintf_r+0x204>
 80060cc:	89bb      	ldrh	r3, [r7, #12]
 80060ce:	059b      	lsls	r3, r3, #22
 80060d0:	d402      	bmi.n	80060d8 <_vfiprintf_r+0x204>
 80060d2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80060d4:	f7ff fdd8 	bl	8005c88 <__retarget_lock_release_recursive>
 80060d8:	89bb      	ldrh	r3, [r7, #12]
 80060da:	065b      	lsls	r3, r3, #25
 80060dc:	d500      	bpl.n	80060e0 <_vfiprintf_r+0x20c>
 80060de:	e71e      	b.n	8005f1e <_vfiprintf_r+0x4a>
 80060e0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80060e2:	e71e      	b.n	8005f22 <_vfiprintf_r+0x4e>
 80060e4:	aa07      	add	r2, sp, #28
 80060e6:	9200      	str	r2, [sp, #0]
 80060e8:	0021      	movs	r1, r4
 80060ea:	003a      	movs	r2, r7
 80060ec:	4b06      	ldr	r3, [pc, #24]	@ (8006108 <_vfiprintf_r+0x234>)
 80060ee:	9803      	ldr	r0, [sp, #12]
 80060f0:	f000 f87c 	bl	80061ec <_printf_i>
 80060f4:	e7e3      	b.n	80060be <_vfiprintf_r+0x1ea>
 80060f6:	46c0      	nop			@ (mov r8, r8)
 80060f8:	08006810 	.word	0x08006810
 80060fc:	08006816 	.word	0x08006816
 8006100:	0800681a 	.word	0x0800681a
 8006104:	00000000 	.word	0x00000000
 8006108:	08005eaf 	.word	0x08005eaf

0800610c <_printf_common>:
 800610c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800610e:	0016      	movs	r6, r2
 8006110:	9301      	str	r3, [sp, #4]
 8006112:	688a      	ldr	r2, [r1, #8]
 8006114:	690b      	ldr	r3, [r1, #16]
 8006116:	000c      	movs	r4, r1
 8006118:	9000      	str	r0, [sp, #0]
 800611a:	4293      	cmp	r3, r2
 800611c:	da00      	bge.n	8006120 <_printf_common+0x14>
 800611e:	0013      	movs	r3, r2
 8006120:	0022      	movs	r2, r4
 8006122:	6033      	str	r3, [r6, #0]
 8006124:	3243      	adds	r2, #67	@ 0x43
 8006126:	7812      	ldrb	r2, [r2, #0]
 8006128:	2a00      	cmp	r2, #0
 800612a:	d001      	beq.n	8006130 <_printf_common+0x24>
 800612c:	3301      	adds	r3, #1
 800612e:	6033      	str	r3, [r6, #0]
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	069b      	lsls	r3, r3, #26
 8006134:	d502      	bpl.n	800613c <_printf_common+0x30>
 8006136:	6833      	ldr	r3, [r6, #0]
 8006138:	3302      	adds	r3, #2
 800613a:	6033      	str	r3, [r6, #0]
 800613c:	6822      	ldr	r2, [r4, #0]
 800613e:	2306      	movs	r3, #6
 8006140:	0015      	movs	r5, r2
 8006142:	401d      	ands	r5, r3
 8006144:	421a      	tst	r2, r3
 8006146:	d027      	beq.n	8006198 <_printf_common+0x8c>
 8006148:	0023      	movs	r3, r4
 800614a:	3343      	adds	r3, #67	@ 0x43
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	1e5a      	subs	r2, r3, #1
 8006150:	4193      	sbcs	r3, r2
 8006152:	6822      	ldr	r2, [r4, #0]
 8006154:	0692      	lsls	r2, r2, #26
 8006156:	d430      	bmi.n	80061ba <_printf_common+0xae>
 8006158:	0022      	movs	r2, r4
 800615a:	9901      	ldr	r1, [sp, #4]
 800615c:	9800      	ldr	r0, [sp, #0]
 800615e:	9d08      	ldr	r5, [sp, #32]
 8006160:	3243      	adds	r2, #67	@ 0x43
 8006162:	47a8      	blx	r5
 8006164:	3001      	adds	r0, #1
 8006166:	d025      	beq.n	80061b4 <_printf_common+0xa8>
 8006168:	2206      	movs	r2, #6
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	2500      	movs	r5, #0
 800616e:	4013      	ands	r3, r2
 8006170:	2b04      	cmp	r3, #4
 8006172:	d105      	bne.n	8006180 <_printf_common+0x74>
 8006174:	6833      	ldr	r3, [r6, #0]
 8006176:	68e5      	ldr	r5, [r4, #12]
 8006178:	1aed      	subs	r5, r5, r3
 800617a:	43eb      	mvns	r3, r5
 800617c:	17db      	asrs	r3, r3, #31
 800617e:	401d      	ands	r5, r3
 8006180:	68a3      	ldr	r3, [r4, #8]
 8006182:	6922      	ldr	r2, [r4, #16]
 8006184:	4293      	cmp	r3, r2
 8006186:	dd01      	ble.n	800618c <_printf_common+0x80>
 8006188:	1a9b      	subs	r3, r3, r2
 800618a:	18ed      	adds	r5, r5, r3
 800618c:	2600      	movs	r6, #0
 800618e:	42b5      	cmp	r5, r6
 8006190:	d120      	bne.n	80061d4 <_printf_common+0xc8>
 8006192:	2000      	movs	r0, #0
 8006194:	e010      	b.n	80061b8 <_printf_common+0xac>
 8006196:	3501      	adds	r5, #1
 8006198:	68e3      	ldr	r3, [r4, #12]
 800619a:	6832      	ldr	r2, [r6, #0]
 800619c:	1a9b      	subs	r3, r3, r2
 800619e:	42ab      	cmp	r3, r5
 80061a0:	ddd2      	ble.n	8006148 <_printf_common+0x3c>
 80061a2:	0022      	movs	r2, r4
 80061a4:	2301      	movs	r3, #1
 80061a6:	9901      	ldr	r1, [sp, #4]
 80061a8:	9800      	ldr	r0, [sp, #0]
 80061aa:	9f08      	ldr	r7, [sp, #32]
 80061ac:	3219      	adds	r2, #25
 80061ae:	47b8      	blx	r7
 80061b0:	3001      	adds	r0, #1
 80061b2:	d1f0      	bne.n	8006196 <_printf_common+0x8a>
 80061b4:	2001      	movs	r0, #1
 80061b6:	4240      	negs	r0, r0
 80061b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061ba:	2030      	movs	r0, #48	@ 0x30
 80061bc:	18e1      	adds	r1, r4, r3
 80061be:	3143      	adds	r1, #67	@ 0x43
 80061c0:	7008      	strb	r0, [r1, #0]
 80061c2:	0021      	movs	r1, r4
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	3145      	adds	r1, #69	@ 0x45
 80061c8:	7809      	ldrb	r1, [r1, #0]
 80061ca:	18a2      	adds	r2, r4, r2
 80061cc:	3243      	adds	r2, #67	@ 0x43
 80061ce:	3302      	adds	r3, #2
 80061d0:	7011      	strb	r1, [r2, #0]
 80061d2:	e7c1      	b.n	8006158 <_printf_common+0x4c>
 80061d4:	0022      	movs	r2, r4
 80061d6:	2301      	movs	r3, #1
 80061d8:	9901      	ldr	r1, [sp, #4]
 80061da:	9800      	ldr	r0, [sp, #0]
 80061dc:	9f08      	ldr	r7, [sp, #32]
 80061de:	321a      	adds	r2, #26
 80061e0:	47b8      	blx	r7
 80061e2:	3001      	adds	r0, #1
 80061e4:	d0e6      	beq.n	80061b4 <_printf_common+0xa8>
 80061e6:	3601      	adds	r6, #1
 80061e8:	e7d1      	b.n	800618e <_printf_common+0x82>
	...

080061ec <_printf_i>:
 80061ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ee:	b08b      	sub	sp, #44	@ 0x2c
 80061f0:	9206      	str	r2, [sp, #24]
 80061f2:	000a      	movs	r2, r1
 80061f4:	3243      	adds	r2, #67	@ 0x43
 80061f6:	9307      	str	r3, [sp, #28]
 80061f8:	9005      	str	r0, [sp, #20]
 80061fa:	9203      	str	r2, [sp, #12]
 80061fc:	7e0a      	ldrb	r2, [r1, #24]
 80061fe:	000c      	movs	r4, r1
 8006200:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006202:	2a78      	cmp	r2, #120	@ 0x78
 8006204:	d809      	bhi.n	800621a <_printf_i+0x2e>
 8006206:	2a62      	cmp	r2, #98	@ 0x62
 8006208:	d80b      	bhi.n	8006222 <_printf_i+0x36>
 800620a:	2a00      	cmp	r2, #0
 800620c:	d100      	bne.n	8006210 <_printf_i+0x24>
 800620e:	e0bc      	b.n	800638a <_printf_i+0x19e>
 8006210:	497b      	ldr	r1, [pc, #492]	@ (8006400 <_printf_i+0x214>)
 8006212:	9104      	str	r1, [sp, #16]
 8006214:	2a58      	cmp	r2, #88	@ 0x58
 8006216:	d100      	bne.n	800621a <_printf_i+0x2e>
 8006218:	e090      	b.n	800633c <_printf_i+0x150>
 800621a:	0025      	movs	r5, r4
 800621c:	3542      	adds	r5, #66	@ 0x42
 800621e:	702a      	strb	r2, [r5, #0]
 8006220:	e022      	b.n	8006268 <_printf_i+0x7c>
 8006222:	0010      	movs	r0, r2
 8006224:	3863      	subs	r0, #99	@ 0x63
 8006226:	2815      	cmp	r0, #21
 8006228:	d8f7      	bhi.n	800621a <_printf_i+0x2e>
 800622a:	f7f9 ff6d 	bl	8000108 <__gnu_thumb1_case_shi>
 800622e:	0016      	.short	0x0016
 8006230:	fff6001f 	.word	0xfff6001f
 8006234:	fff6fff6 	.word	0xfff6fff6
 8006238:	001ffff6 	.word	0x001ffff6
 800623c:	fff6fff6 	.word	0xfff6fff6
 8006240:	fff6fff6 	.word	0xfff6fff6
 8006244:	003600a1 	.word	0x003600a1
 8006248:	fff60080 	.word	0xfff60080
 800624c:	00b2fff6 	.word	0x00b2fff6
 8006250:	0036fff6 	.word	0x0036fff6
 8006254:	fff6fff6 	.word	0xfff6fff6
 8006258:	0084      	.short	0x0084
 800625a:	0025      	movs	r5, r4
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	3542      	adds	r5, #66	@ 0x42
 8006260:	1d11      	adds	r1, r2, #4
 8006262:	6019      	str	r1, [r3, #0]
 8006264:	6813      	ldr	r3, [r2, #0]
 8006266:	702b      	strb	r3, [r5, #0]
 8006268:	2301      	movs	r3, #1
 800626a:	e0a0      	b.n	80063ae <_printf_i+0x1c2>
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	6809      	ldr	r1, [r1, #0]
 8006270:	1d02      	adds	r2, r0, #4
 8006272:	060d      	lsls	r5, r1, #24
 8006274:	d50b      	bpl.n	800628e <_printf_i+0xa2>
 8006276:	6806      	ldr	r6, [r0, #0]
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	2e00      	cmp	r6, #0
 800627c:	da03      	bge.n	8006286 <_printf_i+0x9a>
 800627e:	232d      	movs	r3, #45	@ 0x2d
 8006280:	9a03      	ldr	r2, [sp, #12]
 8006282:	4276      	negs	r6, r6
 8006284:	7013      	strb	r3, [r2, #0]
 8006286:	4b5e      	ldr	r3, [pc, #376]	@ (8006400 <_printf_i+0x214>)
 8006288:	270a      	movs	r7, #10
 800628a:	9304      	str	r3, [sp, #16]
 800628c:	e018      	b.n	80062c0 <_printf_i+0xd4>
 800628e:	6806      	ldr	r6, [r0, #0]
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	0649      	lsls	r1, r1, #25
 8006294:	d5f1      	bpl.n	800627a <_printf_i+0x8e>
 8006296:	b236      	sxth	r6, r6
 8006298:	e7ef      	b.n	800627a <_printf_i+0x8e>
 800629a:	6808      	ldr	r0, [r1, #0]
 800629c:	6819      	ldr	r1, [r3, #0]
 800629e:	c940      	ldmia	r1!, {r6}
 80062a0:	0605      	lsls	r5, r0, #24
 80062a2:	d402      	bmi.n	80062aa <_printf_i+0xbe>
 80062a4:	0640      	lsls	r0, r0, #25
 80062a6:	d500      	bpl.n	80062aa <_printf_i+0xbe>
 80062a8:	b2b6      	uxth	r6, r6
 80062aa:	6019      	str	r1, [r3, #0]
 80062ac:	4b54      	ldr	r3, [pc, #336]	@ (8006400 <_printf_i+0x214>)
 80062ae:	270a      	movs	r7, #10
 80062b0:	9304      	str	r3, [sp, #16]
 80062b2:	2a6f      	cmp	r2, #111	@ 0x6f
 80062b4:	d100      	bne.n	80062b8 <_printf_i+0xcc>
 80062b6:	3f02      	subs	r7, #2
 80062b8:	0023      	movs	r3, r4
 80062ba:	2200      	movs	r2, #0
 80062bc:	3343      	adds	r3, #67	@ 0x43
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	6863      	ldr	r3, [r4, #4]
 80062c2:	60a3      	str	r3, [r4, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	db03      	blt.n	80062d0 <_printf_i+0xe4>
 80062c8:	2104      	movs	r1, #4
 80062ca:	6822      	ldr	r2, [r4, #0]
 80062cc:	438a      	bics	r2, r1
 80062ce:	6022      	str	r2, [r4, #0]
 80062d0:	2e00      	cmp	r6, #0
 80062d2:	d102      	bne.n	80062da <_printf_i+0xee>
 80062d4:	9d03      	ldr	r5, [sp, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00c      	beq.n	80062f4 <_printf_i+0x108>
 80062da:	9d03      	ldr	r5, [sp, #12]
 80062dc:	0030      	movs	r0, r6
 80062de:	0039      	movs	r1, r7
 80062e0:	f7f9 ffa2 	bl	8000228 <__aeabi_uidivmod>
 80062e4:	9b04      	ldr	r3, [sp, #16]
 80062e6:	3d01      	subs	r5, #1
 80062e8:	5c5b      	ldrb	r3, [r3, r1]
 80062ea:	702b      	strb	r3, [r5, #0]
 80062ec:	0033      	movs	r3, r6
 80062ee:	0006      	movs	r6, r0
 80062f0:	429f      	cmp	r7, r3
 80062f2:	d9f3      	bls.n	80062dc <_printf_i+0xf0>
 80062f4:	2f08      	cmp	r7, #8
 80062f6:	d109      	bne.n	800630c <_printf_i+0x120>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	07db      	lsls	r3, r3, #31
 80062fc:	d506      	bpl.n	800630c <_printf_i+0x120>
 80062fe:	6862      	ldr	r2, [r4, #4]
 8006300:	6923      	ldr	r3, [r4, #16]
 8006302:	429a      	cmp	r2, r3
 8006304:	dc02      	bgt.n	800630c <_printf_i+0x120>
 8006306:	2330      	movs	r3, #48	@ 0x30
 8006308:	3d01      	subs	r5, #1
 800630a:	702b      	strb	r3, [r5, #0]
 800630c:	9b03      	ldr	r3, [sp, #12]
 800630e:	1b5b      	subs	r3, r3, r5
 8006310:	6123      	str	r3, [r4, #16]
 8006312:	9b07      	ldr	r3, [sp, #28]
 8006314:	0021      	movs	r1, r4
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	9805      	ldr	r0, [sp, #20]
 800631a:	9b06      	ldr	r3, [sp, #24]
 800631c:	aa09      	add	r2, sp, #36	@ 0x24
 800631e:	f7ff fef5 	bl	800610c <_printf_common>
 8006322:	3001      	adds	r0, #1
 8006324:	d148      	bne.n	80063b8 <_printf_i+0x1cc>
 8006326:	2001      	movs	r0, #1
 8006328:	4240      	negs	r0, r0
 800632a:	b00b      	add	sp, #44	@ 0x2c
 800632c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800632e:	2220      	movs	r2, #32
 8006330:	6809      	ldr	r1, [r1, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	6022      	str	r2, [r4, #0]
 8006336:	2278      	movs	r2, #120	@ 0x78
 8006338:	4932      	ldr	r1, [pc, #200]	@ (8006404 <_printf_i+0x218>)
 800633a:	9104      	str	r1, [sp, #16]
 800633c:	0021      	movs	r1, r4
 800633e:	3145      	adds	r1, #69	@ 0x45
 8006340:	700a      	strb	r2, [r1, #0]
 8006342:	6819      	ldr	r1, [r3, #0]
 8006344:	6822      	ldr	r2, [r4, #0]
 8006346:	c940      	ldmia	r1!, {r6}
 8006348:	0610      	lsls	r0, r2, #24
 800634a:	d402      	bmi.n	8006352 <_printf_i+0x166>
 800634c:	0650      	lsls	r0, r2, #25
 800634e:	d500      	bpl.n	8006352 <_printf_i+0x166>
 8006350:	b2b6      	uxth	r6, r6
 8006352:	6019      	str	r1, [r3, #0]
 8006354:	07d3      	lsls	r3, r2, #31
 8006356:	d502      	bpl.n	800635e <_printf_i+0x172>
 8006358:	2320      	movs	r3, #32
 800635a:	4313      	orrs	r3, r2
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	2e00      	cmp	r6, #0
 8006360:	d001      	beq.n	8006366 <_printf_i+0x17a>
 8006362:	2710      	movs	r7, #16
 8006364:	e7a8      	b.n	80062b8 <_printf_i+0xcc>
 8006366:	2220      	movs	r2, #32
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	4393      	bics	r3, r2
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	e7f8      	b.n	8006362 <_printf_i+0x176>
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	680d      	ldr	r5, [r1, #0]
 8006374:	1d10      	adds	r0, r2, #4
 8006376:	6949      	ldr	r1, [r1, #20]
 8006378:	6018      	str	r0, [r3, #0]
 800637a:	6813      	ldr	r3, [r2, #0]
 800637c:	062e      	lsls	r6, r5, #24
 800637e:	d501      	bpl.n	8006384 <_printf_i+0x198>
 8006380:	6019      	str	r1, [r3, #0]
 8006382:	e002      	b.n	800638a <_printf_i+0x19e>
 8006384:	066d      	lsls	r5, r5, #25
 8006386:	d5fb      	bpl.n	8006380 <_printf_i+0x194>
 8006388:	8019      	strh	r1, [r3, #0]
 800638a:	2300      	movs	r3, #0
 800638c:	9d03      	ldr	r5, [sp, #12]
 800638e:	6123      	str	r3, [r4, #16]
 8006390:	e7bf      	b.n	8006312 <_printf_i+0x126>
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	1d11      	adds	r1, r2, #4
 8006396:	6019      	str	r1, [r3, #0]
 8006398:	6815      	ldr	r5, [r2, #0]
 800639a:	2100      	movs	r1, #0
 800639c:	0028      	movs	r0, r5
 800639e:	6862      	ldr	r2, [r4, #4]
 80063a0:	f000 f986 	bl	80066b0 <memchr>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	d001      	beq.n	80063ac <_printf_i+0x1c0>
 80063a8:	1b40      	subs	r0, r0, r5
 80063aa:	6060      	str	r0, [r4, #4]
 80063ac:	6863      	ldr	r3, [r4, #4]
 80063ae:	6123      	str	r3, [r4, #16]
 80063b0:	2300      	movs	r3, #0
 80063b2:	9a03      	ldr	r2, [sp, #12]
 80063b4:	7013      	strb	r3, [r2, #0]
 80063b6:	e7ac      	b.n	8006312 <_printf_i+0x126>
 80063b8:	002a      	movs	r2, r5
 80063ba:	6923      	ldr	r3, [r4, #16]
 80063bc:	9906      	ldr	r1, [sp, #24]
 80063be:	9805      	ldr	r0, [sp, #20]
 80063c0:	9d07      	ldr	r5, [sp, #28]
 80063c2:	47a8      	blx	r5
 80063c4:	3001      	adds	r0, #1
 80063c6:	d0ae      	beq.n	8006326 <_printf_i+0x13a>
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	079b      	lsls	r3, r3, #30
 80063cc:	d415      	bmi.n	80063fa <_printf_i+0x20e>
 80063ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063d0:	68e0      	ldr	r0, [r4, #12]
 80063d2:	4298      	cmp	r0, r3
 80063d4:	daa9      	bge.n	800632a <_printf_i+0x13e>
 80063d6:	0018      	movs	r0, r3
 80063d8:	e7a7      	b.n	800632a <_printf_i+0x13e>
 80063da:	0022      	movs	r2, r4
 80063dc:	2301      	movs	r3, #1
 80063de:	9906      	ldr	r1, [sp, #24]
 80063e0:	9805      	ldr	r0, [sp, #20]
 80063e2:	9e07      	ldr	r6, [sp, #28]
 80063e4:	3219      	adds	r2, #25
 80063e6:	47b0      	blx	r6
 80063e8:	3001      	adds	r0, #1
 80063ea:	d09c      	beq.n	8006326 <_printf_i+0x13a>
 80063ec:	3501      	adds	r5, #1
 80063ee:	68e3      	ldr	r3, [r4, #12]
 80063f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063f2:	1a9b      	subs	r3, r3, r2
 80063f4:	42ab      	cmp	r3, r5
 80063f6:	dcf0      	bgt.n	80063da <_printf_i+0x1ee>
 80063f8:	e7e9      	b.n	80063ce <_printf_i+0x1e2>
 80063fa:	2500      	movs	r5, #0
 80063fc:	e7f7      	b.n	80063ee <_printf_i+0x202>
 80063fe:	46c0      	nop			@ (mov r8, r8)
 8006400:	08006821 	.word	0x08006821
 8006404:	08006832 	.word	0x08006832

08006408 <__sflush_r>:
 8006408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800640a:	220c      	movs	r2, #12
 800640c:	5e8b      	ldrsh	r3, [r1, r2]
 800640e:	0005      	movs	r5, r0
 8006410:	000c      	movs	r4, r1
 8006412:	071a      	lsls	r2, r3, #28
 8006414:	d456      	bmi.n	80064c4 <__sflush_r+0xbc>
 8006416:	684a      	ldr	r2, [r1, #4]
 8006418:	2a00      	cmp	r2, #0
 800641a:	dc02      	bgt.n	8006422 <__sflush_r+0x1a>
 800641c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800641e:	2a00      	cmp	r2, #0
 8006420:	dd4e      	ble.n	80064c0 <__sflush_r+0xb8>
 8006422:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006424:	2f00      	cmp	r7, #0
 8006426:	d04b      	beq.n	80064c0 <__sflush_r+0xb8>
 8006428:	2200      	movs	r2, #0
 800642a:	2080      	movs	r0, #128	@ 0x80
 800642c:	682e      	ldr	r6, [r5, #0]
 800642e:	602a      	str	r2, [r5, #0]
 8006430:	001a      	movs	r2, r3
 8006432:	0140      	lsls	r0, r0, #5
 8006434:	6a21      	ldr	r1, [r4, #32]
 8006436:	4002      	ands	r2, r0
 8006438:	4203      	tst	r3, r0
 800643a:	d033      	beq.n	80064a4 <__sflush_r+0x9c>
 800643c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800643e:	89a3      	ldrh	r3, [r4, #12]
 8006440:	075b      	lsls	r3, r3, #29
 8006442:	d506      	bpl.n	8006452 <__sflush_r+0x4a>
 8006444:	6863      	ldr	r3, [r4, #4]
 8006446:	1ad2      	subs	r2, r2, r3
 8006448:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <__sflush_r+0x4a>
 800644e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006450:	1ad2      	subs	r2, r2, r3
 8006452:	2300      	movs	r3, #0
 8006454:	0028      	movs	r0, r5
 8006456:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006458:	6a21      	ldr	r1, [r4, #32]
 800645a:	47b8      	blx	r7
 800645c:	89a2      	ldrh	r2, [r4, #12]
 800645e:	1c43      	adds	r3, r0, #1
 8006460:	d106      	bne.n	8006470 <__sflush_r+0x68>
 8006462:	6829      	ldr	r1, [r5, #0]
 8006464:	291d      	cmp	r1, #29
 8006466:	d846      	bhi.n	80064f6 <__sflush_r+0xee>
 8006468:	4b29      	ldr	r3, [pc, #164]	@ (8006510 <__sflush_r+0x108>)
 800646a:	410b      	asrs	r3, r1
 800646c:	07db      	lsls	r3, r3, #31
 800646e:	d442      	bmi.n	80064f6 <__sflush_r+0xee>
 8006470:	2300      	movs	r3, #0
 8006472:	6063      	str	r3, [r4, #4]
 8006474:	6923      	ldr	r3, [r4, #16]
 8006476:	6023      	str	r3, [r4, #0]
 8006478:	04d2      	lsls	r2, r2, #19
 800647a:	d505      	bpl.n	8006488 <__sflush_r+0x80>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d102      	bne.n	8006486 <__sflush_r+0x7e>
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d100      	bne.n	8006488 <__sflush_r+0x80>
 8006486:	6560      	str	r0, [r4, #84]	@ 0x54
 8006488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800648a:	602e      	str	r6, [r5, #0]
 800648c:	2900      	cmp	r1, #0
 800648e:	d017      	beq.n	80064c0 <__sflush_r+0xb8>
 8006490:	0023      	movs	r3, r4
 8006492:	3344      	adds	r3, #68	@ 0x44
 8006494:	4299      	cmp	r1, r3
 8006496:	d002      	beq.n	800649e <__sflush_r+0x96>
 8006498:	0028      	movs	r0, r5
 800649a:	f7ff fbf7 	bl	8005c8c <_free_r>
 800649e:	2300      	movs	r3, #0
 80064a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80064a2:	e00d      	b.n	80064c0 <__sflush_r+0xb8>
 80064a4:	2301      	movs	r3, #1
 80064a6:	0028      	movs	r0, r5
 80064a8:	47b8      	blx	r7
 80064aa:	0002      	movs	r2, r0
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d1c6      	bne.n	800643e <__sflush_r+0x36>
 80064b0:	682b      	ldr	r3, [r5, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0c3      	beq.n	800643e <__sflush_r+0x36>
 80064b6:	2b1d      	cmp	r3, #29
 80064b8:	d001      	beq.n	80064be <__sflush_r+0xb6>
 80064ba:	2b16      	cmp	r3, #22
 80064bc:	d11a      	bne.n	80064f4 <__sflush_r+0xec>
 80064be:	602e      	str	r6, [r5, #0]
 80064c0:	2000      	movs	r0, #0
 80064c2:	e01e      	b.n	8006502 <__sflush_r+0xfa>
 80064c4:	690e      	ldr	r6, [r1, #16]
 80064c6:	2e00      	cmp	r6, #0
 80064c8:	d0fa      	beq.n	80064c0 <__sflush_r+0xb8>
 80064ca:	680f      	ldr	r7, [r1, #0]
 80064cc:	600e      	str	r6, [r1, #0]
 80064ce:	1bba      	subs	r2, r7, r6
 80064d0:	9201      	str	r2, [sp, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	079b      	lsls	r3, r3, #30
 80064d6:	d100      	bne.n	80064da <__sflush_r+0xd2>
 80064d8:	694a      	ldr	r2, [r1, #20]
 80064da:	60a2      	str	r2, [r4, #8]
 80064dc:	9b01      	ldr	r3, [sp, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	ddee      	ble.n	80064c0 <__sflush_r+0xb8>
 80064e2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80064e4:	0032      	movs	r2, r6
 80064e6:	001f      	movs	r7, r3
 80064e8:	0028      	movs	r0, r5
 80064ea:	9b01      	ldr	r3, [sp, #4]
 80064ec:	6a21      	ldr	r1, [r4, #32]
 80064ee:	47b8      	blx	r7
 80064f0:	2800      	cmp	r0, #0
 80064f2:	dc07      	bgt.n	8006504 <__sflush_r+0xfc>
 80064f4:	89a2      	ldrh	r2, [r4, #12]
 80064f6:	2340      	movs	r3, #64	@ 0x40
 80064f8:	2001      	movs	r0, #1
 80064fa:	4313      	orrs	r3, r2
 80064fc:	b21b      	sxth	r3, r3
 80064fe:	81a3      	strh	r3, [r4, #12]
 8006500:	4240      	negs	r0, r0
 8006502:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006504:	9b01      	ldr	r3, [sp, #4]
 8006506:	1836      	adds	r6, r6, r0
 8006508:	1a1b      	subs	r3, r3, r0
 800650a:	9301      	str	r3, [sp, #4]
 800650c:	e7e6      	b.n	80064dc <__sflush_r+0xd4>
 800650e:	46c0      	nop			@ (mov r8, r8)
 8006510:	dfbffffe 	.word	0xdfbffffe

08006514 <_fflush_r>:
 8006514:	690b      	ldr	r3, [r1, #16]
 8006516:	b570      	push	{r4, r5, r6, lr}
 8006518:	0005      	movs	r5, r0
 800651a:	000c      	movs	r4, r1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d102      	bne.n	8006526 <_fflush_r+0x12>
 8006520:	2500      	movs	r5, #0
 8006522:	0028      	movs	r0, r5
 8006524:	bd70      	pop	{r4, r5, r6, pc}
 8006526:	2800      	cmp	r0, #0
 8006528:	d004      	beq.n	8006534 <_fflush_r+0x20>
 800652a:	6a03      	ldr	r3, [r0, #32]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <_fflush_r+0x20>
 8006530:	f7ff f998 	bl	8005864 <__sinit>
 8006534:	220c      	movs	r2, #12
 8006536:	5ea3      	ldrsh	r3, [r4, r2]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0f1      	beq.n	8006520 <_fflush_r+0xc>
 800653c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800653e:	07d2      	lsls	r2, r2, #31
 8006540:	d404      	bmi.n	800654c <_fflush_r+0x38>
 8006542:	059b      	lsls	r3, r3, #22
 8006544:	d402      	bmi.n	800654c <_fflush_r+0x38>
 8006546:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006548:	f7ff fb9d 	bl	8005c86 <__retarget_lock_acquire_recursive>
 800654c:	0028      	movs	r0, r5
 800654e:	0021      	movs	r1, r4
 8006550:	f7ff ff5a 	bl	8006408 <__sflush_r>
 8006554:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006556:	0005      	movs	r5, r0
 8006558:	07db      	lsls	r3, r3, #31
 800655a:	d4e2      	bmi.n	8006522 <_fflush_r+0xe>
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	059b      	lsls	r3, r3, #22
 8006560:	d4df      	bmi.n	8006522 <_fflush_r+0xe>
 8006562:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006564:	f7ff fb90 	bl	8005c88 <__retarget_lock_release_recursive>
 8006568:	e7db      	b.n	8006522 <_fflush_r+0xe>
	...

0800656c <__swhatbuf_r>:
 800656c:	b570      	push	{r4, r5, r6, lr}
 800656e:	000e      	movs	r6, r1
 8006570:	001d      	movs	r5, r3
 8006572:	230e      	movs	r3, #14
 8006574:	5ec9      	ldrsh	r1, [r1, r3]
 8006576:	0014      	movs	r4, r2
 8006578:	b096      	sub	sp, #88	@ 0x58
 800657a:	2900      	cmp	r1, #0
 800657c:	da0c      	bge.n	8006598 <__swhatbuf_r+0x2c>
 800657e:	89b2      	ldrh	r2, [r6, #12]
 8006580:	2380      	movs	r3, #128	@ 0x80
 8006582:	0011      	movs	r1, r2
 8006584:	4019      	ands	r1, r3
 8006586:	421a      	tst	r2, r3
 8006588:	d114      	bne.n	80065b4 <__swhatbuf_r+0x48>
 800658a:	2380      	movs	r3, #128	@ 0x80
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	2000      	movs	r0, #0
 8006590:	6029      	str	r1, [r5, #0]
 8006592:	6023      	str	r3, [r4, #0]
 8006594:	b016      	add	sp, #88	@ 0x58
 8006596:	bd70      	pop	{r4, r5, r6, pc}
 8006598:	466a      	mov	r2, sp
 800659a:	f000 f853 	bl	8006644 <_fstat_r>
 800659e:	2800      	cmp	r0, #0
 80065a0:	dbed      	blt.n	800657e <__swhatbuf_r+0x12>
 80065a2:	23f0      	movs	r3, #240	@ 0xf0
 80065a4:	9901      	ldr	r1, [sp, #4]
 80065a6:	021b      	lsls	r3, r3, #8
 80065a8:	4019      	ands	r1, r3
 80065aa:	4b04      	ldr	r3, [pc, #16]	@ (80065bc <__swhatbuf_r+0x50>)
 80065ac:	18c9      	adds	r1, r1, r3
 80065ae:	424b      	negs	r3, r1
 80065b0:	4159      	adcs	r1, r3
 80065b2:	e7ea      	b.n	800658a <__swhatbuf_r+0x1e>
 80065b4:	2100      	movs	r1, #0
 80065b6:	2340      	movs	r3, #64	@ 0x40
 80065b8:	e7e9      	b.n	800658e <__swhatbuf_r+0x22>
 80065ba:	46c0      	nop			@ (mov r8, r8)
 80065bc:	ffffe000 	.word	0xffffe000

080065c0 <__smakebuf_r>:
 80065c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065c2:	2602      	movs	r6, #2
 80065c4:	898b      	ldrh	r3, [r1, #12]
 80065c6:	0005      	movs	r5, r0
 80065c8:	000c      	movs	r4, r1
 80065ca:	b085      	sub	sp, #20
 80065cc:	4233      	tst	r3, r6
 80065ce:	d007      	beq.n	80065e0 <__smakebuf_r+0x20>
 80065d0:	0023      	movs	r3, r4
 80065d2:	3347      	adds	r3, #71	@ 0x47
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	6123      	str	r3, [r4, #16]
 80065d8:	2301      	movs	r3, #1
 80065da:	6163      	str	r3, [r4, #20]
 80065dc:	b005      	add	sp, #20
 80065de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065e0:	ab03      	add	r3, sp, #12
 80065e2:	aa02      	add	r2, sp, #8
 80065e4:	f7ff ffc2 	bl	800656c <__swhatbuf_r>
 80065e8:	9f02      	ldr	r7, [sp, #8]
 80065ea:	9001      	str	r0, [sp, #4]
 80065ec:	0039      	movs	r1, r7
 80065ee:	0028      	movs	r0, r5
 80065f0:	f7ff fbb8 	bl	8005d64 <_malloc_r>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d108      	bne.n	800660a <__smakebuf_r+0x4a>
 80065f8:	220c      	movs	r2, #12
 80065fa:	5ea3      	ldrsh	r3, [r4, r2]
 80065fc:	059a      	lsls	r2, r3, #22
 80065fe:	d4ed      	bmi.n	80065dc <__smakebuf_r+0x1c>
 8006600:	2203      	movs	r2, #3
 8006602:	4393      	bics	r3, r2
 8006604:	431e      	orrs	r6, r3
 8006606:	81a6      	strh	r6, [r4, #12]
 8006608:	e7e2      	b.n	80065d0 <__smakebuf_r+0x10>
 800660a:	2380      	movs	r3, #128	@ 0x80
 800660c:	89a2      	ldrh	r2, [r4, #12]
 800660e:	6020      	str	r0, [r4, #0]
 8006610:	4313      	orrs	r3, r2
 8006612:	81a3      	strh	r3, [r4, #12]
 8006614:	9b03      	ldr	r3, [sp, #12]
 8006616:	6120      	str	r0, [r4, #16]
 8006618:	6167      	str	r7, [r4, #20]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00c      	beq.n	8006638 <__smakebuf_r+0x78>
 800661e:	0028      	movs	r0, r5
 8006620:	230e      	movs	r3, #14
 8006622:	5ee1      	ldrsh	r1, [r4, r3]
 8006624:	f000 f820 	bl	8006668 <_isatty_r>
 8006628:	2800      	cmp	r0, #0
 800662a:	d005      	beq.n	8006638 <__smakebuf_r+0x78>
 800662c:	2303      	movs	r3, #3
 800662e:	89a2      	ldrh	r2, [r4, #12]
 8006630:	439a      	bics	r2, r3
 8006632:	3b02      	subs	r3, #2
 8006634:	4313      	orrs	r3, r2
 8006636:	81a3      	strh	r3, [r4, #12]
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	9a01      	ldr	r2, [sp, #4]
 800663c:	4313      	orrs	r3, r2
 800663e:	81a3      	strh	r3, [r4, #12]
 8006640:	e7cc      	b.n	80065dc <__smakebuf_r+0x1c>
	...

08006644 <_fstat_r>:
 8006644:	2300      	movs	r3, #0
 8006646:	b570      	push	{r4, r5, r6, lr}
 8006648:	4d06      	ldr	r5, [pc, #24]	@ (8006664 <_fstat_r+0x20>)
 800664a:	0004      	movs	r4, r0
 800664c:	0008      	movs	r0, r1
 800664e:	0011      	movs	r1, r2
 8006650:	602b      	str	r3, [r5, #0]
 8006652:	f7fc fa8f 	bl	8002b74 <_fstat>
 8006656:	1c43      	adds	r3, r0, #1
 8006658:	d103      	bne.n	8006662 <_fstat_r+0x1e>
 800665a:	682b      	ldr	r3, [r5, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d000      	beq.n	8006662 <_fstat_r+0x1e>
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	bd70      	pop	{r4, r5, r6, pc}
 8006664:	200003f4 	.word	0x200003f4

08006668 <_isatty_r>:
 8006668:	2300      	movs	r3, #0
 800666a:	b570      	push	{r4, r5, r6, lr}
 800666c:	4d06      	ldr	r5, [pc, #24]	@ (8006688 <_isatty_r+0x20>)
 800666e:	0004      	movs	r4, r0
 8006670:	0008      	movs	r0, r1
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	f7fc fa8c 	bl	8002b90 <_isatty>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d103      	bne.n	8006684 <_isatty_r+0x1c>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d000      	beq.n	8006684 <_isatty_r+0x1c>
 8006682:	6023      	str	r3, [r4, #0]
 8006684:	bd70      	pop	{r4, r5, r6, pc}
 8006686:	46c0      	nop			@ (mov r8, r8)
 8006688:	200003f4 	.word	0x200003f4

0800668c <_sbrk_r>:
 800668c:	2300      	movs	r3, #0
 800668e:	b570      	push	{r4, r5, r6, lr}
 8006690:	4d06      	ldr	r5, [pc, #24]	@ (80066ac <_sbrk_r+0x20>)
 8006692:	0004      	movs	r4, r0
 8006694:	0008      	movs	r0, r1
 8006696:	602b      	str	r3, [r5, #0]
 8006698:	f7fc fa8e 	bl	8002bb8 <_sbrk>
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	d103      	bne.n	80066a8 <_sbrk_r+0x1c>
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d000      	beq.n	80066a8 <_sbrk_r+0x1c>
 80066a6:	6023      	str	r3, [r4, #0]
 80066a8:	bd70      	pop	{r4, r5, r6, pc}
 80066aa:	46c0      	nop			@ (mov r8, r8)
 80066ac:	200003f4 	.word	0x200003f4

080066b0 <memchr>:
 80066b0:	b2c9      	uxtb	r1, r1
 80066b2:	1882      	adds	r2, r0, r2
 80066b4:	4290      	cmp	r0, r2
 80066b6:	d101      	bne.n	80066bc <memchr+0xc>
 80066b8:	2000      	movs	r0, #0
 80066ba:	4770      	bx	lr
 80066bc:	7803      	ldrb	r3, [r0, #0]
 80066be:	428b      	cmp	r3, r1
 80066c0:	d0fb      	beq.n	80066ba <memchr+0xa>
 80066c2:	3001      	adds	r0, #1
 80066c4:	e7f6      	b.n	80066b4 <memchr+0x4>
	...

080066c8 <_init>:
 80066c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ca:	46c0      	nop			@ (mov r8, r8)
 80066cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ce:	bc08      	pop	{r3}
 80066d0:	469e      	mov	lr, r3
 80066d2:	4770      	bx	lr

080066d4 <_fini>:
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d6:	46c0      	nop			@ (mov r8, r8)
 80066d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066da:	bc08      	pop	{r3}
 80066dc:	469e      	mov	lr, r3
 80066de:	4770      	bx	lr
