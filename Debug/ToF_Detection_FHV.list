
ToF_Detection_FHV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bd4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08004c94  08004c94  00005c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004de0  08004de0  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004de0  08004de0  00005de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004de8  08004de8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de8  08004de8  00005de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dec  08004dec  00005dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004df0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000068  08004e58  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08004e58  000063c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce60  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0c  00000000  00000000  00012ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00014e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094c  00000000  00000000  00015a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012c70  00000000  00000000  0001634c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f95d  00000000  00000000  00028fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ac61  00000000  00000000  00038919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a357a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d4  00000000  00000000  000a35c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000a6894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c7c 	.word	0x08004c7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004c7c 	.word	0x08004c7c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8d8 	bl	80004a4 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8d3 	bl	80004a4 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzsi2>:
 8000468:	211c      	movs	r1, #28
 800046a:	2301      	movs	r3, #1
 800046c:	041b      	lsls	r3, r3, #16
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0xe>
 8000472:	0c00      	lsrs	r0, r0, #16
 8000474:	3910      	subs	r1, #16
 8000476:	0a1b      	lsrs	r3, r3, #8
 8000478:	4298      	cmp	r0, r3
 800047a:	d301      	bcc.n	8000480 <__clzsi2+0x18>
 800047c:	0a00      	lsrs	r0, r0, #8
 800047e:	3908      	subs	r1, #8
 8000480:	091b      	lsrs	r3, r3, #4
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0x22>
 8000486:	0900      	lsrs	r0, r0, #4
 8000488:	3904      	subs	r1, #4
 800048a:	a202      	add	r2, pc, #8	@ (adr r2, 8000494 <__clzsi2+0x2c>)
 800048c:	5c10      	ldrb	r0, [r2, r0]
 800048e:	1840      	adds	r0, r0, r1
 8000490:	4770      	bx	lr
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	02020304 	.word	0x02020304
 8000498:	01010101 	.word	0x01010101
	...

080004a4 <__clzdi2>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	2900      	cmp	r1, #0
 80004a8:	d103      	bne.n	80004b2 <__clzdi2+0xe>
 80004aa:	f7ff ffdd 	bl	8000468 <__clzsi2>
 80004ae:	3020      	adds	r0, #32
 80004b0:	e002      	b.n	80004b8 <__clzdi2+0x14>
 80004b2:	0008      	movs	r0, r1
 80004b4:	f7ff ffd8 	bl	8000468 <__clzsi2>
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	0002      	movs	r2, r0
 80004c4:	1dbb      	adds	r3, r7, #6
 80004c6:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80004c8:	230f      	movs	r3, #15
 80004ca:	18fb      	adds	r3, r7, r3
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 80004d0:	210e      	movs	r1, #14
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	222d      	movs	r2, #45	@ 0x2d
 80004dc:	701a      	strb	r2, [r3, #0]
 80004de:	e01a      	b.n	8000516 <VL53L1X_SensorInit+0x5a>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80004e0:	240e      	movs	r4, #14
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	b299      	uxth	r1, r3
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	3b2d      	subs	r3, #45	@ 0x2d
 80004ee:	4a3e      	ldr	r2, [pc, #248]	@ (80005e8 <VL53L1X_SensorInit+0x12c>)
 80004f0:	5cd2      	ldrb	r2, [r2, r3]
 80004f2:	1dbb      	adds	r3, r7, #6
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 fa14 	bl	8000924 <VL53L1_WrByte>
 80004fc:	0003      	movs	r3, r0
 80004fe:	0019      	movs	r1, r3
 8000500:	220f      	movs	r2, #15
 8000502:	18bb      	adds	r3, r7, r2
 8000504:	18ba      	adds	r2, r7, r2
 8000506:	7812      	ldrb	r2, [r2, #0]
 8000508:	430a      	orrs	r2, r1
 800050a:	701a      	strb	r2, [r3, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800050c:	193b      	adds	r3, r7, r4
 800050e:	781a      	ldrb	r2, [r3, #0]
 8000510:	193b      	adds	r3, r7, r4
 8000512:	3201      	adds	r2, #1
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	230e      	movs	r3, #14
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b87      	cmp	r3, #135	@ 0x87
 800051e:	d9df      	bls.n	80004e0 <VL53L1X_SensorInit+0x24>
	}
	status |= VL53L1X_StartRanging(dev);
 8000520:	1dbb      	adds	r3, r7, #6
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	0018      	movs	r0, r3
 8000526:	f000 f8b3 	bl	8000690 <VL53L1X_StartRanging>
 800052a:	0003      	movs	r3, r0
 800052c:	0019      	movs	r1, r3
 800052e:	220f      	movs	r2, #15
 8000530:	18bb      	adds	r3, r7, r2
 8000532:	18ba      	adds	r2, r7, r2
 8000534:	7812      	ldrb	r2, [r2, #0]
 8000536:	430a      	orrs	r2, r1
 8000538:	701a      	strb	r2, [r3, #0]
	tmp  = 0;
 800053a:	230d      	movs	r3, #13
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	2200      	movs	r2, #0
 8000540:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8000542:	e00f      	b.n	8000564 <VL53L1X_SensorInit+0xa8>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8000544:	230d      	movs	r3, #13
 8000546:	18fa      	adds	r2, r7, r3
 8000548:	1dbb      	adds	r3, r7, #6
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	0011      	movs	r1, r2
 800054e:	0018      	movs	r0, r3
 8000550:	f000 f8dc 	bl	800070c <VL53L1X_CheckForDataReady>
 8000554:	0003      	movs	r3, r0
 8000556:	0019      	movs	r1, r3
 8000558:	220f      	movs	r2, #15
 800055a:	18bb      	adds	r3, r7, r2
 800055c:	18ba      	adds	r2, r7, r2
 800055e:	7812      	ldrb	r2, [r2, #0]
 8000560:	430a      	orrs	r2, r1
 8000562:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8000564:	230d      	movs	r3, #13
 8000566:	18fb      	adds	r3, r7, r3
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0ea      	beq.n	8000544 <VL53L1X_SensorInit+0x88>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 800056e:	1dbb      	adds	r3, r7, #6
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	0018      	movs	r0, r3
 8000574:	f000 f83a 	bl	80005ec <VL53L1X_ClearInterrupt>
 8000578:	0003      	movs	r3, r0
 800057a:	0019      	movs	r1, r3
 800057c:	240f      	movs	r4, #15
 800057e:	193b      	adds	r3, r7, r4
 8000580:	193a      	adds	r2, r7, r4
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	430a      	orrs	r2, r1
 8000586:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_StopRanging(dev);
 8000588:	1dbb      	adds	r3, r7, #6
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	0018      	movs	r0, r3
 800058e:	f000 f89e 	bl	80006ce <VL53L1X_StopRanging>
 8000592:	0003      	movs	r3, r0
 8000594:	0019      	movs	r1, r3
 8000596:	193b      	adds	r3, r7, r4
 8000598:	193a      	adds	r2, r7, r4
 800059a:	7812      	ldrb	r2, [r2, #0]
 800059c:	430a      	orrs	r2, r1
 800059e:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 80005a0:	1dbb      	adds	r3, r7, #6
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	2209      	movs	r2, #9
 80005a6:	2108      	movs	r1, #8
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 f9bb 	bl	8000924 <VL53L1_WrByte>
 80005ae:	0003      	movs	r3, r0
 80005b0:	0019      	movs	r1, r3
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	193a      	adds	r2, r7, r4
 80005b6:	7812      	ldrb	r2, [r2, #0]
 80005b8:	430a      	orrs	r2, r1
 80005ba:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 80005bc:	1dbb      	adds	r3, r7, #6
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	210b      	movs	r1, #11
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 f9ad 	bl	8000924 <VL53L1_WrByte>
 80005ca:	0003      	movs	r3, r0
 80005cc:	0019      	movs	r1, r3
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	193a      	adds	r2, r7, r4
 80005d2:	7812      	ldrb	r2, [r2, #0]
 80005d4:	430a      	orrs	r2, r1
 80005d6:	701a      	strb	r2, [r3, #0]
	return status;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b25b      	sxtb	r3, r3
}
 80005de:	0018      	movs	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b005      	add	sp, #20
 80005e4:	bd90      	pop	{r4, r7, pc}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	08004ccc 	.word	0x08004ccc

080005ec <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	0002      	movs	r2, r0
 80005f4:	1dbb      	adds	r3, r7, #6
 80005f6:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80005f8:	240f      	movs	r4, #15
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8000600:	1dbb      	adds	r3, r7, #6
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	2201      	movs	r2, #1
 8000606:	2186      	movs	r1, #134	@ 0x86
 8000608:	0018      	movs	r0, r3
 800060a:	f000 f98b 	bl	8000924 <VL53L1_WrByte>
 800060e:	0003      	movs	r3, r0
 8000610:	0019      	movs	r1, r3
 8000612:	193b      	adds	r3, r7, r4
 8000614:	193a      	adds	r2, r7, r4
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	430a      	orrs	r2, r1
 800061a:	701a      	strb	r2, [r3, #0]
	return status;
 800061c:	193b      	adds	r3, r7, r4
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b25b      	sxtb	r3, r3
}
 8000622:	0018      	movs	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	b005      	add	sp, #20
 8000628:	bd90      	pop	{r4, r7, pc}

0800062a <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800062a:	b5b0      	push	{r4, r5, r7, lr}
 800062c:	b084      	sub	sp, #16
 800062e:	af00      	add	r7, sp, #0
 8000630:	0002      	movs	r2, r0
 8000632:	6039      	str	r1, [r7, #0]
 8000634:	1dbb      	adds	r3, r7, #6
 8000636:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8000638:	240f      	movs	r4, #15
 800063a:	193b      	adds	r3, r7, r4
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8000640:	250e      	movs	r5, #14
 8000642:	197a      	adds	r2, r7, r5
 8000644:	1dbb      	adds	r3, r7, #6
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	2130      	movs	r1, #48	@ 0x30
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f998 	bl	8000980 <VL53L1_RdByte>
 8000650:	0003      	movs	r3, r0
 8000652:	0019      	movs	r1, r3
 8000654:	0020      	movs	r0, r4
 8000656:	183b      	adds	r3, r7, r0
 8000658:	183a      	adds	r2, r7, r0
 800065a:	7812      	ldrb	r2, [r2, #0]
 800065c:	430a      	orrs	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x10;
 8000660:	197b      	adds	r3, r7, r5
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2210      	movs	r2, #16
 8000666:	4013      	ands	r3, r2
 8000668:	b2da      	uxtb	r2, r3
 800066a:	197b      	adds	r3, r7, r5
 800066c:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 800066e:	197b      	adds	r3, r7, r5
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	091b      	lsrs	r3, r3, #4
 8000674:	b2db      	uxtb	r3, r3
 8000676:	425a      	negs	r2, r3
 8000678:	4153      	adcs	r3, r2
 800067a:	b2db      	uxtb	r3, r3
 800067c:	001a      	movs	r2, r3
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	701a      	strb	r2, [r3, #0]
	return status;
 8000682:	183b      	adds	r3, r7, r0
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	b25b      	sxtb	r3, r3
}
 8000688:	0018      	movs	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	b004      	add	sp, #16
 800068e:	bdb0      	pop	{r4, r5, r7, pc}

08000690 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	0002      	movs	r2, r0
 8000698:	1dbb      	adds	r3, r7, #6
 800069a:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800069c:	240f      	movs	r4, #15
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 80006a4:	1dbb      	adds	r3, r7, #6
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	2240      	movs	r2, #64	@ 0x40
 80006aa:	2187      	movs	r1, #135	@ 0x87
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 f939 	bl	8000924 <VL53L1_WrByte>
 80006b2:	0003      	movs	r3, r0
 80006b4:	0019      	movs	r1, r3
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	193a      	adds	r2, r7, r4
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	430a      	orrs	r2, r1
 80006be:	701a      	strb	r2, [r3, #0]
	return status;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b25b      	sxtb	r3, r3
}
 80006c6:	0018      	movs	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b005      	add	sp, #20
 80006cc:	bd90      	pop	{r4, r7, pc}

080006ce <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 80006ce:	b590      	push	{r4, r7, lr}
 80006d0:	b085      	sub	sp, #20
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	0002      	movs	r2, r0
 80006d6:	1dbb      	adds	r3, r7, #6
 80006d8:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80006da:	240f      	movs	r4, #15
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 80006e2:	1dbb      	adds	r3, r7, #6
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	2200      	movs	r2, #0
 80006e8:	2187      	movs	r1, #135	@ 0x87
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 f91a 	bl	8000924 <VL53L1_WrByte>
 80006f0:	0003      	movs	r3, r0
 80006f2:	0019      	movs	r1, r3
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	193a      	adds	r2, r7, r4
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	430a      	orrs	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]
	return status;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b25b      	sxtb	r3, r3
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	b005      	add	sp, #20
 800070a:	bd90      	pop	{r4, r7, pc}

0800070c <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	0002      	movs	r2, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	1dbb      	adds	r3, r7, #6
 8000718:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800071a:	240f      	movs	r4, #15
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000722:	250d      	movs	r5, #13
 8000724:	197a      	adds	r2, r7, r5
 8000726:	1dbb      	adds	r3, r7, #6
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	0011      	movs	r1, r2
 800072c:	0018      	movs	r0, r3
 800072e:	f7ff ff7c 	bl	800062a <VL53L1X_GetInterruptPolarity>
 8000732:	0003      	movs	r3, r0
 8000734:	0019      	movs	r1, r3
 8000736:	193b      	adds	r3, r7, r4
 8000738:	193a      	adds	r2, r7, r4
 800073a:	7812      	ldrb	r2, [r2, #0]
 800073c:	430a      	orrs	r2, r1
 800073e:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8000740:	260e      	movs	r6, #14
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	1dbb      	adds	r3, r7, #6
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	2131      	movs	r1, #49	@ 0x31
 800074a:	0018      	movs	r0, r3
 800074c:	f000 f918 	bl	8000980 <VL53L1_RdByte>
 8000750:	0003      	movs	r3, r0
 8000752:	0019      	movs	r1, r3
 8000754:	193b      	adds	r3, r7, r4
 8000756:	193a      	adds	r2, r7, r4
 8000758:	7812      	ldrb	r2, [r2, #0]
 800075a:	430a      	orrs	r2, r1
 800075c:	701a      	strb	r2, [r3, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 800075e:	193b      	adds	r3, r7, r4
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	b25b      	sxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d10f      	bne.n	8000788 <VL53L1X_CheckForDataReady+0x7c>
		if ((Temp & 1) == IntPol)
 8000768:	19bb      	adds	r3, r7, r6
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	001a      	movs	r2, r3
 800076e:	2301      	movs	r3, #1
 8000770:	4013      	ands	r3, r2
 8000772:	197a      	adds	r2, r7, r5
 8000774:	7812      	ldrb	r2, [r2, #0]
 8000776:	4293      	cmp	r3, r2
 8000778:	d103      	bne.n	8000782 <VL53L1X_CheckForDataReady+0x76>
			*isDataReady = 1;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	e002      	b.n	8000788 <VL53L1X_CheckForDataReady+0x7c>
		else
			*isDataReady = 0;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8000788:	230f      	movs	r3, #15
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b25b      	sxtb	r3, r3
}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	b005      	add	sp, #20
 8000796:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000798 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8000798:	b5b0      	push	{r4, r5, r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	0002      	movs	r2, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	1dbb      	adds	r3, r7, #6
 80007a4:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80007a6:	240f      	movs	r4, #15
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = 0;
 80007ae:	250e      	movs	r5, #14
 80007b0:	197b      	adds	r3, r7, r5
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 80007b6:	197a      	adds	r2, r7, r5
 80007b8:	1dbb      	adds	r3, r7, #6
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	21e5      	movs	r1, #229	@ 0xe5
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 f8de 	bl	8000980 <VL53L1_RdByte>
 80007c4:	0003      	movs	r3, r0
 80007c6:	0019      	movs	r1, r3
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	193a      	adds	r2, r7, r4
 80007cc:	7812      	ldrb	r2, [r2, #0]
 80007ce:	430a      	orrs	r2, r1
 80007d0:	701a      	strb	r2, [r3, #0]
	*state = tmp;
 80007d2:	197b      	adds	r3, r7, r5
 80007d4:	781a      	ldrb	r2, [r3, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	701a      	strb	r2, [r3, #0]
	return status;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b25b      	sxtb	r3, r3
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b004      	add	sp, #16
 80007e6:	bdb0      	pop	{r4, r5, r7, pc}

080007e8 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 80007e8:	b5b0      	push	{r4, r5, r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	0002      	movs	r2, r0
 80007f0:	6039      	str	r1, [r7, #0]
 80007f2:	1dbb      	adds	r3, r7, #6
 80007f4:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80007f6:	240f      	movs	r4, #15
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 80007fe:	250c      	movs	r5, #12
 8000800:	197a      	adds	r2, r7, r5
 8000802:	1dbb      	adds	r3, r7, #6
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	2196      	movs	r1, #150	@ 0x96
 8000808:	0018      	movs	r0, r3
 800080a:	f000 f8e5 	bl	80009d8 <VL53L1_RdWord>
 800080e:	0003      	movs	r3, r0
 8000810:	0019      	movs	r1, r3
 8000812:	0020      	movs	r0, r4
 8000814:	183b      	adds	r3, r7, r0
 8000816:	183a      	adds	r2, r7, r0
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	430a      	orrs	r2, r1
 800081c:	701a      	strb	r2, [r3, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 800081e:	197b      	adds	r3, r7, r5
 8000820:	881a      	ldrh	r2, [r3, #0]
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	801a      	strh	r2, [r3, #0]
	return status;
 8000826:	183b      	adds	r3, r7, r0
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b25b      	sxtb	r3, r3
}
 800082c:	0018      	movs	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	b004      	add	sp, #16
 8000832:	bdb0      	pop	{r4, r5, r7, pc}

08000834 <VL53L1X_GetRangeStatus>:
	*ambRate = tmp*8;
	return status;
}

VL53L1X_ERROR VL53L1X_GetRangeStatus(uint16_t dev, uint8_t *rangeStatus)
{
 8000834:	b5b0      	push	{r4, r5, r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	0002      	movs	r2, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	1dbb      	adds	r3, r7, #6
 8000840:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8000842:	250f      	movs	r5, #15
 8000844:	197b      	adds	r3, r7, r5
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
	uint8_t RgSt;

	*rangeStatus = 255;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	22ff      	movs	r2, #255	@ 0xff
 800084e:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 8000850:	240e      	movs	r4, #14
 8000852:	193a      	adds	r2, r7, r4
 8000854:	1dbb      	adds	r3, r7, #6
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	2189      	movs	r1, #137	@ 0x89
 800085a:	0018      	movs	r0, r3
 800085c:	f000 f890 	bl	8000980 <VL53L1_RdByte>
 8000860:	0003      	movs	r3, r0
 8000862:	0019      	movs	r1, r3
 8000864:	197b      	adds	r3, r7, r5
 8000866:	197a      	adds	r2, r7, r5
 8000868:	7812      	ldrb	r2, [r2, #0]
 800086a:	430a      	orrs	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	RgSt = RgSt & 0x1F;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	221f      	movs	r2, #31
 8000874:	4013      	ands	r3, r2
 8000876:	b2da      	uxtb	r2, r3
 8000878:	193b      	adds	r3, r7, r4
 800087a:	701a      	strb	r2, [r3, #0]
	if (RgSt < 24)
 800087c:	193b      	adds	r3, r7, r4
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b17      	cmp	r3, #23
 8000882:	d806      	bhi.n	8000892 <VL53L1X_GetRangeStatus+0x5e>
		*rangeStatus = status_rtn[RgSt];
 8000884:	193b      	adds	r3, r7, r4
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	001a      	movs	r2, r3
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <VL53L1X_GetRangeStatus+0x70>)
 800088c:	5c9a      	ldrb	r2, [r3, r2]
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	701a      	strb	r2, [r3, #0]
	return status;
 8000892:	230f      	movs	r3, #15
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b25b      	sxtb	r3, r3
}
 800089a:	0018      	movs	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	b004      	add	sp, #16
 80008a0:	bdb0      	pop	{r4, r5, r7, pc}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	08004d28 	.word	0x08004d28

080008a8 <_I2CWrite>:
#define I2C_TIME_OUT_BASE   10
#define I2C_TIME_OUT_BYTE   1

uint8_t _I2CBuffer[256];

static void _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 80008a8:	b5b0      	push	{r4, r5, r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af02      	add	r7, sp, #8
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
 80008b2:	210e      	movs	r1, #14
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	1c02      	adds	r2, r0, #0
 80008b8:	801a      	strh	r2, [r3, #0]

    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	330a      	adds	r3, #10
 80008be:	617b      	str	r3, [r7, #20]

    HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, i2c_time_out);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	b29d      	uxth	r5, r3
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	68bc      	ldr	r4, [r7, #8]
 80008c8:	187a      	adds	r2, r7, r1
 80008ca:	8811      	ldrh	r1, [r2, #0]
 80008cc:	4804      	ldr	r0, [pc, #16]	@ (80008e0 <_I2CWrite+0x38>)
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	002b      	movs	r3, r5
 80008d2:	0022      	movs	r2, r4
 80008d4:	f001 f886 	bl	80019e4 <HAL_I2C_Master_Transmit>
}
 80008d8:	46c0      	nop			@ (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	b006      	add	sp, #24
 80008de:	bdb0      	pop	{r4, r5, r7, pc}
 80008e0:	20000184 	.word	0x20000184

080008e4 <_I2CRead>:

static void _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b089      	sub	sp, #36	@ 0x24
 80008e8:	af02      	add	r7, sp, #8
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	210e      	movs	r1, #14
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	1c02      	adds	r2, r0, #0
 80008f4:	801a      	strh	r2, [r3, #0]

    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	330a      	adds	r3, #10
 80008fa:	617b      	str	r3, [r7, #20]

    HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, i2c_time_out);
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	2201      	movs	r2, #1
 8000902:	4313      	orrs	r3, r2
 8000904:	b299      	uxth	r1, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	b29c      	uxth	r4, r3
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	4804      	ldr	r0, [pc, #16]	@ (8000920 <_I2CRead+0x3c>)
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	0023      	movs	r3, r4
 8000914:	f001 f96e 	bl	8001bf4 <HAL_I2C_Master_Receive>
}
 8000918:	46c0      	nop			@ (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b007      	add	sp, #28
 800091e:	bd90      	pop	{r4, r7, pc}
 8000920:	20000184 	.word	0x20000184

08000924 <VL53L1_WrByte>:
    _I2CRead(dev, pdata, count);

    return 0;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	0004      	movs	r4, r0
 800092c:	0008      	movs	r0, r1
 800092e:	0011      	movs	r1, r2
 8000930:	1dbb      	adds	r3, r7, #6
 8000932:	1c22      	adds	r2, r4, #0
 8000934:	801a      	strh	r2, [r3, #0]
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	1c02      	adds	r2, r0, #0
 800093a:	801a      	strh	r2, [r3, #0]
 800093c:	1cfb      	adds	r3, r7, #3
 800093e:	1c0a      	adds	r2, r1, #0
 8000940:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[0] = index>>8;
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	0a1b      	lsrs	r3, r3, #8
 8000948:	b29b      	uxth	r3, r3
 800094a:	b2da      	uxtb	r2, r3
 800094c:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <VL53L1_WrByte+0x58>)
 800094e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <VL53L1_WrByte+0x58>)
 8000958:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800095a:	4b08      	ldr	r3, [pc, #32]	@ (800097c <VL53L1_WrByte+0x58>)
 800095c:	1cfa      	adds	r2, r7, #3
 800095e:	7812      	ldrb	r2, [r2, #0]
 8000960:	709a      	strb	r2, [r3, #2]

    _I2CWrite(dev, _I2CBuffer, 3);
 8000962:	4906      	ldr	r1, [pc, #24]	@ (800097c <VL53L1_WrByte+0x58>)
 8000964:	1dbb      	adds	r3, r7, #6
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	2203      	movs	r2, #3
 800096a:	0018      	movs	r0, r3
 800096c:	f7ff ff9c 	bl	80008a8 <_I2CWrite>
	return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	0018      	movs	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	b003      	add	sp, #12
 8000978:	bd90      	pop	{r4, r7, pc}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	20000084 	.word	0x20000084

08000980 <VL53L1_RdByte>:
    _I2CWrite(dev, _I2CBuffer, 6);

	return 0;
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	603a      	str	r2, [r7, #0]
 8000988:	1dbb      	adds	r3, r7, #6
 800098a:	1c02      	adds	r2, r0, #0
 800098c:	801a      	strh	r2, [r3, #0]
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	1c0a      	adds	r2, r1, #0
 8000992:	801a      	strh	r2, [r3, #0]
	_I2CBuffer[0] = index>>8;
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	b29b      	uxth	r3, r3
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <VL53L1_RdByte+0x54>)
 80009a0:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <VL53L1_RdByte+0x54>)
 80009aa:	705a      	strb	r2, [r3, #1]
    _I2CWrite(dev, _I2CBuffer, 2);
 80009ac:	4909      	ldr	r1, [pc, #36]	@ (80009d4 <VL53L1_RdByte+0x54>)
 80009ae:	1dbb      	adds	r3, r7, #6
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	2202      	movs	r2, #2
 80009b4:	0018      	movs	r0, r3
 80009b6:	f7ff ff77 	bl	80008a8 <_I2CWrite>
    _I2CRead(dev, data, 1);
 80009ba:	6839      	ldr	r1, [r7, #0]
 80009bc:	1dbb      	adds	r3, r7, #6
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	2201      	movs	r2, #1
 80009c2:	0018      	movs	r0, r3
 80009c4:	f7ff ff8e 	bl	80008e4 <_I2CRead>

	return 0;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	0018      	movs	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b002      	add	sp, #8
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	20000084 	.word	0x20000084

080009d8 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	603a      	str	r2, [r7, #0]
 80009e0:	1dbb      	adds	r3, r7, #6
 80009e2:	1c02      	adds	r2, r0, #0
 80009e4:	801a      	strh	r2, [r3, #0]
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	1c0a      	adds	r2, r1, #0
 80009ea:	801a      	strh	r2, [r3, #0]
    _I2CBuffer[0] = index>>8;
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	0a1b      	lsrs	r3, r3, #8
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <VL53L1_RdWord+0x68>)
 80009f8:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <VL53L1_RdWord+0x68>)
 8000a02:	705a      	strb	r2, [r3, #1]
    _I2CWrite(dev, _I2CBuffer, 2);
 8000a04:	490e      	ldr	r1, [pc, #56]	@ (8000a40 <VL53L1_RdWord+0x68>)
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff ff4b 	bl	80008a8 <_I2CWrite>
    _I2CRead(dev, _I2CBuffer, 2);
 8000a12:	490b      	ldr	r1, [pc, #44]	@ (8000a40 <VL53L1_RdWord+0x68>)
 8000a14:	1dbb      	adds	r3, r7, #6
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	2202      	movs	r2, #2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff ff62 	bl	80008e4 <_I2CRead>

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8000a20:	4b07      	ldr	r3, [pc, #28]	@ (8000a40 <VL53L1_RdWord+0x68>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	021b      	lsls	r3, r3, #8
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	4a05      	ldr	r2, [pc, #20]	@ (8000a40 <VL53L1_RdWord+0x68>)
 8000a2a:	7852      	ldrb	r2, [r2, #1]
 8000a2c:	189b      	adds	r3, r3, r2
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	801a      	strh	r2, [r3, #0]

	return 0;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	0018      	movs	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b002      	add	sp, #8
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	20000084 	.word	0x20000084

08000a44 <VL53L1_SensorOn>:
	(void)dev;
	HAL_Delay(wait_ms);
	return 0;
}

int8_t VL53L1_SensorOn (uint16_t pin, GPIO_TypeDef* port){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	1dbb      	adds	r3, r7, #6
 8000a50:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8000a52:	1dbb      	adds	r3, r7, #6
 8000a54:	8819      	ldrh	r1, [r3, #0]
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 fee8 	bl	8001830 <HAL_GPIO_WritePin>
	return 0;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	0018      	movs	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b002      	add	sp, #8
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a72:	f000 fbfd 	bl	8001270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a76:	f000 f855 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7a:	f000 f94f 	bl	8000d1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a7e:	f000 f91d 	bl	8000cbc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a82:	f000 f8db 	bl	8000c3c <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000a86:	f000 f8c3 	bl	8000c10 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  TOF_Init();
 8000a8a:	f000 f9e9 	bl	8000e60 <TOF_Init>
  uint8_t dataReady = 0;
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
  uint8_t rangeStatus = 0;
 8000a94:	1dbb      	adds	r3, r7, #6
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
  uint16_t distance = 0;
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	801a      	strh	r2, [r3, #0]

  VL53L1X_StartRanging(tof_1.tof_addr);
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b18 <main+0xac>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f7ff fdf2 	bl	8000690 <VL53L1X_StartRanging>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      printf("loop\r\n");
 8000aac:	4b1b      	ldr	r3, [pc, #108]	@ (8000b1c <main+0xb0>)
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f003 fa4c 	bl	8003f4c <puts>
      HAL_Delay(100);
 8000ab4:	2064      	movs	r0, #100	@ 0x64
 8000ab6:	f000 fc4b 	bl	8001350 <HAL_Delay>
      while(dataReady == 0){
 8000aba:	e007      	b.n	8000acc <main+0x60>
          VL53L1X_CheckForDataReady(tof_1.tof_addr, &dataReady);
 8000abc:	4b16      	ldr	r3, [pc, #88]	@ (8000b18 <main+0xac>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	1dfa      	adds	r2, r7, #7
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f7ff fe20 	bl	800070c <VL53L1X_CheckForDataReady>
      while(dataReady == 0){
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d0f3      	beq.n	8000abc <main+0x50>
      }
      dataReady = 0;
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
      VL53L1X_GetRangeStatus(tof_1.tof_addr, &rangeStatus);
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <main+0xac>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	1dba      	adds	r2, r7, #6
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f7ff fea5 	bl	8000834 <VL53L1X_GetRangeStatus>
      //printf("Status: %d\r\n", rangeStatus);
      VL53L1X_GetDistance(tof_1.tof_addr, &distance);
 8000aea:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <main+0xac>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	1d3a      	adds	r2, r7, #4
 8000af2:	0011      	movs	r1, r2
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff fe77 	bl	80007e8 <VL53L1X_GetDistance>
      printf("Distance: %dmm\r\n", distance);
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	001a      	movs	r2, r3
 8000b00:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <main+0xb4>)
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f003 f9bb 	bl	8003e80 <iprintf>
      VL53L1X_ClearInterrupt(tof_1.tof_addr);
 8000b0a:	4b03      	ldr	r3, [pc, #12]	@ (8000b18 <main+0xac>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	0018      	movs	r0, r3
 8000b12:	f7ff fd6b 	bl	80005ec <VL53L1X_ClearInterrupt>
      printf("loop\r\n");
 8000b16:	e7c9      	b.n	8000aac <main+0x40>
 8000b18:	20000260 	.word	0x20000260
 8000b1c:	08004c94 	.word	0x08004c94
 8000b20:	08004c9c 	.word	0x08004c9c

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b099      	sub	sp, #100	@ 0x64
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	242c      	movs	r4, #44	@ 0x2c
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2334      	movs	r3, #52	@ 0x34
 8000b32:	001a      	movs	r2, r3
 8000b34:	2100      	movs	r1, #0
 8000b36:	f003 faff 	bl	8004138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3a:	2318      	movs	r3, #24
 8000b3c:	18fb      	adds	r3, r7, r3
 8000b3e:	0018      	movs	r0, r3
 8000b40:	2314      	movs	r3, #20
 8000b42:	001a      	movs	r2, r3
 8000b44:	2100      	movs	r1, #0
 8000b46:	f003 faf7 	bl	8004138 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b4a:	003b      	movs	r3, r7
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	2318      	movs	r3, #24
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f003 faf0 	bl	8004138 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b58:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <SystemClock_Config+0xe4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8000c0c <SystemClock_Config+0xe8>)
 8000b5e:	401a      	ands	r2, r3
 8000b60:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <SystemClock_Config+0xe4>)
 8000b62:	2180      	movs	r1, #128	@ 0x80
 8000b64:	0109      	lsls	r1, r1, #4
 8000b66:	430a      	orrs	r2, r1
 8000b68:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b6a:	0021      	movs	r1, r4
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2202      	movs	r2, #2
 8000b70:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2201      	movs	r2, #1
 8000b76:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2202      	movs	r2, #2
 8000b82:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2280      	movs	r2, #128	@ 0x80
 8000b8e:	02d2      	lsls	r2, r2, #11
 8000b90:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2280      	movs	r2, #128	@ 0x80
 8000b96:	03d2      	lsls	r2, r2, #15
 8000b98:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f001 fc77 	bl	8002490 <HAL_RCC_OscConfig>
 8000ba2:	1e03      	subs	r3, r0, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000ba6:	f000 f9c1 	bl	8000f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000baa:	2118      	movs	r1, #24
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	220f      	movs	r2, #15
 8000bb0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2101      	movs	r1, #1
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f001 ffda 	bl	8002b88 <HAL_RCC_ClockConfig>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000bd8:	f000 f9a8 	bl	8000f2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000bdc:	003b      	movs	r3, r7
 8000bde:	220a      	movs	r2, #10
 8000be0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000be2:	003b      	movs	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000be8:	003b      	movs	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bee:	003b      	movs	r3, r7
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f002 f9ed 	bl	8002fd0 <HAL_RCCEx_PeriphCLKConfig>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000bfa:	f000 f997 	bl	8000f2c <Error_Handler>
  }
}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b019      	add	sp, #100	@ 0x64
 8000c04:	bd90      	pop	{r4, r7, pc}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	40007000 	.word	0x40007000
 8000c0c:	ffffe7ff 	.word	0xffffe7ff

08000c10 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	2007      	movs	r0, #7
 8000c1a:	f000 fc69 	bl	80014f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c1e:	2007      	movs	r0, #7
 8000c20:	f000 fc7b 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	2005      	movs	r0, #5
 8000c2a:	f000 fc61 	bl	80014f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000c2e:	2005      	movs	r0, #5
 8000c30:	f000 fc73 	bl	800151a <HAL_NVIC_EnableIRQ>
}
 8000c34:	46c0      	nop			@ (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c42:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb4 <MX_I2C1_Init+0x78>)
 8000c44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c48:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb8 <MX_I2C1_Init+0x7c>)
 8000c4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c58:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c76:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fe1d 	bl	80018b8 <HAL_I2C_Init>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d001      	beq.n	8000c86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c82:	f000 f953 	bl	8000f2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f001 fb68 	bl	8002360 <HAL_I2CEx_ConfigAnalogFilter>
 8000c90:	1e03      	subs	r3, r0, #0
 8000c92:	d001      	beq.n	8000c98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c94:	f000 f94a 	bl	8000f2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c98:	4b05      	ldr	r3, [pc, #20]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f001 fbab 	bl	80023f8 <HAL_I2CEx_ConfigDigitalFilter>
 8000ca2:	1e03      	subs	r3, r0, #0
 8000ca4:	d001      	beq.n	8000caa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ca6:	f000 f941 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000184 	.word	0x20000184
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	00b07cb4 	.word	0x00b07cb4

08000cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cc2:	4a15      	ldr	r2, [pc, #84]	@ (8000d18 <MX_USART2_UART_Init+0x5c>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cc8:	22e1      	movs	r2, #225	@ 0xe1
 8000cca:	0252      	lsls	r2, r2, #9
 8000ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cfe:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000d00:	0018      	movs	r0, r3
 8000d02:	f002 fa91 	bl	8003228 <HAL_UART_Init>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d0a:	f000 f90f 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200001d8 	.word	0x200001d8
 8000d18:	40004400 	.word	0x40004400

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b089      	sub	sp, #36	@ 0x24
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	240c      	movs	r4, #12
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	0018      	movs	r0, r3
 8000d28:	2314      	movs	r3, #20
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	f003 fa03 	bl	8004138 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b49      	ldr	r3, [pc, #292]	@ (8000e58 <MX_GPIO_Init+0x13c>)
 8000d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d36:	4b48      	ldr	r3, [pc, #288]	@ (8000e58 <MX_GPIO_Init+0x13c>)
 8000d38:	2104      	movs	r1, #4
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d3e:	4b46      	ldr	r3, [pc, #280]	@ (8000e58 <MX_GPIO_Init+0x13c>)
 8000d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d42:	2204      	movs	r2, #4
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b43      	ldr	r3, [pc, #268]	@ (8000e58 <MX_GPIO_Init+0x13c>)
 8000d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d4e:	4b42      	ldr	r3, [pc, #264]	@ (8000e58 <MX_GPIO_Init+0x13c>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	430a      	orrs	r2, r1
 8000d54:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d56:	4b40      	ldr	r3, [pc, #256]	@ (8000e58 <MX_GPIO_Init+0x13c>)
 8000d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b3d      	ldr	r3, [pc, #244]	@ (8000e58 <MX_GPIO_Init+0x13c>)
 8000d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d66:	4b3c      	ldr	r3, [pc, #240]	@ (8000e58 <MX_GPIO_Init+0x13c>)
 8000d68:	2102      	movs	r1, #2
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e58 <MX_GPIO_Init+0x13c>)
 8000d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d72:	2202      	movs	r2, #2
 8000d74:	4013      	ands	r3, r2
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STOP_OUT_Pin|SLOW_OUT_Pin|SHUT_ToF1_Pin, GPIO_PIN_RESET);
 8000d7a:	238c      	movs	r3, #140	@ 0x8c
 8000d7c:	0059      	lsls	r1, r3, #1
 8000d7e:	23a0      	movs	r3, #160	@ 0xa0
 8000d80:	05db      	lsls	r3, r3, #23
 8000d82:	2200      	movs	r2, #0
 8000d84:	0018      	movs	r0, r3
 8000d86:	f000 fd53 	bl	8001830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHUT_ToF2_Pin|SHUT_ToF3_Pin|SHUT_ToF4_Pin, GPIO_PIN_RESET);
 8000d8a:	4b34      	ldr	r3, [pc, #208]	@ (8000e5c <MX_GPIO_Init+0x140>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2129      	movs	r1, #41	@ 0x29
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 fd4d 	bl	8001830 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : X_DIR_IN_Pin Y_DIR_IN_Pin */
  GPIO_InitStruct.Pin = X_DIR_IN_Pin|Y_DIR_IN_Pin;
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	2203      	movs	r2, #3
 8000d9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	193b      	adds	r3, r7, r4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	2202      	movs	r2, #2
 8000da6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	193a      	adds	r2, r7, r4
 8000daa:	23a0      	movs	r3, #160	@ 0xa0
 8000dac:	05db      	lsls	r3, r3, #23
 8000dae:	0011      	movs	r1, r2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 fbcf 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_OUT_Pin SLOW_OUT_Pin SHUT_ToF1_Pin */
  GPIO_InitStruct.Pin = STOP_OUT_Pin|SLOW_OUT_Pin|SHUT_ToF1_Pin;
 8000db6:	0021      	movs	r1, r4
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	228c      	movs	r2, #140	@ 0x8c
 8000dbc:	0052      	lsls	r2, r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	000c      	movs	r4, r1
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	193a      	adds	r2, r7, r4
 8000dd6:	23a0      	movs	r3, #160	@ 0xa0
 8000dd8:	05db      	lsls	r3, r3, #23
 8000dda:	0011      	movs	r1, r2
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 fbb9 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHUT_ToF2_Pin SHUT_ToF3_Pin SHUT_ToF4_Pin */
  GPIO_InitStruct.Pin = SHUT_ToF2_Pin|SHUT_ToF3_Pin|SHUT_ToF4_Pin;
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	2229      	movs	r2, #41	@ 0x29
 8000de6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	2201      	movs	r2, #1
 8000dec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	193b      	adds	r3, r7, r4
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	4a17      	ldr	r2, [pc, #92]	@ (8000e5c <MX_GPIO_Init+0x140>)
 8000dfe:	0019      	movs	r1, r3
 8000e00:	0010      	movs	r0, r2
 8000e02:	f000 fba7 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ToF1_Pin INT_ToF3_Pin */
  GPIO_InitStruct.Pin = INT_ToF1_Pin|INT_ToF3_Pin;
 8000e06:	0021      	movs	r1, r4
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2212      	movs	r2, #18
 8000e0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2284      	movs	r2, #132	@ 0x84
 8000e12:	0392      	lsls	r2, r2, #14
 8000e14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	000c      	movs	r4, r1
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	4a0e      	ldr	r2, [pc, #56]	@ (8000e5c <MX_GPIO_Init+0x140>)
 8000e22:	0019      	movs	r1, r3
 8000e24:	0010      	movs	r0, r2
 8000e26:	f000 fb95 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ToF4_Pin INT_ToF2_Pin */
  GPIO_InitStruct.Pin = INT_ToF4_Pin|INT_ToF2_Pin;
 8000e2a:	0021      	movs	r1, r4
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	22c0      	movs	r2, #192	@ 0xc0
 8000e30:	0152      	lsls	r2, r2, #5
 8000e32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2284      	movs	r2, #132	@ 0x84
 8000e38:	0392      	lsls	r2, r2, #14
 8000e3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	187a      	adds	r2, r7, r1
 8000e44:	23a0      	movs	r3, #160	@ 0xa0
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	0011      	movs	r1, r2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 fb82 	bl	8001554 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b009      	add	sp, #36	@ 0x24
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	50000400 	.word	0x50000400

08000e60 <TOF_Init>:

/* USER CODE BEGIN 4 */

static void TOF_Init(){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
	tof_1.tof_addr = 0x52;
 8000e66:	4b23      	ldr	r3, [pc, #140]	@ (8000ef4 <TOF_Init+0x94>)
 8000e68:	2252      	movs	r2, #82	@ 0x52
 8000e6a:	601a      	str	r2, [r3, #0]
	tof_1.tof_port = SHUT_ToF1_GPIO_Port;
 8000e6c:	4b21      	ldr	r3, [pc, #132]	@ (8000ef4 <TOF_Init+0x94>)
 8000e6e:	22a0      	movs	r2, #160	@ 0xa0
 8000e70:	05d2      	lsls	r2, r2, #23
 8000e72:	605a      	str	r2, [r3, #4]
	tof_1.tof_pin = SHUT_ToF1_Pin;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <TOF_Init+0x94>)
 8000e76:	2280      	movs	r2, #128	@ 0x80
 8000e78:	0052      	lsls	r2, r2, #1
 8000e7a:	811a      	strh	r2, [r3, #8]
	tof_1.tof_intpin = INT_ToF1_Pin;
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <TOF_Init+0x94>)
 8000e7e:	2202      	movs	r2, #2
 8000e80:	815a      	strh	r2, [r3, #10]

	VL53L1_SensorOn(tof_1.tof_pin, tof_1.tof_port);
 8000e82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <TOF_Init+0x94>)
 8000e84:	891a      	ldrh	r2, [r3, #8]
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <TOF_Init+0x94>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	0010      	movs	r0, r2
 8000e8e:	f7ff fdd9 	bl	8000a44 <VL53L1_SensorOn>
	HAL_Delay(500);
 8000e92:	23fa      	movs	r3, #250	@ 0xfa
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 fa5a 	bl	8001350 <HAL_Delay>

    uint8_t booted = 0;
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]

	printf("Start\r\n");
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <TOF_Init+0x98>)
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f003 f851 	bl	8003f4c <puts>
	while(booted == 0){
 8000eaa:	e010      	b.n	8000ece <TOF_Init+0x6e>
	    VL53L1X_BootState(tof_1.tof_addr, &booted);
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <TOF_Init+0x94>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	1dfa      	adds	r2, r7, #7
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff fc6e 	bl	8000798 <VL53L1X_BootState>
	    HAL_Delay(1000);
 8000ebc:	23fa      	movs	r3, #250	@ 0xfa
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f000 fa45 	bl	8001350 <HAL_Delay>
	    printf("Booting\r\n");
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8000efc <TOF_Init+0x9c>)
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f003 f83f 	bl	8003f4c <puts>
	while(booted == 0){
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0ea      	beq.n	8000eac <TOF_Init+0x4c>
	}
	VL53L1X_SensorInit(tof_1.tof_addr);
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <TOF_Init+0x94>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff faed 	bl	80004bc <VL53L1X_SensorInit>
	printf("Ready\r\n");
 8000ee2:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <TOF_Init+0xa0>)
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f003 f831 	bl	8003f4c <puts>
}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	20000260 	.word	0x20000260
 8000ef8:	08004cb0 	.word	0x08004cb0
 8000efc:	08004cb8 	.word	0x08004cb8
 8000f00:	08004cc4 	.word	0x08004cc4

08000f04 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f0c:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <__io_putchar+0x20>)
 8000f0e:	1d39      	adds	r1, r7, #4
 8000f10:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <__io_putchar+0x24>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	f002 f9dc 	bl	80032d0 <HAL_UART_Transmit>

  return ch;
 8000f18:	687b      	ldr	r3, [r7, #4]
}
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	0000ffff 	.word	0x0000ffff
 8000f28:	200001d8 	.word	0x200001d8

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	e7fd      	b.n	8000f34 <Error_Handler+0x8>

08000f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3c:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <HAL_MspInit+0x24>)
 8000f3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_MspInit+0x24>)
 8000f42:	2101      	movs	r1, #1
 8000f44:	430a      	orrs	r2, r1
 8000f46:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f48:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <HAL_MspInit+0x24>)
 8000f4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <HAL_MspInit+0x24>)
 8000f4e:	2180      	movs	r1, #128	@ 0x80
 8000f50:	0549      	lsls	r1, r1, #21
 8000f52:	430a      	orrs	r2, r1
 8000f54:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40021000 	.word	0x40021000

08000f60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	240c      	movs	r4, #12
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	2314      	movs	r3, #20
 8000f70:	001a      	movs	r2, r3
 8000f72:	2100      	movs	r1, #0
 8000f74:	f003 f8e0 	bl	8004138 <memset>
  if(hi2c->Instance==I2C1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a17      	ldr	r2, [pc, #92]	@ (8000fdc <HAL_I2C_MspInit+0x7c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d128      	bne.n	8000fd4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <HAL_I2C_MspInit+0x80>)
 8000f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f86:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <HAL_I2C_MspInit+0x80>)
 8000f88:	2102      	movs	r1, #2
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f8e:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <HAL_I2C_MspInit+0x80>)
 8000f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f92:	2202      	movs	r2, #2
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f9a:	0021      	movs	r1, r4
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	22c0      	movs	r2, #192	@ 0xc0
 8000fa0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2212      	movs	r2, #18
 8000fa6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2201      	movs	r2, #1
 8000fac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	4a09      	ldr	r2, [pc, #36]	@ (8000fe4 <HAL_I2C_MspInit+0x84>)
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	0010      	movs	r0, r2
 8000fc2:	f000 fac7 	bl	8001554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_I2C_MspInit+0x80>)
 8000fc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000fca:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <HAL_I2C_MspInit+0x80>)
 8000fcc:	2180      	movs	r1, #128	@ 0x80
 8000fce:	0389      	lsls	r1, r1, #14
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000fd4:	46c0      	nop			@ (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b009      	add	sp, #36	@ 0x24
 8000fda:	bd90      	pop	{r4, r7, pc}
 8000fdc:	40005400 	.word	0x40005400
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	50000400 	.word	0x50000400

08000fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b089      	sub	sp, #36	@ 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	240c      	movs	r4, #12
 8000ff2:	193b      	adds	r3, r7, r4
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	2314      	movs	r3, #20
 8000ff8:	001a      	movs	r2, r3
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	f003 f89c 	bl	8004138 <memset>
  if(huart->Instance==USART2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a18      	ldr	r2, [pc, #96]	@ (8001068 <HAL_UART_MspInit+0x80>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d129      	bne.n	800105e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800100a:	4b18      	ldr	r3, [pc, #96]	@ (800106c <HAL_UART_MspInit+0x84>)
 800100c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800100e:	4b17      	ldr	r3, [pc, #92]	@ (800106c <HAL_UART_MspInit+0x84>)
 8001010:	2180      	movs	r1, #128	@ 0x80
 8001012:	0289      	lsls	r1, r1, #10
 8001014:	430a      	orrs	r2, r1
 8001016:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	4b14      	ldr	r3, [pc, #80]	@ (800106c <HAL_UART_MspInit+0x84>)
 800101a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800101c:	4b13      	ldr	r3, [pc, #76]	@ (800106c <HAL_UART_MspInit+0x84>)
 800101e:	2101      	movs	r1, #1
 8001020:	430a      	orrs	r2, r1
 8001022:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <HAL_UART_MspInit+0x84>)
 8001026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001028:	2201      	movs	r2, #1
 800102a:	4013      	ands	r3, r2
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001030:	0021      	movs	r1, r4
 8001032:	187b      	adds	r3, r7, r1
 8001034:	4a0e      	ldr	r2, [pc, #56]	@ (8001070 <HAL_UART_MspInit+0x88>)
 8001036:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	187b      	adds	r3, r7, r1
 800103a:	2202      	movs	r2, #2
 800103c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	187b      	adds	r3, r7, r1
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	187b      	adds	r3, r7, r1
 8001046:	2203      	movs	r2, #3
 8001048:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2204      	movs	r2, #4
 800104e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	187a      	adds	r2, r7, r1
 8001052:	23a0      	movs	r3, #160	@ 0xa0
 8001054:	05db      	lsls	r3, r3, #23
 8001056:	0011      	movs	r1, r2
 8001058:	0018      	movs	r0, r3
 800105a:	f000 fa7b 	bl	8001554 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b009      	add	sp, #36	@ 0x24
 8001064:	bd90      	pop	{r4, r7, pc}
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	40004400 	.word	0x40004400
 800106c:	40021000 	.word	0x40021000
 8001070:	00008004 	.word	0x00008004

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001078:	46c0      	nop			@ (mov r8, r8)
 800107a:	e7fd      	b.n	8001078 <NMI_Handler+0x4>

0800107c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001080:	46c0      	nop			@ (mov r8, r8)
 8001082:	e7fd      	b.n	8001080 <HardFault_Handler+0x4>

08001084 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001088:	46c0      	nop			@ (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109c:	f000 f93c 	bl	8001318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ToF1_Pin);
 80010aa:	2002      	movs	r0, #2
 80010ac:	f000 fbde 	bl	800186c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80010b0:	46c0      	nop			@ (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ToF3_Pin);
 80010ba:	2010      	movs	r0, #16
 80010bc:	f000 fbd6 	bl	800186c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ToF4_Pin);
 80010c0:	2380      	movs	r3, #128	@ 0x80
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	0018      	movs	r0, r3
 80010c6:	f000 fbd1 	bl	800186c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ToF2_Pin);
 80010ca:	2380      	movs	r3, #128	@ 0x80
 80010cc:	015b      	lsls	r3, r3, #5
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 fbcc 	bl	800186c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80010d4:	46c0      	nop			@ (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e00a      	b.n	8001102 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010ec:	e000      	b.n	80010f0 <_read+0x16>
 80010ee:	bf00      	nop
 80010f0:	0001      	movs	r1, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	60ba      	str	r2, [r7, #8]
 80010f8:	b2ca      	uxtb	r2, r1
 80010fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3301      	adds	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	429a      	cmp	r2, r3
 8001108:	dbf0      	blt.n	80010ec <_read+0x12>
  }

  return len;
 800110a:	687b      	ldr	r3, [r7, #4]
}
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	b006      	add	sp, #24
 8001112:	bd80      	pop	{r7, pc}

08001114 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	e009      	b.n	800113a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	60ba      	str	r2, [r7, #8]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	0018      	movs	r0, r3
 8001130:	f7ff fee8 	bl	8000f04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3301      	adds	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	dbf1      	blt.n	8001126 <_write+0x12>
  }
  return len;
 8001142:	687b      	ldr	r3, [r7, #4]
}
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	b006      	add	sp, #24
 800114a:	bd80      	pop	{r7, pc}

0800114c <_close>:

int _close(int file)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001154:	2301      	movs	r3, #1
 8001156:	425b      	negs	r3, r3
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}

08001160 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	0192      	lsls	r2, r2, #6
 8001170:	605a      	str	r2, [r3, #4]
  return 0;
 8001172:	2300      	movs	r3, #0
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b002      	add	sp, #8
 800117a:	bd80      	pop	{r7, pc}

0800117c <_isatty>:

int _isatty(int file)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001184:	2301      	movs	r3, #1
}
 8001186:	0018      	movs	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	b002      	add	sp, #8
 800118c:	bd80      	pop	{r7, pc}

0800118e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	0018      	movs	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	b004      	add	sp, #16
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ac:	4a14      	ldr	r2, [pc, #80]	@ (8001200 <_sbrk+0x5c>)
 80011ae:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <_sbrk+0x60>)
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b8:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c0:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <_sbrk+0x64>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	@ (800120c <_sbrk+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c6:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	18d3      	adds	r3, r2, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d207      	bcs.n	80011e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d4:	f003 f806 	bl	80041e4 <__errno>
 80011d8:	0003      	movs	r3, r0
 80011da:	220c      	movs	r2, #12
 80011dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011de:	2301      	movs	r3, #1
 80011e0:	425b      	negs	r3, r3
 80011e2:	e009      	b.n	80011f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e4:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ea:	4b07      	ldr	r3, [pc, #28]	@ (8001208 <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	18d2      	adds	r2, r2, r3
 80011f2:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <_sbrk+0x64>)
 80011f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b006      	add	sp, #24
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20002000 	.word	0x20002000
 8001204:	00000400 	.word	0x00000400
 8001208:	2000026c 	.word	0x2000026c
 800120c:	200003c0 	.word	0x200003c0

08001210 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001214:	46c0      	nop			@ (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800121c:	480d      	ldr	r0, [pc, #52]	@ (8001254 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800121e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001220:	f7ff fff6 	bl	8001210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001224:	480c      	ldr	r0, [pc, #48]	@ (8001258 <LoopForever+0x6>)
  ldr r1, =_edata
 8001226:	490d      	ldr	r1, [pc, #52]	@ (800125c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001228:	4a0d      	ldr	r2, [pc, #52]	@ (8001260 <LoopForever+0xe>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800122c:	e002      	b.n	8001234 <LoopCopyDataInit>

0800122e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001232:	3304      	adds	r3, #4

08001234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001238:	d3f9      	bcc.n	800122e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123a:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <LoopForever+0x12>)
  ldr r4, =_ebss
 800123c:	4c0a      	ldr	r4, [pc, #40]	@ (8001268 <LoopForever+0x16>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001240:	e001      	b.n	8001246 <LoopFillZerobss>

08001242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001244:	3204      	adds	r2, #4

08001246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001248:	d3fb      	bcc.n	8001242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124a:	f002 ffd1 	bl	80041f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124e:	f7ff fc0d 	bl	8000a6c <main>

08001252 <LoopForever>:

LoopForever:
    b LoopForever
 8001252:	e7fe      	b.n	8001252 <LoopForever>
   ldr   r0, =_estack
 8001254:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800125c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001260:	08004df0 	.word	0x08004df0
  ldr r2, =_sbss
 8001264:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001268:	200003c0 	.word	0x200003c0

0800126c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC1_COMP_IRQHandler>
	...

08001270 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800127c:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <HAL_Init+0x3c>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <HAL_Init+0x3c>)
 8001282:	2140      	movs	r1, #64	@ 0x40
 8001284:	430a      	orrs	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001288:	2000      	movs	r0, #0
 800128a:	f000 f811 	bl	80012b0 <HAL_InitTick>
 800128e:	1e03      	subs	r3, r0, #0
 8001290:	d003      	beq.n	800129a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
 8001298:	e001      	b.n	800129e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800129a:	f7ff fe4d 	bl	8000f38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	781b      	ldrb	r3, [r3, #0]
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b002      	add	sp, #8
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	40022000 	.word	0x40022000

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <HAL_InitTick+0x5c>)
 80012ba:	681c      	ldr	r4, [r3, #0]
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <HAL_InitTick+0x60>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	0019      	movs	r1, r3
 80012c2:	23fa      	movs	r3, #250	@ 0xfa
 80012c4:	0098      	lsls	r0, r3, #2
 80012c6:	f7fe ff29 	bl	800011c <__udivsi3>
 80012ca:	0003      	movs	r3, r0
 80012cc:	0019      	movs	r1, r3
 80012ce:	0020      	movs	r0, r4
 80012d0:	f7fe ff24 	bl	800011c <__udivsi3>
 80012d4:	0003      	movs	r3, r0
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 f92f 	bl	800153a <HAL_SYSTICK_Config>
 80012dc:	1e03      	subs	r3, r0, #0
 80012de:	d001      	beq.n	80012e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e00f      	b.n	8001304 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d80b      	bhi.n	8001302 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	2301      	movs	r3, #1
 80012ee:	425b      	negs	r3, r3
 80012f0:	2200      	movs	r2, #0
 80012f2:	0018      	movs	r0, r3
 80012f4:	f000 f8fc 	bl	80014f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_InitTick+0x64>)
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
}
 8001304:	0018      	movs	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	b003      	add	sp, #12
 800130a:	bd90      	pop	{r4, r7, pc}
 800130c:	20000000 	.word	0x20000000
 8001310:	20000008 	.word	0x20000008
 8001314:	20000004 	.word	0x20000004

08001318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800131c:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <HAL_IncTick+0x1c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	001a      	movs	r2, r3
 8001322:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <HAL_IncTick+0x20>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	18d2      	adds	r2, r2, r3
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <HAL_IncTick+0x20>)
 800132a:	601a      	str	r2, [r3, #0]
}
 800132c:	46c0      	nop			@ (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	20000008 	.word	0x20000008
 8001338:	20000270 	.word	0x20000270

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b02      	ldr	r3, [pc, #8]	@ (800134c <HAL_GetTick+0x10>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	0018      	movs	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	20000270 	.word	0x20000270

08001350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff fff0 	bl	800133c <HAL_GetTick>
 800135c:	0003      	movs	r3, r0
 800135e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3301      	adds	r3, #1
 8001368:	d005      	beq.n	8001376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136a:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <HAL_Delay+0x44>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	001a      	movs	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	189b      	adds	r3, r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	f7ff ffe0 	bl	800133c <HAL_GetTick>
 800137c:	0002      	movs	r2, r0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	429a      	cmp	r2, r3
 8001386:	d8f7      	bhi.n	8001378 <HAL_Delay+0x28>
  {
  }
}
 8001388:	46c0      	nop			@ (mov r8, r8)
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b004      	add	sp, #16
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	20000008 	.word	0x20000008

08001398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	0002      	movs	r2, r0
 80013a0:	1dfb      	adds	r3, r7, #7
 80013a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	1dfb      	adds	r3, r7, #7
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80013aa:	d809      	bhi.n	80013c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	001a      	movs	r2, r3
 80013b2:	231f      	movs	r3, #31
 80013b4:	401a      	ands	r2, r3
 80013b6:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <__NVIC_EnableIRQ+0x30>)
 80013b8:	2101      	movs	r1, #1
 80013ba:	4091      	lsls	r1, r2
 80013bc:	000a      	movs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
  }
}
 80013c0:	46c0      	nop			@ (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b002      	add	sp, #8
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	0002      	movs	r2, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b7f      	cmp	r3, #127	@ 0x7f
 80013e0:	d828      	bhi.n	8001434 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e2:	4a2f      	ldr	r2, [pc, #188]	@ (80014a0 <__NVIC_SetPriority+0xd4>)
 80013e4:	1dfb      	adds	r3, r7, #7
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	33c0      	adds	r3, #192	@ 0xc0
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	589b      	ldr	r3, [r3, r2]
 80013f2:	1dfa      	adds	r2, r7, #7
 80013f4:	7812      	ldrb	r2, [r2, #0]
 80013f6:	0011      	movs	r1, r2
 80013f8:	2203      	movs	r2, #3
 80013fa:	400a      	ands	r2, r1
 80013fc:	00d2      	lsls	r2, r2, #3
 80013fe:	21ff      	movs	r1, #255	@ 0xff
 8001400:	4091      	lsls	r1, r2
 8001402:	000a      	movs	r2, r1
 8001404:	43d2      	mvns	r2, r2
 8001406:	401a      	ands	r2, r3
 8001408:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	019b      	lsls	r3, r3, #6
 800140e:	22ff      	movs	r2, #255	@ 0xff
 8001410:	401a      	ands	r2, r3
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	0018      	movs	r0, r3
 8001418:	2303      	movs	r3, #3
 800141a:	4003      	ands	r3, r0
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001420:	481f      	ldr	r0, [pc, #124]	@ (80014a0 <__NVIC_SetPriority+0xd4>)
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b25b      	sxtb	r3, r3
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	430a      	orrs	r2, r1
 800142c:	33c0      	adds	r3, #192	@ 0xc0
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001432:	e031      	b.n	8001498 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001434:	4a1b      	ldr	r2, [pc, #108]	@ (80014a4 <__NVIC_SetPriority+0xd8>)
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	0019      	movs	r1, r3
 800143c:	230f      	movs	r3, #15
 800143e:	400b      	ands	r3, r1
 8001440:	3b08      	subs	r3, #8
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3306      	adds	r3, #6
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	18d3      	adds	r3, r2, r3
 800144a:	3304      	adds	r3, #4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	1dfa      	adds	r2, r7, #7
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	0011      	movs	r1, r2
 8001454:	2203      	movs	r2, #3
 8001456:	400a      	ands	r2, r1
 8001458:	00d2      	lsls	r2, r2, #3
 800145a:	21ff      	movs	r1, #255	@ 0xff
 800145c:	4091      	lsls	r1, r2
 800145e:	000a      	movs	r2, r1
 8001460:	43d2      	mvns	r2, r2
 8001462:	401a      	ands	r2, r3
 8001464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	019b      	lsls	r3, r3, #6
 800146a:	22ff      	movs	r2, #255	@ 0xff
 800146c:	401a      	ands	r2, r3
 800146e:	1dfb      	adds	r3, r7, #7
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	0018      	movs	r0, r3
 8001474:	2303      	movs	r3, #3
 8001476:	4003      	ands	r3, r0
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800147c:	4809      	ldr	r0, [pc, #36]	@ (80014a4 <__NVIC_SetPriority+0xd8>)
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	001c      	movs	r4, r3
 8001484:	230f      	movs	r3, #15
 8001486:	4023      	ands	r3, r4
 8001488:	3b08      	subs	r3, #8
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	430a      	orrs	r2, r1
 800148e:	3306      	adds	r3, #6
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	18c3      	adds	r3, r0, r3
 8001494:	3304      	adds	r3, #4
 8001496:	601a      	str	r2, [r3, #0]
}
 8001498:	46c0      	nop			@ (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	b003      	add	sp, #12
 800149e:	bd90      	pop	{r4, r7, pc}
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	1e5a      	subs	r2, r3, #1
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	045b      	lsls	r3, r3, #17
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d301      	bcc.n	80014c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014bc:	2301      	movs	r3, #1
 80014be:	e010      	b.n	80014e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c0:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <SysTick_Config+0x44>)
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	3a01      	subs	r2, #1
 80014c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c8:	2301      	movs	r3, #1
 80014ca:	425b      	negs	r3, r3
 80014cc:	2103      	movs	r1, #3
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7ff ff7c 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <SysTick_Config+0x44>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <SysTick_Config+0x44>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	0018      	movs	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b002      	add	sp, #8
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	210f      	movs	r1, #15
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	1c02      	adds	r2, r0, #0
 8001500:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	187b      	adds	r3, r7, r1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b25b      	sxtb	r3, r3
 800150a:	0011      	movs	r1, r2
 800150c:	0018      	movs	r0, r3
 800150e:	f7ff ff5d 	bl	80013cc <__NVIC_SetPriority>
}
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	b004      	add	sp, #16
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	0002      	movs	r2, r0
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b25b      	sxtb	r3, r3
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff ff33 	bl	8001398 <__NVIC_EnableIRQ>
}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b002      	add	sp, #8
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	0018      	movs	r0, r3
 8001546:	f7ff ffaf 	bl	80014a8 <SysTick_Config>
 800154a:	0003      	movs	r3, r0
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b002      	add	sp, #8
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800156a:	e149      	b.n	8001800 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2101      	movs	r1, #1
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4091      	lsls	r1, r2
 8001576:	000a      	movs	r2, r1
 8001578:	4013      	ands	r3, r2
 800157a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d100      	bne.n	8001584 <HAL_GPIO_Init+0x30>
 8001582:	e13a      	b.n	80017fa <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2203      	movs	r2, #3
 800158a:	4013      	ands	r3, r2
 800158c:	2b01      	cmp	r3, #1
 800158e:	d005      	beq.n	800159c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2203      	movs	r2, #3
 8001596:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001598:	2b02      	cmp	r3, #2
 800159a:	d130      	bne.n	80015fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2203      	movs	r2, #3
 80015a8:	409a      	lsls	r2, r3
 80015aa:	0013      	movs	r3, r2
 80015ac:	43da      	mvns	r2, r3
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	409a      	lsls	r2, r3
 80015be:	0013      	movs	r3, r2
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d2:	2201      	movs	r2, #1
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	43da      	mvns	r2, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	091b      	lsrs	r3, r3, #4
 80015e8:	2201      	movs	r2, #1
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	409a      	lsls	r2, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2203      	movs	r2, #3
 8001604:	4013      	ands	r3, r2
 8001606:	2b03      	cmp	r3, #3
 8001608:	d017      	beq.n	800163a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	43da      	mvns	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	409a      	lsls	r2, r3
 800162c:	0013      	movs	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2203      	movs	r2, #3
 8001640:	4013      	ands	r3, r2
 8001642:	2b02      	cmp	r3, #2
 8001644:	d123      	bne.n	800168e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	08da      	lsrs	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3208      	adds	r2, #8
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	58d3      	ldr	r3, [r2, r3]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2207      	movs	r2, #7
 8001658:	4013      	ands	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	220f      	movs	r2, #15
 800165e:	409a      	lsls	r2, r3
 8001660:	0013      	movs	r3, r2
 8001662:	43da      	mvns	r2, r3
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	691a      	ldr	r2, [r3, #16]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2107      	movs	r1, #7
 8001672:	400b      	ands	r3, r1
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	409a      	lsls	r2, r3
 8001678:	0013      	movs	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	08da      	lsrs	r2, r3, #3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3208      	adds	r2, #8
 8001688:	0092      	lsls	r2, r2, #2
 800168a:	6939      	ldr	r1, [r7, #16]
 800168c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	2203      	movs	r2, #3
 800169a:	409a      	lsls	r2, r3
 800169c:	0013      	movs	r3, r2
 800169e:	43da      	mvns	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2203      	movs	r2, #3
 80016ac:	401a      	ands	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	409a      	lsls	r2, r3
 80016b4:	0013      	movs	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	23c0      	movs	r3, #192	@ 0xc0
 80016c8:	029b      	lsls	r3, r3, #10
 80016ca:	4013      	ands	r3, r2
 80016cc:	d100      	bne.n	80016d0 <HAL_GPIO_Init+0x17c>
 80016ce:	e094      	b.n	80017fa <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d0:	4b51      	ldr	r3, [pc, #324]	@ (8001818 <HAL_GPIO_Init+0x2c4>)
 80016d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016d4:	4b50      	ldr	r3, [pc, #320]	@ (8001818 <HAL_GPIO_Init+0x2c4>)
 80016d6:	2101      	movs	r1, #1
 80016d8:	430a      	orrs	r2, r1
 80016da:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80016dc:	4a4f      	ldr	r2, [pc, #316]	@ (800181c <HAL_GPIO_Init+0x2c8>)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	589b      	ldr	r3, [r3, r2]
 80016e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	2203      	movs	r2, #3
 80016ee:	4013      	ands	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	409a      	lsls	r2, r3
 80016f6:	0013      	movs	r3, r2
 80016f8:	43da      	mvns	r2, r3
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	23a0      	movs	r3, #160	@ 0xa0
 8001704:	05db      	lsls	r3, r3, #23
 8001706:	429a      	cmp	r2, r3
 8001708:	d013      	beq.n	8001732 <HAL_GPIO_Init+0x1de>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a44      	ldr	r2, [pc, #272]	@ (8001820 <HAL_GPIO_Init+0x2cc>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d00d      	beq.n	800172e <HAL_GPIO_Init+0x1da>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a43      	ldr	r2, [pc, #268]	@ (8001824 <HAL_GPIO_Init+0x2d0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d007      	beq.n	800172a <HAL_GPIO_Init+0x1d6>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a42      	ldr	r2, [pc, #264]	@ (8001828 <HAL_GPIO_Init+0x2d4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d101      	bne.n	8001726 <HAL_GPIO_Init+0x1d2>
 8001722:	2305      	movs	r3, #5
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x1e0>
 8001726:	2306      	movs	r3, #6
 8001728:	e004      	b.n	8001734 <HAL_GPIO_Init+0x1e0>
 800172a:	2302      	movs	r3, #2
 800172c:	e002      	b.n	8001734 <HAL_GPIO_Init+0x1e0>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <HAL_GPIO_Init+0x1e0>
 8001732:	2300      	movs	r3, #0
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	2103      	movs	r1, #3
 8001738:	400a      	ands	r2, r1
 800173a:	0092      	lsls	r2, r2, #2
 800173c:	4093      	lsls	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001744:	4935      	ldr	r1, [pc, #212]	@ (800181c <HAL_GPIO_Init+0x2c8>)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001752:	4b36      	ldr	r3, [pc, #216]	@ (800182c <HAL_GPIO_Init+0x2d8>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	43da      	mvns	r2, r3
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	2380      	movs	r3, #128	@ 0x80
 8001768:	035b      	lsls	r3, r3, #13
 800176a:	4013      	ands	r3, r2
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001776:	4b2d      	ldr	r3, [pc, #180]	@ (800182c <HAL_GPIO_Init+0x2d8>)
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800177c:	4b2b      	ldr	r3, [pc, #172]	@ (800182c <HAL_GPIO_Init+0x2d8>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43da      	mvns	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	2380      	movs	r3, #128	@ 0x80
 8001792:	039b      	lsls	r3, r3, #14
 8001794:	4013      	ands	r3, r2
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017a0:	4b22      	ldr	r3, [pc, #136]	@ (800182c <HAL_GPIO_Init+0x2d8>)
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80017a6:	4b21      	ldr	r3, [pc, #132]	@ (800182c <HAL_GPIO_Init+0x2d8>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43da      	mvns	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	2380      	movs	r3, #128	@ 0x80
 80017bc:	029b      	lsls	r3, r3, #10
 80017be:	4013      	ands	r3, r2
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017ca:	4b18      	ldr	r3, [pc, #96]	@ (800182c <HAL_GPIO_Init+0x2d8>)
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d0:	4b16      	ldr	r3, [pc, #88]	@ (800182c <HAL_GPIO_Init+0x2d8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	43da      	mvns	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	025b      	lsls	r3, r3, #9
 80017e8:	4013      	ands	r3, r2
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <HAL_GPIO_Init+0x2d8>)
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	40da      	lsrs	r2, r3
 8001808:	1e13      	subs	r3, r2, #0
 800180a:	d000      	beq.n	800180e <HAL_GPIO_Init+0x2ba>
 800180c:	e6ae      	b.n	800156c <HAL_GPIO_Init+0x18>
  }
}
 800180e:	46c0      	nop			@ (mov r8, r8)
 8001810:	46c0      	nop			@ (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b006      	add	sp, #24
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	40010000 	.word	0x40010000
 8001820:	50000400 	.word	0x50000400
 8001824:	50000800 	.word	0x50000800
 8001828:	50001c00 	.word	0x50001c00
 800182c:	40010400 	.word	0x40010400

08001830 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	0008      	movs	r0, r1
 800183a:	0011      	movs	r1, r2
 800183c:	1cbb      	adds	r3, r7, #2
 800183e:	1c02      	adds	r2, r0, #0
 8001840:	801a      	strh	r2, [r3, #0]
 8001842:	1c7b      	adds	r3, r7, #1
 8001844:	1c0a      	adds	r2, r1, #0
 8001846:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001848:	1c7b      	adds	r3, r7, #1
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001850:	1cbb      	adds	r3, r7, #2
 8001852:	881a      	ldrh	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001858:	e003      	b.n	8001862 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800185a:	1cbb      	adds	r3, r7, #2
 800185c:	881a      	ldrh	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001862:	46c0      	nop			@ (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	b002      	add	sp, #8
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	0002      	movs	r2, r0
 8001874:	1dbb      	adds	r3, r7, #6
 8001876:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	1dba      	adds	r2, r7, #6
 800187e:	8812      	ldrh	r2, [r2, #0]
 8001880:	4013      	ands	r3, r2
 8001882:	d008      	beq.n	8001896 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001886:	1dba      	adds	r2, r7, #6
 8001888:	8812      	ldrh	r2, [r2, #0]
 800188a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800188c:	1dbb      	adds	r3, r7, #6
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	0018      	movs	r0, r3
 8001892:	f000 f807 	bl	80018a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001896:	46c0      	nop			@ (mov r8, r8)
 8001898:	46bd      	mov	sp, r7
 800189a:	b002      	add	sp, #8
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	40010400 	.word	0x40010400

080018a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	0002      	movs	r2, r0
 80018ac:	1dbb      	adds	r3, r7, #6
 80018ae:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018b0:	46c0      	nop			@ (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e082      	b.n	80019d0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2241      	movs	r2, #65	@ 0x41
 80018ce:	5c9b      	ldrb	r3, [r3, r2]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d107      	bne.n	80018e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2240      	movs	r2, #64	@ 0x40
 80018da:	2100      	movs	r1, #0
 80018dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f7ff fb3d 	bl	8000f60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2241      	movs	r2, #65	@ 0x41
 80018ea:	2124      	movs	r1, #36	@ 0x24
 80018ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2101      	movs	r1, #1
 80018fa:	438a      	bics	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4934      	ldr	r1, [pc, #208]	@ (80019d8 <HAL_I2C_Init+0x120>)
 8001908:	400a      	ands	r2, r1
 800190a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4931      	ldr	r1, [pc, #196]	@ (80019dc <HAL_I2C_Init+0x124>)
 8001918:	400a      	ands	r2, r1
 800191a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d108      	bne.n	8001936 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2180      	movs	r1, #128	@ 0x80
 800192e:	0209      	lsls	r1, r1, #8
 8001930:	430a      	orrs	r2, r1
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	e007      	b.n	8001946 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2184      	movs	r1, #132	@ 0x84
 8001940:	0209      	lsls	r1, r1, #8
 8001942:	430a      	orrs	r2, r1
 8001944:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d104      	bne.n	8001958 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2280      	movs	r2, #128	@ 0x80
 8001954:	0112      	lsls	r2, r2, #4
 8001956:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	491f      	ldr	r1, [pc, #124]	@ (80019e0 <HAL_I2C_Init+0x128>)
 8001964:	430a      	orrs	r2, r1
 8001966:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	491a      	ldr	r1, [pc, #104]	@ (80019dc <HAL_I2C_Init+0x124>)
 8001974:	400a      	ands	r2, r1
 8001976:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	431a      	orrs	r2, r3
 8001982:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69d9      	ldr	r1, [r3, #28]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1a      	ldr	r2, [r3, #32]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2101      	movs	r1, #1
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2241      	movs	r2, #65	@ 0x41
 80019bc:	2120      	movs	r1, #32
 80019be:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2242      	movs	r2, #66	@ 0x42
 80019ca:	2100      	movs	r1, #0
 80019cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b002      	add	sp, #8
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	f0ffffff 	.word	0xf0ffffff
 80019dc:	ffff7fff 	.word	0xffff7fff
 80019e0:	02008000 	.word	0x02008000

080019e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b089      	sub	sp, #36	@ 0x24
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	0008      	movs	r0, r1
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	0019      	movs	r1, r3
 80019f2:	230a      	movs	r3, #10
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	1c02      	adds	r2, r0, #0
 80019f8:	801a      	strh	r2, [r3, #0]
 80019fa:	2308      	movs	r3, #8
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	1c0a      	adds	r2, r1, #0
 8001a00:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2241      	movs	r2, #65	@ 0x41
 8001a06:	5c9b      	ldrb	r3, [r3, r2]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b20      	cmp	r3, #32
 8001a0c:	d000      	beq.n	8001a10 <HAL_I2C_Master_Transmit+0x2c>
 8001a0e:	e0e7      	b.n	8001be0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2240      	movs	r2, #64	@ 0x40
 8001a14:	5c9b      	ldrb	r3, [r3, r2]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_I2C_Master_Transmit+0x3a>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e0e1      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x1fe>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2240      	movs	r2, #64	@ 0x40
 8001a22:	2101      	movs	r1, #1
 8001a24:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a26:	f7ff fc89 	bl	800133c <HAL_GetTick>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a2e:	2380      	movs	r3, #128	@ 0x80
 8001a30:	0219      	lsls	r1, r3, #8
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2319      	movs	r3, #25
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f000 fa04 	bl	8001e48 <I2C_WaitOnFlagUntilTimeout>
 8001a40:	1e03      	subs	r3, r0, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0cc      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2241      	movs	r2, #65	@ 0x41
 8001a4c:	2121      	movs	r1, #33	@ 0x21
 8001a4e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2242      	movs	r2, #66	@ 0x42
 8001a54:	2110      	movs	r1, #16
 8001a56:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2208      	movs	r2, #8
 8001a68:	18ba      	adds	r2, r7, r2
 8001a6a:	8812      	ldrh	r2, [r2, #0]
 8001a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2bff      	cmp	r3, #255	@ 0xff
 8001a7c:	d911      	bls.n	8001aa2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	22ff      	movs	r2, #255	@ 0xff
 8001a82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	2380      	movs	r3, #128	@ 0x80
 8001a8c:	045c      	lsls	r4, r3, #17
 8001a8e:	230a      	movs	r3, #10
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	8819      	ldrh	r1, [r3, #0]
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	4b55      	ldr	r3, [pc, #340]	@ (8001bec <HAL_I2C_Master_Transmit+0x208>)
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	0023      	movs	r3, r4
 8001a9c:	f000 fc26 	bl	80022ec <I2C_TransferConfig>
 8001aa0:	e075      	b.n	8001b8e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	049c      	lsls	r4, r3, #18
 8001ab6:	230a      	movs	r3, #10
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	8819      	ldrh	r1, [r3, #0]
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	4b4b      	ldr	r3, [pc, #300]	@ (8001bec <HAL_I2C_Master_Transmit+0x208>)
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	0023      	movs	r3, r4
 8001ac4:	f000 fc12 	bl	80022ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ac8:	e061      	b.n	8001b8e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f000 fa07 	bl	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ad6:	1e03      	subs	r3, r0, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e081      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d03a      	beq.n	8001b8e <HAL_I2C_Master_Transmit+0x1aa>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d136      	bne.n	8001b8e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	0013      	movs	r3, r2
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2180      	movs	r1, #128	@ 0x80
 8001b2e:	f000 f98b 	bl	8001e48 <I2C_WaitOnFlagUntilTimeout>
 8001b32:	1e03      	subs	r3, r0, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e053      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	2bff      	cmp	r3, #255	@ 0xff
 8001b42:	d911      	bls.n	8001b68 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	22ff      	movs	r2, #255	@ 0xff
 8001b48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	2380      	movs	r3, #128	@ 0x80
 8001b52:	045c      	lsls	r4, r3, #17
 8001b54:	230a      	movs	r3, #10
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	8819      	ldrh	r1, [r3, #0]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	0023      	movs	r3, r4
 8001b62:	f000 fbc3 	bl	80022ec <I2C_TransferConfig>
 8001b66:	e012      	b.n	8001b8e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	049c      	lsls	r4, r3, #18
 8001b7c:	230a      	movs	r3, #10
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	8819      	ldrh	r1, [r3, #0]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	2300      	movs	r3, #0
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	0023      	movs	r3, r4
 8001b8a:	f000 fbaf 	bl	80022ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d198      	bne.n	8001aca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f000 f9e6 	bl	8001f70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ba4:	1e03      	subs	r3, r0, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e01a      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	490c      	ldr	r1, [pc, #48]	@ (8001bf0 <HAL_I2C_Master_Transmit+0x20c>)
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2241      	movs	r2, #65	@ 0x41
 8001bc8:	2120      	movs	r1, #32
 8001bca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2242      	movs	r2, #66	@ 0x42
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2240      	movs	r2, #64	@ 0x40
 8001bd8:	2100      	movs	r1, #0
 8001bda:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e000      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001be0:	2302      	movs	r3, #2
  }
}
 8001be2:	0018      	movs	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b007      	add	sp, #28
 8001be8:	bd90      	pop	{r4, r7, pc}
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	80002000 	.word	0x80002000
 8001bf0:	fe00e800 	.word	0xfe00e800

08001bf4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b089      	sub	sp, #36	@ 0x24
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	0008      	movs	r0, r1
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	0019      	movs	r1, r3
 8001c02:	230a      	movs	r3, #10
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	1c02      	adds	r2, r0, #0
 8001c08:	801a      	strh	r2, [r3, #0]
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	1c0a      	adds	r2, r1, #0
 8001c10:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2241      	movs	r2, #65	@ 0x41
 8001c16:	5c9b      	ldrb	r3, [r3, r2]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b20      	cmp	r3, #32
 8001c1c:	d000      	beq.n	8001c20 <HAL_I2C_Master_Receive+0x2c>
 8001c1e:	e0e8      	b.n	8001df2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2240      	movs	r2, #64	@ 0x40
 8001c24:	5c9b      	ldrb	r3, [r3, r2]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_I2C_Master_Receive+0x3a>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e0e2      	b.n	8001df4 <HAL_I2C_Master_Receive+0x200>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2240      	movs	r2, #64	@ 0x40
 8001c32:	2101      	movs	r1, #1
 8001c34:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c36:	f7ff fb81 	bl	800133c <HAL_GetTick>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c3e:	2380      	movs	r3, #128	@ 0x80
 8001c40:	0219      	lsls	r1, r3, #8
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2319      	movs	r3, #25
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f000 f8fc 	bl	8001e48 <I2C_WaitOnFlagUntilTimeout>
 8001c50:	1e03      	subs	r3, r0, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0cd      	b.n	8001df4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2241      	movs	r2, #65	@ 0x41
 8001c5c:	2122      	movs	r1, #34	@ 0x22
 8001c5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2242      	movs	r2, #66	@ 0x42
 8001c64:	2110      	movs	r1, #16
 8001c66:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2208      	movs	r2, #8
 8001c78:	18ba      	adds	r2, r7, r2
 8001c7a:	8812      	ldrh	r2, [r2, #0]
 8001c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2bff      	cmp	r3, #255	@ 0xff
 8001c8c:	d911      	bls.n	8001cb2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	22ff      	movs	r2, #255	@ 0xff
 8001c92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	2380      	movs	r3, #128	@ 0x80
 8001c9c:	045c      	lsls	r4, r3, #17
 8001c9e:	230a      	movs	r3, #10
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	8819      	ldrh	r1, [r3, #0]
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	4b55      	ldr	r3, [pc, #340]	@ (8001dfc <HAL_I2C_Master_Receive+0x208>)
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	0023      	movs	r3, r4
 8001cac:	f000 fb1e 	bl	80022ec <I2C_TransferConfig>
 8001cb0:	e076      	b.n	8001da0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	2380      	movs	r3, #128	@ 0x80
 8001cc4:	049c      	lsls	r4, r3, #18
 8001cc6:	230a      	movs	r3, #10
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	8819      	ldrh	r1, [r3, #0]
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	4b4b      	ldr	r3, [pc, #300]	@ (8001dfc <HAL_I2C_Master_Receive+0x208>)
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	0023      	movs	r3, r4
 8001cd4:	f000 fb0a 	bl	80022ec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001cd8:	e062      	b.n	8001da0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f000 f989 	bl	8001ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ce6:	1e03      	subs	r3, r0, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e082      	b.n	8001df4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d03a      	beq.n	8001da0 <HAL_I2C_Master_Receive+0x1ac>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d136      	bne.n	8001da0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	0013      	movs	r3, r2
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2180      	movs	r1, #128	@ 0x80
 8001d40:	f000 f882 	bl	8001e48 <I2C_WaitOnFlagUntilTimeout>
 8001d44:	1e03      	subs	r3, r0, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e053      	b.n	8001df4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2bff      	cmp	r3, #255	@ 0xff
 8001d54:	d911      	bls.n	8001d7a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	22ff      	movs	r2, #255	@ 0xff
 8001d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	2380      	movs	r3, #128	@ 0x80
 8001d64:	045c      	lsls	r4, r3, #17
 8001d66:	230a      	movs	r3, #10
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	8819      	ldrh	r1, [r3, #0]
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	0023      	movs	r3, r4
 8001d74:	f000 faba 	bl	80022ec <I2C_TransferConfig>
 8001d78:	e012      	b.n	8001da0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	2380      	movs	r3, #128	@ 0x80
 8001d8c:	049c      	lsls	r4, r3, #18
 8001d8e:	230a      	movs	r3, #10
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	8819      	ldrh	r1, [r3, #0]
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	2300      	movs	r3, #0
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	0023      	movs	r3, r4
 8001d9c:	f000 faa6 	bl	80022ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d197      	bne.n	8001cda <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	0018      	movs	r0, r3
 8001db2:	f000 f8dd 	bl	8001f70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001db6:	1e03      	subs	r3, r0, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e01a      	b.n	8001df4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	490b      	ldr	r1, [pc, #44]	@ (8001e00 <HAL_I2C_Master_Receive+0x20c>)
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2241      	movs	r2, #65	@ 0x41
 8001dda:	2120      	movs	r1, #32
 8001ddc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2242      	movs	r2, #66	@ 0x42
 8001de2:	2100      	movs	r1, #0
 8001de4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2240      	movs	r2, #64	@ 0x40
 8001dea:	2100      	movs	r1, #0
 8001dec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e000      	b.n	8001df4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
  }
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b007      	add	sp, #28
 8001dfa:	bd90      	pop	{r4, r7, pc}
 8001dfc:	80002400 	.word	0x80002400
 8001e00:	fe00e800 	.word	0xfe00e800

08001e04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	2202      	movs	r2, #2
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d103      	bne.n	8001e22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d007      	beq.n	8001e40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	619a      	str	r2, [r3, #24]
  }
}
 8001e40:	46c0      	nop			@ (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b002      	add	sp, #8
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	1dfb      	adds	r3, r7, #7
 8001e56:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e58:	e030      	b.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	d02d      	beq.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e60:	f7ff fa6c 	bl	800133c <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d302      	bcc.n	8001e76 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d122      	bne.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	425a      	negs	r2, r3
 8001e86:	4153      	adcs	r3, r2
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	1dfb      	adds	r3, r7, #7
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d113      	bne.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e98:	2220      	movs	r2, #32
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2241      	movs	r2, #65	@ 0x41
 8001ea4:	2120      	movs	r1, #32
 8001ea6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2242      	movs	r2, #66	@ 0x42
 8001eac:	2100      	movs	r1, #0
 8001eae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2240      	movs	r2, #64	@ 0x40
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e00f      	b.n	8001edc <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	425a      	negs	r2, r3
 8001ecc:	4153      	adcs	r3, r2
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	001a      	movs	r2, r3
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d0bf      	beq.n	8001e5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b004      	add	sp, #16
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ef0:	e032      	b.n	8001f58 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 f8ff 	bl	80020fc <I2C_IsErrorOccurred>
 8001efe:	1e03      	subs	r3, r0, #0
 8001f00:	d001      	beq.n	8001f06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e030      	b.n	8001f68 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	d025      	beq.n	8001f58 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0c:	f7ff fa16 	bl	800133c <HAL_GetTick>
 8001f10:	0002      	movs	r2, r0
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d302      	bcc.n	8001f22 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d11a      	bne.n	8001f58 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d013      	beq.n	8001f58 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f34:	2220      	movs	r2, #32
 8001f36:	431a      	orrs	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2241      	movs	r2, #65	@ 0x41
 8001f40:	2120      	movs	r1, #32
 8001f42:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2242      	movs	r2, #66	@ 0x42
 8001f48:	2100      	movs	r1, #0
 8001f4a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2240      	movs	r2, #64	@ 0x40
 8001f50:	2100      	movs	r1, #0
 8001f52:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e007      	b.n	8001f68 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d1c5      	bne.n	8001ef2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b004      	add	sp, #16
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f7c:	e02f      	b.n	8001fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	0018      	movs	r0, r3
 8001f86:	f000 f8b9 	bl	80020fc <I2C_IsErrorOccurred>
 8001f8a:	1e03      	subs	r3, r0, #0
 8001f8c:	d001      	beq.n	8001f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e02d      	b.n	8001fee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f92:	f7ff f9d3 	bl	800133c <HAL_GetTick>
 8001f96:	0002      	movs	r2, r0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d302      	bcc.n	8001fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d11a      	bne.n	8001fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	d013      	beq.n	8001fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	2220      	movs	r2, #32
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2241      	movs	r2, #65	@ 0x41
 8001fc6:	2120      	movs	r1, #32
 8001fc8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2242      	movs	r2, #66	@ 0x42
 8001fce:	2100      	movs	r1, #0
 8001fd0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2240      	movs	r2, #64	@ 0x40
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e007      	b.n	8001fee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d1c8      	bne.n	8001f7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b004      	add	sp, #16
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002004:	e06b      	b.n	80020de <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	0018      	movs	r0, r3
 800200e:	f000 f875 	bl	80020fc <I2C_IsErrorOccurred>
 8002012:	1e03      	subs	r3, r0, #0
 8002014:	d001      	beq.n	800201a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e069      	b.n	80020ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2220      	movs	r2, #32
 8002022:	4013      	ands	r3, r2
 8002024:	2b20      	cmp	r3, #32
 8002026:	d138      	bne.n	800209a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	2204      	movs	r2, #4
 8002030:	4013      	ands	r3, r2
 8002032:	2b04      	cmp	r3, #4
 8002034:	d105      	bne.n	8002042 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	e055      	b.n	80020ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	2210      	movs	r2, #16
 800204a:	4013      	ands	r3, r2
 800204c:	2b10      	cmp	r3, #16
 800204e:	d107      	bne.n	8002060 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2210      	movs	r2, #16
 8002056:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2204      	movs	r2, #4
 800205c:	645a      	str	r2, [r3, #68]	@ 0x44
 800205e:	e002      	b.n	8002066 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2220      	movs	r2, #32
 800206c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	491f      	ldr	r1, [pc, #124]	@ (80020f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800207a:	400a      	ands	r2, r1
 800207c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2241      	movs	r2, #65	@ 0x41
 8002082:	2120      	movs	r1, #32
 8002084:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2242      	movs	r2, #66	@ 0x42
 800208a:	2100      	movs	r1, #0
 800208c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2240      	movs	r2, #64	@ 0x40
 8002092:	2100      	movs	r1, #0
 8002094:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e029      	b.n	80020ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800209a:	f7ff f94f 	bl	800133c <HAL_GetTick>
 800209e:	0002      	movs	r2, r0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d302      	bcc.n	80020b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d116      	bne.n	80020de <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2204      	movs	r2, #4
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d00f      	beq.n	80020de <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	2220      	movs	r2, #32
 80020c4:	431a      	orrs	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2241      	movs	r2, #65	@ 0x41
 80020ce:	2120      	movs	r1, #32
 80020d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2240      	movs	r2, #64	@ 0x40
 80020d6:	2100      	movs	r1, #0
 80020d8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e007      	b.n	80020ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2204      	movs	r2, #4
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d18c      	bne.n	8002006 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b004      	add	sp, #16
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	fe00e800 	.word	0xfe00e800

080020fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	@ 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002108:	2327      	movs	r3, #39	@ 0x27
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2210      	movs	r2, #16
 8002124:	4013      	ands	r3, r2
 8002126:	d100      	bne.n	800212a <I2C_IsErrorOccurred+0x2e>
 8002128:	e079      	b.n	800221e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2210      	movs	r2, #16
 8002130:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002132:	e057      	b.n	80021e4 <I2C_IsErrorOccurred+0xe8>
 8002134:	2227      	movs	r2, #39	@ 0x27
 8002136:	18bb      	adds	r3, r7, r2
 8002138:	18ba      	adds	r2, r7, r2
 800213a:	7812      	ldrb	r2, [r2, #0]
 800213c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	3301      	adds	r3, #1
 8002142:	d04f      	beq.n	80021e4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002144:	f7ff f8fa 	bl	800133c <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	429a      	cmp	r2, r3
 8002152:	d302      	bcc.n	800215a <I2C_IsErrorOccurred+0x5e>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d144      	bne.n	80021e4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	01db      	lsls	r3, r3, #7
 8002164:	4013      	ands	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002168:	2013      	movs	r0, #19
 800216a:	183b      	adds	r3, r7, r0
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	2142      	movs	r1, #66	@ 0x42
 8002170:	5c52      	ldrb	r2, [r2, r1]
 8002172:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	2380      	movs	r3, #128	@ 0x80
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	401a      	ands	r2, r3
 8002180:	2380      	movs	r3, #128	@ 0x80
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	429a      	cmp	r2, r3
 8002186:	d126      	bne.n	80021d6 <I2C_IsErrorOccurred+0xda>
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	2380      	movs	r3, #128	@ 0x80
 800218c:	01db      	lsls	r3, r3, #7
 800218e:	429a      	cmp	r2, r3
 8002190:	d021      	beq.n	80021d6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002192:	183b      	adds	r3, r7, r0
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b20      	cmp	r3, #32
 8002198:	d01d      	beq.n	80021d6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2180      	movs	r1, #128	@ 0x80
 80021a6:	01c9      	lsls	r1, r1, #7
 80021a8:	430a      	orrs	r2, r1
 80021aa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80021ac:	f7ff f8c6 	bl	800133c <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021b4:	e00f      	b.n	80021d6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80021b6:	f7ff f8c1 	bl	800133c <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b19      	cmp	r3, #25
 80021c2:	d908      	bls.n	80021d6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	2220      	movs	r2, #32
 80021c8:	4313      	orrs	r3, r2
 80021ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80021cc:	2327      	movs	r3, #39	@ 0x27
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	2201      	movs	r2, #1
 80021d2:	701a      	strb	r2, [r3, #0]

              break;
 80021d4:	e006      	b.n	80021e4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2220      	movs	r2, #32
 80021de:	4013      	ands	r3, r2
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	d1e8      	bne.n	80021b6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2220      	movs	r2, #32
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d004      	beq.n	80021fc <I2C_IsErrorOccurred+0x100>
 80021f2:	2327      	movs	r3, #39	@ 0x27
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d09b      	beq.n	8002134 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021fc:	2327      	movs	r3, #39	@ 0x27
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d103      	bne.n	800220e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2220      	movs	r2, #32
 800220c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	2204      	movs	r2, #4
 8002212:	4313      	orrs	r3, r2
 8002214:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002216:	2327      	movs	r3, #39	@ 0x27
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	2380      	movs	r3, #128	@ 0x80
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4013      	ands	r3, r2
 800222e:	d00c      	beq.n	800224a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	2201      	movs	r2, #1
 8002234:	4313      	orrs	r3, r2
 8002236:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2280      	movs	r2, #128	@ 0x80
 800223e:	0052      	lsls	r2, r2, #1
 8002240:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002242:	2327      	movs	r3, #39	@ 0x27
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	2380      	movs	r3, #128	@ 0x80
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4013      	ands	r3, r2
 8002252:	d00c      	beq.n	800226e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	2208      	movs	r2, #8
 8002258:	4313      	orrs	r3, r2
 800225a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2280      	movs	r2, #128	@ 0x80
 8002262:	00d2      	lsls	r2, r2, #3
 8002264:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002266:	2327      	movs	r3, #39	@ 0x27
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4013      	ands	r3, r2
 8002276:	d00c      	beq.n	8002292 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	2202      	movs	r2, #2
 800227c:	4313      	orrs	r3, r2
 800227e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2280      	movs	r2, #128	@ 0x80
 8002286:	0092      	lsls	r2, r2, #2
 8002288:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800228a:	2327      	movs	r3, #39	@ 0x27
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002292:	2327      	movs	r3, #39	@ 0x27
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01d      	beq.n	80022d8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	0018      	movs	r0, r3
 80022a0:	f7ff fdb0 	bl	8001e04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	490e      	ldr	r1, [pc, #56]	@ (80022e8 <I2C_IsErrorOccurred+0x1ec>)
 80022b0:	400a      	ands	r2, r1
 80022b2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2241      	movs	r2, #65	@ 0x41
 80022c4:	2120      	movs	r1, #32
 80022c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2242      	movs	r2, #66	@ 0x42
 80022cc:	2100      	movs	r1, #0
 80022ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2240      	movs	r2, #64	@ 0x40
 80022d4:	2100      	movs	r1, #0
 80022d6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80022d8:	2327      	movs	r3, #39	@ 0x27
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	781b      	ldrb	r3, [r3, #0]
}
 80022de:	0018      	movs	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b00a      	add	sp, #40	@ 0x28
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	fe00e800 	.word	0xfe00e800

080022ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	0008      	movs	r0, r1
 80022f6:	0011      	movs	r1, r2
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	240a      	movs	r4, #10
 80022fc:	193b      	adds	r3, r7, r4
 80022fe:	1c02      	adds	r2, r0, #0
 8002300:	801a      	strh	r2, [r3, #0]
 8002302:	2009      	movs	r0, #9
 8002304:	183b      	adds	r3, r7, r0
 8002306:	1c0a      	adds	r2, r1, #0
 8002308:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800230a:	193b      	adds	r3, r7, r4
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	059b      	lsls	r3, r3, #22
 8002310:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002312:	183b      	adds	r3, r7, r0
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	0419      	lsls	r1, r3, #16
 8002318:	23ff      	movs	r3, #255	@ 0xff
 800231a:	041b      	lsls	r3, r3, #16
 800231c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800231e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002326:	4313      	orrs	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	085b      	lsrs	r3, r3, #1
 800232c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002336:	0d51      	lsrs	r1, r2, #21
 8002338:	2280      	movs	r2, #128	@ 0x80
 800233a:	00d2      	lsls	r2, r2, #3
 800233c:	400a      	ands	r2, r1
 800233e:	4907      	ldr	r1, [pc, #28]	@ (800235c <I2C_TransferConfig+0x70>)
 8002340:	430a      	orrs	r2, r1
 8002342:	43d2      	mvns	r2, r2
 8002344:	401a      	ands	r2, r3
 8002346:	0011      	movs	r1, r2
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	430a      	orrs	r2, r1
 8002350:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b007      	add	sp, #28
 8002358:	bd90      	pop	{r4, r7, pc}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	03ff63ff 	.word	0x03ff63ff

08002360 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2241      	movs	r2, #65	@ 0x41
 800236e:	5c9b      	ldrb	r3, [r3, r2]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b20      	cmp	r3, #32
 8002374:	d138      	bne.n	80023e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2240      	movs	r2, #64	@ 0x40
 800237a:	5c9b      	ldrb	r3, [r3, r2]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002380:	2302      	movs	r3, #2
 8002382:	e032      	b.n	80023ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2240      	movs	r2, #64	@ 0x40
 8002388:	2101      	movs	r1, #1
 800238a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2241      	movs	r2, #65	@ 0x41
 8002390:	2124      	movs	r1, #36	@ 0x24
 8002392:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2101      	movs	r1, #1
 80023a0:	438a      	bics	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4911      	ldr	r1, [pc, #68]	@ (80023f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80023b0:	400a      	ands	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6819      	ldr	r1, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2101      	movs	r1, #1
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2241      	movs	r2, #65	@ 0x41
 80023d8:	2120      	movs	r1, #32
 80023da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2240      	movs	r2, #64	@ 0x40
 80023e0:	2100      	movs	r1, #0
 80023e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e000      	b.n	80023ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023e8:	2302      	movs	r3, #2
  }
}
 80023ea:	0018      	movs	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b002      	add	sp, #8
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			@ (mov r8, r8)
 80023f4:	ffffefff 	.word	0xffffefff

080023f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2241      	movs	r2, #65	@ 0x41
 8002406:	5c9b      	ldrb	r3, [r3, r2]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b20      	cmp	r3, #32
 800240c:	d139      	bne.n	8002482 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2240      	movs	r2, #64	@ 0x40
 8002412:	5c9b      	ldrb	r3, [r3, r2]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002418:	2302      	movs	r3, #2
 800241a:	e033      	b.n	8002484 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2240      	movs	r2, #64	@ 0x40
 8002420:	2101      	movs	r1, #1
 8002422:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2241      	movs	r2, #65	@ 0x41
 8002428:	2124      	movs	r1, #36	@ 0x24
 800242a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2101      	movs	r1, #1
 8002438:	438a      	bics	r2, r1
 800243a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4a11      	ldr	r2, [pc, #68]	@ (800248c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002448:	4013      	ands	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2101      	movs	r1, #1
 800246a:	430a      	orrs	r2, r1
 800246c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2241      	movs	r2, #65	@ 0x41
 8002472:	2120      	movs	r1, #32
 8002474:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2240      	movs	r2, #64	@ 0x40
 800247a:	2100      	movs	r1, #0
 800247c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	e000      	b.n	8002484 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002482:	2302      	movs	r3, #2
  }
}
 8002484:	0018      	movs	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	b004      	add	sp, #16
 800248a:	bd80      	pop	{r7, pc}
 800248c:	fffff0ff 	.word	0xfffff0ff

08002490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002490:	b5b0      	push	{r4, r5, r7, lr}
 8002492:	b08a      	sub	sp, #40	@ 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	f000 fb6c 	bl	8002b7c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a4:	4bc8      	ldr	r3, [pc, #800]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	220c      	movs	r2, #12
 80024aa:	4013      	ands	r3, r2
 80024ac:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ae:	4bc6      	ldr	r3, [pc, #792]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	2380      	movs	r3, #128	@ 0x80
 80024b4:	025b      	lsls	r3, r3, #9
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2201      	movs	r2, #1
 80024c0:	4013      	ands	r3, r2
 80024c2:	d100      	bne.n	80024c6 <HAL_RCC_OscConfig+0x36>
 80024c4:	e07d      	b.n	80025c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d007      	beq.n	80024dc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d112      	bne.n	80024f8 <HAL_RCC_OscConfig+0x68>
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	2380      	movs	r3, #128	@ 0x80
 80024d6:	025b      	lsls	r3, r3, #9
 80024d8:	429a      	cmp	r2, r3
 80024da:	d10d      	bne.n	80024f8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	4bba      	ldr	r3, [pc, #744]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2380      	movs	r3, #128	@ 0x80
 80024e2:	029b      	lsls	r3, r3, #10
 80024e4:	4013      	ands	r3, r2
 80024e6:	d100      	bne.n	80024ea <HAL_RCC_OscConfig+0x5a>
 80024e8:	e06a      	b.n	80025c0 <HAL_RCC_OscConfig+0x130>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d166      	bne.n	80025c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f000 fb42 	bl	8002b7c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	2380      	movs	r3, #128	@ 0x80
 80024fe:	025b      	lsls	r3, r3, #9
 8002500:	429a      	cmp	r2, r3
 8002502:	d107      	bne.n	8002514 <HAL_RCC_OscConfig+0x84>
 8002504:	4bb0      	ldr	r3, [pc, #704]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4baf      	ldr	r3, [pc, #700]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 800250a:	2180      	movs	r1, #128	@ 0x80
 800250c:	0249      	lsls	r1, r1, #9
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	e027      	b.n	8002564 <HAL_RCC_OscConfig+0xd4>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	23a0      	movs	r3, #160	@ 0xa0
 800251a:	02db      	lsls	r3, r3, #11
 800251c:	429a      	cmp	r2, r3
 800251e:	d10e      	bne.n	800253e <HAL_RCC_OscConfig+0xae>
 8002520:	4ba9      	ldr	r3, [pc, #676]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4ba8      	ldr	r3, [pc, #672]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002526:	2180      	movs	r1, #128	@ 0x80
 8002528:	02c9      	lsls	r1, r1, #11
 800252a:	430a      	orrs	r2, r1
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	4ba6      	ldr	r3, [pc, #664]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4ba5      	ldr	r3, [pc, #660]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002534:	2180      	movs	r1, #128	@ 0x80
 8002536:	0249      	lsls	r1, r1, #9
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e012      	b.n	8002564 <HAL_RCC_OscConfig+0xd4>
 800253e:	4ba2      	ldr	r3, [pc, #648]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4ba1      	ldr	r3, [pc, #644]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002544:	49a1      	ldr	r1, [pc, #644]	@ (80027cc <HAL_RCC_OscConfig+0x33c>)
 8002546:	400a      	ands	r2, r1
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	4b9f      	ldr	r3, [pc, #636]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	2380      	movs	r3, #128	@ 0x80
 8002550:	025b      	lsls	r3, r3, #9
 8002552:	4013      	ands	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4b9b      	ldr	r3, [pc, #620]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b9a      	ldr	r3, [pc, #616]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 800255e:	499c      	ldr	r1, [pc, #624]	@ (80027d0 <HAL_RCC_OscConfig+0x340>)
 8002560:	400a      	ands	r2, r1
 8002562:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d014      	beq.n	8002596 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe fee6 	bl	800133c <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002576:	f7fe fee1 	bl	800133c <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b64      	cmp	r3, #100	@ 0x64
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e2f9      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002588:	4b8f      	ldr	r3, [pc, #572]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	029b      	lsls	r3, r3, #10
 8002590:	4013      	ands	r3, r2
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0xe6>
 8002594:	e015      	b.n	80025c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7fe fed1 	bl	800133c <HAL_GetTick>
 800259a:	0003      	movs	r3, r0
 800259c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a0:	f7fe fecc 	bl	800133c <HAL_GetTick>
 80025a4:	0002      	movs	r2, r0
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	@ 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e2e4      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025b2:	4b85      	ldr	r3, [pc, #532]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	2380      	movs	r3, #128	@ 0x80
 80025b8:	029b      	lsls	r3, r3, #10
 80025ba:	4013      	ands	r3, r2
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x110>
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2202      	movs	r2, #2
 80025c8:	4013      	ands	r3, r2
 80025ca:	d100      	bne.n	80025ce <HAL_RCC_OscConfig+0x13e>
 80025cc:	e099      	b.n	8002702 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	2220      	movs	r2, #32
 80025d8:	4013      	ands	r3, r2
 80025da:	d009      	beq.n	80025f0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80025dc:	4b7a      	ldr	r3, [pc, #488]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b79      	ldr	r3, [pc, #484]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 80025e2:	2120      	movs	r1, #32
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80025e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ea:	2220      	movs	r2, #32
 80025ec:	4393      	bics	r3, r2
 80025ee:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	2b0c      	cmp	r3, #12
 80025fa:	d13e      	bne.n	800267a <HAL_RCC_OscConfig+0x1ea>
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d13b      	bne.n	800267a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002602:	4b71      	ldr	r3, [pc, #452]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2204      	movs	r2, #4
 8002608:	4013      	ands	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_RCC_OscConfig+0x186>
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e2b2      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002616:	4b6c      	ldr	r3, [pc, #432]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a6e      	ldr	r2, [pc, #440]	@ (80027d4 <HAL_RCC_OscConfig+0x344>)
 800261c:	4013      	ands	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	021a      	lsls	r2, r3, #8
 8002626:	4b68      	ldr	r3, [pc, #416]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002628:	430a      	orrs	r2, r1
 800262a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800262c:	4b66      	ldr	r3, [pc, #408]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2209      	movs	r2, #9
 8002632:	4393      	bics	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	4b64      	ldr	r3, [pc, #400]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800263a:	430a      	orrs	r2, r1
 800263c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800263e:	f000 fbeb 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002642:	0001      	movs	r1, r0
 8002644:	4b60      	ldr	r3, [pc, #384]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	220f      	movs	r2, #15
 800264c:	4013      	ands	r3, r2
 800264e:	4a62      	ldr	r2, [pc, #392]	@ (80027d8 <HAL_RCC_OscConfig+0x348>)
 8002650:	5cd3      	ldrb	r3, [r2, r3]
 8002652:	000a      	movs	r2, r1
 8002654:	40da      	lsrs	r2, r3
 8002656:	4b61      	ldr	r3, [pc, #388]	@ (80027dc <HAL_RCC_OscConfig+0x34c>)
 8002658:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800265a:	4b61      	ldr	r3, [pc, #388]	@ (80027e0 <HAL_RCC_OscConfig+0x350>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2513      	movs	r5, #19
 8002660:	197c      	adds	r4, r7, r5
 8002662:	0018      	movs	r0, r3
 8002664:	f7fe fe24 	bl	80012b0 <HAL_InitTick>
 8002668:	0003      	movs	r3, r0
 800266a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800266c:	197b      	adds	r3, r7, r5
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d046      	beq.n	8002702 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002674:	197b      	adds	r3, r7, r5
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	e280      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	2b00      	cmp	r3, #0
 800267e:	d027      	beq.n	80026d0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002680:	4b51      	ldr	r3, [pc, #324]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2209      	movs	r2, #9
 8002686:	4393      	bics	r3, r2
 8002688:	0019      	movs	r1, r3
 800268a:	4b4f      	ldr	r3, [pc, #316]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 800268c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002692:	f7fe fe53 	bl	800133c <HAL_GetTick>
 8002696:	0003      	movs	r3, r0
 8002698:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269c:	f7fe fe4e 	bl	800133c <HAL_GetTick>
 80026a0:	0002      	movs	r2, r0
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e266      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ae:	4b46      	ldr	r3, [pc, #280]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2204      	movs	r2, #4
 80026b4:	4013      	ands	r3, r2
 80026b6:	d0f1      	beq.n	800269c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b8:	4b43      	ldr	r3, [pc, #268]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a45      	ldr	r2, [pc, #276]	@ (80027d4 <HAL_RCC_OscConfig+0x344>)
 80026be:	4013      	ands	r3, r2
 80026c0:	0019      	movs	r1, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	021a      	lsls	r2, r3, #8
 80026c8:	4b3f      	ldr	r3, [pc, #252]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 80026ca:	430a      	orrs	r2, r1
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	e018      	b.n	8002702 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d0:	4b3d      	ldr	r3, [pc, #244]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b3c      	ldr	r3, [pc, #240]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 80026d6:	2101      	movs	r1, #1
 80026d8:	438a      	bics	r2, r1
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe fe2e 	bl	800133c <HAL_GetTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e6:	f7fe fe29 	bl	800133c <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e241      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026f8:	4b33      	ldr	r3, [pc, #204]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2204      	movs	r2, #4
 80026fe:	4013      	ands	r3, r2
 8002700:	d1f1      	bne.n	80026e6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2210      	movs	r2, #16
 8002708:	4013      	ands	r3, r2
 800270a:	d100      	bne.n	800270e <HAL_RCC_OscConfig+0x27e>
 800270c:	e0a1      	b.n	8002852 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d140      	bne.n	8002796 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002714:	4b2c      	ldr	r3, [pc, #176]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	2380      	movs	r3, #128	@ 0x80
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4013      	ands	r3, r2
 800271e:	d005      	beq.n	800272c <HAL_RCC_OscConfig+0x29c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e227      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800272c:	4b26      	ldr	r3, [pc, #152]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4a2c      	ldr	r2, [pc, #176]	@ (80027e4 <HAL_RCC_OscConfig+0x354>)
 8002732:	4013      	ands	r3, r2
 8002734:	0019      	movs	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1a      	ldr	r2, [r3, #32]
 800273a:	4b23      	ldr	r3, [pc, #140]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 800273c:	430a      	orrs	r2, r1
 800273e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002740:	4b21      	ldr	r3, [pc, #132]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	0a19      	lsrs	r1, r3, #8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	061a      	lsls	r2, r3, #24
 800274e:	4b1e      	ldr	r3, [pc, #120]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002750:	430a      	orrs	r2, r1
 8002752:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	0b5b      	lsrs	r3, r3, #13
 800275a:	3301      	adds	r3, #1
 800275c:	2280      	movs	r2, #128	@ 0x80
 800275e:	0212      	lsls	r2, r2, #8
 8002760:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002762:	4b19      	ldr	r3, [pc, #100]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	210f      	movs	r1, #15
 800276a:	400b      	ands	r3, r1
 800276c:	491a      	ldr	r1, [pc, #104]	@ (80027d8 <HAL_RCC_OscConfig+0x348>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002772:	4b1a      	ldr	r3, [pc, #104]	@ (80027dc <HAL_RCC_OscConfig+0x34c>)
 8002774:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002776:	4b1a      	ldr	r3, [pc, #104]	@ (80027e0 <HAL_RCC_OscConfig+0x350>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2513      	movs	r5, #19
 800277c:	197c      	adds	r4, r7, r5
 800277e:	0018      	movs	r0, r3
 8002780:	f7fe fd96 	bl	80012b0 <HAL_InitTick>
 8002784:	0003      	movs	r3, r0
 8002786:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002788:	197b      	adds	r3, r7, r5
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d060      	beq.n	8002852 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002790:	197b      	adds	r3, r7, r5
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	e1f2      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d03f      	beq.n	800281e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800279e:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <HAL_RCC_OscConfig+0x338>)
 80027a4:	2180      	movs	r1, #128	@ 0x80
 80027a6:	0049      	lsls	r1, r1, #1
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe fdc6 	bl	800133c <HAL_GetTick>
 80027b0:	0003      	movs	r3, r0
 80027b2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027b4:	e018      	b.n	80027e8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027b6:	f7fe fdc1 	bl	800133c <HAL_GetTick>
 80027ba:	0002      	movs	r2, r0
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d911      	bls.n	80027e8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e1d9      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
 80027c8:	40021000 	.word	0x40021000
 80027cc:	fffeffff 	.word	0xfffeffff
 80027d0:	fffbffff 	.word	0xfffbffff
 80027d4:	ffffe0ff 	.word	0xffffe0ff
 80027d8:	08004d40 	.word	0x08004d40
 80027dc:	20000000 	.word	0x20000000
 80027e0:	20000004 	.word	0x20000004
 80027e4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027e8:	4bc9      	ldr	r3, [pc, #804]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2380      	movs	r3, #128	@ 0x80
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4013      	ands	r3, r2
 80027f2:	d0e0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f4:	4bc6      	ldr	r3, [pc, #792]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4ac6      	ldr	r2, [pc, #792]	@ (8002b14 <HAL_RCC_OscConfig+0x684>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	0019      	movs	r1, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1a      	ldr	r2, [r3, #32]
 8002802:	4bc3      	ldr	r3, [pc, #780]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002804:	430a      	orrs	r2, r1
 8002806:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002808:	4bc1      	ldr	r3, [pc, #772]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	0a19      	lsrs	r1, r3, #8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	061a      	lsls	r2, r3, #24
 8002816:	4bbe      	ldr	r3, [pc, #760]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002818:	430a      	orrs	r2, r1
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	e019      	b.n	8002852 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800281e:	4bbc      	ldr	r3, [pc, #752]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4bbb      	ldr	r3, [pc, #748]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002824:	49bc      	ldr	r1, [pc, #752]	@ (8002b18 <HAL_RCC_OscConfig+0x688>)
 8002826:	400a      	ands	r2, r1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7fe fd87 	bl	800133c <HAL_GetTick>
 800282e:	0003      	movs	r3, r0
 8002830:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002834:	f7fe fd82 	bl	800133c <HAL_GetTick>
 8002838:	0002      	movs	r2, r0
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e19a      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002846:	4bb2      	ldr	r3, [pc, #712]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	@ 0x80
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4013      	ands	r3, r2
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2208      	movs	r2, #8
 8002858:	4013      	ands	r3, r2
 800285a:	d036      	beq.n	80028ca <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d019      	beq.n	8002898 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002864:	4baa      	ldr	r3, [pc, #680]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002866:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002868:	4ba9      	ldr	r3, [pc, #676]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 800286a:	2101      	movs	r1, #1
 800286c:	430a      	orrs	r2, r1
 800286e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002870:	f7fe fd64 	bl	800133c <HAL_GetTick>
 8002874:	0003      	movs	r3, r0
 8002876:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800287a:	f7fe fd5f 	bl	800133c <HAL_GetTick>
 800287e:	0002      	movs	r2, r0
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e177      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800288c:	4ba0      	ldr	r3, [pc, #640]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 800288e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002890:	2202      	movs	r2, #2
 8002892:	4013      	ands	r3, r2
 8002894:	d0f1      	beq.n	800287a <HAL_RCC_OscConfig+0x3ea>
 8002896:	e018      	b.n	80028ca <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002898:	4b9d      	ldr	r3, [pc, #628]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 800289a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800289c:	4b9c      	ldr	r3, [pc, #624]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 800289e:	2101      	movs	r1, #1
 80028a0:	438a      	bics	r2, r1
 80028a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a4:	f7fe fd4a 	bl	800133c <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ae:	f7fe fd45 	bl	800133c <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e15d      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028c0:	4b93      	ldr	r3, [pc, #588]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 80028c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c4:	2202      	movs	r2, #2
 80028c6:	4013      	ands	r3, r2
 80028c8:	d1f1      	bne.n	80028ae <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2204      	movs	r2, #4
 80028d0:	4013      	ands	r3, r2
 80028d2:	d100      	bne.n	80028d6 <HAL_RCC_OscConfig+0x446>
 80028d4:	e0ae      	b.n	8002a34 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d6:	2023      	movs	r0, #35	@ 0x23
 80028d8:	183b      	adds	r3, r7, r0
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028de:	4b8c      	ldr	r3, [pc, #560]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 80028e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028e2:	2380      	movs	r3, #128	@ 0x80
 80028e4:	055b      	lsls	r3, r3, #21
 80028e6:	4013      	ands	r3, r2
 80028e8:	d109      	bne.n	80028fe <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	4b89      	ldr	r3, [pc, #548]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 80028ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028ee:	4b88      	ldr	r3, [pc, #544]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 80028f0:	2180      	movs	r1, #128	@ 0x80
 80028f2:	0549      	lsls	r1, r1, #21
 80028f4:	430a      	orrs	r2, r1
 80028f6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80028f8:	183b      	adds	r3, r7, r0
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fe:	4b87      	ldr	r3, [pc, #540]	@ (8002b1c <HAL_RCC_OscConfig+0x68c>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	2380      	movs	r3, #128	@ 0x80
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4013      	ands	r3, r2
 8002908:	d11a      	bne.n	8002940 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800290a:	4b84      	ldr	r3, [pc, #528]	@ (8002b1c <HAL_RCC_OscConfig+0x68c>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b83      	ldr	r3, [pc, #524]	@ (8002b1c <HAL_RCC_OscConfig+0x68c>)
 8002910:	2180      	movs	r1, #128	@ 0x80
 8002912:	0049      	lsls	r1, r1, #1
 8002914:	430a      	orrs	r2, r1
 8002916:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002918:	f7fe fd10 	bl	800133c <HAL_GetTick>
 800291c:	0003      	movs	r3, r0
 800291e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002922:	f7fe fd0b 	bl	800133c <HAL_GetTick>
 8002926:	0002      	movs	r2, r0
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b64      	cmp	r3, #100	@ 0x64
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e123      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	4b79      	ldr	r3, [pc, #484]	@ (8002b1c <HAL_RCC_OscConfig+0x68c>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	2380      	movs	r3, #128	@ 0x80
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4013      	ands	r3, r2
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	2380      	movs	r3, #128	@ 0x80
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	429a      	cmp	r2, r3
 800294a:	d107      	bne.n	800295c <HAL_RCC_OscConfig+0x4cc>
 800294c:	4b70      	ldr	r3, [pc, #448]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 800294e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002950:	4b6f      	ldr	r3, [pc, #444]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002952:	2180      	movs	r1, #128	@ 0x80
 8002954:	0049      	lsls	r1, r1, #1
 8002956:	430a      	orrs	r2, r1
 8002958:	651a      	str	r2, [r3, #80]	@ 0x50
 800295a:	e031      	b.n	80029c0 <HAL_RCC_OscConfig+0x530>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10c      	bne.n	800297e <HAL_RCC_OscConfig+0x4ee>
 8002964:	4b6a      	ldr	r3, [pc, #424]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002966:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002968:	4b69      	ldr	r3, [pc, #420]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 800296a:	496b      	ldr	r1, [pc, #428]	@ (8002b18 <HAL_RCC_OscConfig+0x688>)
 800296c:	400a      	ands	r2, r1
 800296e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002970:	4b67      	ldr	r3, [pc, #412]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002972:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002974:	4b66      	ldr	r3, [pc, #408]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002976:	496a      	ldr	r1, [pc, #424]	@ (8002b20 <HAL_RCC_OscConfig+0x690>)
 8002978:	400a      	ands	r2, r1
 800297a:	651a      	str	r2, [r3, #80]	@ 0x50
 800297c:	e020      	b.n	80029c0 <HAL_RCC_OscConfig+0x530>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	23a0      	movs	r3, #160	@ 0xa0
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	429a      	cmp	r2, r3
 8002988:	d10e      	bne.n	80029a8 <HAL_RCC_OscConfig+0x518>
 800298a:	4b61      	ldr	r3, [pc, #388]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 800298c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800298e:	4b60      	ldr	r3, [pc, #384]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002990:	2180      	movs	r1, #128	@ 0x80
 8002992:	00c9      	lsls	r1, r1, #3
 8002994:	430a      	orrs	r2, r1
 8002996:	651a      	str	r2, [r3, #80]	@ 0x50
 8002998:	4b5d      	ldr	r3, [pc, #372]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 800299a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800299c:	4b5c      	ldr	r3, [pc, #368]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 800299e:	2180      	movs	r1, #128	@ 0x80
 80029a0:	0049      	lsls	r1, r1, #1
 80029a2:	430a      	orrs	r2, r1
 80029a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80029a6:	e00b      	b.n	80029c0 <HAL_RCC_OscConfig+0x530>
 80029a8:	4b59      	ldr	r3, [pc, #356]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 80029aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029ac:	4b58      	ldr	r3, [pc, #352]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 80029ae:	495a      	ldr	r1, [pc, #360]	@ (8002b18 <HAL_RCC_OscConfig+0x688>)
 80029b0:	400a      	ands	r2, r1
 80029b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80029b4:	4b56      	ldr	r3, [pc, #344]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 80029b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029b8:	4b55      	ldr	r3, [pc, #340]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 80029ba:	4959      	ldr	r1, [pc, #356]	@ (8002b20 <HAL_RCC_OscConfig+0x690>)
 80029bc:	400a      	ands	r2, r1
 80029be:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d015      	beq.n	80029f4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c8:	f7fe fcb8 	bl	800133c <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029d0:	e009      	b.n	80029e6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7fe fcb3 	bl	800133c <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	4a51      	ldr	r2, [pc, #324]	@ (8002b24 <HAL_RCC_OscConfig+0x694>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e0ca      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 80029e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029ea:	2380      	movs	r3, #128	@ 0x80
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4013      	ands	r3, r2
 80029f0:	d0ef      	beq.n	80029d2 <HAL_RCC_OscConfig+0x542>
 80029f2:	e014      	b.n	8002a1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f4:	f7fe fca2 	bl	800133c <HAL_GetTick>
 80029f8:	0003      	movs	r3, r0
 80029fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029fc:	e009      	b.n	8002a12 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fe fc9d 	bl	800133c <HAL_GetTick>
 8002a02:	0002      	movs	r2, r0
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	4a46      	ldr	r2, [pc, #280]	@ (8002b24 <HAL_RCC_OscConfig+0x694>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0b4      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a12:	4b3f      	ldr	r3, [pc, #252]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002a14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a16:	2380      	movs	r3, #128	@ 0x80
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d1ef      	bne.n	80029fe <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a1e:	2323      	movs	r3, #35	@ 0x23
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d105      	bne.n	8002a34 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a28:	4b39      	ldr	r3, [pc, #228]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002a2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a2c:	4b38      	ldr	r3, [pc, #224]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002a2e:	493e      	ldr	r1, [pc, #248]	@ (8002b28 <HAL_RCC_OscConfig+0x698>)
 8002a30:	400a      	ands	r2, r1
 8002a32:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d100      	bne.n	8002a3e <HAL_RCC_OscConfig+0x5ae>
 8002a3c:	e09d      	b.n	8002b7a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	2b0c      	cmp	r3, #12
 8002a42:	d100      	bne.n	8002a46 <HAL_RCC_OscConfig+0x5b6>
 8002a44:	e076      	b.n	8002b34 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d145      	bne.n	8002ada <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4e:	4b30      	ldr	r3, [pc, #192]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4b2f      	ldr	r3, [pc, #188]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002a54:	4935      	ldr	r1, [pc, #212]	@ (8002b2c <HAL_RCC_OscConfig+0x69c>)
 8002a56:	400a      	ands	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fc6f 	bl	800133c <HAL_GetTick>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fe fc6a 	bl	800133c <HAL_GetTick>
 8002a68:	0002      	movs	r2, r0
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e082      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a76:	4b26      	ldr	r3, [pc, #152]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	2380      	movs	r3, #128	@ 0x80
 8002a7c:	049b      	lsls	r3, r3, #18
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a82:	4b23      	ldr	r3, [pc, #140]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	4a2a      	ldr	r2, [pc, #168]	@ (8002b30 <HAL_RCC_OscConfig+0x6a0>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002aa8:	2180      	movs	r1, #128	@ 0x80
 8002aaa:	0449      	lsls	r1, r1, #17
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fc44 	bl	800133c <HAL_GetTick>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aba:	f7fe fc3f 	bl	800133c <HAL_GetTick>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e057      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002acc:	4b10      	ldr	r3, [pc, #64]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2380      	movs	r3, #128	@ 0x80
 8002ad2:	049b      	lsls	r3, r3, #18
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d0f0      	beq.n	8002aba <HAL_RCC_OscConfig+0x62a>
 8002ad8:	e04f      	b.n	8002b7a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ada:	4b0d      	ldr	r3, [pc, #52]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002ae0:	4912      	ldr	r1, [pc, #72]	@ (8002b2c <HAL_RCC_OscConfig+0x69c>)
 8002ae2:	400a      	ands	r2, r1
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fc29 	bl	800133c <HAL_GetTick>
 8002aea:	0003      	movs	r3, r0
 8002aec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af0:	f7fe fc24 	bl	800133c <HAL_GetTick>
 8002af4:	0002      	movs	r2, r0
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e03c      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b02:	4b03      	ldr	r3, [pc, #12]	@ (8002b10 <HAL_RCC_OscConfig+0x680>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	2380      	movs	r3, #128	@ 0x80
 8002b08:	049b      	lsls	r3, r3, #18
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x660>
 8002b0e:	e034      	b.n	8002b7a <HAL_RCC_OscConfig+0x6ea>
 8002b10:	40021000 	.word	0x40021000
 8002b14:	ffff1fff 	.word	0xffff1fff
 8002b18:	fffffeff 	.word	0xfffffeff
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	fffffbff 	.word	0xfffffbff
 8002b24:	00001388 	.word	0x00001388
 8002b28:	efffffff 	.word	0xefffffff
 8002b2c:	feffffff 	.word	0xfeffffff
 8002b30:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e01d      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b40:	4b10      	ldr	r3, [pc, #64]	@ (8002b84 <HAL_RCC_OscConfig+0x6f4>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	2380      	movs	r3, #128	@ 0x80
 8002b4a:	025b      	lsls	r3, r3, #9
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d10f      	bne.n	8002b76 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	23f0      	movs	r3, #240	@ 0xf0
 8002b5a:	039b      	lsls	r3, r3, #14
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	23c0      	movs	r3, #192	@ 0xc0
 8002b6a:	041b      	lsls	r3, r3, #16
 8002b6c:	401a      	ands	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b00a      	add	sp, #40	@ 0x28
 8002b82:	bdb0      	pop	{r4, r5, r7, pc}
 8002b84:	40021000 	.word	0x40021000

08002b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b88:	b5b0      	push	{r4, r5, r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e128      	b.n	8002dee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b9c:	4b96      	ldr	r3, [pc, #600]	@ (8002df8 <HAL_RCC_ClockConfig+0x270>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d91e      	bls.n	8002be8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002baa:	4b93      	ldr	r3, [pc, #588]	@ (8002df8 <HAL_RCC_ClockConfig+0x270>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	4393      	bics	r3, r2
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	4b90      	ldr	r3, [pc, #576]	@ (8002df8 <HAL_RCC_ClockConfig+0x270>)
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fbbe 	bl	800133c <HAL_GetTick>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc4:	e009      	b.n	8002bda <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc6:	f7fe fbb9 	bl	800133c <HAL_GetTick>
 8002bca:	0002      	movs	r2, r0
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	4a8a      	ldr	r2, [pc, #552]	@ (8002dfc <HAL_RCC_ClockConfig+0x274>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e109      	b.n	8002dee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b87      	ldr	r3, [pc, #540]	@ (8002df8 <HAL_RCC_ClockConfig+0x270>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2201      	movs	r2, #1
 8002be0:	4013      	ands	r3, r2
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d1ee      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2202      	movs	r2, #2
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d009      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf2:	4b83      	ldr	r3, [pc, #524]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	22f0      	movs	r2, #240	@ 0xf0
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	4b7f      	ldr	r3, [pc, #508]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002c02:	430a      	orrs	r2, r1
 8002c04:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d100      	bne.n	8002c12 <HAL_RCC_ClockConfig+0x8a>
 8002c10:	e089      	b.n	8002d26 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c1a:	4b79      	ldr	r3, [pc, #484]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	029b      	lsls	r3, r3, #10
 8002c22:	4013      	ands	r3, r2
 8002c24:	d120      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0e1      	b.n	8002dee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c32:	4b73      	ldr	r3, [pc, #460]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	2380      	movs	r3, #128	@ 0x80
 8002c38:	049b      	lsls	r3, r3, #18
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d114      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e0d5      	b.n	8002dee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d106      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c4a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2204      	movs	r2, #4
 8002c50:	4013      	ands	r3, r2
 8002c52:	d109      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0ca      	b.n	8002dee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c58:	4b69      	ldr	r3, [pc, #420]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2380      	movs	r3, #128	@ 0x80
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4013      	ands	r3, r2
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0c2      	b.n	8002dee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c68:	4b65      	ldr	r3, [pc, #404]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	4393      	bics	r3, r2
 8002c70:	0019      	movs	r1, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	4b62      	ldr	r3, [pc, #392]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c7c:	f7fe fb5e 	bl	800133c <HAL_GetTick>
 8002c80:	0003      	movs	r3, r0
 8002c82:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d111      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c8c:	e009      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c8e:	f7fe fb55 	bl	800133c <HAL_GetTick>
 8002c92:	0002      	movs	r2, r0
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	4a58      	ldr	r2, [pc, #352]	@ (8002dfc <HAL_RCC_ClockConfig+0x274>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e0a5      	b.n	8002dee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca2:	4b57      	ldr	r3, [pc, #348]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	220c      	movs	r2, #12
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d1ef      	bne.n	8002c8e <HAL_RCC_ClockConfig+0x106>
 8002cae:	e03a      	b.n	8002d26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d111      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cb8:	e009      	b.n	8002cce <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cba:	f7fe fb3f 	bl	800133c <HAL_GetTick>
 8002cbe:	0002      	movs	r2, r0
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	4a4d      	ldr	r2, [pc, #308]	@ (8002dfc <HAL_RCC_ClockConfig+0x274>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e08f      	b.n	8002dee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cce:	4b4c      	ldr	r3, [pc, #304]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	220c      	movs	r2, #12
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	d1ef      	bne.n	8002cba <HAL_RCC_ClockConfig+0x132>
 8002cda:	e024      	b.n	8002d26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d11b      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ce4:	e009      	b.n	8002cfa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce6:	f7fe fb29 	bl	800133c <HAL_GetTick>
 8002cea:	0002      	movs	r2, r0
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	4a42      	ldr	r2, [pc, #264]	@ (8002dfc <HAL_RCC_ClockConfig+0x274>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e079      	b.n	8002dee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cfa:	4b41      	ldr	r3, [pc, #260]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	220c      	movs	r2, #12
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d1ef      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0x15e>
 8002d06:	e00e      	b.n	8002d26 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d08:	f7fe fb18 	bl	800133c <HAL_GetTick>
 8002d0c:	0002      	movs	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	4a3a      	ldr	r2, [pc, #232]	@ (8002dfc <HAL_RCC_ClockConfig+0x274>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e068      	b.n	8002dee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d1c:	4b38      	ldr	r3, [pc, #224]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	220c      	movs	r2, #12
 8002d22:	4013      	ands	r3, r2
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d26:	4b34      	ldr	r3, [pc, #208]	@ (8002df8 <HAL_RCC_ClockConfig+0x270>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d21e      	bcs.n	8002d72 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d34:	4b30      	ldr	r3, [pc, #192]	@ (8002df8 <HAL_RCC_ClockConfig+0x270>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	4393      	bics	r3, r2
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	4b2e      	ldr	r3, [pc, #184]	@ (8002df8 <HAL_RCC_ClockConfig+0x270>)
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d46:	f7fe faf9 	bl	800133c <HAL_GetTick>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	e009      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d50:	f7fe faf4 	bl	800133c <HAL_GetTick>
 8002d54:	0002      	movs	r2, r0
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	4a28      	ldr	r2, [pc, #160]	@ (8002dfc <HAL_RCC_ClockConfig+0x274>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e044      	b.n	8002dee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d64:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <HAL_RCC_ClockConfig+0x270>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d1ee      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2204      	movs	r2, #4
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d009      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d7c:	4b20      	ldr	r3, [pc, #128]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4a20      	ldr	r2, [pc, #128]	@ (8002e04 <HAL_RCC_ClockConfig+0x27c>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	0019      	movs	r1, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2208      	movs	r2, #8
 8002d96:	4013      	ands	r3, r2
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d9a:	4b19      	ldr	r3, [pc, #100]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8002e08 <HAL_RCC_ClockConfig+0x280>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	0019      	movs	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	00da      	lsls	r2, r3, #3
 8002daa:	4b15      	ldr	r3, [pc, #84]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002dac:	430a      	orrs	r2, r1
 8002dae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002db0:	f000 f832 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002db4:	0001      	movs	r1, r0
 8002db6:	4b12      	ldr	r3, [pc, #72]	@ (8002e00 <HAL_RCC_ClockConfig+0x278>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	220f      	movs	r2, #15
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	4a12      	ldr	r2, [pc, #72]	@ (8002e0c <HAL_RCC_ClockConfig+0x284>)
 8002dc2:	5cd3      	ldrb	r3, [r2, r3]
 8002dc4:	000a      	movs	r2, r1
 8002dc6:	40da      	lsrs	r2, r3
 8002dc8:	4b11      	ldr	r3, [pc, #68]	@ (8002e10 <HAL_RCC_ClockConfig+0x288>)
 8002dca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dcc:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <HAL_RCC_ClockConfig+0x28c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	250b      	movs	r5, #11
 8002dd2:	197c      	adds	r4, r7, r5
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7fe fa6b 	bl	80012b0 <HAL_InitTick>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002dde:	197b      	adds	r3, r7, r5
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002de6:	197b      	adds	r3, r7, r5
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	e000      	b.n	8002dee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b004      	add	sp, #16
 8002df4:	bdb0      	pop	{r4, r5, r7, pc}
 8002df6:	46c0      	nop			@ (mov r8, r8)
 8002df8:	40022000 	.word	0x40022000
 8002dfc:	00001388 	.word	0x00001388
 8002e00:	40021000 	.word	0x40021000
 8002e04:	fffff8ff 	.word	0xfffff8ff
 8002e08:	ffffc7ff 	.word	0xffffc7ff
 8002e0c:	08004d40 	.word	0x08004d40
 8002e10:	20000000 	.word	0x20000000
 8002e14:	20000004 	.word	0x20000004

08002e18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e18:	b5b0      	push	{r4, r5, r7, lr}
 8002e1a:	b08e      	sub	sp, #56	@ 0x38
 8002e1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002e1e:	4b4c      	ldr	r3, [pc, #304]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e26:	230c      	movs	r3, #12
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b0c      	cmp	r3, #12
 8002e2c:	d014      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x40>
 8002e2e:	d900      	bls.n	8002e32 <HAL_RCC_GetSysClockFreq+0x1a>
 8002e30:	e07b      	b.n	8002f2a <HAL_RCC_GetSysClockFreq+0x112>
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d002      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x24>
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d00b      	beq.n	8002e52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e3a:	e076      	b.n	8002f2a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e3c:	4b44      	ldr	r3, [pc, #272]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2210      	movs	r2, #16
 8002e42:	4013      	ands	r3, r2
 8002e44:	d002      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002e46:	4b43      	ldr	r3, [pc, #268]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e48:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002e4a:	e07c      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002e4c:	4b42      	ldr	r3, [pc, #264]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x140>)
 8002e4e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002e50:	e079      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e52:	4b42      	ldr	r3, [pc, #264]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x144>)
 8002e54:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002e56:	e076      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5a:	0c9a      	lsrs	r2, r3, #18
 8002e5c:	230f      	movs	r3, #15
 8002e5e:	401a      	ands	r2, r3
 8002e60:	4b3f      	ldr	r3, [pc, #252]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x148>)
 8002e62:	5c9b      	ldrb	r3, [r3, r2]
 8002e64:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e68:	0d9a      	lsrs	r2, r3, #22
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	3301      	adds	r3, #1
 8002e70:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e72:	4b37      	ldr	r3, [pc, #220]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	2380      	movs	r3, #128	@ 0x80
 8002e78:	025b      	lsls	r3, r3, #9
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d01a      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	4a35      	ldr	r2, [pc, #212]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x144>)
 8002e88:	2300      	movs	r3, #0
 8002e8a:	69b8      	ldr	r0, [r7, #24]
 8002e8c:	69f9      	ldr	r1, [r7, #28]
 8002e8e:	f7fd f9f1 	bl	8000274 <__aeabi_lmul>
 8002e92:	0002      	movs	r2, r0
 8002e94:	000b      	movs	r3, r1
 8002e96:	0010      	movs	r0, r2
 8002e98:	0019      	movs	r1, r3
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f7fd f9c5 	bl	8000234 <__aeabi_uldivmod>
 8002eaa:	0002      	movs	r2, r0
 8002eac:	000b      	movs	r3, r1
 8002eae:	0013      	movs	r3, r2
 8002eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eb2:	e037      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002eb4:	4b26      	ldr	r3, [pc, #152]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2210      	movs	r2, #16
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d01a      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4a23      	ldr	r2, [pc, #140]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ec8:	2300      	movs	r3, #0
 8002eca:	68b8      	ldr	r0, [r7, #8]
 8002ecc:	68f9      	ldr	r1, [r7, #12]
 8002ece:	f7fd f9d1 	bl	8000274 <__aeabi_lmul>
 8002ed2:	0002      	movs	r2, r0
 8002ed4:	000b      	movs	r3, r1
 8002ed6:	0010      	movs	r0, r2
 8002ed8:	0019      	movs	r1, r3
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	603b      	str	r3, [r7, #0]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f7fd f9a5 	bl	8000234 <__aeabi_uldivmod>
 8002eea:	0002      	movs	r2, r0
 8002eec:	000b      	movs	r3, r1
 8002eee:	0013      	movs	r3, r2
 8002ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ef2:	e017      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	2300      	movs	r3, #0
 8002efa:	0019      	movs	r1, r3
 8002efc:	4a16      	ldr	r2, [pc, #88]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x140>)
 8002efe:	2300      	movs	r3, #0
 8002f00:	f7fd f9b8 	bl	8000274 <__aeabi_lmul>
 8002f04:	0002      	movs	r2, r0
 8002f06:	000b      	movs	r3, r1
 8002f08:	0010      	movs	r0, r2
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	001c      	movs	r4, r3
 8002f10:	2300      	movs	r3, #0
 8002f12:	001d      	movs	r5, r3
 8002f14:	0022      	movs	r2, r4
 8002f16:	002b      	movs	r3, r5
 8002f18:	f7fd f98c 	bl	8000234 <__aeabi_uldivmod>
 8002f1c:	0002      	movs	r2, r0
 8002f1e:	000b      	movs	r3, r1
 8002f20:	0013      	movs	r3, r2
 8002f22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f26:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002f28:	e00d      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f2a:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	0b5b      	lsrs	r3, r3, #13
 8002f30:	2207      	movs	r2, #7
 8002f32:	4013      	ands	r3, r2
 8002f34:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	2280      	movs	r2, #128	@ 0x80
 8002f3c:	0212      	lsls	r2, r2, #8
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	0013      	movs	r3, r2
 8002f42:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002f44:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b00e      	add	sp, #56	@ 0x38
 8002f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	003d0900 	.word	0x003d0900
 8002f58:	00f42400 	.word	0x00f42400
 8002f5c:	007a1200 	.word	0x007a1200
 8002f60:	08004d58 	.word	0x08004d58

08002f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f68:	4b02      	ldr	r3, [pc, #8]	@ (8002f74 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			@ (mov r8, r8)
 8002f74:	20000000 	.word	0x20000000

08002f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f7c:	f7ff fff2 	bl	8002f64 <HAL_RCC_GetHCLKFreq>
 8002f80:	0001      	movs	r1, r0
 8002f82:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	2207      	movs	r2, #7
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	4a04      	ldr	r2, [pc, #16]	@ (8002fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f8e:	5cd3      	ldrb	r3, [r2, r3]
 8002f90:	40d9      	lsrs	r1, r3
 8002f92:	000b      	movs	r3, r1
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	08004d50 	.word	0x08004d50

08002fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fa8:	f7ff ffdc 	bl	8002f64 <HAL_RCC_GetHCLKFreq>
 8002fac:	0001      	movs	r1, r0
 8002fae:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	0adb      	lsrs	r3, r3, #11
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	4a04      	ldr	r2, [pc, #16]	@ (8002fcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fba:	5cd3      	ldrb	r3, [r2, r3]
 8002fbc:	40d9      	lsrs	r1, r3
 8002fbe:	000b      	movs	r3, r1
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	08004d50 	.word	0x08004d50

08002fd0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002fd8:	2017      	movs	r0, #23
 8002fda:	183b      	adds	r3, r7, r0
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d100      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002fea:	e0c7      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fec:	4b84      	ldr	r3, [pc, #528]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ff0:	2380      	movs	r3, #128	@ 0x80
 8002ff2:	055b      	lsls	r3, r3, #21
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d109      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff8:	4b81      	ldr	r3, [pc, #516]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ffa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ffc:	4b80      	ldr	r3, [pc, #512]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ffe:	2180      	movs	r1, #128	@ 0x80
 8003000:	0549      	lsls	r1, r1, #21
 8003002:	430a      	orrs	r2, r1
 8003004:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003006:	183b      	adds	r3, r7, r0
 8003008:	2201      	movs	r2, #1
 800300a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	4b7d      	ldr	r3, [pc, #500]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2380      	movs	r3, #128	@ 0x80
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4013      	ands	r3, r2
 8003016:	d11a      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003018:	4b7a      	ldr	r3, [pc, #488]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b79      	ldr	r3, [pc, #484]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800301e:	2180      	movs	r1, #128	@ 0x80
 8003020:	0049      	lsls	r1, r1, #1
 8003022:	430a      	orrs	r2, r1
 8003024:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003026:	f7fe f989 	bl	800133c <HAL_GetTick>
 800302a:	0003      	movs	r3, r0
 800302c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302e:	e008      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003030:	f7fe f984 	bl	800133c <HAL_GetTick>
 8003034:	0002      	movs	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	@ 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e0d9      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003042:	4b70      	ldr	r3, [pc, #448]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	2380      	movs	r3, #128	@ 0x80
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4013      	ands	r3, r2
 800304c:	d0f0      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800304e:	4b6c      	ldr	r3, [pc, #432]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	23c0      	movs	r3, #192	@ 0xc0
 8003054:	039b      	lsls	r3, r3, #14
 8003056:	4013      	ands	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	23c0      	movs	r3, #192	@ 0xc0
 8003060:	039b      	lsls	r3, r3, #14
 8003062:	4013      	ands	r3, r2
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	429a      	cmp	r2, r3
 8003068:	d013      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	23c0      	movs	r3, #192	@ 0xc0
 8003070:	029b      	lsls	r3, r3, #10
 8003072:	401a      	ands	r2, r3
 8003074:	23c0      	movs	r3, #192	@ 0xc0
 8003076:	029b      	lsls	r3, r3, #10
 8003078:	429a      	cmp	r2, r3
 800307a:	d10a      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800307c:	4b60      	ldr	r3, [pc, #384]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	2380      	movs	r3, #128	@ 0x80
 8003082:	029b      	lsls	r3, r3, #10
 8003084:	401a      	ands	r2, r3
 8003086:	2380      	movs	r3, #128	@ 0x80
 8003088:	029b      	lsls	r3, r3, #10
 800308a:	429a      	cmp	r2, r3
 800308c:	d101      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e0b1      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003092:	4b5b      	ldr	r3, [pc, #364]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003094:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003096:	23c0      	movs	r3, #192	@ 0xc0
 8003098:	029b      	lsls	r3, r3, #10
 800309a:	4013      	ands	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d03b      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	23c0      	movs	r3, #192	@ 0xc0
 80030aa:	029b      	lsls	r3, r3, #10
 80030ac:	4013      	ands	r3, r2
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d033      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2220      	movs	r2, #32
 80030ba:	4013      	ands	r3, r2
 80030bc:	d02e      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80030be:	4b50      	ldr	r3, [pc, #320]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c2:	4a51      	ldr	r2, [pc, #324]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030ce:	2180      	movs	r1, #128	@ 0x80
 80030d0:	0309      	lsls	r1, r1, #12
 80030d2:	430a      	orrs	r2, r1
 80030d4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030da:	4b49      	ldr	r3, [pc, #292]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030dc:	494b      	ldr	r1, [pc, #300]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80030de:	400a      	ands	r2, r1
 80030e0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80030e2:	4b47      	ldr	r3, [pc, #284]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	2380      	movs	r3, #128	@ 0x80
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4013      	ands	r3, r2
 80030f0:	d014      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f2:	f7fe f923 	bl	800133c <HAL_GetTick>
 80030f6:	0003      	movs	r3, r0
 80030f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030fa:	e009      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fc:	f7fe f91e 	bl	800133c <HAL_GetTick>
 8003100:	0002      	movs	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	4a42      	ldr	r2, [pc, #264]	@ (8003210 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d901      	bls.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e072      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003110:	4b3b      	ldr	r3, [pc, #236]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003112:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003114:	2380      	movs	r3, #128	@ 0x80
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4013      	ands	r3, r2
 800311a:	d0ef      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2220      	movs	r2, #32
 8003122:	4013      	ands	r3, r2
 8003124:	d01f      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	23c0      	movs	r3, #192	@ 0xc0
 800312c:	029b      	lsls	r3, r3, #10
 800312e:	401a      	ands	r2, r3
 8003130:	23c0      	movs	r3, #192	@ 0xc0
 8003132:	029b      	lsls	r3, r3, #10
 8003134:	429a      	cmp	r2, r3
 8003136:	d10c      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003138:	4b31      	ldr	r3, [pc, #196]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a35      	ldr	r2, [pc, #212]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800313e:	4013      	ands	r3, r2
 8003140:	0019      	movs	r1, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	23c0      	movs	r3, #192	@ 0xc0
 8003148:	039b      	lsls	r3, r3, #14
 800314a:	401a      	ands	r2, r3
 800314c:	4b2c      	ldr	r3, [pc, #176]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800314e:	430a      	orrs	r2, r1
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	4b2b      	ldr	r3, [pc, #172]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003154:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	23c0      	movs	r3, #192	@ 0xc0
 800315c:	029b      	lsls	r3, r3, #10
 800315e:	401a      	ands	r2, r3
 8003160:	4b27      	ldr	r3, [pc, #156]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003162:	430a      	orrs	r2, r1
 8003164:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003166:	2317      	movs	r3, #23
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d105      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003170:	4b23      	ldr	r3, [pc, #140]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003172:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003174:	4b22      	ldr	r3, [pc, #136]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003176:	4928      	ldr	r1, [pc, #160]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003178:	400a      	ands	r2, r1
 800317a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2202      	movs	r2, #2
 8003182:	4013      	ands	r3, r2
 8003184:	d009      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003186:	4b1e      	ldr	r3, [pc, #120]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318a:	220c      	movs	r2, #12
 800318c:	4393      	bics	r3, r2
 800318e:	0019      	movs	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	4b1a      	ldr	r3, [pc, #104]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003196:	430a      	orrs	r2, r1
 8003198:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2204      	movs	r2, #4
 80031a0:	4013      	ands	r3, r2
 80031a2:	d009      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031a4:	4b16      	ldr	r3, [pc, #88]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a8:	4a1c      	ldr	r2, [pc, #112]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	0019      	movs	r1, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	4b13      	ldr	r3, [pc, #76]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031b4:	430a      	orrs	r2, r1
 80031b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2208      	movs	r2, #8
 80031be:	4013      	ands	r3, r2
 80031c0:	d009      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c6:	4a16      	ldr	r2, [pc, #88]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031d2:	430a      	orrs	r2, r1
 80031d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2280      	movs	r2, #128	@ 0x80
 80031dc:	4013      	ands	r3, r2
 80031de:	d009      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80031e0:	4b07      	ldr	r3, [pc, #28]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	0019      	movs	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	4b04      	ldr	r3, [pc, #16]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031f0:	430a      	orrs	r2, r1
 80031f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	0018      	movs	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b006      	add	sp, #24
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	40021000 	.word	0x40021000
 8003204:	40007000 	.word	0x40007000
 8003208:	fffcffff 	.word	0xfffcffff
 800320c:	fff7ffff 	.word	0xfff7ffff
 8003210:	00001388 	.word	0x00001388
 8003214:	ffcfffff 	.word	0xffcfffff
 8003218:	efffffff 	.word	0xefffffff
 800321c:	fffff3ff 	.word	0xfffff3ff
 8003220:	ffffcfff 	.word	0xffffcfff
 8003224:	fff3ffff 	.word	0xfff3ffff

08003228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e044      	b.n	80032c4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d107      	bne.n	8003252 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2278      	movs	r2, #120	@ 0x78
 8003246:	2100      	movs	r1, #0
 8003248:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	0018      	movs	r0, r3
 800324e:	f7fd fecb 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2224      	movs	r2, #36	@ 0x24
 8003256:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2101      	movs	r1, #1
 8003264:	438a      	bics	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	0018      	movs	r0, r3
 800326c:	f000 f8d0 	bl	8003410 <UART_SetConfig>
 8003270:	0003      	movs	r3, r0
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e024      	b.n	80032c4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	0018      	movs	r0, r3
 8003286:	f000 fb0d 	bl	80038a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	490d      	ldr	r1, [pc, #52]	@ (80032cc <HAL_UART_Init+0xa4>)
 8003296:	400a      	ands	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	212a      	movs	r1, #42	@ 0x2a
 80032a6:	438a      	bics	r2, r1
 80032a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2101      	movs	r1, #1
 80032b6:	430a      	orrs	r2, r1
 80032b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0018      	movs	r0, r3
 80032be:	f000 fba5 	bl	8003a0c <UART_CheckIdleState>
 80032c2:	0003      	movs	r3, r0
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b002      	add	sp, #8
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	ffffb7ff 	.word	0xffffb7ff

080032d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	@ 0x28
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	1dbb      	adds	r3, r7, #6
 80032de:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d000      	beq.n	80032ea <HAL_UART_Transmit+0x1a>
 80032e8:	e08c      	b.n	8003404 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_UART_Transmit+0x28>
 80032f0:	1dbb      	adds	r3, r7, #6
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e084      	b.n	8003406 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	2380      	movs	r3, #128	@ 0x80
 8003302:	015b      	lsls	r3, r3, #5
 8003304:	429a      	cmp	r2, r3
 8003306:	d109      	bne.n	800331c <HAL_UART_Transmit+0x4c>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d105      	bne.n	800331c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2201      	movs	r2, #1
 8003314:	4013      	ands	r3, r2
 8003316:	d001      	beq.n	800331c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e074      	b.n	8003406 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2284      	movs	r2, #132	@ 0x84
 8003320:	2100      	movs	r1, #0
 8003322:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2221      	movs	r2, #33	@ 0x21
 8003328:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800332a:	f7fe f807 	bl	800133c <HAL_GetTick>
 800332e:	0003      	movs	r3, r0
 8003330:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1dba      	adds	r2, r7, #6
 8003336:	2150      	movs	r1, #80	@ 0x50
 8003338:	8812      	ldrh	r2, [r2, #0]
 800333a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1dba      	adds	r2, r7, #6
 8003340:	2152      	movs	r1, #82	@ 0x52
 8003342:	8812      	ldrh	r2, [r2, #0]
 8003344:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	2380      	movs	r3, #128	@ 0x80
 800334c:	015b      	lsls	r3, r3, #5
 800334e:	429a      	cmp	r2, r3
 8003350:	d108      	bne.n	8003364 <HAL_UART_Transmit+0x94>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d104      	bne.n	8003364 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	e003      	b.n	800336c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003368:	2300      	movs	r3, #0
 800336a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800336c:	e02f      	b.n	80033ce <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	0013      	movs	r3, r2
 8003378:	2200      	movs	r2, #0
 800337a:	2180      	movs	r1, #128	@ 0x80
 800337c:	f000 fbee 	bl	8003b5c <UART_WaitOnFlagUntilTimeout>
 8003380:	1e03      	subs	r3, r0, #0
 8003382:	d004      	beq.n	800338e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e03b      	b.n	8003406 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10b      	bne.n	80033ac <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	001a      	movs	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	05d2      	lsls	r2, r2, #23
 80033a0:	0dd2      	lsrs	r2, r2, #23
 80033a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	3302      	adds	r3, #2
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	e007      	b.n	80033bc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	781a      	ldrb	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3301      	adds	r3, #1
 80033ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2252      	movs	r2, #82	@ 0x52
 80033c0:	5a9b      	ldrh	r3, [r3, r2]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b299      	uxth	r1, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2252      	movs	r2, #82	@ 0x52
 80033cc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2252      	movs	r2, #82	@ 0x52
 80033d2:	5a9b      	ldrh	r3, [r3, r2]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1c9      	bne.n	800336e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	0013      	movs	r3, r2
 80033e4:	2200      	movs	r2, #0
 80033e6:	2140      	movs	r1, #64	@ 0x40
 80033e8:	f000 fbb8 	bl	8003b5c <UART_WaitOnFlagUntilTimeout>
 80033ec:	1e03      	subs	r3, r0, #0
 80033ee:	d004      	beq.n	80033fa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e005      	b.n	8003406 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	e000      	b.n	8003406 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003404:	2302      	movs	r3, #2
  }
}
 8003406:	0018      	movs	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	b008      	add	sp, #32
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003410:	b5b0      	push	{r4, r5, r7, lr}
 8003412:	b08e      	sub	sp, #56	@ 0x38
 8003414:	af00      	add	r7, sp, #0
 8003416:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003418:	231a      	movs	r3, #26
 800341a:	2218      	movs	r2, #24
 800341c:	189b      	adds	r3, r3, r2
 800341e:	19db      	adds	r3, r3, r7
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	431a      	orrs	r2, r3
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	431a      	orrs	r2, r3
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	4313      	orrs	r3, r2
 800343a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4ab4      	ldr	r2, [pc, #720]	@ (8003714 <UART_SetConfig+0x304>)
 8003444:	4013      	ands	r3, r2
 8003446:	0019      	movs	r1, r3
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800344e:	430a      	orrs	r2, r1
 8003450:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	4aaf      	ldr	r2, [pc, #700]	@ (8003718 <UART_SetConfig+0x308>)
 800345a:	4013      	ands	r3, r2
 800345c:	0019      	movs	r1, r3
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4aa9      	ldr	r2, [pc, #676]	@ (800371c <UART_SetConfig+0x30c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003480:	4313      	orrs	r3, r2
 8003482:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	4aa5      	ldr	r2, [pc, #660]	@ (8003720 <UART_SetConfig+0x310>)
 800348c:	4013      	ands	r3, r2
 800348e:	0019      	movs	r1, r3
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003496:	430a      	orrs	r2, r1
 8003498:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4aa1      	ldr	r2, [pc, #644]	@ (8003724 <UART_SetConfig+0x314>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d131      	bne.n	8003508 <UART_SetConfig+0xf8>
 80034a4:	4ba0      	ldr	r3, [pc, #640]	@ (8003728 <UART_SetConfig+0x318>)
 80034a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a8:	220c      	movs	r2, #12
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b0c      	cmp	r3, #12
 80034ae:	d01d      	beq.n	80034ec <UART_SetConfig+0xdc>
 80034b0:	d823      	bhi.n	80034fa <UART_SetConfig+0xea>
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d00c      	beq.n	80034d0 <UART_SetConfig+0xc0>
 80034b6:	d820      	bhi.n	80034fa <UART_SetConfig+0xea>
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <UART_SetConfig+0xb2>
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d00e      	beq.n	80034de <UART_SetConfig+0xce>
 80034c0:	e01b      	b.n	80034fa <UART_SetConfig+0xea>
 80034c2:	231b      	movs	r3, #27
 80034c4:	2218      	movs	r2, #24
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	19db      	adds	r3, r3, r7
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e065      	b.n	800359c <UART_SetConfig+0x18c>
 80034d0:	231b      	movs	r3, #27
 80034d2:	2218      	movs	r2, #24
 80034d4:	189b      	adds	r3, r3, r2
 80034d6:	19db      	adds	r3, r3, r7
 80034d8:	2202      	movs	r2, #2
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	e05e      	b.n	800359c <UART_SetConfig+0x18c>
 80034de:	231b      	movs	r3, #27
 80034e0:	2218      	movs	r2, #24
 80034e2:	189b      	adds	r3, r3, r2
 80034e4:	19db      	adds	r3, r3, r7
 80034e6:	2204      	movs	r2, #4
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	e057      	b.n	800359c <UART_SetConfig+0x18c>
 80034ec:	231b      	movs	r3, #27
 80034ee:	2218      	movs	r2, #24
 80034f0:	189b      	adds	r3, r3, r2
 80034f2:	19db      	adds	r3, r3, r7
 80034f4:	2208      	movs	r2, #8
 80034f6:	701a      	strb	r2, [r3, #0]
 80034f8:	e050      	b.n	800359c <UART_SetConfig+0x18c>
 80034fa:	231b      	movs	r3, #27
 80034fc:	2218      	movs	r2, #24
 80034fe:	189b      	adds	r3, r3, r2
 8003500:	19db      	adds	r3, r3, r7
 8003502:	2210      	movs	r2, #16
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	e049      	b.n	800359c <UART_SetConfig+0x18c>
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a83      	ldr	r2, [pc, #524]	@ (800371c <UART_SetConfig+0x30c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d13e      	bne.n	8003590 <UART_SetConfig+0x180>
 8003512:	4b85      	ldr	r3, [pc, #532]	@ (8003728 <UART_SetConfig+0x318>)
 8003514:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003516:	23c0      	movs	r3, #192	@ 0xc0
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	4013      	ands	r3, r2
 800351c:	22c0      	movs	r2, #192	@ 0xc0
 800351e:	0112      	lsls	r2, r2, #4
 8003520:	4293      	cmp	r3, r2
 8003522:	d027      	beq.n	8003574 <UART_SetConfig+0x164>
 8003524:	22c0      	movs	r2, #192	@ 0xc0
 8003526:	0112      	lsls	r2, r2, #4
 8003528:	4293      	cmp	r3, r2
 800352a:	d82a      	bhi.n	8003582 <UART_SetConfig+0x172>
 800352c:	2280      	movs	r2, #128	@ 0x80
 800352e:	0112      	lsls	r2, r2, #4
 8003530:	4293      	cmp	r3, r2
 8003532:	d011      	beq.n	8003558 <UART_SetConfig+0x148>
 8003534:	2280      	movs	r2, #128	@ 0x80
 8003536:	0112      	lsls	r2, r2, #4
 8003538:	4293      	cmp	r3, r2
 800353a:	d822      	bhi.n	8003582 <UART_SetConfig+0x172>
 800353c:	2b00      	cmp	r3, #0
 800353e:	d004      	beq.n	800354a <UART_SetConfig+0x13a>
 8003540:	2280      	movs	r2, #128	@ 0x80
 8003542:	00d2      	lsls	r2, r2, #3
 8003544:	4293      	cmp	r3, r2
 8003546:	d00e      	beq.n	8003566 <UART_SetConfig+0x156>
 8003548:	e01b      	b.n	8003582 <UART_SetConfig+0x172>
 800354a:	231b      	movs	r3, #27
 800354c:	2218      	movs	r2, #24
 800354e:	189b      	adds	r3, r3, r2
 8003550:	19db      	adds	r3, r3, r7
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	e021      	b.n	800359c <UART_SetConfig+0x18c>
 8003558:	231b      	movs	r3, #27
 800355a:	2218      	movs	r2, #24
 800355c:	189b      	adds	r3, r3, r2
 800355e:	19db      	adds	r3, r3, r7
 8003560:	2202      	movs	r2, #2
 8003562:	701a      	strb	r2, [r3, #0]
 8003564:	e01a      	b.n	800359c <UART_SetConfig+0x18c>
 8003566:	231b      	movs	r3, #27
 8003568:	2218      	movs	r2, #24
 800356a:	189b      	adds	r3, r3, r2
 800356c:	19db      	adds	r3, r3, r7
 800356e:	2204      	movs	r2, #4
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	e013      	b.n	800359c <UART_SetConfig+0x18c>
 8003574:	231b      	movs	r3, #27
 8003576:	2218      	movs	r2, #24
 8003578:	189b      	adds	r3, r3, r2
 800357a:	19db      	adds	r3, r3, r7
 800357c:	2208      	movs	r2, #8
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	e00c      	b.n	800359c <UART_SetConfig+0x18c>
 8003582:	231b      	movs	r3, #27
 8003584:	2218      	movs	r2, #24
 8003586:	189b      	adds	r3, r3, r2
 8003588:	19db      	adds	r3, r3, r7
 800358a:	2210      	movs	r2, #16
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	e005      	b.n	800359c <UART_SetConfig+0x18c>
 8003590:	231b      	movs	r3, #27
 8003592:	2218      	movs	r2, #24
 8003594:	189b      	adds	r3, r3, r2
 8003596:	19db      	adds	r3, r3, r7
 8003598:	2210      	movs	r2, #16
 800359a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a5e      	ldr	r2, [pc, #376]	@ (800371c <UART_SetConfig+0x30c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d000      	beq.n	80035a8 <UART_SetConfig+0x198>
 80035a6:	e084      	b.n	80036b2 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035a8:	231b      	movs	r3, #27
 80035aa:	2218      	movs	r2, #24
 80035ac:	189b      	adds	r3, r3, r2
 80035ae:	19db      	adds	r3, r3, r7
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d01d      	beq.n	80035f2 <UART_SetConfig+0x1e2>
 80035b6:	dc20      	bgt.n	80035fa <UART_SetConfig+0x1ea>
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d015      	beq.n	80035e8 <UART_SetConfig+0x1d8>
 80035bc:	dc1d      	bgt.n	80035fa <UART_SetConfig+0x1ea>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <UART_SetConfig+0x1b8>
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d005      	beq.n	80035d2 <UART_SetConfig+0x1c2>
 80035c6:	e018      	b.n	80035fa <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035c8:	f7ff fcd6 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 80035cc:	0003      	movs	r3, r0
 80035ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80035d0:	e01c      	b.n	800360c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035d2:	4b55      	ldr	r3, [pc, #340]	@ (8003728 <UART_SetConfig+0x318>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2210      	movs	r2, #16
 80035d8:	4013      	ands	r3, r2
 80035da:	d002      	beq.n	80035e2 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80035dc:	4b53      	ldr	r3, [pc, #332]	@ (800372c <UART_SetConfig+0x31c>)
 80035de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80035e0:	e014      	b.n	800360c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80035e2:	4b53      	ldr	r3, [pc, #332]	@ (8003730 <UART_SetConfig+0x320>)
 80035e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80035e6:	e011      	b.n	800360c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035e8:	f7ff fc16 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 80035ec:	0003      	movs	r3, r0
 80035ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80035f0:	e00c      	b.n	800360c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035f2:	2380      	movs	r3, #128	@ 0x80
 80035f4:	021b      	lsls	r3, r3, #8
 80035f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80035f8:	e008      	b.n	800360c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80035fe:	231a      	movs	r3, #26
 8003600:	2218      	movs	r2, #24
 8003602:	189b      	adds	r3, r3, r2
 8003604:	19db      	adds	r3, r3, r7
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
        break;
 800360a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800360c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360e:	2b00      	cmp	r3, #0
 8003610:	d100      	bne.n	8003614 <UART_SetConfig+0x204>
 8003612:	e12f      	b.n	8003874 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	0013      	movs	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	189b      	adds	r3, r3, r2
 800361e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003620:	429a      	cmp	r2, r3
 8003622:	d305      	bcc.n	8003630 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800362a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800362c:	429a      	cmp	r2, r3
 800362e:	d906      	bls.n	800363e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003630:	231a      	movs	r3, #26
 8003632:	2218      	movs	r2, #24
 8003634:	189b      	adds	r3, r3, r2
 8003636:	19db      	adds	r3, r3, r7
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
 800363c:	e11a      	b.n	8003874 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800363e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	6939      	ldr	r1, [r7, #16]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	000b      	movs	r3, r1
 800364c:	0e1b      	lsrs	r3, r3, #24
 800364e:	0010      	movs	r0, r2
 8003650:	0205      	lsls	r5, r0, #8
 8003652:	431d      	orrs	r5, r3
 8003654:	000b      	movs	r3, r1
 8003656:	021c      	lsls	r4, r3, #8
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	085b      	lsrs	r3, r3, #1
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68b8      	ldr	r0, [r7, #8]
 8003666:	68f9      	ldr	r1, [r7, #12]
 8003668:	1900      	adds	r0, r0, r4
 800366a:	4169      	adcs	r1, r5
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	2300      	movs	r3, #0
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f7fc fddb 	bl	8000234 <__aeabi_uldivmod>
 800367e:	0002      	movs	r2, r0
 8003680:	000b      	movs	r3, r1
 8003682:	0013      	movs	r3, r2
 8003684:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003686:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003688:	23c0      	movs	r3, #192	@ 0xc0
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	429a      	cmp	r2, r3
 800368e:	d309      	bcc.n	80036a4 <UART_SetConfig+0x294>
 8003690:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003692:	2380      	movs	r3, #128	@ 0x80
 8003694:	035b      	lsls	r3, r3, #13
 8003696:	429a      	cmp	r2, r3
 8003698:	d204      	bcs.n	80036a4 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036a0:	60da      	str	r2, [r3, #12]
 80036a2:	e0e7      	b.n	8003874 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80036a4:	231a      	movs	r3, #26
 80036a6:	2218      	movs	r2, #24
 80036a8:	189b      	adds	r3, r3, r2
 80036aa:	19db      	adds	r3, r3, r7
 80036ac:	2201      	movs	r2, #1
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	e0e0      	b.n	8003874 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	69da      	ldr	r2, [r3, #28]
 80036b6:	2380      	movs	r3, #128	@ 0x80
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d000      	beq.n	80036c0 <UART_SetConfig+0x2b0>
 80036be:	e082      	b.n	80037c6 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80036c0:	231b      	movs	r3, #27
 80036c2:	2218      	movs	r2, #24
 80036c4:	189b      	adds	r3, r3, r2
 80036c6:	19db      	adds	r3, r3, r7
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d834      	bhi.n	8003738 <UART_SetConfig+0x328>
 80036ce:	009a      	lsls	r2, r3, #2
 80036d0:	4b18      	ldr	r3, [pc, #96]	@ (8003734 <UART_SetConfig+0x324>)
 80036d2:	18d3      	adds	r3, r2, r3
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036d8:	f7ff fc4e 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 80036dc:	0003      	movs	r3, r0
 80036de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80036e0:	e033      	b.n	800374a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036e2:	f7ff fc5f 	bl	8002fa4 <HAL_RCC_GetPCLK2Freq>
 80036e6:	0003      	movs	r3, r0
 80036e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80036ea:	e02e      	b.n	800374a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003728 <UART_SetConfig+0x318>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2210      	movs	r2, #16
 80036f2:	4013      	ands	r3, r2
 80036f4:	d002      	beq.n	80036fc <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80036f6:	4b0d      	ldr	r3, [pc, #52]	@ (800372c <UART_SetConfig+0x31c>)
 80036f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80036fa:	e026      	b.n	800374a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80036fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003730 <UART_SetConfig+0x320>)
 80036fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003700:	e023      	b.n	800374a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003702:	f7ff fb89 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8003706:	0003      	movs	r3, r0
 8003708:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800370a:	e01e      	b.n	800374a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800370c:	2380      	movs	r3, #128	@ 0x80
 800370e:	021b      	lsls	r3, r3, #8
 8003710:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003712:	e01a      	b.n	800374a <UART_SetConfig+0x33a>
 8003714:	efff69f3 	.word	0xefff69f3
 8003718:	ffffcfff 	.word	0xffffcfff
 800371c:	40004800 	.word	0x40004800
 8003720:	fffff4ff 	.word	0xfffff4ff
 8003724:	40004400 	.word	0x40004400
 8003728:	40021000 	.word	0x40021000
 800372c:	003d0900 	.word	0x003d0900
 8003730:	00f42400 	.word	0x00f42400
 8003734:	08004d64 	.word	0x08004d64
      default:
        pclk = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800373c:	231a      	movs	r3, #26
 800373e:	2218      	movs	r2, #24
 8003740:	189b      	adds	r3, r3, r2
 8003742:	19db      	adds	r3, r3, r7
 8003744:	2201      	movs	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
        break;
 8003748:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800374a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d100      	bne.n	8003752 <UART_SetConfig+0x342>
 8003750:	e090      	b.n	8003874 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003754:	005a      	lsls	r2, r3, #1
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	18d2      	adds	r2, r2, r3
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	0019      	movs	r1, r3
 8003764:	0010      	movs	r0, r2
 8003766:	f7fc fcd9 	bl	800011c <__udivsi3>
 800376a:	0003      	movs	r3, r0
 800376c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800376e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003770:	2b0f      	cmp	r3, #15
 8003772:	d921      	bls.n	80037b8 <UART_SetConfig+0x3a8>
 8003774:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003776:	2380      	movs	r3, #128	@ 0x80
 8003778:	025b      	lsls	r3, r3, #9
 800377a:	429a      	cmp	r2, r3
 800377c:	d21c      	bcs.n	80037b8 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800377e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003780:	b29a      	uxth	r2, r3
 8003782:	200e      	movs	r0, #14
 8003784:	2418      	movs	r4, #24
 8003786:	1903      	adds	r3, r0, r4
 8003788:	19db      	adds	r3, r3, r7
 800378a:	210f      	movs	r1, #15
 800378c:	438a      	bics	r2, r1
 800378e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003792:	085b      	lsrs	r3, r3, #1
 8003794:	b29b      	uxth	r3, r3
 8003796:	2207      	movs	r2, #7
 8003798:	4013      	ands	r3, r2
 800379a:	b299      	uxth	r1, r3
 800379c:	1903      	adds	r3, r0, r4
 800379e:	19db      	adds	r3, r3, r7
 80037a0:	1902      	adds	r2, r0, r4
 80037a2:	19d2      	adds	r2, r2, r7
 80037a4:	8812      	ldrh	r2, [r2, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	1902      	adds	r2, r0, r4
 80037b0:	19d2      	adds	r2, r2, r7
 80037b2:	8812      	ldrh	r2, [r2, #0]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	e05d      	b.n	8003874 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80037b8:	231a      	movs	r3, #26
 80037ba:	2218      	movs	r2, #24
 80037bc:	189b      	adds	r3, r3, r2
 80037be:	19db      	adds	r3, r3, r7
 80037c0:	2201      	movs	r2, #1
 80037c2:	701a      	strb	r2, [r3, #0]
 80037c4:	e056      	b.n	8003874 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037c6:	231b      	movs	r3, #27
 80037c8:	2218      	movs	r2, #24
 80037ca:	189b      	adds	r3, r3, r2
 80037cc:	19db      	adds	r3, r3, r7
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d822      	bhi.n	800381a <UART_SetConfig+0x40a>
 80037d4:	009a      	lsls	r2, r3, #2
 80037d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003894 <UART_SetConfig+0x484>)
 80037d8:	18d3      	adds	r3, r2, r3
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037de:	f7ff fbcb 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 80037e2:	0003      	movs	r3, r0
 80037e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037e6:	e021      	b.n	800382c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037e8:	f7ff fbdc 	bl	8002fa4 <HAL_RCC_GetPCLK2Freq>
 80037ec:	0003      	movs	r3, r0
 80037ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037f0:	e01c      	b.n	800382c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037f2:	4b29      	ldr	r3, [pc, #164]	@ (8003898 <UART_SetConfig+0x488>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2210      	movs	r2, #16
 80037f8:	4013      	ands	r3, r2
 80037fa:	d002      	beq.n	8003802 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80037fc:	4b27      	ldr	r3, [pc, #156]	@ (800389c <UART_SetConfig+0x48c>)
 80037fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003800:	e014      	b.n	800382c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003802:	4b27      	ldr	r3, [pc, #156]	@ (80038a0 <UART_SetConfig+0x490>)
 8003804:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003806:	e011      	b.n	800382c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003808:	f7ff fb06 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 800380c:	0003      	movs	r3, r0
 800380e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003810:	e00c      	b.n	800382c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003812:	2380      	movs	r3, #128	@ 0x80
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003818:	e008      	b.n	800382c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800381e:	231a      	movs	r3, #26
 8003820:	2218      	movs	r2, #24
 8003822:	189b      	adds	r3, r3, r2
 8003824:	19db      	adds	r3, r3, r7
 8003826:	2201      	movs	r2, #1
 8003828:	701a      	strb	r2, [r3, #0]
        break;
 800382a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800382c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d020      	beq.n	8003874 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	085a      	lsrs	r2, r3, #1
 8003838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383a:	18d2      	adds	r2, r2, r3
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	0019      	movs	r1, r3
 8003842:	0010      	movs	r0, r2
 8003844:	f7fc fc6a 	bl	800011c <__udivsi3>
 8003848:	0003      	movs	r3, r0
 800384a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800384c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384e:	2b0f      	cmp	r3, #15
 8003850:	d90a      	bls.n	8003868 <UART_SetConfig+0x458>
 8003852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003854:	2380      	movs	r3, #128	@ 0x80
 8003856:	025b      	lsls	r3, r3, #9
 8003858:	429a      	cmp	r2, r3
 800385a:	d205      	bcs.n	8003868 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800385c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385e:	b29a      	uxth	r2, r3
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	e005      	b.n	8003874 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003868:	231a      	movs	r3, #26
 800386a:	2218      	movs	r2, #24
 800386c:	189b      	adds	r3, r3, r2
 800386e:	19db      	adds	r3, r3, r7
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2200      	movs	r2, #0
 8003878:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	2200      	movs	r2, #0
 800387e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003880:	231a      	movs	r3, #26
 8003882:	2218      	movs	r2, #24
 8003884:	189b      	adds	r3, r3, r2
 8003886:	19db      	adds	r3, r3, r7
 8003888:	781b      	ldrb	r3, [r3, #0]
}
 800388a:	0018      	movs	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	b00e      	add	sp, #56	@ 0x38
 8003890:	bdb0      	pop	{r4, r5, r7, pc}
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	08004d88 	.word	0x08004d88
 8003898:	40021000 	.word	0x40021000
 800389c:	003d0900 	.word	0x003d0900
 80038a0:	00f42400 	.word	0x00f42400

080038a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	2201      	movs	r2, #1
 80038b2:	4013      	ands	r3, r2
 80038b4:	d00b      	beq.n	80038ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4a4a      	ldr	r2, [pc, #296]	@ (80039e8 <UART_AdvFeatureConfig+0x144>)
 80038be:	4013      	ands	r3, r2
 80038c0:	0019      	movs	r1, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d2:	2202      	movs	r2, #2
 80038d4:	4013      	ands	r3, r2
 80038d6:	d00b      	beq.n	80038f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	4a43      	ldr	r2, [pc, #268]	@ (80039ec <UART_AdvFeatureConfig+0x148>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	0019      	movs	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f4:	2204      	movs	r2, #4
 80038f6:	4013      	ands	r3, r2
 80038f8:	d00b      	beq.n	8003912 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4a3b      	ldr	r2, [pc, #236]	@ (80039f0 <UART_AdvFeatureConfig+0x14c>)
 8003902:	4013      	ands	r3, r2
 8003904:	0019      	movs	r1, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	2208      	movs	r2, #8
 8003918:	4013      	ands	r3, r2
 800391a:	d00b      	beq.n	8003934 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4a34      	ldr	r2, [pc, #208]	@ (80039f4 <UART_AdvFeatureConfig+0x150>)
 8003924:	4013      	ands	r3, r2
 8003926:	0019      	movs	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	2210      	movs	r2, #16
 800393a:	4013      	ands	r3, r2
 800393c:	d00b      	beq.n	8003956 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a2c      	ldr	r2, [pc, #176]	@ (80039f8 <UART_AdvFeatureConfig+0x154>)
 8003946:	4013      	ands	r3, r2
 8003948:	0019      	movs	r1, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	2220      	movs	r2, #32
 800395c:	4013      	ands	r3, r2
 800395e:	d00b      	beq.n	8003978 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	4a25      	ldr	r2, [pc, #148]	@ (80039fc <UART_AdvFeatureConfig+0x158>)
 8003968:	4013      	ands	r3, r2
 800396a:	0019      	movs	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	2240      	movs	r2, #64	@ 0x40
 800397e:	4013      	ands	r3, r2
 8003980:	d01d      	beq.n	80039be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4a1d      	ldr	r2, [pc, #116]	@ (8003a00 <UART_AdvFeatureConfig+0x15c>)
 800398a:	4013      	ands	r3, r2
 800398c:	0019      	movs	r1, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800399e:	2380      	movs	r3, #128	@ 0x80
 80039a0:	035b      	lsls	r3, r3, #13
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d10b      	bne.n	80039be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4a15      	ldr	r2, [pc, #84]	@ (8003a04 <UART_AdvFeatureConfig+0x160>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	0019      	movs	r1, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	2280      	movs	r2, #128	@ 0x80
 80039c4:	4013      	ands	r3, r2
 80039c6:	d00b      	beq.n	80039e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003a08 <UART_AdvFeatureConfig+0x164>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	0019      	movs	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	605a      	str	r2, [r3, #4]
  }
}
 80039e0:	46c0      	nop			@ (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b002      	add	sp, #8
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	fffdffff 	.word	0xfffdffff
 80039ec:	fffeffff 	.word	0xfffeffff
 80039f0:	fffbffff 	.word	0xfffbffff
 80039f4:	ffff7fff 	.word	0xffff7fff
 80039f8:	ffffefff 	.word	0xffffefff
 80039fc:	ffffdfff 	.word	0xffffdfff
 8003a00:	ffefffff 	.word	0xffefffff
 8003a04:	ff9fffff 	.word	0xff9fffff
 8003a08:	fff7ffff 	.word	0xfff7ffff

08003a0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b092      	sub	sp, #72	@ 0x48
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2284      	movs	r2, #132	@ 0x84
 8003a18:	2100      	movs	r1, #0
 8003a1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a1c:	f7fd fc8e 	bl	800133c <HAL_GetTick>
 8003a20:	0003      	movs	r3, r0
 8003a22:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d12c      	bne.n	8003a8c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a34:	2280      	movs	r2, #128	@ 0x80
 8003a36:	0391      	lsls	r1, r2, #14
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4a46      	ldr	r2, [pc, #280]	@ (8003b54 <UART_CheckIdleState+0x148>)
 8003a3c:	9200      	str	r2, [sp, #0]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f000 f88c 	bl	8003b5c <UART_WaitOnFlagUntilTimeout>
 8003a44:	1e03      	subs	r3, r0, #0
 8003a46:	d021      	beq.n	8003a8c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a48:	f3ef 8310 	mrs	r3, PRIMASK
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a52:	2301      	movs	r3, #1
 8003a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a58:	f383 8810 	msr	PRIMASK, r3
}
 8003a5c:	46c0      	nop			@ (mov r8, r8)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2180      	movs	r1, #128	@ 0x80
 8003a6a:	438a      	bics	r2, r1
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a74:	f383 8810 	msr	PRIMASK, r3
}
 8003a78:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2278      	movs	r2, #120	@ 0x78
 8003a84:	2100      	movs	r1, #0
 8003a86:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e05f      	b.n	8003b4c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2204      	movs	r2, #4
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d146      	bne.n	8003b28 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a9c:	2280      	movs	r2, #128	@ 0x80
 8003a9e:	03d1      	lsls	r1, r2, #15
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b54 <UART_CheckIdleState+0x148>)
 8003aa4:	9200      	str	r2, [sp, #0]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f000 f858 	bl	8003b5c <UART_WaitOnFlagUntilTimeout>
 8003aac:	1e03      	subs	r3, r0, #0
 8003aae:	d03b      	beq.n	8003b28 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aba:	2301      	movs	r3, #1
 8003abc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f383 8810 	msr	PRIMASK, r3
}
 8003ac4:	46c0      	nop			@ (mov r8, r8)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4921      	ldr	r1, [pc, #132]	@ (8003b58 <UART_CheckIdleState+0x14c>)
 8003ad2:	400a      	ands	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f383 8810 	msr	PRIMASK, r3
}
 8003ae0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ae8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aea:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aec:	2301      	movs	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f383 8810 	msr	PRIMASK, r3
}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2101      	movs	r1, #1
 8003b04:	438a      	bics	r2, r1
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	f383 8810 	msr	PRIMASK, r3
}
 8003b12:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2280      	movs	r2, #128	@ 0x80
 8003b18:	2120      	movs	r1, #32
 8003b1a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2278      	movs	r2, #120	@ 0x78
 8003b20:	2100      	movs	r1, #0
 8003b22:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e011      	b.n	8003b4c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2280      	movs	r2, #128	@ 0x80
 8003b32:	2120      	movs	r1, #32
 8003b34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2278      	movs	r2, #120	@ 0x78
 8003b46:	2100      	movs	r1, #0
 8003b48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b010      	add	sp, #64	@ 0x40
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	01ffffff 	.word	0x01ffffff
 8003b58:	fffffedf 	.word	0xfffffedf

08003b5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	1dfb      	adds	r3, r7, #7
 8003b6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6c:	e04b      	b.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	3301      	adds	r3, #1
 8003b72:	d048      	beq.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b74:	f7fd fbe2 	bl	800133c <HAL_GetTick>
 8003b78:	0002      	movs	r2, r0
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d302      	bcc.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e04b      	b.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2204      	movs	r2, #4
 8003b96:	4013      	ands	r3, r2
 8003b98:	d035      	beq.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	2208      	movs	r2, #8
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d111      	bne.n	8003bcc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2208      	movs	r2, #8
 8003bae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f000 f83c 	bl	8003c30 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2284      	movs	r2, #132	@ 0x84
 8003bbc:	2108      	movs	r1, #8
 8003bbe:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2278      	movs	r2, #120	@ 0x78
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e02c      	b.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69da      	ldr	r2, [r3, #28]
 8003bd2:	2380      	movs	r3, #128	@ 0x80
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	2380      	movs	r3, #128	@ 0x80
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d112      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2280      	movs	r2, #128	@ 0x80
 8003be6:	0112      	lsls	r2, r2, #4
 8003be8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f000 f81f 	bl	8003c30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2284      	movs	r2, #132	@ 0x84
 8003bf6:	2120      	movs	r1, #32
 8003bf8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2278      	movs	r2, #120	@ 0x78
 8003bfe:	2100      	movs	r1, #0
 8003c00:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e00f      	b.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	425a      	negs	r2, r3
 8003c16:	4153      	adcs	r3, r2
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	001a      	movs	r2, r3
 8003c1c:	1dfb      	adds	r3, r7, #7
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d0a4      	beq.n	8003b6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	0018      	movs	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b004      	add	sp, #16
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08e      	sub	sp, #56	@ 0x38
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c38:	f3ef 8310 	mrs	r3, PRIMASK
 8003c3c:	617b      	str	r3, [r7, #20]
  return(result);
 8003c3e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c42:	2301      	movs	r3, #1
 8003c44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f383 8810 	msr	PRIMASK, r3
}
 8003c4c:	46c0      	nop			@ (mov r8, r8)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4926      	ldr	r1, [pc, #152]	@ (8003cf4 <UART_EndRxTransfer+0xc4>)
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	f383 8810 	msr	PRIMASK, r3
}
 8003c68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6e:	623b      	str	r3, [r7, #32]
  return(result);
 8003c70:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c72:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c74:	2301      	movs	r3, #1
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	f383 8810 	msr	PRIMASK, r3
}
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	438a      	bics	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c96:	f383 8810 	msr	PRIMASK, r3
}
 8003c9a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d118      	bne.n	8003cd6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003caa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cae:	2301      	movs	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f383 8810 	msr	PRIMASK, r3
}
 8003cb8:	46c0      	nop			@ (mov r8, r8)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2110      	movs	r1, #16
 8003cc6:	438a      	bics	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ccc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f383 8810 	msr	PRIMASK, r3
}
 8003cd4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2280      	movs	r2, #128	@ 0x80
 8003cda:	2120      	movs	r1, #32
 8003cdc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003cea:	46c0      	nop			@ (mov r8, r8)
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b00e      	add	sp, #56	@ 0x38
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	46c0      	nop			@ (mov r8, r8)
 8003cf4:	fffffedf 	.word	0xfffffedf

08003cf8 <std>:
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	b510      	push	{r4, lr}
 8003cfc:	0004      	movs	r4, r0
 8003cfe:	6003      	str	r3, [r0, #0]
 8003d00:	6043      	str	r3, [r0, #4]
 8003d02:	6083      	str	r3, [r0, #8]
 8003d04:	8181      	strh	r1, [r0, #12]
 8003d06:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d08:	81c2      	strh	r2, [r0, #14]
 8003d0a:	6103      	str	r3, [r0, #16]
 8003d0c:	6143      	str	r3, [r0, #20]
 8003d0e:	6183      	str	r3, [r0, #24]
 8003d10:	0019      	movs	r1, r3
 8003d12:	2208      	movs	r2, #8
 8003d14:	305c      	adds	r0, #92	@ 0x5c
 8003d16:	f000 fa0f 	bl	8004138 <memset>
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d48 <std+0x50>)
 8003d1c:	6224      	str	r4, [r4, #32]
 8003d1e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d20:	4b0a      	ldr	r3, [pc, #40]	@ (8003d4c <std+0x54>)
 8003d22:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d24:	4b0a      	ldr	r3, [pc, #40]	@ (8003d50 <std+0x58>)
 8003d26:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d28:	4b0a      	ldr	r3, [pc, #40]	@ (8003d54 <std+0x5c>)
 8003d2a:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d58 <std+0x60>)
 8003d2e:	429c      	cmp	r4, r3
 8003d30:	d005      	beq.n	8003d3e <std+0x46>
 8003d32:	4b0a      	ldr	r3, [pc, #40]	@ (8003d5c <std+0x64>)
 8003d34:	429c      	cmp	r4, r3
 8003d36:	d002      	beq.n	8003d3e <std+0x46>
 8003d38:	4b09      	ldr	r3, [pc, #36]	@ (8003d60 <std+0x68>)
 8003d3a:	429c      	cmp	r4, r3
 8003d3c:	d103      	bne.n	8003d46 <std+0x4e>
 8003d3e:	0020      	movs	r0, r4
 8003d40:	3058      	adds	r0, #88	@ 0x58
 8003d42:	f000 fa79 	bl	8004238 <__retarget_lock_init_recursive>
 8003d46:	bd10      	pop	{r4, pc}
 8003d48:	08003f61 	.word	0x08003f61
 8003d4c:	08003f89 	.word	0x08003f89
 8003d50:	08003fc1 	.word	0x08003fc1
 8003d54:	08003fed 	.word	0x08003fed
 8003d58:	20000274 	.word	0x20000274
 8003d5c:	200002dc 	.word	0x200002dc
 8003d60:	20000344 	.word	0x20000344

08003d64 <stdio_exit_handler>:
 8003d64:	b510      	push	{r4, lr}
 8003d66:	4a03      	ldr	r2, [pc, #12]	@ (8003d74 <stdio_exit_handler+0x10>)
 8003d68:	4903      	ldr	r1, [pc, #12]	@ (8003d78 <stdio_exit_handler+0x14>)
 8003d6a:	4804      	ldr	r0, [pc, #16]	@ (8003d7c <stdio_exit_handler+0x18>)
 8003d6c:	f000 f86c 	bl	8003e48 <_fwalk_sglue>
 8003d70:	bd10      	pop	{r4, pc}
 8003d72:	46c0      	nop			@ (mov r8, r8)
 8003d74:	2000000c 	.word	0x2000000c
 8003d78:	08004ac9 	.word	0x08004ac9
 8003d7c:	2000001c 	.word	0x2000001c

08003d80 <cleanup_stdio>:
 8003d80:	6841      	ldr	r1, [r0, #4]
 8003d82:	4b0b      	ldr	r3, [pc, #44]	@ (8003db0 <cleanup_stdio+0x30>)
 8003d84:	b510      	push	{r4, lr}
 8003d86:	0004      	movs	r4, r0
 8003d88:	4299      	cmp	r1, r3
 8003d8a:	d001      	beq.n	8003d90 <cleanup_stdio+0x10>
 8003d8c:	f000 fe9c 	bl	8004ac8 <_fflush_r>
 8003d90:	68a1      	ldr	r1, [r4, #8]
 8003d92:	4b08      	ldr	r3, [pc, #32]	@ (8003db4 <cleanup_stdio+0x34>)
 8003d94:	4299      	cmp	r1, r3
 8003d96:	d002      	beq.n	8003d9e <cleanup_stdio+0x1e>
 8003d98:	0020      	movs	r0, r4
 8003d9a:	f000 fe95 	bl	8004ac8 <_fflush_r>
 8003d9e:	68e1      	ldr	r1, [r4, #12]
 8003da0:	4b05      	ldr	r3, [pc, #20]	@ (8003db8 <cleanup_stdio+0x38>)
 8003da2:	4299      	cmp	r1, r3
 8003da4:	d002      	beq.n	8003dac <cleanup_stdio+0x2c>
 8003da6:	0020      	movs	r0, r4
 8003da8:	f000 fe8e 	bl	8004ac8 <_fflush_r>
 8003dac:	bd10      	pop	{r4, pc}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	20000274 	.word	0x20000274
 8003db4:	200002dc 	.word	0x200002dc
 8003db8:	20000344 	.word	0x20000344

08003dbc <global_stdio_init.part.0>:
 8003dbc:	b510      	push	{r4, lr}
 8003dbe:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <global_stdio_init.part.0+0x28>)
 8003dc0:	4a09      	ldr	r2, [pc, #36]	@ (8003de8 <global_stdio_init.part.0+0x2c>)
 8003dc2:	2104      	movs	r1, #4
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	4809      	ldr	r0, [pc, #36]	@ (8003dec <global_stdio_init.part.0+0x30>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f7ff ff95 	bl	8003cf8 <std>
 8003dce:	2201      	movs	r2, #1
 8003dd0:	2109      	movs	r1, #9
 8003dd2:	4807      	ldr	r0, [pc, #28]	@ (8003df0 <global_stdio_init.part.0+0x34>)
 8003dd4:	f7ff ff90 	bl	8003cf8 <std>
 8003dd8:	2202      	movs	r2, #2
 8003dda:	2112      	movs	r1, #18
 8003ddc:	4805      	ldr	r0, [pc, #20]	@ (8003df4 <global_stdio_init.part.0+0x38>)
 8003dde:	f7ff ff8b 	bl	8003cf8 <std>
 8003de2:	bd10      	pop	{r4, pc}
 8003de4:	200003ac 	.word	0x200003ac
 8003de8:	08003d65 	.word	0x08003d65
 8003dec:	20000274 	.word	0x20000274
 8003df0:	200002dc 	.word	0x200002dc
 8003df4:	20000344 	.word	0x20000344

08003df8 <__sfp_lock_acquire>:
 8003df8:	b510      	push	{r4, lr}
 8003dfa:	4802      	ldr	r0, [pc, #8]	@ (8003e04 <__sfp_lock_acquire+0xc>)
 8003dfc:	f000 fa1d 	bl	800423a <__retarget_lock_acquire_recursive>
 8003e00:	bd10      	pop	{r4, pc}
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	200003b5 	.word	0x200003b5

08003e08 <__sfp_lock_release>:
 8003e08:	b510      	push	{r4, lr}
 8003e0a:	4802      	ldr	r0, [pc, #8]	@ (8003e14 <__sfp_lock_release+0xc>)
 8003e0c:	f000 fa16 	bl	800423c <__retarget_lock_release_recursive>
 8003e10:	bd10      	pop	{r4, pc}
 8003e12:	46c0      	nop			@ (mov r8, r8)
 8003e14:	200003b5 	.word	0x200003b5

08003e18 <__sinit>:
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	0004      	movs	r4, r0
 8003e1c:	f7ff ffec 	bl	8003df8 <__sfp_lock_acquire>
 8003e20:	6a23      	ldr	r3, [r4, #32]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <__sinit+0x14>
 8003e26:	f7ff ffef 	bl	8003e08 <__sfp_lock_release>
 8003e2a:	bd10      	pop	{r4, pc}
 8003e2c:	4b04      	ldr	r3, [pc, #16]	@ (8003e40 <__sinit+0x28>)
 8003e2e:	6223      	str	r3, [r4, #32]
 8003e30:	4b04      	ldr	r3, [pc, #16]	@ (8003e44 <__sinit+0x2c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f6      	bne.n	8003e26 <__sinit+0xe>
 8003e38:	f7ff ffc0 	bl	8003dbc <global_stdio_init.part.0>
 8003e3c:	e7f3      	b.n	8003e26 <__sinit+0xe>
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	08003d81 	.word	0x08003d81
 8003e44:	200003ac 	.word	0x200003ac

08003e48 <_fwalk_sglue>:
 8003e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e4a:	0014      	movs	r4, r2
 8003e4c:	2600      	movs	r6, #0
 8003e4e:	9000      	str	r0, [sp, #0]
 8003e50:	9101      	str	r1, [sp, #4]
 8003e52:	68a5      	ldr	r5, [r4, #8]
 8003e54:	6867      	ldr	r7, [r4, #4]
 8003e56:	3f01      	subs	r7, #1
 8003e58:	d504      	bpl.n	8003e64 <_fwalk_sglue+0x1c>
 8003e5a:	6824      	ldr	r4, [r4, #0]
 8003e5c:	2c00      	cmp	r4, #0
 8003e5e:	d1f8      	bne.n	8003e52 <_fwalk_sglue+0xa>
 8003e60:	0030      	movs	r0, r6
 8003e62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e64:	89ab      	ldrh	r3, [r5, #12]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d908      	bls.n	8003e7c <_fwalk_sglue+0x34>
 8003e6a:	220e      	movs	r2, #14
 8003e6c:	5eab      	ldrsh	r3, [r5, r2]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	d004      	beq.n	8003e7c <_fwalk_sglue+0x34>
 8003e72:	0029      	movs	r1, r5
 8003e74:	9800      	ldr	r0, [sp, #0]
 8003e76:	9b01      	ldr	r3, [sp, #4]
 8003e78:	4798      	blx	r3
 8003e7a:	4306      	orrs	r6, r0
 8003e7c:	3568      	adds	r5, #104	@ 0x68
 8003e7e:	e7ea      	b.n	8003e56 <_fwalk_sglue+0xe>

08003e80 <iprintf>:
 8003e80:	b40f      	push	{r0, r1, r2, r3}
 8003e82:	b507      	push	{r0, r1, r2, lr}
 8003e84:	4905      	ldr	r1, [pc, #20]	@ (8003e9c <iprintf+0x1c>)
 8003e86:	ab04      	add	r3, sp, #16
 8003e88:	6808      	ldr	r0, [r1, #0]
 8003e8a:	cb04      	ldmia	r3!, {r2}
 8003e8c:	6881      	ldr	r1, [r0, #8]
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	f000 fafa 	bl	8004488 <_vfiprintf_r>
 8003e94:	b003      	add	sp, #12
 8003e96:	bc08      	pop	{r3}
 8003e98:	b004      	add	sp, #16
 8003e9a:	4718      	bx	r3
 8003e9c:	20000018 	.word	0x20000018

08003ea0 <_puts_r>:
 8003ea0:	6a03      	ldr	r3, [r0, #32]
 8003ea2:	b570      	push	{r4, r5, r6, lr}
 8003ea4:	0005      	movs	r5, r0
 8003ea6:	000e      	movs	r6, r1
 8003ea8:	6884      	ldr	r4, [r0, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <_puts_r+0x12>
 8003eae:	f7ff ffb3 	bl	8003e18 <__sinit>
 8003eb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003eb4:	07db      	lsls	r3, r3, #31
 8003eb6:	d405      	bmi.n	8003ec4 <_puts_r+0x24>
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	059b      	lsls	r3, r3, #22
 8003ebc:	d402      	bmi.n	8003ec4 <_puts_r+0x24>
 8003ebe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ec0:	f000 f9bb 	bl	800423a <__retarget_lock_acquire_recursive>
 8003ec4:	89a3      	ldrh	r3, [r4, #12]
 8003ec6:	071b      	lsls	r3, r3, #28
 8003ec8:	d502      	bpl.n	8003ed0 <_puts_r+0x30>
 8003eca:	6923      	ldr	r3, [r4, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d11f      	bne.n	8003f10 <_puts_r+0x70>
 8003ed0:	0021      	movs	r1, r4
 8003ed2:	0028      	movs	r0, r5
 8003ed4:	f000 f8d2 	bl	800407c <__swsetup_r>
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	d019      	beq.n	8003f10 <_puts_r+0x70>
 8003edc:	2501      	movs	r5, #1
 8003ede:	426d      	negs	r5, r5
 8003ee0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ee2:	07db      	lsls	r3, r3, #31
 8003ee4:	d405      	bmi.n	8003ef2 <_puts_r+0x52>
 8003ee6:	89a3      	ldrh	r3, [r4, #12]
 8003ee8:	059b      	lsls	r3, r3, #22
 8003eea:	d402      	bmi.n	8003ef2 <_puts_r+0x52>
 8003eec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003eee:	f000 f9a5 	bl	800423c <__retarget_lock_release_recursive>
 8003ef2:	0028      	movs	r0, r5
 8003ef4:	bd70      	pop	{r4, r5, r6, pc}
 8003ef6:	3601      	adds	r6, #1
 8003ef8:	60a3      	str	r3, [r4, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	da04      	bge.n	8003f08 <_puts_r+0x68>
 8003efe:	69a2      	ldr	r2, [r4, #24]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	dc16      	bgt.n	8003f32 <_puts_r+0x92>
 8003f04:	290a      	cmp	r1, #10
 8003f06:	d014      	beq.n	8003f32 <_puts_r+0x92>
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	6022      	str	r2, [r4, #0]
 8003f0e:	7019      	strb	r1, [r3, #0]
 8003f10:	68a3      	ldr	r3, [r4, #8]
 8003f12:	7831      	ldrb	r1, [r6, #0]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	2900      	cmp	r1, #0
 8003f18:	d1ed      	bne.n	8003ef6 <_puts_r+0x56>
 8003f1a:	60a3      	str	r3, [r4, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	da0f      	bge.n	8003f40 <_puts_r+0xa0>
 8003f20:	0022      	movs	r2, r4
 8003f22:	0028      	movs	r0, r5
 8003f24:	310a      	adds	r1, #10
 8003f26:	f000 f867 	bl	8003ff8 <__swbuf_r>
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d0d6      	beq.n	8003edc <_puts_r+0x3c>
 8003f2e:	250a      	movs	r5, #10
 8003f30:	e7d6      	b.n	8003ee0 <_puts_r+0x40>
 8003f32:	0022      	movs	r2, r4
 8003f34:	0028      	movs	r0, r5
 8003f36:	f000 f85f 	bl	8003ff8 <__swbuf_r>
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	d1e8      	bne.n	8003f10 <_puts_r+0x70>
 8003f3e:	e7cd      	b.n	8003edc <_puts_r+0x3c>
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	6022      	str	r2, [r4, #0]
 8003f46:	220a      	movs	r2, #10
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e7f0      	b.n	8003f2e <_puts_r+0x8e>

08003f4c <puts>:
 8003f4c:	b510      	push	{r4, lr}
 8003f4e:	4b03      	ldr	r3, [pc, #12]	@ (8003f5c <puts+0x10>)
 8003f50:	0001      	movs	r1, r0
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	f7ff ffa4 	bl	8003ea0 <_puts_r>
 8003f58:	bd10      	pop	{r4, pc}
 8003f5a:	46c0      	nop			@ (mov r8, r8)
 8003f5c:	20000018 	.word	0x20000018

08003f60 <__sread>:
 8003f60:	b570      	push	{r4, r5, r6, lr}
 8003f62:	000c      	movs	r4, r1
 8003f64:	250e      	movs	r5, #14
 8003f66:	5f49      	ldrsh	r1, [r1, r5]
 8003f68:	f000 f914 	bl	8004194 <_read_r>
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	db03      	blt.n	8003f78 <__sread+0x18>
 8003f70:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003f72:	181b      	adds	r3, r3, r0
 8003f74:	6563      	str	r3, [r4, #84]	@ 0x54
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	89a3      	ldrh	r3, [r4, #12]
 8003f7a:	4a02      	ldr	r2, [pc, #8]	@ (8003f84 <__sread+0x24>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	81a3      	strh	r3, [r4, #12]
 8003f80:	e7f9      	b.n	8003f76 <__sread+0x16>
 8003f82:	46c0      	nop			@ (mov r8, r8)
 8003f84:	ffffefff 	.word	0xffffefff

08003f88 <__swrite>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	001f      	movs	r7, r3
 8003f8c:	898b      	ldrh	r3, [r1, #12]
 8003f8e:	0005      	movs	r5, r0
 8003f90:	000c      	movs	r4, r1
 8003f92:	0016      	movs	r6, r2
 8003f94:	05db      	lsls	r3, r3, #23
 8003f96:	d505      	bpl.n	8003fa4 <__swrite+0x1c>
 8003f98:	230e      	movs	r3, #14
 8003f9a:	5ec9      	ldrsh	r1, [r1, r3]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	f000 f8e4 	bl	800416c <_lseek_r>
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	4a05      	ldr	r2, [pc, #20]	@ (8003fbc <__swrite+0x34>)
 8003fa8:	0028      	movs	r0, r5
 8003faa:	4013      	ands	r3, r2
 8003fac:	81a3      	strh	r3, [r4, #12]
 8003fae:	0032      	movs	r2, r6
 8003fb0:	230e      	movs	r3, #14
 8003fb2:	5ee1      	ldrsh	r1, [r4, r3]
 8003fb4:	003b      	movs	r3, r7
 8003fb6:	f000 f901 	bl	80041bc <_write_r>
 8003fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fbc:	ffffefff 	.word	0xffffefff

08003fc0 <__sseek>:
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	000c      	movs	r4, r1
 8003fc4:	250e      	movs	r5, #14
 8003fc6:	5f49      	ldrsh	r1, [r1, r5]
 8003fc8:	f000 f8d0 	bl	800416c <_lseek_r>
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	1c42      	adds	r2, r0, #1
 8003fd0:	d103      	bne.n	8003fda <__sseek+0x1a>
 8003fd2:	4a05      	ldr	r2, [pc, #20]	@ (8003fe8 <__sseek+0x28>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	81a3      	strh	r3, [r4, #12]
 8003fd8:	bd70      	pop	{r4, r5, r6, pc}
 8003fda:	2280      	movs	r2, #128	@ 0x80
 8003fdc:	0152      	lsls	r2, r2, #5
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	81a3      	strh	r3, [r4, #12]
 8003fe2:	6560      	str	r0, [r4, #84]	@ 0x54
 8003fe4:	e7f8      	b.n	8003fd8 <__sseek+0x18>
 8003fe6:	46c0      	nop			@ (mov r8, r8)
 8003fe8:	ffffefff 	.word	0xffffefff

08003fec <__sclose>:
 8003fec:	b510      	push	{r4, lr}
 8003fee:	230e      	movs	r3, #14
 8003ff0:	5ec9      	ldrsh	r1, [r1, r3]
 8003ff2:	f000 f8a9 	bl	8004148 <_close_r>
 8003ff6:	bd10      	pop	{r4, pc}

08003ff8 <__swbuf_r>:
 8003ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffa:	0006      	movs	r6, r0
 8003ffc:	000d      	movs	r5, r1
 8003ffe:	0014      	movs	r4, r2
 8004000:	2800      	cmp	r0, #0
 8004002:	d004      	beq.n	800400e <__swbuf_r+0x16>
 8004004:	6a03      	ldr	r3, [r0, #32]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <__swbuf_r+0x16>
 800400a:	f7ff ff05 	bl	8003e18 <__sinit>
 800400e:	69a3      	ldr	r3, [r4, #24]
 8004010:	60a3      	str	r3, [r4, #8]
 8004012:	89a3      	ldrh	r3, [r4, #12]
 8004014:	071b      	lsls	r3, r3, #28
 8004016:	d502      	bpl.n	800401e <__swbuf_r+0x26>
 8004018:	6923      	ldr	r3, [r4, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <__swbuf_r+0x3a>
 800401e:	0021      	movs	r1, r4
 8004020:	0030      	movs	r0, r6
 8004022:	f000 f82b 	bl	800407c <__swsetup_r>
 8004026:	2800      	cmp	r0, #0
 8004028:	d003      	beq.n	8004032 <__swbuf_r+0x3a>
 800402a:	2501      	movs	r5, #1
 800402c:	426d      	negs	r5, r5
 800402e:	0028      	movs	r0, r5
 8004030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004032:	6923      	ldr	r3, [r4, #16]
 8004034:	6820      	ldr	r0, [r4, #0]
 8004036:	b2ef      	uxtb	r7, r5
 8004038:	1ac0      	subs	r0, r0, r3
 800403a:	6963      	ldr	r3, [r4, #20]
 800403c:	b2ed      	uxtb	r5, r5
 800403e:	4283      	cmp	r3, r0
 8004040:	dc05      	bgt.n	800404e <__swbuf_r+0x56>
 8004042:	0021      	movs	r1, r4
 8004044:	0030      	movs	r0, r6
 8004046:	f000 fd3f 	bl	8004ac8 <_fflush_r>
 800404a:	2800      	cmp	r0, #0
 800404c:	d1ed      	bne.n	800402a <__swbuf_r+0x32>
 800404e:	68a3      	ldr	r3, [r4, #8]
 8004050:	3001      	adds	r0, #1
 8004052:	3b01      	subs	r3, #1
 8004054:	60a3      	str	r3, [r4, #8]
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	6022      	str	r2, [r4, #0]
 800405c:	701f      	strb	r7, [r3, #0]
 800405e:	6963      	ldr	r3, [r4, #20]
 8004060:	4283      	cmp	r3, r0
 8004062:	d004      	beq.n	800406e <__swbuf_r+0x76>
 8004064:	89a3      	ldrh	r3, [r4, #12]
 8004066:	07db      	lsls	r3, r3, #31
 8004068:	d5e1      	bpl.n	800402e <__swbuf_r+0x36>
 800406a:	2d0a      	cmp	r5, #10
 800406c:	d1df      	bne.n	800402e <__swbuf_r+0x36>
 800406e:	0021      	movs	r1, r4
 8004070:	0030      	movs	r0, r6
 8004072:	f000 fd29 	bl	8004ac8 <_fflush_r>
 8004076:	2800      	cmp	r0, #0
 8004078:	d0d9      	beq.n	800402e <__swbuf_r+0x36>
 800407a:	e7d6      	b.n	800402a <__swbuf_r+0x32>

0800407c <__swsetup_r>:
 800407c:	4b2d      	ldr	r3, [pc, #180]	@ (8004134 <__swsetup_r+0xb8>)
 800407e:	b570      	push	{r4, r5, r6, lr}
 8004080:	0005      	movs	r5, r0
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	000c      	movs	r4, r1
 8004086:	2800      	cmp	r0, #0
 8004088:	d004      	beq.n	8004094 <__swsetup_r+0x18>
 800408a:	6a03      	ldr	r3, [r0, #32]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <__swsetup_r+0x18>
 8004090:	f7ff fec2 	bl	8003e18 <__sinit>
 8004094:	230c      	movs	r3, #12
 8004096:	5ee2      	ldrsh	r2, [r4, r3]
 8004098:	0713      	lsls	r3, r2, #28
 800409a:	d423      	bmi.n	80040e4 <__swsetup_r+0x68>
 800409c:	06d3      	lsls	r3, r2, #27
 800409e:	d407      	bmi.n	80040b0 <__swsetup_r+0x34>
 80040a0:	2309      	movs	r3, #9
 80040a2:	602b      	str	r3, [r5, #0]
 80040a4:	2340      	movs	r3, #64	@ 0x40
 80040a6:	2001      	movs	r0, #1
 80040a8:	4313      	orrs	r3, r2
 80040aa:	81a3      	strh	r3, [r4, #12]
 80040ac:	4240      	negs	r0, r0
 80040ae:	e03a      	b.n	8004126 <__swsetup_r+0xaa>
 80040b0:	0752      	lsls	r2, r2, #29
 80040b2:	d513      	bpl.n	80040dc <__swsetup_r+0x60>
 80040b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040b6:	2900      	cmp	r1, #0
 80040b8:	d008      	beq.n	80040cc <__swsetup_r+0x50>
 80040ba:	0023      	movs	r3, r4
 80040bc:	3344      	adds	r3, #68	@ 0x44
 80040be:	4299      	cmp	r1, r3
 80040c0:	d002      	beq.n	80040c8 <__swsetup_r+0x4c>
 80040c2:	0028      	movs	r0, r5
 80040c4:	f000 f8bc 	bl	8004240 <_free_r>
 80040c8:	2300      	movs	r3, #0
 80040ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80040cc:	2224      	movs	r2, #36	@ 0x24
 80040ce:	89a3      	ldrh	r3, [r4, #12]
 80040d0:	4393      	bics	r3, r2
 80040d2:	81a3      	strh	r3, [r4, #12]
 80040d4:	2300      	movs	r3, #0
 80040d6:	6063      	str	r3, [r4, #4]
 80040d8:	6923      	ldr	r3, [r4, #16]
 80040da:	6023      	str	r3, [r4, #0]
 80040dc:	2308      	movs	r3, #8
 80040de:	89a2      	ldrh	r2, [r4, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	81a3      	strh	r3, [r4, #12]
 80040e4:	6923      	ldr	r3, [r4, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10b      	bne.n	8004102 <__swsetup_r+0x86>
 80040ea:	21a0      	movs	r1, #160	@ 0xa0
 80040ec:	2280      	movs	r2, #128	@ 0x80
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	0089      	lsls	r1, r1, #2
 80040f2:	0092      	lsls	r2, r2, #2
 80040f4:	400b      	ands	r3, r1
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <__swsetup_r+0x86>
 80040fa:	0021      	movs	r1, r4
 80040fc:	0028      	movs	r0, r5
 80040fe:	f000 fd39 	bl	8004b74 <__smakebuf_r>
 8004102:	230c      	movs	r3, #12
 8004104:	5ee2      	ldrsh	r2, [r4, r3]
 8004106:	2101      	movs	r1, #1
 8004108:	0013      	movs	r3, r2
 800410a:	400b      	ands	r3, r1
 800410c:	420a      	tst	r2, r1
 800410e:	d00b      	beq.n	8004128 <__swsetup_r+0xac>
 8004110:	2300      	movs	r3, #0
 8004112:	60a3      	str	r3, [r4, #8]
 8004114:	6963      	ldr	r3, [r4, #20]
 8004116:	425b      	negs	r3, r3
 8004118:	61a3      	str	r3, [r4, #24]
 800411a:	2000      	movs	r0, #0
 800411c:	6923      	ldr	r3, [r4, #16]
 800411e:	4283      	cmp	r3, r0
 8004120:	d101      	bne.n	8004126 <__swsetup_r+0xaa>
 8004122:	0613      	lsls	r3, r2, #24
 8004124:	d4be      	bmi.n	80040a4 <__swsetup_r+0x28>
 8004126:	bd70      	pop	{r4, r5, r6, pc}
 8004128:	0791      	lsls	r1, r2, #30
 800412a:	d400      	bmi.n	800412e <__swsetup_r+0xb2>
 800412c:	6963      	ldr	r3, [r4, #20]
 800412e:	60a3      	str	r3, [r4, #8]
 8004130:	e7f3      	b.n	800411a <__swsetup_r+0x9e>
 8004132:	46c0      	nop			@ (mov r8, r8)
 8004134:	20000018 	.word	0x20000018

08004138 <memset>:
 8004138:	0003      	movs	r3, r0
 800413a:	1882      	adds	r2, r0, r2
 800413c:	4293      	cmp	r3, r2
 800413e:	d100      	bne.n	8004142 <memset+0xa>
 8004140:	4770      	bx	lr
 8004142:	7019      	strb	r1, [r3, #0]
 8004144:	3301      	adds	r3, #1
 8004146:	e7f9      	b.n	800413c <memset+0x4>

08004148 <_close_r>:
 8004148:	2300      	movs	r3, #0
 800414a:	b570      	push	{r4, r5, r6, lr}
 800414c:	4d06      	ldr	r5, [pc, #24]	@ (8004168 <_close_r+0x20>)
 800414e:	0004      	movs	r4, r0
 8004150:	0008      	movs	r0, r1
 8004152:	602b      	str	r3, [r5, #0]
 8004154:	f7fc fffa 	bl	800114c <_close>
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	d103      	bne.n	8004164 <_close_r+0x1c>
 800415c:	682b      	ldr	r3, [r5, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d000      	beq.n	8004164 <_close_r+0x1c>
 8004162:	6023      	str	r3, [r4, #0]
 8004164:	bd70      	pop	{r4, r5, r6, pc}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	200003b0 	.word	0x200003b0

0800416c <_lseek_r>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	0004      	movs	r4, r0
 8004170:	0008      	movs	r0, r1
 8004172:	0011      	movs	r1, r2
 8004174:	001a      	movs	r2, r3
 8004176:	2300      	movs	r3, #0
 8004178:	4d05      	ldr	r5, [pc, #20]	@ (8004190 <_lseek_r+0x24>)
 800417a:	602b      	str	r3, [r5, #0]
 800417c:	f7fd f807 	bl	800118e <_lseek>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d103      	bne.n	800418c <_lseek_r+0x20>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d000      	beq.n	800418c <_lseek_r+0x20>
 800418a:	6023      	str	r3, [r4, #0]
 800418c:	bd70      	pop	{r4, r5, r6, pc}
 800418e:	46c0      	nop			@ (mov r8, r8)
 8004190:	200003b0 	.word	0x200003b0

08004194 <_read_r>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	0004      	movs	r4, r0
 8004198:	0008      	movs	r0, r1
 800419a:	0011      	movs	r1, r2
 800419c:	001a      	movs	r2, r3
 800419e:	2300      	movs	r3, #0
 80041a0:	4d05      	ldr	r5, [pc, #20]	@ (80041b8 <_read_r+0x24>)
 80041a2:	602b      	str	r3, [r5, #0]
 80041a4:	f7fc ff99 	bl	80010da <_read>
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	d103      	bne.n	80041b4 <_read_r+0x20>
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d000      	beq.n	80041b4 <_read_r+0x20>
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	bd70      	pop	{r4, r5, r6, pc}
 80041b6:	46c0      	nop			@ (mov r8, r8)
 80041b8:	200003b0 	.word	0x200003b0

080041bc <_write_r>:
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	0004      	movs	r4, r0
 80041c0:	0008      	movs	r0, r1
 80041c2:	0011      	movs	r1, r2
 80041c4:	001a      	movs	r2, r3
 80041c6:	2300      	movs	r3, #0
 80041c8:	4d05      	ldr	r5, [pc, #20]	@ (80041e0 <_write_r+0x24>)
 80041ca:	602b      	str	r3, [r5, #0]
 80041cc:	f7fc ffa2 	bl	8001114 <_write>
 80041d0:	1c43      	adds	r3, r0, #1
 80041d2:	d103      	bne.n	80041dc <_write_r+0x20>
 80041d4:	682b      	ldr	r3, [r5, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d000      	beq.n	80041dc <_write_r+0x20>
 80041da:	6023      	str	r3, [r4, #0]
 80041dc:	bd70      	pop	{r4, r5, r6, pc}
 80041de:	46c0      	nop			@ (mov r8, r8)
 80041e0:	200003b0 	.word	0x200003b0

080041e4 <__errno>:
 80041e4:	4b01      	ldr	r3, [pc, #4]	@ (80041ec <__errno+0x8>)
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	4770      	bx	lr
 80041ea:	46c0      	nop			@ (mov r8, r8)
 80041ec:	20000018 	.word	0x20000018

080041f0 <__libc_init_array>:
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	2600      	movs	r6, #0
 80041f4:	4c0c      	ldr	r4, [pc, #48]	@ (8004228 <__libc_init_array+0x38>)
 80041f6:	4d0d      	ldr	r5, [pc, #52]	@ (800422c <__libc_init_array+0x3c>)
 80041f8:	1b64      	subs	r4, r4, r5
 80041fa:	10a4      	asrs	r4, r4, #2
 80041fc:	42a6      	cmp	r6, r4
 80041fe:	d109      	bne.n	8004214 <__libc_init_array+0x24>
 8004200:	2600      	movs	r6, #0
 8004202:	f000 fd3b 	bl	8004c7c <_init>
 8004206:	4c0a      	ldr	r4, [pc, #40]	@ (8004230 <__libc_init_array+0x40>)
 8004208:	4d0a      	ldr	r5, [pc, #40]	@ (8004234 <__libc_init_array+0x44>)
 800420a:	1b64      	subs	r4, r4, r5
 800420c:	10a4      	asrs	r4, r4, #2
 800420e:	42a6      	cmp	r6, r4
 8004210:	d105      	bne.n	800421e <__libc_init_array+0x2e>
 8004212:	bd70      	pop	{r4, r5, r6, pc}
 8004214:	00b3      	lsls	r3, r6, #2
 8004216:	58eb      	ldr	r3, [r5, r3]
 8004218:	4798      	blx	r3
 800421a:	3601      	adds	r6, #1
 800421c:	e7ee      	b.n	80041fc <__libc_init_array+0xc>
 800421e:	00b3      	lsls	r3, r6, #2
 8004220:	58eb      	ldr	r3, [r5, r3]
 8004222:	4798      	blx	r3
 8004224:	3601      	adds	r6, #1
 8004226:	e7f2      	b.n	800420e <__libc_init_array+0x1e>
 8004228:	08004de8 	.word	0x08004de8
 800422c:	08004de8 	.word	0x08004de8
 8004230:	08004dec 	.word	0x08004dec
 8004234:	08004de8 	.word	0x08004de8

08004238 <__retarget_lock_init_recursive>:
 8004238:	4770      	bx	lr

0800423a <__retarget_lock_acquire_recursive>:
 800423a:	4770      	bx	lr

0800423c <__retarget_lock_release_recursive>:
 800423c:	4770      	bx	lr
	...

08004240 <_free_r>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	0005      	movs	r5, r0
 8004244:	1e0c      	subs	r4, r1, #0
 8004246:	d010      	beq.n	800426a <_free_r+0x2a>
 8004248:	3c04      	subs	r4, #4
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	da00      	bge.n	8004252 <_free_r+0x12>
 8004250:	18e4      	adds	r4, r4, r3
 8004252:	0028      	movs	r0, r5
 8004254:	f000 f8e0 	bl	8004418 <__malloc_lock>
 8004258:	4a1d      	ldr	r2, [pc, #116]	@ (80042d0 <_free_r+0x90>)
 800425a:	6813      	ldr	r3, [r2, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <_free_r+0x2c>
 8004260:	6063      	str	r3, [r4, #4]
 8004262:	6014      	str	r4, [r2, #0]
 8004264:	0028      	movs	r0, r5
 8004266:	f000 f8df 	bl	8004428 <__malloc_unlock>
 800426a:	bd70      	pop	{r4, r5, r6, pc}
 800426c:	42a3      	cmp	r3, r4
 800426e:	d908      	bls.n	8004282 <_free_r+0x42>
 8004270:	6820      	ldr	r0, [r4, #0]
 8004272:	1821      	adds	r1, r4, r0
 8004274:	428b      	cmp	r3, r1
 8004276:	d1f3      	bne.n	8004260 <_free_r+0x20>
 8004278:	6819      	ldr	r1, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	1809      	adds	r1, r1, r0
 800427e:	6021      	str	r1, [r4, #0]
 8004280:	e7ee      	b.n	8004260 <_free_r+0x20>
 8004282:	001a      	movs	r2, r3
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <_free_r+0x4e>
 800428a:	42a3      	cmp	r3, r4
 800428c:	d9f9      	bls.n	8004282 <_free_r+0x42>
 800428e:	6811      	ldr	r1, [r2, #0]
 8004290:	1850      	adds	r0, r2, r1
 8004292:	42a0      	cmp	r0, r4
 8004294:	d10b      	bne.n	80042ae <_free_r+0x6e>
 8004296:	6820      	ldr	r0, [r4, #0]
 8004298:	1809      	adds	r1, r1, r0
 800429a:	1850      	adds	r0, r2, r1
 800429c:	6011      	str	r1, [r2, #0]
 800429e:	4283      	cmp	r3, r0
 80042a0:	d1e0      	bne.n	8004264 <_free_r+0x24>
 80042a2:	6818      	ldr	r0, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	1841      	adds	r1, r0, r1
 80042a8:	6011      	str	r1, [r2, #0]
 80042aa:	6053      	str	r3, [r2, #4]
 80042ac:	e7da      	b.n	8004264 <_free_r+0x24>
 80042ae:	42a0      	cmp	r0, r4
 80042b0:	d902      	bls.n	80042b8 <_free_r+0x78>
 80042b2:	230c      	movs	r3, #12
 80042b4:	602b      	str	r3, [r5, #0]
 80042b6:	e7d5      	b.n	8004264 <_free_r+0x24>
 80042b8:	6820      	ldr	r0, [r4, #0]
 80042ba:	1821      	adds	r1, r4, r0
 80042bc:	428b      	cmp	r3, r1
 80042be:	d103      	bne.n	80042c8 <_free_r+0x88>
 80042c0:	6819      	ldr	r1, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	1809      	adds	r1, r1, r0
 80042c6:	6021      	str	r1, [r4, #0]
 80042c8:	6063      	str	r3, [r4, #4]
 80042ca:	6054      	str	r4, [r2, #4]
 80042cc:	e7ca      	b.n	8004264 <_free_r+0x24>
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	200003bc 	.word	0x200003bc

080042d4 <sbrk_aligned>:
 80042d4:	b570      	push	{r4, r5, r6, lr}
 80042d6:	4e0f      	ldr	r6, [pc, #60]	@ (8004314 <sbrk_aligned+0x40>)
 80042d8:	000d      	movs	r5, r1
 80042da:	6831      	ldr	r1, [r6, #0]
 80042dc:	0004      	movs	r4, r0
 80042de:	2900      	cmp	r1, #0
 80042e0:	d102      	bne.n	80042e8 <sbrk_aligned+0x14>
 80042e2:	f000 fcad 	bl	8004c40 <_sbrk_r>
 80042e6:	6030      	str	r0, [r6, #0]
 80042e8:	0029      	movs	r1, r5
 80042ea:	0020      	movs	r0, r4
 80042ec:	f000 fca8 	bl	8004c40 <_sbrk_r>
 80042f0:	1c43      	adds	r3, r0, #1
 80042f2:	d103      	bne.n	80042fc <sbrk_aligned+0x28>
 80042f4:	2501      	movs	r5, #1
 80042f6:	426d      	negs	r5, r5
 80042f8:	0028      	movs	r0, r5
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	2303      	movs	r3, #3
 80042fe:	1cc5      	adds	r5, r0, #3
 8004300:	439d      	bics	r5, r3
 8004302:	42a8      	cmp	r0, r5
 8004304:	d0f8      	beq.n	80042f8 <sbrk_aligned+0x24>
 8004306:	1a29      	subs	r1, r5, r0
 8004308:	0020      	movs	r0, r4
 800430a:	f000 fc99 	bl	8004c40 <_sbrk_r>
 800430e:	3001      	adds	r0, #1
 8004310:	d1f2      	bne.n	80042f8 <sbrk_aligned+0x24>
 8004312:	e7ef      	b.n	80042f4 <sbrk_aligned+0x20>
 8004314:	200003b8 	.word	0x200003b8

08004318 <_malloc_r>:
 8004318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800431a:	2203      	movs	r2, #3
 800431c:	1ccb      	adds	r3, r1, #3
 800431e:	4393      	bics	r3, r2
 8004320:	3308      	adds	r3, #8
 8004322:	0005      	movs	r5, r0
 8004324:	001f      	movs	r7, r3
 8004326:	2b0c      	cmp	r3, #12
 8004328:	d234      	bcs.n	8004394 <_malloc_r+0x7c>
 800432a:	270c      	movs	r7, #12
 800432c:	42b9      	cmp	r1, r7
 800432e:	d833      	bhi.n	8004398 <_malloc_r+0x80>
 8004330:	0028      	movs	r0, r5
 8004332:	f000 f871 	bl	8004418 <__malloc_lock>
 8004336:	4e37      	ldr	r6, [pc, #220]	@ (8004414 <_malloc_r+0xfc>)
 8004338:	6833      	ldr	r3, [r6, #0]
 800433a:	001c      	movs	r4, r3
 800433c:	2c00      	cmp	r4, #0
 800433e:	d12f      	bne.n	80043a0 <_malloc_r+0x88>
 8004340:	0039      	movs	r1, r7
 8004342:	0028      	movs	r0, r5
 8004344:	f7ff ffc6 	bl	80042d4 <sbrk_aligned>
 8004348:	0004      	movs	r4, r0
 800434a:	1c43      	adds	r3, r0, #1
 800434c:	d15f      	bne.n	800440e <_malloc_r+0xf6>
 800434e:	6834      	ldr	r4, [r6, #0]
 8004350:	9400      	str	r4, [sp, #0]
 8004352:	9b00      	ldr	r3, [sp, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d14a      	bne.n	80043ee <_malloc_r+0xd6>
 8004358:	2c00      	cmp	r4, #0
 800435a:	d052      	beq.n	8004402 <_malloc_r+0xea>
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	0028      	movs	r0, r5
 8004360:	18e3      	adds	r3, r4, r3
 8004362:	9900      	ldr	r1, [sp, #0]
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	f000 fc6b 	bl	8004c40 <_sbrk_r>
 800436a:	9b01      	ldr	r3, [sp, #4]
 800436c:	4283      	cmp	r3, r0
 800436e:	d148      	bne.n	8004402 <_malloc_r+0xea>
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	0028      	movs	r0, r5
 8004374:	1aff      	subs	r7, r7, r3
 8004376:	0039      	movs	r1, r7
 8004378:	f7ff ffac 	bl	80042d4 <sbrk_aligned>
 800437c:	3001      	adds	r0, #1
 800437e:	d040      	beq.n	8004402 <_malloc_r+0xea>
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	19db      	adds	r3, r3, r7
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	6833      	ldr	r3, [r6, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	2a00      	cmp	r2, #0
 800438c:	d133      	bne.n	80043f6 <_malloc_r+0xde>
 800438e:	9b00      	ldr	r3, [sp, #0]
 8004390:	6033      	str	r3, [r6, #0]
 8004392:	e019      	b.n	80043c8 <_malloc_r+0xb0>
 8004394:	2b00      	cmp	r3, #0
 8004396:	dac9      	bge.n	800432c <_malloc_r+0x14>
 8004398:	230c      	movs	r3, #12
 800439a:	602b      	str	r3, [r5, #0]
 800439c:	2000      	movs	r0, #0
 800439e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043a0:	6821      	ldr	r1, [r4, #0]
 80043a2:	1bc9      	subs	r1, r1, r7
 80043a4:	d420      	bmi.n	80043e8 <_malloc_r+0xd0>
 80043a6:	290b      	cmp	r1, #11
 80043a8:	d90a      	bls.n	80043c0 <_malloc_r+0xa8>
 80043aa:	19e2      	adds	r2, r4, r7
 80043ac:	6027      	str	r7, [r4, #0]
 80043ae:	42a3      	cmp	r3, r4
 80043b0:	d104      	bne.n	80043bc <_malloc_r+0xa4>
 80043b2:	6032      	str	r2, [r6, #0]
 80043b4:	6863      	ldr	r3, [r4, #4]
 80043b6:	6011      	str	r1, [r2, #0]
 80043b8:	6053      	str	r3, [r2, #4]
 80043ba:	e005      	b.n	80043c8 <_malloc_r+0xb0>
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	e7f9      	b.n	80043b4 <_malloc_r+0x9c>
 80043c0:	6862      	ldr	r2, [r4, #4]
 80043c2:	42a3      	cmp	r3, r4
 80043c4:	d10e      	bne.n	80043e4 <_malloc_r+0xcc>
 80043c6:	6032      	str	r2, [r6, #0]
 80043c8:	0028      	movs	r0, r5
 80043ca:	f000 f82d 	bl	8004428 <__malloc_unlock>
 80043ce:	0020      	movs	r0, r4
 80043d0:	2207      	movs	r2, #7
 80043d2:	300b      	adds	r0, #11
 80043d4:	1d23      	adds	r3, r4, #4
 80043d6:	4390      	bics	r0, r2
 80043d8:	1ac2      	subs	r2, r0, r3
 80043da:	4298      	cmp	r0, r3
 80043dc:	d0df      	beq.n	800439e <_malloc_r+0x86>
 80043de:	1a1b      	subs	r3, r3, r0
 80043e0:	50a3      	str	r3, [r4, r2]
 80043e2:	e7dc      	b.n	800439e <_malloc_r+0x86>
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	e7ef      	b.n	80043c8 <_malloc_r+0xb0>
 80043e8:	0023      	movs	r3, r4
 80043ea:	6864      	ldr	r4, [r4, #4]
 80043ec:	e7a6      	b.n	800433c <_malloc_r+0x24>
 80043ee:	9c00      	ldr	r4, [sp, #0]
 80043f0:	6863      	ldr	r3, [r4, #4]
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	e7ad      	b.n	8004352 <_malloc_r+0x3a>
 80043f6:	001a      	movs	r2, r3
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	42a3      	cmp	r3, r4
 80043fc:	d1fb      	bne.n	80043f6 <_malloc_r+0xde>
 80043fe:	2300      	movs	r3, #0
 8004400:	e7da      	b.n	80043b8 <_malloc_r+0xa0>
 8004402:	230c      	movs	r3, #12
 8004404:	0028      	movs	r0, r5
 8004406:	602b      	str	r3, [r5, #0]
 8004408:	f000 f80e 	bl	8004428 <__malloc_unlock>
 800440c:	e7c6      	b.n	800439c <_malloc_r+0x84>
 800440e:	6007      	str	r7, [r0, #0]
 8004410:	e7da      	b.n	80043c8 <_malloc_r+0xb0>
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	200003bc 	.word	0x200003bc

08004418 <__malloc_lock>:
 8004418:	b510      	push	{r4, lr}
 800441a:	4802      	ldr	r0, [pc, #8]	@ (8004424 <__malloc_lock+0xc>)
 800441c:	f7ff ff0d 	bl	800423a <__retarget_lock_acquire_recursive>
 8004420:	bd10      	pop	{r4, pc}
 8004422:	46c0      	nop			@ (mov r8, r8)
 8004424:	200003b4 	.word	0x200003b4

08004428 <__malloc_unlock>:
 8004428:	b510      	push	{r4, lr}
 800442a:	4802      	ldr	r0, [pc, #8]	@ (8004434 <__malloc_unlock+0xc>)
 800442c:	f7ff ff06 	bl	800423c <__retarget_lock_release_recursive>
 8004430:	bd10      	pop	{r4, pc}
 8004432:	46c0      	nop			@ (mov r8, r8)
 8004434:	200003b4 	.word	0x200003b4

08004438 <__sfputc_r>:
 8004438:	6893      	ldr	r3, [r2, #8]
 800443a:	b510      	push	{r4, lr}
 800443c:	3b01      	subs	r3, #1
 800443e:	6093      	str	r3, [r2, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	da04      	bge.n	800444e <__sfputc_r+0x16>
 8004444:	6994      	ldr	r4, [r2, #24]
 8004446:	42a3      	cmp	r3, r4
 8004448:	db07      	blt.n	800445a <__sfputc_r+0x22>
 800444a:	290a      	cmp	r1, #10
 800444c:	d005      	beq.n	800445a <__sfputc_r+0x22>
 800444e:	6813      	ldr	r3, [r2, #0]
 8004450:	1c58      	adds	r0, r3, #1
 8004452:	6010      	str	r0, [r2, #0]
 8004454:	7019      	strb	r1, [r3, #0]
 8004456:	0008      	movs	r0, r1
 8004458:	bd10      	pop	{r4, pc}
 800445a:	f7ff fdcd 	bl	8003ff8 <__swbuf_r>
 800445e:	0001      	movs	r1, r0
 8004460:	e7f9      	b.n	8004456 <__sfputc_r+0x1e>

08004462 <__sfputs_r>:
 8004462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004464:	0006      	movs	r6, r0
 8004466:	000f      	movs	r7, r1
 8004468:	0014      	movs	r4, r2
 800446a:	18d5      	adds	r5, r2, r3
 800446c:	42ac      	cmp	r4, r5
 800446e:	d101      	bne.n	8004474 <__sfputs_r+0x12>
 8004470:	2000      	movs	r0, #0
 8004472:	e007      	b.n	8004484 <__sfputs_r+0x22>
 8004474:	7821      	ldrb	r1, [r4, #0]
 8004476:	003a      	movs	r2, r7
 8004478:	0030      	movs	r0, r6
 800447a:	f7ff ffdd 	bl	8004438 <__sfputc_r>
 800447e:	3401      	adds	r4, #1
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	d1f3      	bne.n	800446c <__sfputs_r+0xa>
 8004484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004488 <_vfiprintf_r>:
 8004488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800448a:	b0a1      	sub	sp, #132	@ 0x84
 800448c:	000f      	movs	r7, r1
 800448e:	0015      	movs	r5, r2
 8004490:	001e      	movs	r6, r3
 8004492:	9003      	str	r0, [sp, #12]
 8004494:	2800      	cmp	r0, #0
 8004496:	d004      	beq.n	80044a2 <_vfiprintf_r+0x1a>
 8004498:	6a03      	ldr	r3, [r0, #32]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <_vfiprintf_r+0x1a>
 800449e:	f7ff fcbb 	bl	8003e18 <__sinit>
 80044a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044a4:	07db      	lsls	r3, r3, #31
 80044a6:	d405      	bmi.n	80044b4 <_vfiprintf_r+0x2c>
 80044a8:	89bb      	ldrh	r3, [r7, #12]
 80044aa:	059b      	lsls	r3, r3, #22
 80044ac:	d402      	bmi.n	80044b4 <_vfiprintf_r+0x2c>
 80044ae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80044b0:	f7ff fec3 	bl	800423a <__retarget_lock_acquire_recursive>
 80044b4:	89bb      	ldrh	r3, [r7, #12]
 80044b6:	071b      	lsls	r3, r3, #28
 80044b8:	d502      	bpl.n	80044c0 <_vfiprintf_r+0x38>
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d113      	bne.n	80044e8 <_vfiprintf_r+0x60>
 80044c0:	0039      	movs	r1, r7
 80044c2:	9803      	ldr	r0, [sp, #12]
 80044c4:	f7ff fdda 	bl	800407c <__swsetup_r>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d00d      	beq.n	80044e8 <_vfiprintf_r+0x60>
 80044cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044ce:	07db      	lsls	r3, r3, #31
 80044d0:	d503      	bpl.n	80044da <_vfiprintf_r+0x52>
 80044d2:	2001      	movs	r0, #1
 80044d4:	4240      	negs	r0, r0
 80044d6:	b021      	add	sp, #132	@ 0x84
 80044d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044da:	89bb      	ldrh	r3, [r7, #12]
 80044dc:	059b      	lsls	r3, r3, #22
 80044de:	d4f8      	bmi.n	80044d2 <_vfiprintf_r+0x4a>
 80044e0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80044e2:	f7ff feab 	bl	800423c <__retarget_lock_release_recursive>
 80044e6:	e7f4      	b.n	80044d2 <_vfiprintf_r+0x4a>
 80044e8:	2300      	movs	r3, #0
 80044ea:	ac08      	add	r4, sp, #32
 80044ec:	6163      	str	r3, [r4, #20]
 80044ee:	3320      	adds	r3, #32
 80044f0:	7663      	strb	r3, [r4, #25]
 80044f2:	3310      	adds	r3, #16
 80044f4:	76a3      	strb	r3, [r4, #26]
 80044f6:	9607      	str	r6, [sp, #28]
 80044f8:	002e      	movs	r6, r5
 80044fa:	7833      	ldrb	r3, [r6, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <_vfiprintf_r+0x7c>
 8004500:	2b25      	cmp	r3, #37	@ 0x25
 8004502:	d148      	bne.n	8004596 <_vfiprintf_r+0x10e>
 8004504:	1b73      	subs	r3, r6, r5
 8004506:	9305      	str	r3, [sp, #20]
 8004508:	42ae      	cmp	r6, r5
 800450a:	d00b      	beq.n	8004524 <_vfiprintf_r+0x9c>
 800450c:	002a      	movs	r2, r5
 800450e:	0039      	movs	r1, r7
 8004510:	9803      	ldr	r0, [sp, #12]
 8004512:	f7ff ffa6 	bl	8004462 <__sfputs_r>
 8004516:	3001      	adds	r0, #1
 8004518:	d100      	bne.n	800451c <_vfiprintf_r+0x94>
 800451a:	e0ae      	b.n	800467a <_vfiprintf_r+0x1f2>
 800451c:	6963      	ldr	r3, [r4, #20]
 800451e:	9a05      	ldr	r2, [sp, #20]
 8004520:	189b      	adds	r3, r3, r2
 8004522:	6163      	str	r3, [r4, #20]
 8004524:	7833      	ldrb	r3, [r6, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d100      	bne.n	800452c <_vfiprintf_r+0xa4>
 800452a:	e0a6      	b.n	800467a <_vfiprintf_r+0x1f2>
 800452c:	2201      	movs	r2, #1
 800452e:	2300      	movs	r3, #0
 8004530:	4252      	negs	r2, r2
 8004532:	6062      	str	r2, [r4, #4]
 8004534:	a904      	add	r1, sp, #16
 8004536:	3254      	adds	r2, #84	@ 0x54
 8004538:	1852      	adds	r2, r2, r1
 800453a:	1c75      	adds	r5, r6, #1
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	60e3      	str	r3, [r4, #12]
 8004540:	60a3      	str	r3, [r4, #8]
 8004542:	7013      	strb	r3, [r2, #0]
 8004544:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004546:	4b59      	ldr	r3, [pc, #356]	@ (80046ac <_vfiprintf_r+0x224>)
 8004548:	2205      	movs	r2, #5
 800454a:	0018      	movs	r0, r3
 800454c:	7829      	ldrb	r1, [r5, #0]
 800454e:	9305      	str	r3, [sp, #20]
 8004550:	f000 fb88 	bl	8004c64 <memchr>
 8004554:	1c6e      	adds	r6, r5, #1
 8004556:	2800      	cmp	r0, #0
 8004558:	d11f      	bne.n	800459a <_vfiprintf_r+0x112>
 800455a:	6822      	ldr	r2, [r4, #0]
 800455c:	06d3      	lsls	r3, r2, #27
 800455e:	d504      	bpl.n	800456a <_vfiprintf_r+0xe2>
 8004560:	2353      	movs	r3, #83	@ 0x53
 8004562:	a904      	add	r1, sp, #16
 8004564:	185b      	adds	r3, r3, r1
 8004566:	2120      	movs	r1, #32
 8004568:	7019      	strb	r1, [r3, #0]
 800456a:	0713      	lsls	r3, r2, #28
 800456c:	d504      	bpl.n	8004578 <_vfiprintf_r+0xf0>
 800456e:	2353      	movs	r3, #83	@ 0x53
 8004570:	a904      	add	r1, sp, #16
 8004572:	185b      	adds	r3, r3, r1
 8004574:	212b      	movs	r1, #43	@ 0x2b
 8004576:	7019      	strb	r1, [r3, #0]
 8004578:	782b      	ldrb	r3, [r5, #0]
 800457a:	2b2a      	cmp	r3, #42	@ 0x2a
 800457c:	d016      	beq.n	80045ac <_vfiprintf_r+0x124>
 800457e:	002e      	movs	r6, r5
 8004580:	2100      	movs	r1, #0
 8004582:	200a      	movs	r0, #10
 8004584:	68e3      	ldr	r3, [r4, #12]
 8004586:	7832      	ldrb	r2, [r6, #0]
 8004588:	1c75      	adds	r5, r6, #1
 800458a:	3a30      	subs	r2, #48	@ 0x30
 800458c:	2a09      	cmp	r2, #9
 800458e:	d950      	bls.n	8004632 <_vfiprintf_r+0x1aa>
 8004590:	2900      	cmp	r1, #0
 8004592:	d111      	bne.n	80045b8 <_vfiprintf_r+0x130>
 8004594:	e017      	b.n	80045c6 <_vfiprintf_r+0x13e>
 8004596:	3601      	adds	r6, #1
 8004598:	e7af      	b.n	80044fa <_vfiprintf_r+0x72>
 800459a:	9b05      	ldr	r3, [sp, #20]
 800459c:	6822      	ldr	r2, [r4, #0]
 800459e:	1ac0      	subs	r0, r0, r3
 80045a0:	2301      	movs	r3, #1
 80045a2:	4083      	lsls	r3, r0
 80045a4:	4313      	orrs	r3, r2
 80045a6:	0035      	movs	r5, r6
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	e7cc      	b.n	8004546 <_vfiprintf_r+0xbe>
 80045ac:	9b07      	ldr	r3, [sp, #28]
 80045ae:	1d19      	adds	r1, r3, #4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	9107      	str	r1, [sp, #28]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	db01      	blt.n	80045bc <_vfiprintf_r+0x134>
 80045b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045ba:	e004      	b.n	80045c6 <_vfiprintf_r+0x13e>
 80045bc:	425b      	negs	r3, r3
 80045be:	60e3      	str	r3, [r4, #12]
 80045c0:	2302      	movs	r3, #2
 80045c2:	4313      	orrs	r3, r2
 80045c4:	6023      	str	r3, [r4, #0]
 80045c6:	7833      	ldrb	r3, [r6, #0]
 80045c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80045ca:	d10c      	bne.n	80045e6 <_vfiprintf_r+0x15e>
 80045cc:	7873      	ldrb	r3, [r6, #1]
 80045ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80045d0:	d134      	bne.n	800463c <_vfiprintf_r+0x1b4>
 80045d2:	9b07      	ldr	r3, [sp, #28]
 80045d4:	3602      	adds	r6, #2
 80045d6:	1d1a      	adds	r2, r3, #4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	9207      	str	r2, [sp, #28]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	da01      	bge.n	80045e4 <_vfiprintf_r+0x15c>
 80045e0:	2301      	movs	r3, #1
 80045e2:	425b      	negs	r3, r3
 80045e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80045e6:	4d32      	ldr	r5, [pc, #200]	@ (80046b0 <_vfiprintf_r+0x228>)
 80045e8:	2203      	movs	r2, #3
 80045ea:	0028      	movs	r0, r5
 80045ec:	7831      	ldrb	r1, [r6, #0]
 80045ee:	f000 fb39 	bl	8004c64 <memchr>
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d006      	beq.n	8004604 <_vfiprintf_r+0x17c>
 80045f6:	2340      	movs	r3, #64	@ 0x40
 80045f8:	1b40      	subs	r0, r0, r5
 80045fa:	4083      	lsls	r3, r0
 80045fc:	6822      	ldr	r2, [r4, #0]
 80045fe:	3601      	adds	r6, #1
 8004600:	4313      	orrs	r3, r2
 8004602:	6023      	str	r3, [r4, #0]
 8004604:	7831      	ldrb	r1, [r6, #0]
 8004606:	2206      	movs	r2, #6
 8004608:	482a      	ldr	r0, [pc, #168]	@ (80046b4 <_vfiprintf_r+0x22c>)
 800460a:	1c75      	adds	r5, r6, #1
 800460c:	7621      	strb	r1, [r4, #24]
 800460e:	f000 fb29 	bl	8004c64 <memchr>
 8004612:	2800      	cmp	r0, #0
 8004614:	d040      	beq.n	8004698 <_vfiprintf_r+0x210>
 8004616:	4b28      	ldr	r3, [pc, #160]	@ (80046b8 <_vfiprintf_r+0x230>)
 8004618:	2b00      	cmp	r3, #0
 800461a:	d122      	bne.n	8004662 <_vfiprintf_r+0x1da>
 800461c:	2207      	movs	r2, #7
 800461e:	9b07      	ldr	r3, [sp, #28]
 8004620:	3307      	adds	r3, #7
 8004622:	4393      	bics	r3, r2
 8004624:	3308      	adds	r3, #8
 8004626:	9307      	str	r3, [sp, #28]
 8004628:	6963      	ldr	r3, [r4, #20]
 800462a:	9a04      	ldr	r2, [sp, #16]
 800462c:	189b      	adds	r3, r3, r2
 800462e:	6163      	str	r3, [r4, #20]
 8004630:	e762      	b.n	80044f8 <_vfiprintf_r+0x70>
 8004632:	4343      	muls	r3, r0
 8004634:	002e      	movs	r6, r5
 8004636:	2101      	movs	r1, #1
 8004638:	189b      	adds	r3, r3, r2
 800463a:	e7a4      	b.n	8004586 <_vfiprintf_r+0xfe>
 800463c:	2300      	movs	r3, #0
 800463e:	200a      	movs	r0, #10
 8004640:	0019      	movs	r1, r3
 8004642:	3601      	adds	r6, #1
 8004644:	6063      	str	r3, [r4, #4]
 8004646:	7832      	ldrb	r2, [r6, #0]
 8004648:	1c75      	adds	r5, r6, #1
 800464a:	3a30      	subs	r2, #48	@ 0x30
 800464c:	2a09      	cmp	r2, #9
 800464e:	d903      	bls.n	8004658 <_vfiprintf_r+0x1d0>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0c8      	beq.n	80045e6 <_vfiprintf_r+0x15e>
 8004654:	9109      	str	r1, [sp, #36]	@ 0x24
 8004656:	e7c6      	b.n	80045e6 <_vfiprintf_r+0x15e>
 8004658:	4341      	muls	r1, r0
 800465a:	002e      	movs	r6, r5
 800465c:	2301      	movs	r3, #1
 800465e:	1889      	adds	r1, r1, r2
 8004660:	e7f1      	b.n	8004646 <_vfiprintf_r+0x1be>
 8004662:	aa07      	add	r2, sp, #28
 8004664:	9200      	str	r2, [sp, #0]
 8004666:	0021      	movs	r1, r4
 8004668:	003a      	movs	r2, r7
 800466a:	4b14      	ldr	r3, [pc, #80]	@ (80046bc <_vfiprintf_r+0x234>)
 800466c:	9803      	ldr	r0, [sp, #12]
 800466e:	e000      	b.n	8004672 <_vfiprintf_r+0x1ea>
 8004670:	bf00      	nop
 8004672:	9004      	str	r0, [sp, #16]
 8004674:	9b04      	ldr	r3, [sp, #16]
 8004676:	3301      	adds	r3, #1
 8004678:	d1d6      	bne.n	8004628 <_vfiprintf_r+0x1a0>
 800467a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800467c:	07db      	lsls	r3, r3, #31
 800467e:	d405      	bmi.n	800468c <_vfiprintf_r+0x204>
 8004680:	89bb      	ldrh	r3, [r7, #12]
 8004682:	059b      	lsls	r3, r3, #22
 8004684:	d402      	bmi.n	800468c <_vfiprintf_r+0x204>
 8004686:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004688:	f7ff fdd8 	bl	800423c <__retarget_lock_release_recursive>
 800468c:	89bb      	ldrh	r3, [r7, #12]
 800468e:	065b      	lsls	r3, r3, #25
 8004690:	d500      	bpl.n	8004694 <_vfiprintf_r+0x20c>
 8004692:	e71e      	b.n	80044d2 <_vfiprintf_r+0x4a>
 8004694:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004696:	e71e      	b.n	80044d6 <_vfiprintf_r+0x4e>
 8004698:	aa07      	add	r2, sp, #28
 800469a:	9200      	str	r2, [sp, #0]
 800469c:	0021      	movs	r1, r4
 800469e:	003a      	movs	r2, r7
 80046a0:	4b06      	ldr	r3, [pc, #24]	@ (80046bc <_vfiprintf_r+0x234>)
 80046a2:	9803      	ldr	r0, [sp, #12]
 80046a4:	f000 f87c 	bl	80047a0 <_printf_i>
 80046a8:	e7e3      	b.n	8004672 <_vfiprintf_r+0x1ea>
 80046aa:	46c0      	nop			@ (mov r8, r8)
 80046ac:	08004dac 	.word	0x08004dac
 80046b0:	08004db2 	.word	0x08004db2
 80046b4:	08004db6 	.word	0x08004db6
 80046b8:	00000000 	.word	0x00000000
 80046bc:	08004463 	.word	0x08004463

080046c0 <_printf_common>:
 80046c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046c2:	0016      	movs	r6, r2
 80046c4:	9301      	str	r3, [sp, #4]
 80046c6:	688a      	ldr	r2, [r1, #8]
 80046c8:	690b      	ldr	r3, [r1, #16]
 80046ca:	000c      	movs	r4, r1
 80046cc:	9000      	str	r0, [sp, #0]
 80046ce:	4293      	cmp	r3, r2
 80046d0:	da00      	bge.n	80046d4 <_printf_common+0x14>
 80046d2:	0013      	movs	r3, r2
 80046d4:	0022      	movs	r2, r4
 80046d6:	6033      	str	r3, [r6, #0]
 80046d8:	3243      	adds	r2, #67	@ 0x43
 80046da:	7812      	ldrb	r2, [r2, #0]
 80046dc:	2a00      	cmp	r2, #0
 80046de:	d001      	beq.n	80046e4 <_printf_common+0x24>
 80046e0:	3301      	adds	r3, #1
 80046e2:	6033      	str	r3, [r6, #0]
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	069b      	lsls	r3, r3, #26
 80046e8:	d502      	bpl.n	80046f0 <_printf_common+0x30>
 80046ea:	6833      	ldr	r3, [r6, #0]
 80046ec:	3302      	adds	r3, #2
 80046ee:	6033      	str	r3, [r6, #0]
 80046f0:	6822      	ldr	r2, [r4, #0]
 80046f2:	2306      	movs	r3, #6
 80046f4:	0015      	movs	r5, r2
 80046f6:	401d      	ands	r5, r3
 80046f8:	421a      	tst	r2, r3
 80046fa:	d027      	beq.n	800474c <_printf_common+0x8c>
 80046fc:	0023      	movs	r3, r4
 80046fe:	3343      	adds	r3, #67	@ 0x43
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	1e5a      	subs	r2, r3, #1
 8004704:	4193      	sbcs	r3, r2
 8004706:	6822      	ldr	r2, [r4, #0]
 8004708:	0692      	lsls	r2, r2, #26
 800470a:	d430      	bmi.n	800476e <_printf_common+0xae>
 800470c:	0022      	movs	r2, r4
 800470e:	9901      	ldr	r1, [sp, #4]
 8004710:	9800      	ldr	r0, [sp, #0]
 8004712:	9d08      	ldr	r5, [sp, #32]
 8004714:	3243      	adds	r2, #67	@ 0x43
 8004716:	47a8      	blx	r5
 8004718:	3001      	adds	r0, #1
 800471a:	d025      	beq.n	8004768 <_printf_common+0xa8>
 800471c:	2206      	movs	r2, #6
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	2500      	movs	r5, #0
 8004722:	4013      	ands	r3, r2
 8004724:	2b04      	cmp	r3, #4
 8004726:	d105      	bne.n	8004734 <_printf_common+0x74>
 8004728:	6833      	ldr	r3, [r6, #0]
 800472a:	68e5      	ldr	r5, [r4, #12]
 800472c:	1aed      	subs	r5, r5, r3
 800472e:	43eb      	mvns	r3, r5
 8004730:	17db      	asrs	r3, r3, #31
 8004732:	401d      	ands	r5, r3
 8004734:	68a3      	ldr	r3, [r4, #8]
 8004736:	6922      	ldr	r2, [r4, #16]
 8004738:	4293      	cmp	r3, r2
 800473a:	dd01      	ble.n	8004740 <_printf_common+0x80>
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	18ed      	adds	r5, r5, r3
 8004740:	2600      	movs	r6, #0
 8004742:	42b5      	cmp	r5, r6
 8004744:	d120      	bne.n	8004788 <_printf_common+0xc8>
 8004746:	2000      	movs	r0, #0
 8004748:	e010      	b.n	800476c <_printf_common+0xac>
 800474a:	3501      	adds	r5, #1
 800474c:	68e3      	ldr	r3, [r4, #12]
 800474e:	6832      	ldr	r2, [r6, #0]
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	42ab      	cmp	r3, r5
 8004754:	ddd2      	ble.n	80046fc <_printf_common+0x3c>
 8004756:	0022      	movs	r2, r4
 8004758:	2301      	movs	r3, #1
 800475a:	9901      	ldr	r1, [sp, #4]
 800475c:	9800      	ldr	r0, [sp, #0]
 800475e:	9f08      	ldr	r7, [sp, #32]
 8004760:	3219      	adds	r2, #25
 8004762:	47b8      	blx	r7
 8004764:	3001      	adds	r0, #1
 8004766:	d1f0      	bne.n	800474a <_printf_common+0x8a>
 8004768:	2001      	movs	r0, #1
 800476a:	4240      	negs	r0, r0
 800476c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800476e:	2030      	movs	r0, #48	@ 0x30
 8004770:	18e1      	adds	r1, r4, r3
 8004772:	3143      	adds	r1, #67	@ 0x43
 8004774:	7008      	strb	r0, [r1, #0]
 8004776:	0021      	movs	r1, r4
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	3145      	adds	r1, #69	@ 0x45
 800477c:	7809      	ldrb	r1, [r1, #0]
 800477e:	18a2      	adds	r2, r4, r2
 8004780:	3243      	adds	r2, #67	@ 0x43
 8004782:	3302      	adds	r3, #2
 8004784:	7011      	strb	r1, [r2, #0]
 8004786:	e7c1      	b.n	800470c <_printf_common+0x4c>
 8004788:	0022      	movs	r2, r4
 800478a:	2301      	movs	r3, #1
 800478c:	9901      	ldr	r1, [sp, #4]
 800478e:	9800      	ldr	r0, [sp, #0]
 8004790:	9f08      	ldr	r7, [sp, #32]
 8004792:	321a      	adds	r2, #26
 8004794:	47b8      	blx	r7
 8004796:	3001      	adds	r0, #1
 8004798:	d0e6      	beq.n	8004768 <_printf_common+0xa8>
 800479a:	3601      	adds	r6, #1
 800479c:	e7d1      	b.n	8004742 <_printf_common+0x82>
	...

080047a0 <_printf_i>:
 80047a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047a2:	b08b      	sub	sp, #44	@ 0x2c
 80047a4:	9206      	str	r2, [sp, #24]
 80047a6:	000a      	movs	r2, r1
 80047a8:	3243      	adds	r2, #67	@ 0x43
 80047aa:	9307      	str	r3, [sp, #28]
 80047ac:	9005      	str	r0, [sp, #20]
 80047ae:	9203      	str	r2, [sp, #12]
 80047b0:	7e0a      	ldrb	r2, [r1, #24]
 80047b2:	000c      	movs	r4, r1
 80047b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80047b6:	2a78      	cmp	r2, #120	@ 0x78
 80047b8:	d809      	bhi.n	80047ce <_printf_i+0x2e>
 80047ba:	2a62      	cmp	r2, #98	@ 0x62
 80047bc:	d80b      	bhi.n	80047d6 <_printf_i+0x36>
 80047be:	2a00      	cmp	r2, #0
 80047c0:	d100      	bne.n	80047c4 <_printf_i+0x24>
 80047c2:	e0bc      	b.n	800493e <_printf_i+0x19e>
 80047c4:	497b      	ldr	r1, [pc, #492]	@ (80049b4 <_printf_i+0x214>)
 80047c6:	9104      	str	r1, [sp, #16]
 80047c8:	2a58      	cmp	r2, #88	@ 0x58
 80047ca:	d100      	bne.n	80047ce <_printf_i+0x2e>
 80047cc:	e090      	b.n	80048f0 <_printf_i+0x150>
 80047ce:	0025      	movs	r5, r4
 80047d0:	3542      	adds	r5, #66	@ 0x42
 80047d2:	702a      	strb	r2, [r5, #0]
 80047d4:	e022      	b.n	800481c <_printf_i+0x7c>
 80047d6:	0010      	movs	r0, r2
 80047d8:	3863      	subs	r0, #99	@ 0x63
 80047da:	2815      	cmp	r0, #21
 80047dc:	d8f7      	bhi.n	80047ce <_printf_i+0x2e>
 80047de:	f7fb fc93 	bl	8000108 <__gnu_thumb1_case_shi>
 80047e2:	0016      	.short	0x0016
 80047e4:	fff6001f 	.word	0xfff6001f
 80047e8:	fff6fff6 	.word	0xfff6fff6
 80047ec:	001ffff6 	.word	0x001ffff6
 80047f0:	fff6fff6 	.word	0xfff6fff6
 80047f4:	fff6fff6 	.word	0xfff6fff6
 80047f8:	003600a1 	.word	0x003600a1
 80047fc:	fff60080 	.word	0xfff60080
 8004800:	00b2fff6 	.word	0x00b2fff6
 8004804:	0036fff6 	.word	0x0036fff6
 8004808:	fff6fff6 	.word	0xfff6fff6
 800480c:	0084      	.short	0x0084
 800480e:	0025      	movs	r5, r4
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	3542      	adds	r5, #66	@ 0x42
 8004814:	1d11      	adds	r1, r2, #4
 8004816:	6019      	str	r1, [r3, #0]
 8004818:	6813      	ldr	r3, [r2, #0]
 800481a:	702b      	strb	r3, [r5, #0]
 800481c:	2301      	movs	r3, #1
 800481e:	e0a0      	b.n	8004962 <_printf_i+0x1c2>
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	6809      	ldr	r1, [r1, #0]
 8004824:	1d02      	adds	r2, r0, #4
 8004826:	060d      	lsls	r5, r1, #24
 8004828:	d50b      	bpl.n	8004842 <_printf_i+0xa2>
 800482a:	6806      	ldr	r6, [r0, #0]
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	2e00      	cmp	r6, #0
 8004830:	da03      	bge.n	800483a <_printf_i+0x9a>
 8004832:	232d      	movs	r3, #45	@ 0x2d
 8004834:	9a03      	ldr	r2, [sp, #12]
 8004836:	4276      	negs	r6, r6
 8004838:	7013      	strb	r3, [r2, #0]
 800483a:	4b5e      	ldr	r3, [pc, #376]	@ (80049b4 <_printf_i+0x214>)
 800483c:	270a      	movs	r7, #10
 800483e:	9304      	str	r3, [sp, #16]
 8004840:	e018      	b.n	8004874 <_printf_i+0xd4>
 8004842:	6806      	ldr	r6, [r0, #0]
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	0649      	lsls	r1, r1, #25
 8004848:	d5f1      	bpl.n	800482e <_printf_i+0x8e>
 800484a:	b236      	sxth	r6, r6
 800484c:	e7ef      	b.n	800482e <_printf_i+0x8e>
 800484e:	6808      	ldr	r0, [r1, #0]
 8004850:	6819      	ldr	r1, [r3, #0]
 8004852:	c940      	ldmia	r1!, {r6}
 8004854:	0605      	lsls	r5, r0, #24
 8004856:	d402      	bmi.n	800485e <_printf_i+0xbe>
 8004858:	0640      	lsls	r0, r0, #25
 800485a:	d500      	bpl.n	800485e <_printf_i+0xbe>
 800485c:	b2b6      	uxth	r6, r6
 800485e:	6019      	str	r1, [r3, #0]
 8004860:	4b54      	ldr	r3, [pc, #336]	@ (80049b4 <_printf_i+0x214>)
 8004862:	270a      	movs	r7, #10
 8004864:	9304      	str	r3, [sp, #16]
 8004866:	2a6f      	cmp	r2, #111	@ 0x6f
 8004868:	d100      	bne.n	800486c <_printf_i+0xcc>
 800486a:	3f02      	subs	r7, #2
 800486c:	0023      	movs	r3, r4
 800486e:	2200      	movs	r2, #0
 8004870:	3343      	adds	r3, #67	@ 0x43
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	6863      	ldr	r3, [r4, #4]
 8004876:	60a3      	str	r3, [r4, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	db03      	blt.n	8004884 <_printf_i+0xe4>
 800487c:	2104      	movs	r1, #4
 800487e:	6822      	ldr	r2, [r4, #0]
 8004880:	438a      	bics	r2, r1
 8004882:	6022      	str	r2, [r4, #0]
 8004884:	2e00      	cmp	r6, #0
 8004886:	d102      	bne.n	800488e <_printf_i+0xee>
 8004888:	9d03      	ldr	r5, [sp, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00c      	beq.n	80048a8 <_printf_i+0x108>
 800488e:	9d03      	ldr	r5, [sp, #12]
 8004890:	0030      	movs	r0, r6
 8004892:	0039      	movs	r1, r7
 8004894:	f7fb fcc8 	bl	8000228 <__aeabi_uidivmod>
 8004898:	9b04      	ldr	r3, [sp, #16]
 800489a:	3d01      	subs	r5, #1
 800489c:	5c5b      	ldrb	r3, [r3, r1]
 800489e:	702b      	strb	r3, [r5, #0]
 80048a0:	0033      	movs	r3, r6
 80048a2:	0006      	movs	r6, r0
 80048a4:	429f      	cmp	r7, r3
 80048a6:	d9f3      	bls.n	8004890 <_printf_i+0xf0>
 80048a8:	2f08      	cmp	r7, #8
 80048aa:	d109      	bne.n	80048c0 <_printf_i+0x120>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	07db      	lsls	r3, r3, #31
 80048b0:	d506      	bpl.n	80048c0 <_printf_i+0x120>
 80048b2:	6862      	ldr	r2, [r4, #4]
 80048b4:	6923      	ldr	r3, [r4, #16]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	dc02      	bgt.n	80048c0 <_printf_i+0x120>
 80048ba:	2330      	movs	r3, #48	@ 0x30
 80048bc:	3d01      	subs	r5, #1
 80048be:	702b      	strb	r3, [r5, #0]
 80048c0:	9b03      	ldr	r3, [sp, #12]
 80048c2:	1b5b      	subs	r3, r3, r5
 80048c4:	6123      	str	r3, [r4, #16]
 80048c6:	9b07      	ldr	r3, [sp, #28]
 80048c8:	0021      	movs	r1, r4
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	9805      	ldr	r0, [sp, #20]
 80048ce:	9b06      	ldr	r3, [sp, #24]
 80048d0:	aa09      	add	r2, sp, #36	@ 0x24
 80048d2:	f7ff fef5 	bl	80046c0 <_printf_common>
 80048d6:	3001      	adds	r0, #1
 80048d8:	d148      	bne.n	800496c <_printf_i+0x1cc>
 80048da:	2001      	movs	r0, #1
 80048dc:	4240      	negs	r0, r0
 80048de:	b00b      	add	sp, #44	@ 0x2c
 80048e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e2:	2220      	movs	r2, #32
 80048e4:	6809      	ldr	r1, [r1, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	6022      	str	r2, [r4, #0]
 80048ea:	2278      	movs	r2, #120	@ 0x78
 80048ec:	4932      	ldr	r1, [pc, #200]	@ (80049b8 <_printf_i+0x218>)
 80048ee:	9104      	str	r1, [sp, #16]
 80048f0:	0021      	movs	r1, r4
 80048f2:	3145      	adds	r1, #69	@ 0x45
 80048f4:	700a      	strb	r2, [r1, #0]
 80048f6:	6819      	ldr	r1, [r3, #0]
 80048f8:	6822      	ldr	r2, [r4, #0]
 80048fa:	c940      	ldmia	r1!, {r6}
 80048fc:	0610      	lsls	r0, r2, #24
 80048fe:	d402      	bmi.n	8004906 <_printf_i+0x166>
 8004900:	0650      	lsls	r0, r2, #25
 8004902:	d500      	bpl.n	8004906 <_printf_i+0x166>
 8004904:	b2b6      	uxth	r6, r6
 8004906:	6019      	str	r1, [r3, #0]
 8004908:	07d3      	lsls	r3, r2, #31
 800490a:	d502      	bpl.n	8004912 <_printf_i+0x172>
 800490c:	2320      	movs	r3, #32
 800490e:	4313      	orrs	r3, r2
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	2e00      	cmp	r6, #0
 8004914:	d001      	beq.n	800491a <_printf_i+0x17a>
 8004916:	2710      	movs	r7, #16
 8004918:	e7a8      	b.n	800486c <_printf_i+0xcc>
 800491a:	2220      	movs	r2, #32
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	4393      	bics	r3, r2
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	e7f8      	b.n	8004916 <_printf_i+0x176>
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	680d      	ldr	r5, [r1, #0]
 8004928:	1d10      	adds	r0, r2, #4
 800492a:	6949      	ldr	r1, [r1, #20]
 800492c:	6018      	str	r0, [r3, #0]
 800492e:	6813      	ldr	r3, [r2, #0]
 8004930:	062e      	lsls	r6, r5, #24
 8004932:	d501      	bpl.n	8004938 <_printf_i+0x198>
 8004934:	6019      	str	r1, [r3, #0]
 8004936:	e002      	b.n	800493e <_printf_i+0x19e>
 8004938:	066d      	lsls	r5, r5, #25
 800493a:	d5fb      	bpl.n	8004934 <_printf_i+0x194>
 800493c:	8019      	strh	r1, [r3, #0]
 800493e:	2300      	movs	r3, #0
 8004940:	9d03      	ldr	r5, [sp, #12]
 8004942:	6123      	str	r3, [r4, #16]
 8004944:	e7bf      	b.n	80048c6 <_printf_i+0x126>
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	1d11      	adds	r1, r2, #4
 800494a:	6019      	str	r1, [r3, #0]
 800494c:	6815      	ldr	r5, [r2, #0]
 800494e:	2100      	movs	r1, #0
 8004950:	0028      	movs	r0, r5
 8004952:	6862      	ldr	r2, [r4, #4]
 8004954:	f000 f986 	bl	8004c64 <memchr>
 8004958:	2800      	cmp	r0, #0
 800495a:	d001      	beq.n	8004960 <_printf_i+0x1c0>
 800495c:	1b40      	subs	r0, r0, r5
 800495e:	6060      	str	r0, [r4, #4]
 8004960:	6863      	ldr	r3, [r4, #4]
 8004962:	6123      	str	r3, [r4, #16]
 8004964:	2300      	movs	r3, #0
 8004966:	9a03      	ldr	r2, [sp, #12]
 8004968:	7013      	strb	r3, [r2, #0]
 800496a:	e7ac      	b.n	80048c6 <_printf_i+0x126>
 800496c:	002a      	movs	r2, r5
 800496e:	6923      	ldr	r3, [r4, #16]
 8004970:	9906      	ldr	r1, [sp, #24]
 8004972:	9805      	ldr	r0, [sp, #20]
 8004974:	9d07      	ldr	r5, [sp, #28]
 8004976:	47a8      	blx	r5
 8004978:	3001      	adds	r0, #1
 800497a:	d0ae      	beq.n	80048da <_printf_i+0x13a>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	079b      	lsls	r3, r3, #30
 8004980:	d415      	bmi.n	80049ae <_printf_i+0x20e>
 8004982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004984:	68e0      	ldr	r0, [r4, #12]
 8004986:	4298      	cmp	r0, r3
 8004988:	daa9      	bge.n	80048de <_printf_i+0x13e>
 800498a:	0018      	movs	r0, r3
 800498c:	e7a7      	b.n	80048de <_printf_i+0x13e>
 800498e:	0022      	movs	r2, r4
 8004990:	2301      	movs	r3, #1
 8004992:	9906      	ldr	r1, [sp, #24]
 8004994:	9805      	ldr	r0, [sp, #20]
 8004996:	9e07      	ldr	r6, [sp, #28]
 8004998:	3219      	adds	r2, #25
 800499a:	47b0      	blx	r6
 800499c:	3001      	adds	r0, #1
 800499e:	d09c      	beq.n	80048da <_printf_i+0x13a>
 80049a0:	3501      	adds	r5, #1
 80049a2:	68e3      	ldr	r3, [r4, #12]
 80049a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	42ab      	cmp	r3, r5
 80049aa:	dcf0      	bgt.n	800498e <_printf_i+0x1ee>
 80049ac:	e7e9      	b.n	8004982 <_printf_i+0x1e2>
 80049ae:	2500      	movs	r5, #0
 80049b0:	e7f7      	b.n	80049a2 <_printf_i+0x202>
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	08004dbd 	.word	0x08004dbd
 80049b8:	08004dce 	.word	0x08004dce

080049bc <__sflush_r>:
 80049bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049be:	220c      	movs	r2, #12
 80049c0:	5e8b      	ldrsh	r3, [r1, r2]
 80049c2:	0005      	movs	r5, r0
 80049c4:	000c      	movs	r4, r1
 80049c6:	071a      	lsls	r2, r3, #28
 80049c8:	d456      	bmi.n	8004a78 <__sflush_r+0xbc>
 80049ca:	684a      	ldr	r2, [r1, #4]
 80049cc:	2a00      	cmp	r2, #0
 80049ce:	dc02      	bgt.n	80049d6 <__sflush_r+0x1a>
 80049d0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80049d2:	2a00      	cmp	r2, #0
 80049d4:	dd4e      	ble.n	8004a74 <__sflush_r+0xb8>
 80049d6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80049d8:	2f00      	cmp	r7, #0
 80049da:	d04b      	beq.n	8004a74 <__sflush_r+0xb8>
 80049dc:	2200      	movs	r2, #0
 80049de:	2080      	movs	r0, #128	@ 0x80
 80049e0:	682e      	ldr	r6, [r5, #0]
 80049e2:	602a      	str	r2, [r5, #0]
 80049e4:	001a      	movs	r2, r3
 80049e6:	0140      	lsls	r0, r0, #5
 80049e8:	6a21      	ldr	r1, [r4, #32]
 80049ea:	4002      	ands	r2, r0
 80049ec:	4203      	tst	r3, r0
 80049ee:	d033      	beq.n	8004a58 <__sflush_r+0x9c>
 80049f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	075b      	lsls	r3, r3, #29
 80049f6:	d506      	bpl.n	8004a06 <__sflush_r+0x4a>
 80049f8:	6863      	ldr	r3, [r4, #4]
 80049fa:	1ad2      	subs	r2, r2, r3
 80049fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <__sflush_r+0x4a>
 8004a02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a04:	1ad2      	subs	r2, r2, r3
 8004a06:	2300      	movs	r3, #0
 8004a08:	0028      	movs	r0, r5
 8004a0a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004a0c:	6a21      	ldr	r1, [r4, #32]
 8004a0e:	47b8      	blx	r7
 8004a10:	89a2      	ldrh	r2, [r4, #12]
 8004a12:	1c43      	adds	r3, r0, #1
 8004a14:	d106      	bne.n	8004a24 <__sflush_r+0x68>
 8004a16:	6829      	ldr	r1, [r5, #0]
 8004a18:	291d      	cmp	r1, #29
 8004a1a:	d846      	bhi.n	8004aaa <__sflush_r+0xee>
 8004a1c:	4b29      	ldr	r3, [pc, #164]	@ (8004ac4 <__sflush_r+0x108>)
 8004a1e:	410b      	asrs	r3, r1
 8004a20:	07db      	lsls	r3, r3, #31
 8004a22:	d442      	bmi.n	8004aaa <__sflush_r+0xee>
 8004a24:	2300      	movs	r3, #0
 8004a26:	6063      	str	r3, [r4, #4]
 8004a28:	6923      	ldr	r3, [r4, #16]
 8004a2a:	6023      	str	r3, [r4, #0]
 8004a2c:	04d2      	lsls	r2, r2, #19
 8004a2e:	d505      	bpl.n	8004a3c <__sflush_r+0x80>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d102      	bne.n	8004a3a <__sflush_r+0x7e>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d100      	bne.n	8004a3c <__sflush_r+0x80>
 8004a3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a3e:	602e      	str	r6, [r5, #0]
 8004a40:	2900      	cmp	r1, #0
 8004a42:	d017      	beq.n	8004a74 <__sflush_r+0xb8>
 8004a44:	0023      	movs	r3, r4
 8004a46:	3344      	adds	r3, #68	@ 0x44
 8004a48:	4299      	cmp	r1, r3
 8004a4a:	d002      	beq.n	8004a52 <__sflush_r+0x96>
 8004a4c:	0028      	movs	r0, r5
 8004a4e:	f7ff fbf7 	bl	8004240 <_free_r>
 8004a52:	2300      	movs	r3, #0
 8004a54:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a56:	e00d      	b.n	8004a74 <__sflush_r+0xb8>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	0028      	movs	r0, r5
 8004a5c:	47b8      	blx	r7
 8004a5e:	0002      	movs	r2, r0
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	d1c6      	bne.n	80049f2 <__sflush_r+0x36>
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0c3      	beq.n	80049f2 <__sflush_r+0x36>
 8004a6a:	2b1d      	cmp	r3, #29
 8004a6c:	d001      	beq.n	8004a72 <__sflush_r+0xb6>
 8004a6e:	2b16      	cmp	r3, #22
 8004a70:	d11a      	bne.n	8004aa8 <__sflush_r+0xec>
 8004a72:	602e      	str	r6, [r5, #0]
 8004a74:	2000      	movs	r0, #0
 8004a76:	e01e      	b.n	8004ab6 <__sflush_r+0xfa>
 8004a78:	690e      	ldr	r6, [r1, #16]
 8004a7a:	2e00      	cmp	r6, #0
 8004a7c:	d0fa      	beq.n	8004a74 <__sflush_r+0xb8>
 8004a7e:	680f      	ldr	r7, [r1, #0]
 8004a80:	600e      	str	r6, [r1, #0]
 8004a82:	1bba      	subs	r2, r7, r6
 8004a84:	9201      	str	r2, [sp, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	079b      	lsls	r3, r3, #30
 8004a8a:	d100      	bne.n	8004a8e <__sflush_r+0xd2>
 8004a8c:	694a      	ldr	r2, [r1, #20]
 8004a8e:	60a2      	str	r2, [r4, #8]
 8004a90:	9b01      	ldr	r3, [sp, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	ddee      	ble.n	8004a74 <__sflush_r+0xb8>
 8004a96:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004a98:	0032      	movs	r2, r6
 8004a9a:	001f      	movs	r7, r3
 8004a9c:	0028      	movs	r0, r5
 8004a9e:	9b01      	ldr	r3, [sp, #4]
 8004aa0:	6a21      	ldr	r1, [r4, #32]
 8004aa2:	47b8      	blx	r7
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	dc07      	bgt.n	8004ab8 <__sflush_r+0xfc>
 8004aa8:	89a2      	ldrh	r2, [r4, #12]
 8004aaa:	2340      	movs	r3, #64	@ 0x40
 8004aac:	2001      	movs	r0, #1
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	b21b      	sxth	r3, r3
 8004ab2:	81a3      	strh	r3, [r4, #12]
 8004ab4:	4240      	negs	r0, r0
 8004ab6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ab8:	9b01      	ldr	r3, [sp, #4]
 8004aba:	1836      	adds	r6, r6, r0
 8004abc:	1a1b      	subs	r3, r3, r0
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	e7e6      	b.n	8004a90 <__sflush_r+0xd4>
 8004ac2:	46c0      	nop			@ (mov r8, r8)
 8004ac4:	dfbffffe 	.word	0xdfbffffe

08004ac8 <_fflush_r>:
 8004ac8:	690b      	ldr	r3, [r1, #16]
 8004aca:	b570      	push	{r4, r5, r6, lr}
 8004acc:	0005      	movs	r5, r0
 8004ace:	000c      	movs	r4, r1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <_fflush_r+0x12>
 8004ad4:	2500      	movs	r5, #0
 8004ad6:	0028      	movs	r0, r5
 8004ad8:	bd70      	pop	{r4, r5, r6, pc}
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d004      	beq.n	8004ae8 <_fflush_r+0x20>
 8004ade:	6a03      	ldr	r3, [r0, #32]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <_fflush_r+0x20>
 8004ae4:	f7ff f998 	bl	8003e18 <__sinit>
 8004ae8:	220c      	movs	r2, #12
 8004aea:	5ea3      	ldrsh	r3, [r4, r2]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f1      	beq.n	8004ad4 <_fflush_r+0xc>
 8004af0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004af2:	07d2      	lsls	r2, r2, #31
 8004af4:	d404      	bmi.n	8004b00 <_fflush_r+0x38>
 8004af6:	059b      	lsls	r3, r3, #22
 8004af8:	d402      	bmi.n	8004b00 <_fflush_r+0x38>
 8004afa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004afc:	f7ff fb9d 	bl	800423a <__retarget_lock_acquire_recursive>
 8004b00:	0028      	movs	r0, r5
 8004b02:	0021      	movs	r1, r4
 8004b04:	f7ff ff5a 	bl	80049bc <__sflush_r>
 8004b08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b0a:	0005      	movs	r5, r0
 8004b0c:	07db      	lsls	r3, r3, #31
 8004b0e:	d4e2      	bmi.n	8004ad6 <_fflush_r+0xe>
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	059b      	lsls	r3, r3, #22
 8004b14:	d4df      	bmi.n	8004ad6 <_fflush_r+0xe>
 8004b16:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b18:	f7ff fb90 	bl	800423c <__retarget_lock_release_recursive>
 8004b1c:	e7db      	b.n	8004ad6 <_fflush_r+0xe>
	...

08004b20 <__swhatbuf_r>:
 8004b20:	b570      	push	{r4, r5, r6, lr}
 8004b22:	000e      	movs	r6, r1
 8004b24:	001d      	movs	r5, r3
 8004b26:	230e      	movs	r3, #14
 8004b28:	5ec9      	ldrsh	r1, [r1, r3]
 8004b2a:	0014      	movs	r4, r2
 8004b2c:	b096      	sub	sp, #88	@ 0x58
 8004b2e:	2900      	cmp	r1, #0
 8004b30:	da0c      	bge.n	8004b4c <__swhatbuf_r+0x2c>
 8004b32:	89b2      	ldrh	r2, [r6, #12]
 8004b34:	2380      	movs	r3, #128	@ 0x80
 8004b36:	0011      	movs	r1, r2
 8004b38:	4019      	ands	r1, r3
 8004b3a:	421a      	tst	r2, r3
 8004b3c:	d114      	bne.n	8004b68 <__swhatbuf_r+0x48>
 8004b3e:	2380      	movs	r3, #128	@ 0x80
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	2000      	movs	r0, #0
 8004b44:	6029      	str	r1, [r5, #0]
 8004b46:	6023      	str	r3, [r4, #0]
 8004b48:	b016      	add	sp, #88	@ 0x58
 8004b4a:	bd70      	pop	{r4, r5, r6, pc}
 8004b4c:	466a      	mov	r2, sp
 8004b4e:	f000 f853 	bl	8004bf8 <_fstat_r>
 8004b52:	2800      	cmp	r0, #0
 8004b54:	dbed      	blt.n	8004b32 <__swhatbuf_r+0x12>
 8004b56:	23f0      	movs	r3, #240	@ 0xf0
 8004b58:	9901      	ldr	r1, [sp, #4]
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	4019      	ands	r1, r3
 8004b5e:	4b04      	ldr	r3, [pc, #16]	@ (8004b70 <__swhatbuf_r+0x50>)
 8004b60:	18c9      	adds	r1, r1, r3
 8004b62:	424b      	negs	r3, r1
 8004b64:	4159      	adcs	r1, r3
 8004b66:	e7ea      	b.n	8004b3e <__swhatbuf_r+0x1e>
 8004b68:	2100      	movs	r1, #0
 8004b6a:	2340      	movs	r3, #64	@ 0x40
 8004b6c:	e7e9      	b.n	8004b42 <__swhatbuf_r+0x22>
 8004b6e:	46c0      	nop			@ (mov r8, r8)
 8004b70:	ffffe000 	.word	0xffffe000

08004b74 <__smakebuf_r>:
 8004b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b76:	2602      	movs	r6, #2
 8004b78:	898b      	ldrh	r3, [r1, #12]
 8004b7a:	0005      	movs	r5, r0
 8004b7c:	000c      	movs	r4, r1
 8004b7e:	b085      	sub	sp, #20
 8004b80:	4233      	tst	r3, r6
 8004b82:	d007      	beq.n	8004b94 <__smakebuf_r+0x20>
 8004b84:	0023      	movs	r3, r4
 8004b86:	3347      	adds	r3, #71	@ 0x47
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	6123      	str	r3, [r4, #16]
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	6163      	str	r3, [r4, #20]
 8004b90:	b005      	add	sp, #20
 8004b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b94:	ab03      	add	r3, sp, #12
 8004b96:	aa02      	add	r2, sp, #8
 8004b98:	f7ff ffc2 	bl	8004b20 <__swhatbuf_r>
 8004b9c:	9f02      	ldr	r7, [sp, #8]
 8004b9e:	9001      	str	r0, [sp, #4]
 8004ba0:	0039      	movs	r1, r7
 8004ba2:	0028      	movs	r0, r5
 8004ba4:	f7ff fbb8 	bl	8004318 <_malloc_r>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d108      	bne.n	8004bbe <__smakebuf_r+0x4a>
 8004bac:	220c      	movs	r2, #12
 8004bae:	5ea3      	ldrsh	r3, [r4, r2]
 8004bb0:	059a      	lsls	r2, r3, #22
 8004bb2:	d4ed      	bmi.n	8004b90 <__smakebuf_r+0x1c>
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	4393      	bics	r3, r2
 8004bb8:	431e      	orrs	r6, r3
 8004bba:	81a6      	strh	r6, [r4, #12]
 8004bbc:	e7e2      	b.n	8004b84 <__smakebuf_r+0x10>
 8004bbe:	2380      	movs	r3, #128	@ 0x80
 8004bc0:	89a2      	ldrh	r2, [r4, #12]
 8004bc2:	6020      	str	r0, [r4, #0]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	81a3      	strh	r3, [r4, #12]
 8004bc8:	9b03      	ldr	r3, [sp, #12]
 8004bca:	6120      	str	r0, [r4, #16]
 8004bcc:	6167      	str	r7, [r4, #20]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00c      	beq.n	8004bec <__smakebuf_r+0x78>
 8004bd2:	0028      	movs	r0, r5
 8004bd4:	230e      	movs	r3, #14
 8004bd6:	5ee1      	ldrsh	r1, [r4, r3]
 8004bd8:	f000 f820 	bl	8004c1c <_isatty_r>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d005      	beq.n	8004bec <__smakebuf_r+0x78>
 8004be0:	2303      	movs	r3, #3
 8004be2:	89a2      	ldrh	r2, [r4, #12]
 8004be4:	439a      	bics	r2, r3
 8004be6:	3b02      	subs	r3, #2
 8004be8:	4313      	orrs	r3, r2
 8004bea:	81a3      	strh	r3, [r4, #12]
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	9a01      	ldr	r2, [sp, #4]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	81a3      	strh	r3, [r4, #12]
 8004bf4:	e7cc      	b.n	8004b90 <__smakebuf_r+0x1c>
	...

08004bf8 <_fstat_r>:
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	b570      	push	{r4, r5, r6, lr}
 8004bfc:	4d06      	ldr	r5, [pc, #24]	@ (8004c18 <_fstat_r+0x20>)
 8004bfe:	0004      	movs	r4, r0
 8004c00:	0008      	movs	r0, r1
 8004c02:	0011      	movs	r1, r2
 8004c04:	602b      	str	r3, [r5, #0]
 8004c06:	f7fc faab 	bl	8001160 <_fstat>
 8004c0a:	1c43      	adds	r3, r0, #1
 8004c0c:	d103      	bne.n	8004c16 <_fstat_r+0x1e>
 8004c0e:	682b      	ldr	r3, [r5, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d000      	beq.n	8004c16 <_fstat_r+0x1e>
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	bd70      	pop	{r4, r5, r6, pc}
 8004c18:	200003b0 	.word	0x200003b0

08004c1c <_isatty_r>:
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	b570      	push	{r4, r5, r6, lr}
 8004c20:	4d06      	ldr	r5, [pc, #24]	@ (8004c3c <_isatty_r+0x20>)
 8004c22:	0004      	movs	r4, r0
 8004c24:	0008      	movs	r0, r1
 8004c26:	602b      	str	r3, [r5, #0]
 8004c28:	f7fc faa8 	bl	800117c <_isatty>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d103      	bne.n	8004c38 <_isatty_r+0x1c>
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d000      	beq.n	8004c38 <_isatty_r+0x1c>
 8004c36:	6023      	str	r3, [r4, #0]
 8004c38:	bd70      	pop	{r4, r5, r6, pc}
 8004c3a:	46c0      	nop			@ (mov r8, r8)
 8004c3c:	200003b0 	.word	0x200003b0

08004c40 <_sbrk_r>:
 8004c40:	2300      	movs	r3, #0
 8004c42:	b570      	push	{r4, r5, r6, lr}
 8004c44:	4d06      	ldr	r5, [pc, #24]	@ (8004c60 <_sbrk_r+0x20>)
 8004c46:	0004      	movs	r4, r0
 8004c48:	0008      	movs	r0, r1
 8004c4a:	602b      	str	r3, [r5, #0]
 8004c4c:	f7fc faaa 	bl	80011a4 <_sbrk>
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	d103      	bne.n	8004c5c <_sbrk_r+0x1c>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d000      	beq.n	8004c5c <_sbrk_r+0x1c>
 8004c5a:	6023      	str	r3, [r4, #0]
 8004c5c:	bd70      	pop	{r4, r5, r6, pc}
 8004c5e:	46c0      	nop			@ (mov r8, r8)
 8004c60:	200003b0 	.word	0x200003b0

08004c64 <memchr>:
 8004c64:	b2c9      	uxtb	r1, r1
 8004c66:	1882      	adds	r2, r0, r2
 8004c68:	4290      	cmp	r0, r2
 8004c6a:	d101      	bne.n	8004c70 <memchr+0xc>
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	4770      	bx	lr
 8004c70:	7803      	ldrb	r3, [r0, #0]
 8004c72:	428b      	cmp	r3, r1
 8004c74:	d0fb      	beq.n	8004c6e <memchr+0xa>
 8004c76:	3001      	adds	r0, #1
 8004c78:	e7f6      	b.n	8004c68 <memchr+0x4>
	...

08004c7c <_init>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr

08004c88 <_fini>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	46c0      	nop			@ (mov r8, r8)
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr
