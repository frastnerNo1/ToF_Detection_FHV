
ToF_Detection_FHV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c10  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08004cd0  08004cd0  00005cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e14  08004e14  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004e14  08004e14  00005e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e1c  08004e1c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e1c  08004e1c  00005e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e20  08004e20  00005e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004e24  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000068  08004e8c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08004e8c  000063c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d34e  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a7  00000000  00000000  000133de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00015488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000983  00000000  00000000  000160d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012fbe  00000000  00000000  00016a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010460  00000000  00000000  00029a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006adb8  00000000  00000000  00039e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a4c31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033b4  00000000  00000000  000a4c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000a8028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004cb8 	.word	0x08004cb8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004cb8 	.word	0x08004cb8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8d8 	bl	80004a4 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8d3 	bl	80004a4 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzsi2>:
 8000468:	211c      	movs	r1, #28
 800046a:	2301      	movs	r3, #1
 800046c:	041b      	lsls	r3, r3, #16
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0xe>
 8000472:	0c00      	lsrs	r0, r0, #16
 8000474:	3910      	subs	r1, #16
 8000476:	0a1b      	lsrs	r3, r3, #8
 8000478:	4298      	cmp	r0, r3
 800047a:	d301      	bcc.n	8000480 <__clzsi2+0x18>
 800047c:	0a00      	lsrs	r0, r0, #8
 800047e:	3908      	subs	r1, #8
 8000480:	091b      	lsrs	r3, r3, #4
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0x22>
 8000486:	0900      	lsrs	r0, r0, #4
 8000488:	3904      	subs	r1, #4
 800048a:	a202      	add	r2, pc, #8	@ (adr r2, 8000494 <__clzsi2+0x2c>)
 800048c:	5c10      	ldrb	r0, [r2, r0]
 800048e:	1840      	adds	r0, r0, r1
 8000490:	4770      	bx	lr
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	02020304 	.word	0x02020304
 8000498:	01010101 	.word	0x01010101
	...

080004a4 <__clzdi2>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	2900      	cmp	r1, #0
 80004a8:	d103      	bne.n	80004b2 <__clzdi2+0xe>
 80004aa:	f7ff ffdd 	bl	8000468 <__clzsi2>
 80004ae:	3020      	adds	r0, #32
 80004b0:	e002      	b.n	80004b8 <__clzdi2+0x14>
 80004b2:	0008      	movs	r0, r1
 80004b4:	f7ff ffd8 	bl	8000468 <__clzsi2>
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	0002      	movs	r2, r0
 80004c4:	1dbb      	adds	r3, r7, #6
 80004c6:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80004c8:	230f      	movs	r3, #15
 80004ca:	18fb      	adds	r3, r7, r3
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 80004d0:	210e      	movs	r1, #14
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	222d      	movs	r2, #45	@ 0x2d
 80004dc:	701a      	strb	r2, [r3, #0]
 80004de:	e01a      	b.n	8000516 <VL53L1X_SensorInit+0x5a>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80004e0:	240e      	movs	r4, #14
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	b299      	uxth	r1, r3
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	3b2d      	subs	r3, #45	@ 0x2d
 80004ee:	4a3e      	ldr	r2, [pc, #248]	@ (80005e8 <VL53L1X_SensorInit+0x12c>)
 80004f0:	5cd2      	ldrb	r2, [r2, r3]
 80004f2:	1dbb      	adds	r3, r7, #6
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 fa46 	bl	8000988 <VL53L1_WrByte>
 80004fc:	0003      	movs	r3, r0
 80004fe:	0019      	movs	r1, r3
 8000500:	220f      	movs	r2, #15
 8000502:	18bb      	adds	r3, r7, r2
 8000504:	18ba      	adds	r2, r7, r2
 8000506:	7812      	ldrb	r2, [r2, #0]
 8000508:	430a      	orrs	r2, r1
 800050a:	701a      	strb	r2, [r3, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800050c:	193b      	adds	r3, r7, r4
 800050e:	781a      	ldrb	r2, [r3, #0]
 8000510:	193b      	adds	r3, r7, r4
 8000512:	3201      	adds	r2, #1
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	230e      	movs	r3, #14
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b87      	cmp	r3, #135	@ 0x87
 800051e:	d9df      	bls.n	80004e0 <VL53L1X_SensorInit+0x24>
	}
	status |= VL53L1X_StartRanging(dev);
 8000520:	1dbb      	adds	r3, r7, #6
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	0018      	movs	r0, r3
 8000526:	f000 f8b3 	bl	8000690 <VL53L1X_StartRanging>
 800052a:	0003      	movs	r3, r0
 800052c:	0019      	movs	r1, r3
 800052e:	220f      	movs	r2, #15
 8000530:	18bb      	adds	r3, r7, r2
 8000532:	18ba      	adds	r2, r7, r2
 8000534:	7812      	ldrb	r2, [r2, #0]
 8000536:	430a      	orrs	r2, r1
 8000538:	701a      	strb	r2, [r3, #0]
	tmp  = 0;
 800053a:	230d      	movs	r3, #13
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	2200      	movs	r2, #0
 8000540:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8000542:	e00f      	b.n	8000564 <VL53L1X_SensorInit+0xa8>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8000544:	230d      	movs	r3, #13
 8000546:	18fa      	adds	r2, r7, r3
 8000548:	1dbb      	adds	r3, r7, #6
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	0011      	movs	r1, r2
 800054e:	0018      	movs	r0, r3
 8000550:	f000 f8dc 	bl	800070c <VL53L1X_CheckForDataReady>
 8000554:	0003      	movs	r3, r0
 8000556:	0019      	movs	r1, r3
 8000558:	220f      	movs	r2, #15
 800055a:	18bb      	adds	r3, r7, r2
 800055c:	18ba      	adds	r2, r7, r2
 800055e:	7812      	ldrb	r2, [r2, #0]
 8000560:	430a      	orrs	r2, r1
 8000562:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8000564:	230d      	movs	r3, #13
 8000566:	18fb      	adds	r3, r7, r3
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0ea      	beq.n	8000544 <VL53L1X_SensorInit+0x88>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 800056e:	1dbb      	adds	r3, r7, #6
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	0018      	movs	r0, r3
 8000574:	f000 f83a 	bl	80005ec <VL53L1X_ClearInterrupt>
 8000578:	0003      	movs	r3, r0
 800057a:	0019      	movs	r1, r3
 800057c:	240f      	movs	r4, #15
 800057e:	193b      	adds	r3, r7, r4
 8000580:	193a      	adds	r2, r7, r4
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	430a      	orrs	r2, r1
 8000586:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_StopRanging(dev);
 8000588:	1dbb      	adds	r3, r7, #6
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	0018      	movs	r0, r3
 800058e:	f000 f89e 	bl	80006ce <VL53L1X_StopRanging>
 8000592:	0003      	movs	r3, r0
 8000594:	0019      	movs	r1, r3
 8000596:	193b      	adds	r3, r7, r4
 8000598:	193a      	adds	r2, r7, r4
 800059a:	7812      	ldrb	r2, [r2, #0]
 800059c:	430a      	orrs	r2, r1
 800059e:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 80005a0:	1dbb      	adds	r3, r7, #6
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	2209      	movs	r2, #9
 80005a6:	2108      	movs	r1, #8
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 f9ed 	bl	8000988 <VL53L1_WrByte>
 80005ae:	0003      	movs	r3, r0
 80005b0:	0019      	movs	r1, r3
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	193a      	adds	r2, r7, r4
 80005b6:	7812      	ldrb	r2, [r2, #0]
 80005b8:	430a      	orrs	r2, r1
 80005ba:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 80005bc:	1dbb      	adds	r3, r7, #6
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	210b      	movs	r1, #11
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 f9df 	bl	8000988 <VL53L1_WrByte>
 80005ca:	0003      	movs	r3, r0
 80005cc:	0019      	movs	r1, r3
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	193a      	adds	r2, r7, r4
 80005d2:	7812      	ldrb	r2, [r2, #0]
 80005d4:	430a      	orrs	r2, r1
 80005d6:	701a      	strb	r2, [r3, #0]
	return status;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b25b      	sxtb	r3, r3
}
 80005de:	0018      	movs	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b005      	add	sp, #20
 80005e4:	bd90      	pop	{r4, r7, pc}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	08004d00 	.word	0x08004d00

080005ec <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	0002      	movs	r2, r0
 80005f4:	1dbb      	adds	r3, r7, #6
 80005f6:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80005f8:	240f      	movs	r4, #15
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8000600:	1dbb      	adds	r3, r7, #6
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	2201      	movs	r2, #1
 8000606:	2186      	movs	r1, #134	@ 0x86
 8000608:	0018      	movs	r0, r3
 800060a:	f000 f9bd 	bl	8000988 <VL53L1_WrByte>
 800060e:	0003      	movs	r3, r0
 8000610:	0019      	movs	r1, r3
 8000612:	193b      	adds	r3, r7, r4
 8000614:	193a      	adds	r2, r7, r4
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	430a      	orrs	r2, r1
 800061a:	701a      	strb	r2, [r3, #0]
	return status;
 800061c:	193b      	adds	r3, r7, r4
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b25b      	sxtb	r3, r3
}
 8000622:	0018      	movs	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	b005      	add	sp, #20
 8000628:	bd90      	pop	{r4, r7, pc}

0800062a <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800062a:	b5b0      	push	{r4, r5, r7, lr}
 800062c:	b084      	sub	sp, #16
 800062e:	af00      	add	r7, sp, #0
 8000630:	0002      	movs	r2, r0
 8000632:	6039      	str	r1, [r7, #0]
 8000634:	1dbb      	adds	r3, r7, #6
 8000636:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8000638:	240f      	movs	r4, #15
 800063a:	193b      	adds	r3, r7, r4
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8000640:	250e      	movs	r5, #14
 8000642:	197a      	adds	r2, r7, r5
 8000644:	1dbb      	adds	r3, r7, #6
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	2130      	movs	r1, #48	@ 0x30
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f9ca 	bl	80009e4 <VL53L1_RdByte>
 8000650:	0003      	movs	r3, r0
 8000652:	0019      	movs	r1, r3
 8000654:	0020      	movs	r0, r4
 8000656:	183b      	adds	r3, r7, r0
 8000658:	183a      	adds	r2, r7, r0
 800065a:	7812      	ldrb	r2, [r2, #0]
 800065c:	430a      	orrs	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x10;
 8000660:	197b      	adds	r3, r7, r5
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2210      	movs	r2, #16
 8000666:	4013      	ands	r3, r2
 8000668:	b2da      	uxtb	r2, r3
 800066a:	197b      	adds	r3, r7, r5
 800066c:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 800066e:	197b      	adds	r3, r7, r5
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	091b      	lsrs	r3, r3, #4
 8000674:	b2db      	uxtb	r3, r3
 8000676:	425a      	negs	r2, r3
 8000678:	4153      	adcs	r3, r2
 800067a:	b2db      	uxtb	r3, r3
 800067c:	001a      	movs	r2, r3
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	701a      	strb	r2, [r3, #0]
	return status;
 8000682:	183b      	adds	r3, r7, r0
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	b25b      	sxtb	r3, r3
}
 8000688:	0018      	movs	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	b004      	add	sp, #16
 800068e:	bdb0      	pop	{r4, r5, r7, pc}

08000690 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	0002      	movs	r2, r0
 8000698:	1dbb      	adds	r3, r7, #6
 800069a:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800069c:	240f      	movs	r4, #15
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 80006a4:	1dbb      	adds	r3, r7, #6
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	2240      	movs	r2, #64	@ 0x40
 80006aa:	2187      	movs	r1, #135	@ 0x87
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 f96b 	bl	8000988 <VL53L1_WrByte>
 80006b2:	0003      	movs	r3, r0
 80006b4:	0019      	movs	r1, r3
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	193a      	adds	r2, r7, r4
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	430a      	orrs	r2, r1
 80006be:	701a      	strb	r2, [r3, #0]
	return status;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b25b      	sxtb	r3, r3
}
 80006c6:	0018      	movs	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b005      	add	sp, #20
 80006cc:	bd90      	pop	{r4, r7, pc}

080006ce <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 80006ce:	b590      	push	{r4, r7, lr}
 80006d0:	b085      	sub	sp, #20
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	0002      	movs	r2, r0
 80006d6:	1dbb      	adds	r3, r7, #6
 80006d8:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80006da:	240f      	movs	r4, #15
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 80006e2:	1dbb      	adds	r3, r7, #6
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	2200      	movs	r2, #0
 80006e8:	2187      	movs	r1, #135	@ 0x87
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 f94c 	bl	8000988 <VL53L1_WrByte>
 80006f0:	0003      	movs	r3, r0
 80006f2:	0019      	movs	r1, r3
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	193a      	adds	r2, r7, r4
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	430a      	orrs	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]
	return status;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b25b      	sxtb	r3, r3
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	b005      	add	sp, #20
 800070a:	bd90      	pop	{r4, r7, pc}

0800070c <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	0002      	movs	r2, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	1dbb      	adds	r3, r7, #6
 8000718:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800071a:	240f      	movs	r4, #15
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000722:	250d      	movs	r5, #13
 8000724:	197a      	adds	r2, r7, r5
 8000726:	1dbb      	adds	r3, r7, #6
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	0011      	movs	r1, r2
 800072c:	0018      	movs	r0, r3
 800072e:	f7ff ff7c 	bl	800062a <VL53L1X_GetInterruptPolarity>
 8000732:	0003      	movs	r3, r0
 8000734:	0019      	movs	r1, r3
 8000736:	193b      	adds	r3, r7, r4
 8000738:	193a      	adds	r2, r7, r4
 800073a:	7812      	ldrb	r2, [r2, #0]
 800073c:	430a      	orrs	r2, r1
 800073e:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8000740:	260e      	movs	r6, #14
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	1dbb      	adds	r3, r7, #6
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	2131      	movs	r1, #49	@ 0x31
 800074a:	0018      	movs	r0, r3
 800074c:	f000 f94a 	bl	80009e4 <VL53L1_RdByte>
 8000750:	0003      	movs	r3, r0
 8000752:	0019      	movs	r1, r3
 8000754:	193b      	adds	r3, r7, r4
 8000756:	193a      	adds	r2, r7, r4
 8000758:	7812      	ldrb	r2, [r2, #0]
 800075a:	430a      	orrs	r2, r1
 800075c:	701a      	strb	r2, [r3, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 800075e:	193b      	adds	r3, r7, r4
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	b25b      	sxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d10f      	bne.n	8000788 <VL53L1X_CheckForDataReady+0x7c>
		if ((Temp & 1) == IntPol)
 8000768:	19bb      	adds	r3, r7, r6
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	001a      	movs	r2, r3
 800076e:	2301      	movs	r3, #1
 8000770:	4013      	ands	r3, r2
 8000772:	197a      	adds	r2, r7, r5
 8000774:	7812      	ldrb	r2, [r2, #0]
 8000776:	4293      	cmp	r3, r2
 8000778:	d103      	bne.n	8000782 <VL53L1X_CheckForDataReady+0x76>
			*isDataReady = 1;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	e002      	b.n	8000788 <VL53L1X_CheckForDataReady+0x7c>
		else
			*isDataReady = 0;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8000788:	230f      	movs	r3, #15
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b25b      	sxtb	r3, r3
}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	b005      	add	sp, #20
 8000796:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000798 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8000798:	b5b0      	push	{r4, r5, r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	0002      	movs	r2, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	1dbb      	adds	r3, r7, #6
 80007a4:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80007a6:	240f      	movs	r4, #15
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = 0;
 80007ae:	250e      	movs	r5, #14
 80007b0:	197b      	adds	r3, r7, r5
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 80007b6:	197a      	adds	r2, r7, r5
 80007b8:	1dbb      	adds	r3, r7, #6
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	21e5      	movs	r1, #229	@ 0xe5
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 f910 	bl	80009e4 <VL53L1_RdByte>
 80007c4:	0003      	movs	r3, r0
 80007c6:	0019      	movs	r1, r3
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	193a      	adds	r2, r7, r4
 80007cc:	7812      	ldrb	r2, [r2, #0]
 80007ce:	430a      	orrs	r2, r1
 80007d0:	701a      	strb	r2, [r3, #0]
	*state = tmp;
 80007d2:	197b      	adds	r3, r7, r5
 80007d4:	781a      	ldrb	r2, [r3, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	701a      	strb	r2, [r3, #0]
	return status;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b25b      	sxtb	r3, r3
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b004      	add	sp, #16
 80007e6:	bdb0      	pop	{r4, r5, r7, pc}

080007e8 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 80007e8:	b5b0      	push	{r4, r5, r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	0002      	movs	r2, r0
 80007f0:	6039      	str	r1, [r7, #0]
 80007f2:	1dbb      	adds	r3, r7, #6
 80007f4:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80007f6:	240f      	movs	r4, #15
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 80007fe:	250c      	movs	r5, #12
 8000800:	197a      	adds	r2, r7, r5
 8000802:	1dbb      	adds	r3, r7, #6
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	2196      	movs	r1, #150	@ 0x96
 8000808:	0018      	movs	r0, r3
 800080a:	f000 f917 	bl	8000a3c <VL53L1_RdWord>
 800080e:	0003      	movs	r3, r0
 8000810:	0019      	movs	r1, r3
 8000812:	0020      	movs	r0, r4
 8000814:	183b      	adds	r3, r7, r0
 8000816:	183a      	adds	r2, r7, r0
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	430a      	orrs	r2, r1
 800081c:	701a      	strb	r2, [r3, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 800081e:	197b      	adds	r3, r7, r5
 8000820:	881a      	ldrh	r2, [r3, #0]
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	801a      	strh	r2, [r3, #0]
	return status;
 8000826:	183b      	adds	r3, r7, r0
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b25b      	sxtb	r3, r3
}
 800082c:	0018      	movs	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	b004      	add	sp, #16
 8000832:	bdb0      	pop	{r4, r5, r7, pc}

08000834 <VL53L1X_GetRangeStatus>:
	*ambRate = tmp*8;
	return status;
}

VL53L1X_ERROR VL53L1X_GetRangeStatus(uint16_t dev, uint8_t *rangeStatus)
{
 8000834:	b5b0      	push	{r4, r5, r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	0002      	movs	r2, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	1dbb      	adds	r3, r7, #6
 8000840:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8000842:	250f      	movs	r5, #15
 8000844:	197b      	adds	r3, r7, r5
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
	uint8_t RgSt;

	*rangeStatus = 255;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	22ff      	movs	r2, #255	@ 0xff
 800084e:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 8000850:	240e      	movs	r4, #14
 8000852:	193a      	adds	r2, r7, r4
 8000854:	1dbb      	adds	r3, r7, #6
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	2189      	movs	r1, #137	@ 0x89
 800085a:	0018      	movs	r0, r3
 800085c:	f000 f8c2 	bl	80009e4 <VL53L1_RdByte>
 8000860:	0003      	movs	r3, r0
 8000862:	0019      	movs	r1, r3
 8000864:	197b      	adds	r3, r7, r5
 8000866:	197a      	adds	r2, r7, r5
 8000868:	7812      	ldrb	r2, [r2, #0]
 800086a:	430a      	orrs	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	RgSt = RgSt & 0x1F;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	221f      	movs	r2, #31
 8000874:	4013      	ands	r3, r2
 8000876:	b2da      	uxtb	r2, r3
 8000878:	193b      	adds	r3, r7, r4
 800087a:	701a      	strb	r2, [r3, #0]
	if (RgSt < 24)
 800087c:	193b      	adds	r3, r7, r4
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b17      	cmp	r3, #23
 8000882:	d806      	bhi.n	8000892 <VL53L1X_GetRangeStatus+0x5e>
		*rangeStatus = status_rtn[RgSt];
 8000884:	193b      	adds	r3, r7, r4
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	001a      	movs	r2, r3
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <VL53L1X_GetRangeStatus+0x70>)
 800088c:	5c9a      	ldrb	r2, [r3, r2]
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	701a      	strb	r2, [r3, #0]
	return status;
 8000892:	230f      	movs	r3, #15
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b25b      	sxtb	r3, r3
}
 800089a:	0018      	movs	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	b004      	add	sp, #16
 80008a0:	bdb0      	pop	{r4, r5, r7, pc}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	08004d5c 	.word	0x08004d5c

080008a8 <tof_ctrl_init>:
	beyond,
	outOfWindow,
	insideWindow
};

void tof_ctrl_init(VL53L1_DEV dev){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	uint8_t booted = 0;
 80008b0:	230f      	movs	r3, #15
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
	VL53L1_SensorOn(dev);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 f8f4 	bl	8000aa8 <VL53L1_SensorOn>
	while(booted == 0){
 80008c0:	e00d      	b.n	80008de <tof_ctrl_init+0x36>
	    VL53L1X_BootState(dev->tof_addr, &booted);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	220f      	movs	r2, #15
 80008ca:	18ba      	adds	r2, r7, r2
 80008cc:	0011      	movs	r1, r2
 80008ce:	0018      	movs	r0, r3
 80008d0:	f7ff ff62 	bl	8000798 <VL53L1X_BootState>
	    HAL_Delay(1000);
 80008d4:	23fa      	movs	r3, #250	@ 0xfa
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 fd57 	bl	800138c <HAL_Delay>
	while(booted == 0){
 80008de:	230f      	movs	r3, #15
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d0ec      	beq.n	80008c2 <tof_ctrl_init+0x1a>
	}
	VL53L1X_SensorInit(dev->tof_addr);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	0018      	movs	r0, r3
 80008f0:	f7ff fde4 	bl	80004bc <VL53L1X_SensorInit>
	HAL_Delay(100);
 80008f4:	2064      	movs	r0, #100	@ 0x64
 80008f6:	f000 fd49 	bl	800138c <HAL_Delay>
	VL53L1_SensorOff(dev);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 f8e4 	bl	8000aca <VL53L1_SensorOff>
}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b004      	add	sp, #16
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <_I2CWrite>:
#define I2C_TIME_OUT_BASE   10
#define I2C_TIME_OUT_BYTE   1

uint8_t _I2CBuffer[256];

static void _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 800090c:	b5b0      	push	{r4, r5, r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af02      	add	r7, sp, #8
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	210e      	movs	r1, #14
 8000918:	187b      	adds	r3, r7, r1
 800091a:	1c02      	adds	r2, r0, #0
 800091c:	801a      	strh	r2, [r3, #0]

    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	330a      	adds	r3, #10
 8000922:	617b      	str	r3, [r7, #20]

    HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, i2c_time_out);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	b29d      	uxth	r5, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	68bc      	ldr	r4, [r7, #8]
 800092c:	187a      	adds	r2, r7, r1
 800092e:	8811      	ldrh	r1, [r2, #0]
 8000930:	4804      	ldr	r0, [pc, #16]	@ (8000944 <_I2CWrite+0x38>)
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	002b      	movs	r3, r5
 8000936:	0022      	movs	r2, r4
 8000938:	f001 f872 	bl	8001a20 <HAL_I2C_Master_Transmit>
}
 800093c:	46c0      	nop			@ (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b006      	add	sp, #24
 8000942:	bdb0      	pop	{r4, r5, r7, pc}
 8000944:	20000184 	.word	0x20000184

08000948 <_I2CRead>:

static void _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b089      	sub	sp, #36	@ 0x24
 800094c:	af02      	add	r7, sp, #8
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	210e      	movs	r1, #14
 8000954:	187b      	adds	r3, r7, r1
 8000956:	1c02      	adds	r2, r0, #0
 8000958:	801a      	strh	r2, [r3, #0]

    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	330a      	adds	r3, #10
 800095e:	617b      	str	r3, [r7, #20]

    HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, i2c_time_out);
 8000960:	187b      	adds	r3, r7, r1
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	2201      	movs	r2, #1
 8000966:	4313      	orrs	r3, r2
 8000968:	b299      	uxth	r1, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	b29c      	uxth	r4, r3
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	4804      	ldr	r0, [pc, #16]	@ (8000984 <_I2CRead+0x3c>)
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	0023      	movs	r3, r4
 8000978:	f001 f95a 	bl	8001c30 <HAL_I2C_Master_Receive>
}
 800097c:	46c0      	nop			@ (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b007      	add	sp, #28
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	20000184 	.word	0x20000184

08000988 <VL53L1_WrByte>:
    _I2CRead(dev, pdata, count);

    return 0;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	0004      	movs	r4, r0
 8000990:	0008      	movs	r0, r1
 8000992:	0011      	movs	r1, r2
 8000994:	1dbb      	adds	r3, r7, #6
 8000996:	1c22      	adds	r2, r4, #0
 8000998:	801a      	strh	r2, [r3, #0]
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	1c02      	adds	r2, r0, #0
 800099e:	801a      	strh	r2, [r3, #0]
 80009a0:	1cfb      	adds	r3, r7, #3
 80009a2:	1c0a      	adds	r2, r1, #0
 80009a4:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[0] = index>>8;
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <VL53L1_WrByte+0x58>)
 80009b2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <VL53L1_WrByte+0x58>)
 80009bc:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <VL53L1_WrByte+0x58>)
 80009c0:	1cfa      	adds	r2, r7, #3
 80009c2:	7812      	ldrb	r2, [r2, #0]
 80009c4:	709a      	strb	r2, [r3, #2]

    _I2CWrite(dev, _I2CBuffer, 3);
 80009c6:	4906      	ldr	r1, [pc, #24]	@ (80009e0 <VL53L1_WrByte+0x58>)
 80009c8:	1dbb      	adds	r3, r7, #6
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	2203      	movs	r2, #3
 80009ce:	0018      	movs	r0, r3
 80009d0:	f7ff ff9c 	bl	800090c <_I2CWrite>
	return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	0018      	movs	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	b003      	add	sp, #12
 80009dc:	bd90      	pop	{r4, r7, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	20000084 	.word	0x20000084

080009e4 <VL53L1_RdByte>:
    _I2CWrite(dev, _I2CBuffer, 6);

	return 0;
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	603a      	str	r2, [r7, #0]
 80009ec:	1dbb      	adds	r3, r7, #6
 80009ee:	1c02      	adds	r2, r0, #0
 80009f0:	801a      	strh	r2, [r3, #0]
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	1c0a      	adds	r2, r1, #0
 80009f6:	801a      	strh	r2, [r3, #0]
	_I2CBuffer[0] = index>>8;
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <VL53L1_RdByte+0x54>)
 8000a04:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <VL53L1_RdByte+0x54>)
 8000a0e:	705a      	strb	r2, [r3, #1]
    _I2CWrite(dev, _I2CBuffer, 2);
 8000a10:	4909      	ldr	r1, [pc, #36]	@ (8000a38 <VL53L1_RdByte+0x54>)
 8000a12:	1dbb      	adds	r3, r7, #6
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	2202      	movs	r2, #2
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f7ff ff77 	bl	800090c <_I2CWrite>
    _I2CRead(dev, data, 1);
 8000a1e:	6839      	ldr	r1, [r7, #0]
 8000a20:	1dbb      	adds	r3, r7, #6
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	2201      	movs	r2, #1
 8000a26:	0018      	movs	r0, r3
 8000a28:	f7ff ff8e 	bl	8000948 <_I2CRead>

	return 0;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	0018      	movs	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b002      	add	sp, #8
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	20000084 	.word	0x20000084

08000a3c <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	603a      	str	r2, [r7, #0]
 8000a44:	1dbb      	adds	r3, r7, #6
 8000a46:	1c02      	adds	r2, r0, #0
 8000a48:	801a      	strh	r2, [r3, #0]
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	1c0a      	adds	r2, r1, #0
 8000a4e:	801a      	strh	r2, [r3, #0]
    _I2CBuffer[0] = index>>8;
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <VL53L1_RdWord+0x68>)
 8000a5c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <VL53L1_RdWord+0x68>)
 8000a66:	705a      	strb	r2, [r3, #1]
    _I2CWrite(dev, _I2CBuffer, 2);
 8000a68:	490e      	ldr	r1, [pc, #56]	@ (8000aa4 <VL53L1_RdWord+0x68>)
 8000a6a:	1dbb      	adds	r3, r7, #6
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	2202      	movs	r2, #2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff ff4b 	bl	800090c <_I2CWrite>
    _I2CRead(dev, _I2CBuffer, 2);
 8000a76:	490b      	ldr	r1, [pc, #44]	@ (8000aa4 <VL53L1_RdWord+0x68>)
 8000a78:	1dbb      	adds	r3, r7, #6
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff ff62 	bl	8000948 <_I2CRead>

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <VL53L1_RdWord+0x68>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	021b      	lsls	r3, r3, #8
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	4a05      	ldr	r2, [pc, #20]	@ (8000aa4 <VL53L1_RdWord+0x68>)
 8000a8e:	7852      	ldrb	r2, [r2, #1]
 8000a90:	189b      	adds	r3, r3, r2
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	801a      	strh	r2, [r3, #0]

	return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	20000084 	.word	0x20000084

08000aa8 <VL53L1_SensorOn>:
	(void)dev;
	HAL_Delay(wait_ms);
	return 0;
}

int8_t VL53L1_SensorOn (VL53L1_DEV dev){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dev->tof_wakeport, dev->tof_wakepin, GPIO_PIN_SET);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6898      	ldr	r0, [r3, #8]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	89db      	ldrh	r3, [r3, #14]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	0019      	movs	r1, r3
 8000abc:	f000 fed6 	bl	800186c <HAL_GPIO_WritePin>
	return 0;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b002      	add	sp, #8
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <VL53L1_SensorOff>:

int8_t VL53L1_SensorOff (VL53L1_DEV dev){
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dev->tof_wakeport, dev->tof_wakepin, GPIO_PIN_RESET);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6898      	ldr	r0, [r3, #8]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	89db      	ldrh	r3, [r3, #14]
 8000ada:	2200      	movs	r2, #0
 8000adc:	0019      	movs	r1, r3
 8000ade:	f000 fec5 	bl	800186c <HAL_GPIO_WritePin>
	return 0;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af2:	f000 fbdb 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af6:	f000 f86b 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afa:	f000 f965 	bl	8000dc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000afe:	f000 f933 	bl	8000d68 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000b02:	f000 f8f1 	bl	8000ce8 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000b06:	f000 f8d9 	bl	8000cbc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  printf("Start\r\n");
 8000b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bbc <main+0xd0>)
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f003 fa3b 	bl	8003f88 <puts>
  TOFxpos_Init();
 8000b12:	f000 f9fb 	bl	8000f0c <TOFxpos_Init>
  //TOFxneg_Init();
  //TOFypos_Init();
  //TOFyneg_Init();

  tof_ctrl_init(&tof_x_pos);
 8000b16:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc0 <main+0xd4>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f7ff fec5 	bl	80008a8 <tof_ctrl_init>
  //tof_ctrl_set_addr(&tof_x_pos, 0x10);
  //tof_ctrl_set_addr(&tof_x_neg, 0x20);
  //tof_ctrl_set_addr(&tof_y_pos, 0x30);
  //tof_ctrl_set_addr(&tof_y_neg, 0x40);

  uint16_t distancexpos = 0;
 8000b1e:	1dbb      	adds	r3, r7, #6
 8000b20:	2200      	movs	r2, #0
 8000b22:	801a      	strh	r2, [r3, #0]
  uint8_t sensorState = 0;
 8000b24:	1d7b      	adds	r3, r7, #5
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
  uint8_t status = 0;
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]

  VL53L1_SensorOn(&tof_x_pos);
 8000b30:	4b23      	ldr	r3, [pc, #140]	@ (8000bc0 <main+0xd4>)
 8000b32:	0018      	movs	r0, r3
 8000b34:	f7ff ffb8 	bl	8000aa8 <VL53L1_SensorOn>
  VL53L1X_StartRanging(tof_x_pos.tof_addr);
 8000b38:	4b21      	ldr	r3, [pc, #132]	@ (8000bc0 <main+0xd4>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f7ff fda6 	bl	8000690 <VL53L1X_StartRanging>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      printf("loop\r\n");
 8000b44:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <main+0xd8>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f003 fa1e 	bl	8003f88 <puts>
      HAL_Delay(1000);
 8000b4c:	23fa      	movs	r3, #250	@ 0xfa
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	0018      	movs	r0, r3
 8000b52:	f000 fc1b 	bl	800138c <HAL_Delay>
  	while(sensorState == 0){
 8000b56:	e00b      	b.n	8000b70 <main+0x84>
  		printf("loopwait\r\n");
 8000b58:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc8 <main+0xdc>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f003 fa14 	bl	8003f88 <puts>
  		VL53L1X_CheckForDataReady(tof_x_pos.tof_addr, &sensorState);
 8000b60:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <main+0xd4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	1d7a      	adds	r2, r7, #5
 8000b68:	0011      	movs	r1, r2
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f7ff fdce 	bl	800070c <VL53L1X_CheckForDataReady>
  	while(sensorState == 0){
 8000b70:	1d7b      	adds	r3, r7, #5
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0ef      	beq.n	8000b58 <main+0x6c>
  	}
  	sensorState = 0;
 8000b78:	1d7b      	adds	r3, r7, #5
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
  	VL53L1X_GetRangeStatus(tof_x_pos.tof_addr, &status);
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <main+0xd4>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	1d3a      	adds	r2, r7, #4
 8000b86:	0011      	movs	r1, r2
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff fe53 	bl	8000834 <VL53L1X_GetRangeStatus>
  	VL53L1X_GetDistance(tof_x_pos.tof_addr, &distancexpos);
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <main+0xd4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	1dba      	adds	r2, r7, #6
 8000b96:	0011      	movs	r1, r2
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff fe25 	bl	80007e8 <VL53L1X_GetDistance>
  	VL53L1X_ClearInterrupt(tof_x_pos.tof_addr);
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <main+0xd4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f7ff fd21 	bl	80005ec <VL53L1X_ClearInterrupt>
      printf("Distance: %dmm\r\n", distancexpos);
 8000baa:	1dbb      	adds	r3, r7, #6
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	001a      	movs	r2, r3
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <main+0xe0>)
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f003 f981 	bl	8003ebc <iprintf>
      printf("loop\r\n");
 8000bba:	e7c3      	b.n	8000b44 <main+0x58>
 8000bbc:	08004cd0 	.word	0x08004cd0
 8000bc0:	20000260 	.word	0x20000260
 8000bc4:	08004cd8 	.word	0x08004cd8
 8000bc8:	08004ce0 	.word	0x08004ce0
 8000bcc:	08004cec 	.word	0x08004cec

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b099      	sub	sp, #100	@ 0x64
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	242c      	movs	r4, #44	@ 0x2c
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	0018      	movs	r0, r3
 8000bdc:	2334      	movs	r3, #52	@ 0x34
 8000bde:	001a      	movs	r2, r3
 8000be0:	2100      	movs	r1, #0
 8000be2:	f003 fac7 	bl	8004174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be6:	2318      	movs	r3, #24
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	0018      	movs	r0, r3
 8000bec:	2314      	movs	r3, #20
 8000bee:	001a      	movs	r2, r3
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	f003 fabf 	bl	8004174 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf6:	003b      	movs	r3, r7
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	2318      	movs	r3, #24
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	f003 fab8 	bl	8004174 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c04:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb4 <SystemClock_Config+0xe4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a2b      	ldr	r2, [pc, #172]	@ (8000cb8 <SystemClock_Config+0xe8>)
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	4b29      	ldr	r3, [pc, #164]	@ (8000cb4 <SystemClock_Config+0xe4>)
 8000c0e:	2180      	movs	r1, #128	@ 0x80
 8000c10:	0109      	lsls	r1, r1, #4
 8000c12:	430a      	orrs	r2, r1
 8000c14:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c16:	0021      	movs	r1, r4
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2201      	movs	r2, #1
 8000c22:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2210      	movs	r2, #16
 8000c28:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2200      	movs	r2, #0
 8000c34:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2280      	movs	r2, #128	@ 0x80
 8000c3a:	02d2      	lsls	r2, r2, #11
 8000c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2280      	movs	r2, #128	@ 0x80
 8000c42:	03d2      	lsls	r2, r2, #15
 8000c44:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f001 fc3f 	bl	80024cc <HAL_RCC_OscConfig>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000c52:	f000 f989 	bl	8000f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c56:	2118      	movs	r1, #24
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2203      	movs	r2, #3
 8000c62:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2101      	movs	r1, #1
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f001 ffa2 	bl	8002bc4 <HAL_RCC_ClockConfig>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000c84:	f000 f970 	bl	8000f68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000c88:	003b      	movs	r3, r7
 8000c8a:	220a      	movs	r2, #10
 8000c8c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c8e:	003b      	movs	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c94:	003b      	movs	r3, r7
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9a:	003b      	movs	r3, r7
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f002 f9b5 	bl	800300c <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	1e03      	subs	r3, r0, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000ca6:	f000 f95f 	bl	8000f68 <Error_Handler>
  }
}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b019      	add	sp, #100	@ 0x64
 8000cb0:	bd90      	pop	{r4, r7, pc}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	40007000 	.word	0x40007000
 8000cb8:	ffffe7ff 	.word	0xffffe7ff

08000cbc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2007      	movs	r0, #7
 8000cc6:	f000 fc31 	bl	800152c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f000 fc43 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2005      	movs	r0, #5
 8000cd6:	f000 fc29 	bl	800152c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000cda:	2005      	movs	r0, #5
 8000cdc:	f000 fc3b 	bl	8001556 <HAL_NVIC_EnableIRQ>
}
 8000ce0:	46c0      	nop			@ (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000cee:	4a1c      	ldr	r2, [pc, #112]	@ (8000d60 <MX_I2C1_Init+0x78>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d64 <MX_I2C1_Init+0x7c>)
 8000cf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d04:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d24:	0018      	movs	r0, r3
 8000d26:	f000 fde5 	bl	80018f4 <HAL_I2C_Init>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d2e:	f000 f91b 	bl	8000f68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d34:	2100      	movs	r1, #0
 8000d36:	0018      	movs	r0, r3
 8000d38:	f001 fb30 	bl	800239c <HAL_I2CEx_ConfigAnalogFilter>
 8000d3c:	1e03      	subs	r3, r0, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d40:	f000 f912 	bl	8000f68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d46:	2100      	movs	r1, #0
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f001 fb73 	bl	8002434 <HAL_I2CEx_ConfigDigitalFilter>
 8000d4e:	1e03      	subs	r3, r0, #0
 8000d50:	d001      	beq.n	8000d56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d52:	f000 f909 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000184 	.word	0x20000184
 8000d60:	40005400 	.word	0x40005400
 8000d64:	00b07cb4 	.word	0x00b07cb4

08000d68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d6e:	4a15      	ldr	r2, [pc, #84]	@ (8000dc4 <MX_USART2_UART_Init+0x5c>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d72:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d74:	22e1      	movs	r2, #225	@ 0xe1
 8000d76:	0252      	lsls	r2, r2, #9
 8000d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000daa:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000dac:	0018      	movs	r0, r3
 8000dae:	f002 fa59 	bl	8003264 <HAL_UART_Init>
 8000db2:	1e03      	subs	r3, r0, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000db6:	f000 f8d7 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200001d8 	.word	0x200001d8
 8000dc4:	40004400 	.word	0x40004400

08000dc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b089      	sub	sp, #36	@ 0x24
 8000dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dce:	240c      	movs	r4, #12
 8000dd0:	193b      	adds	r3, r7, r4
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	2314      	movs	r3, #20
 8000dd6:	001a      	movs	r2, r3
 8000dd8:	2100      	movs	r1, #0
 8000dda:	f003 f9cb 	bl	8004174 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	4b49      	ldr	r3, [pc, #292]	@ (8000f04 <MX_GPIO_Init+0x13c>)
 8000de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000de2:	4b48      	ldr	r3, [pc, #288]	@ (8000f04 <MX_GPIO_Init+0x13c>)
 8000de4:	2104      	movs	r1, #4
 8000de6:	430a      	orrs	r2, r1
 8000de8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dea:	4b46      	ldr	r3, [pc, #280]	@ (8000f04 <MX_GPIO_Init+0x13c>)
 8000dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dee:	2204      	movs	r2, #4
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b43      	ldr	r3, [pc, #268]	@ (8000f04 <MX_GPIO_Init+0x13c>)
 8000df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dfa:	4b42      	ldr	r3, [pc, #264]	@ (8000f04 <MX_GPIO_Init+0x13c>)
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e02:	4b40      	ldr	r3, [pc, #256]	@ (8000f04 <MX_GPIO_Init+0x13c>)
 8000e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e06:	2201      	movs	r2, #1
 8000e08:	4013      	ands	r3, r2
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f04 <MX_GPIO_Init+0x13c>)
 8000e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e12:	4b3c      	ldr	r3, [pc, #240]	@ (8000f04 <MX_GPIO_Init+0x13c>)
 8000e14:	2102      	movs	r1, #2
 8000e16:	430a      	orrs	r2, r1
 8000e18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e1a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f04 <MX_GPIO_Init+0x13c>)
 8000e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e1e:	2202      	movs	r2, #2
 8000e20:	4013      	ands	r3, r2
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STOP_OUT_Pin|SLOW_OUT_Pin|SHUT_ToF1_Pin, GPIO_PIN_RESET);
 8000e26:	238c      	movs	r3, #140	@ 0x8c
 8000e28:	0059      	lsls	r1, r3, #1
 8000e2a:	23a0      	movs	r3, #160	@ 0xa0
 8000e2c:	05db      	lsls	r3, r3, #23
 8000e2e:	2200      	movs	r2, #0
 8000e30:	0018      	movs	r0, r3
 8000e32:	f000 fd1b 	bl	800186c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHUT_ToF2_Pin|SHUT_ToF3_Pin|SHUT_ToF4_Pin, GPIO_PIN_RESET);
 8000e36:	4b34      	ldr	r3, [pc, #208]	@ (8000f08 <MX_GPIO_Init+0x140>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2129      	movs	r1, #41	@ 0x29
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f000 fd15 	bl	800186c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : X_DIR_IN_Pin Y_DIR_IN_Pin */
  GPIO_InitStruct.Pin = X_DIR_IN_Pin|Y_DIR_IN_Pin;
 8000e42:	193b      	adds	r3, r7, r4
 8000e44:	2203      	movs	r2, #3
 8000e46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	193b      	adds	r3, r7, r4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e4e:	193b      	adds	r3, r7, r4
 8000e50:	2202      	movs	r2, #2
 8000e52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	193a      	adds	r2, r7, r4
 8000e56:	23a0      	movs	r3, #160	@ 0xa0
 8000e58:	05db      	lsls	r3, r3, #23
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f000 fb97 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_OUT_Pin SLOW_OUT_Pin SHUT_ToF1_Pin */
  GPIO_InitStruct.Pin = STOP_OUT_Pin|SLOW_OUT_Pin|SHUT_ToF1_Pin;
 8000e62:	0021      	movs	r1, r4
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	228c      	movs	r2, #140	@ 0x8c
 8000e68:	0052      	lsls	r2, r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6c:	000c      	movs	r4, r1
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	2201      	movs	r2, #1
 8000e72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	193a      	adds	r2, r7, r4
 8000e82:	23a0      	movs	r3, #160	@ 0xa0
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	0011      	movs	r1, r2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f000 fb81 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHUT_ToF2_Pin SHUT_ToF3_Pin SHUT_ToF4_Pin */
  GPIO_InitStruct.Pin = SHUT_ToF2_Pin|SHUT_ToF3_Pin|SHUT_ToF4_Pin;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2229      	movs	r2, #41	@ 0x29
 8000e92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	2201      	movs	r2, #1
 8000e98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	4a17      	ldr	r2, [pc, #92]	@ (8000f08 <MX_GPIO_Init+0x140>)
 8000eaa:	0019      	movs	r1, r3
 8000eac:	0010      	movs	r0, r2
 8000eae:	f000 fb6f 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ToF1_Pin INT_ToF3_Pin */
  GPIO_InitStruct.Pin = INT_ToF1_Pin|INT_ToF3_Pin;
 8000eb2:	0021      	movs	r1, r4
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2212      	movs	r2, #18
 8000eb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2284      	movs	r2, #132	@ 0x84
 8000ebe:	0392      	lsls	r2, r2, #14
 8000ec0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	000c      	movs	r4, r1
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	@ (8000f08 <MX_GPIO_Init+0x140>)
 8000ece:	0019      	movs	r1, r3
 8000ed0:	0010      	movs	r0, r2
 8000ed2:	f000 fb5d 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ToF4_Pin INT_ToF2_Pin */
  GPIO_InitStruct.Pin = INT_ToF4_Pin|INT_ToF2_Pin;
 8000ed6:	0021      	movs	r1, r4
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	22c0      	movs	r2, #192	@ 0xc0
 8000edc:	0152      	lsls	r2, r2, #5
 8000ede:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2284      	movs	r2, #132	@ 0x84
 8000ee4:	0392      	lsls	r2, r2, #14
 8000ee6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	187a      	adds	r2, r7, r1
 8000ef0:	23a0      	movs	r3, #160	@ 0xa0
 8000ef2:	05db      	lsls	r3, r3, #23
 8000ef4:	0011      	movs	r1, r2
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 fb4a 	bl	8001590 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000efc:	46c0      	nop			@ (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b009      	add	sp, #36	@ 0x24
 8000f02:	bd90      	pop	{r4, r7, pc}
 8000f04:	40021000 	.word	0x40021000
 8000f08:	50000400 	.word	0x50000400

08000f0c <TOFxpos_Init>:

/* USER CODE BEGIN 4 */

static void TOFxpos_Init(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	tof_x_pos.tof_addr = 0x52;
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <TOFxpos_Init+0x2c>)
 8000f12:	2252      	movs	r2, #82	@ 0x52
 8000f14:	601a      	str	r2, [r3, #0]
	tof_x_pos.tof_intport = INT_ToF1_GPIO_Port;
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <TOFxpos_Init+0x2c>)
 8000f18:	4a08      	ldr	r2, [pc, #32]	@ (8000f3c <TOFxpos_Init+0x30>)
 8000f1a:	605a      	str	r2, [r3, #4]
	tof_x_pos.tof_wakeport = SHUT_ToF1_GPIO_Port;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <TOFxpos_Init+0x2c>)
 8000f1e:	22a0      	movs	r2, #160	@ 0xa0
 8000f20:	05d2      	lsls	r2, r2, #23
 8000f22:	609a      	str	r2, [r3, #8]
	tof_x_pos.tof_intpin = INT_ToF1_Pin;
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <TOFxpos_Init+0x2c>)
 8000f26:	2202      	movs	r2, #2
 8000f28:	819a      	strh	r2, [r3, #12]
	tof_x_pos.tof_wakepin = SHUT_ToF1_Pin;
 8000f2a:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <TOFxpos_Init+0x2c>)
 8000f2c:	2280      	movs	r2, #128	@ 0x80
 8000f2e:	0052      	lsls	r2, r2, #1
 8000f30:	81da      	strh	r2, [r3, #14]
}
 8000f32:	46c0      	nop			@ (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000260 	.word	0x20000260
 8000f3c:	50000400 	.word	0x50000400

08000f40 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <__io_putchar+0x20>)
 8000f4a:	1d39      	adds	r1, r7, #4
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <__io_putchar+0x24>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f002 f9dc 	bl	800330c <HAL_UART_Transmit>

  return ch;
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	0000ffff 	.word	0x0000ffff
 8000f64:	200001d8 	.word	0x200001d8

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f70:	46c0      	nop			@ (mov r8, r8)
 8000f72:	e7fd      	b.n	8000f70 <Error_Handler+0x8>

08000f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f78:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <HAL_MspInit+0x24>)
 8000f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_MspInit+0x24>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	430a      	orrs	r2, r1
 8000f82:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <HAL_MspInit+0x24>)
 8000f86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f88:	4b03      	ldr	r3, [pc, #12]	@ (8000f98 <HAL_MspInit+0x24>)
 8000f8a:	2180      	movs	r1, #128	@ 0x80
 8000f8c:	0549      	lsls	r1, r1, #21
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	240c      	movs	r4, #12
 8000fa6:	193b      	adds	r3, r7, r4
 8000fa8:	0018      	movs	r0, r3
 8000faa:	2314      	movs	r3, #20
 8000fac:	001a      	movs	r2, r3
 8000fae:	2100      	movs	r1, #0
 8000fb0:	f003 f8e0 	bl	8004174 <memset>
  if(hi2c->Instance==I2C1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a17      	ldr	r2, [pc, #92]	@ (8001018 <HAL_I2C_MspInit+0x7c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d128      	bne.n	8001010 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b17      	ldr	r3, [pc, #92]	@ (800101c <HAL_I2C_MspInit+0x80>)
 8000fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <HAL_I2C_MspInit+0x80>)
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fca:	4b14      	ldr	r3, [pc, #80]	@ (800101c <HAL_I2C_MspInit+0x80>)
 8000fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fce:	2202      	movs	r2, #2
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fd6:	0021      	movs	r1, r4
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	22c0      	movs	r2, #192	@ 0xc0
 8000fdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2212      	movs	r2, #18
 8000fe2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	2203      	movs	r2, #3
 8000fee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	4a09      	ldr	r2, [pc, #36]	@ (8001020 <HAL_I2C_MspInit+0x84>)
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	0010      	movs	r0, r2
 8000ffe:	f000 fac7 	bl	8001590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_I2C_MspInit+0x80>)
 8001004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001006:	4b05      	ldr	r3, [pc, #20]	@ (800101c <HAL_I2C_MspInit+0x80>)
 8001008:	2180      	movs	r1, #128	@ 0x80
 800100a:	0389      	lsls	r1, r1, #14
 800100c:	430a      	orrs	r2, r1
 800100e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001010:	46c0      	nop			@ (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	b009      	add	sp, #36	@ 0x24
 8001016:	bd90      	pop	{r4, r7, pc}
 8001018:	40005400 	.word	0x40005400
 800101c:	40021000 	.word	0x40021000
 8001020:	50000400 	.word	0x50000400

08001024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b089      	sub	sp, #36	@ 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	240c      	movs	r4, #12
 800102e:	193b      	adds	r3, r7, r4
 8001030:	0018      	movs	r0, r3
 8001032:	2314      	movs	r3, #20
 8001034:	001a      	movs	r2, r3
 8001036:	2100      	movs	r1, #0
 8001038:	f003 f89c 	bl	8004174 <memset>
  if(huart->Instance==USART2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a18      	ldr	r2, [pc, #96]	@ (80010a4 <HAL_UART_MspInit+0x80>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d129      	bne.n	800109a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001046:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <HAL_UART_MspInit+0x84>)
 8001048:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <HAL_UART_MspInit+0x84>)
 800104c:	2180      	movs	r1, #128	@ 0x80
 800104e:	0289      	lsls	r1, r1, #10
 8001050:	430a      	orrs	r2, r1
 8001052:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <HAL_UART_MspInit+0x84>)
 8001056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <HAL_UART_MspInit+0x84>)
 800105a:	2101      	movs	r1, #1
 800105c:	430a      	orrs	r2, r1
 800105e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_UART_MspInit+0x84>)
 8001062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001064:	2201      	movs	r2, #1
 8001066:	4013      	ands	r3, r2
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800106c:	0021      	movs	r1, r4
 800106e:	187b      	adds	r3, r7, r1
 8001070:	4a0e      	ldr	r2, [pc, #56]	@ (80010ac <HAL_UART_MspInit+0x88>)
 8001072:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2202      	movs	r2, #2
 8001078:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2203      	movs	r2, #3
 8001084:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2204      	movs	r2, #4
 800108a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	187a      	adds	r2, r7, r1
 800108e:	23a0      	movs	r3, #160	@ 0xa0
 8001090:	05db      	lsls	r3, r3, #23
 8001092:	0011      	movs	r1, r2
 8001094:	0018      	movs	r0, r3
 8001096:	f000 fa7b 	bl	8001590 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	b009      	add	sp, #36	@ 0x24
 80010a0:	bd90      	pop	{r4, r7, pc}
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	40004400 	.word	0x40004400
 80010a8:	40021000 	.word	0x40021000
 80010ac:	00008004 	.word	0x00008004

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	e7fd      	b.n	80010b4 <NMI_Handler+0x4>

080010b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010bc:	46c0      	nop			@ (mov r8, r8)
 80010be:	e7fd      	b.n	80010bc <HardFault_Handler+0x4>

080010c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010c4:	46c0      	nop			@ (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d8:	f000 f93c 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010dc:	46c0      	nop			@ (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ToF1_Pin);
 80010e6:	2002      	movs	r0, #2
 80010e8:	f000 fbde 	bl	80018a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80010ec:	46c0      	nop			@ (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ToF3_Pin);
 80010f6:	2010      	movs	r0, #16
 80010f8:	f000 fbd6 	bl	80018a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ToF4_Pin);
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	0018      	movs	r0, r3
 8001102:	f000 fbd1 	bl	80018a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ToF2_Pin);
 8001106:	2380      	movs	r3, #128	@ 0x80
 8001108:	015b      	lsls	r3, r3, #5
 800110a:	0018      	movs	r0, r3
 800110c:	f000 fbcc 	bl	80018a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001110:	46c0      	nop			@ (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	60f8      	str	r0, [r7, #12]
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	e00a      	b.n	800113e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001128:	e000      	b.n	800112c <_read+0x16>
 800112a:	bf00      	nop
 800112c:	0001      	movs	r1, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	60ba      	str	r2, [r7, #8]
 8001134:	b2ca      	uxtb	r2, r1
 8001136:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3301      	adds	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	429a      	cmp	r2, r3
 8001144:	dbf0      	blt.n	8001128 <_read+0x12>
  }

  return len;
 8001146:	687b      	ldr	r3, [r7, #4]
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b006      	add	sp, #24
 800114e:	bd80      	pop	{r7, pc}

08001150 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e009      	b.n	8001176 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	60ba      	str	r2, [r7, #8]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff fee8 	bl	8000f40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3301      	adds	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	429a      	cmp	r2, r3
 800117c:	dbf1      	blt.n	8001162 <_write+0x12>
  }
  return len;
 800117e:	687b      	ldr	r3, [r7, #4]
}
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	b006      	add	sp, #24
 8001186:	bd80      	pop	{r7, pc}

08001188 <_close>:

int _close(int file)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001190:	2301      	movs	r3, #1
 8001192:	425b      	negs	r3, r3
}
 8001194:	0018      	movs	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	b002      	add	sp, #8
 800119a:	bd80      	pop	{r7, pc}

0800119c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2280      	movs	r2, #128	@ 0x80
 80011aa:	0192      	lsls	r2, r2, #6
 80011ac:	605a      	str	r2, [r3, #4]
  return 0;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b002      	add	sp, #8
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <_isatty>:

int _isatty(int file)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011c0:	2301      	movs	r3, #1
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}

080011ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	b004      	add	sp, #16
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e8:	4a14      	ldr	r2, [pc, #80]	@ (800123c <_sbrk+0x5c>)
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <_sbrk+0x60>)
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f4:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <_sbrk+0x64>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	@ (8001248 <_sbrk+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001202:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	18d3      	adds	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d207      	bcs.n	8001220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001210:	f003 f806 	bl	8004220 <__errno>
 8001214:	0003      	movs	r3, r0
 8001216:	220c      	movs	r2, #12
 8001218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121a:	2301      	movs	r3, #1
 800121c:	425b      	negs	r3, r3
 800121e:	e009      	b.n	8001234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001220:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001226:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	18d2      	adds	r2, r2, r3
 800122e:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <_sbrk+0x64>)
 8001230:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	b006      	add	sp, #24
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20002000 	.word	0x20002000
 8001240:	00000400 	.word	0x00000400
 8001244:	20000270 	.word	0x20000270
 8001248:	200003c8 	.word	0x200003c8

0800124c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001250:	46c0      	nop			@ (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001258:	480d      	ldr	r0, [pc, #52]	@ (8001290 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800125a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800125c:	f7ff fff6 	bl	800124c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <LoopForever+0x6>)
  ldr r1, =_edata
 8001262:	490d      	ldr	r1, [pc, #52]	@ (8001298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <LoopForever+0xe>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001278:	4c0a      	ldr	r4, [pc, #40]	@ (80012a4 <LoopForever+0x16>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001286:	f002 ffd1 	bl	800422c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128a:	f7ff fc2f 	bl	8000aec <main>

0800128e <LoopForever>:

LoopForever:
    b LoopForever
 800128e:	e7fe      	b.n	800128e <LoopForever>
   ldr   r0, =_estack
 8001290:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001298:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800129c:	08004e24 	.word	0x08004e24
  ldr r2, =_sbss
 80012a0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80012a4:	200003c4 	.word	0x200003c4

080012a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC1_COMP_IRQHandler>
	...

080012ac <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80012b8:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <HAL_Init+0x3c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <HAL_Init+0x3c>)
 80012be:	2140      	movs	r1, #64	@ 0x40
 80012c0:	430a      	orrs	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c4:	2000      	movs	r0, #0
 80012c6:	f000 f811 	bl	80012ec <HAL_InitTick>
 80012ca:	1e03      	subs	r3, r0, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	e001      	b.n	80012da <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012d6:	f7ff fe4d 	bl	8000f74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	781b      	ldrb	r3, [r3, #0]
}
 80012de:	0018      	movs	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b002      	add	sp, #8
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	40022000 	.word	0x40022000

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <HAL_InitTick+0x5c>)
 80012f6:	681c      	ldr	r4, [r3, #0]
 80012f8:	4b14      	ldr	r3, [pc, #80]	@ (800134c <HAL_InitTick+0x60>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	0019      	movs	r1, r3
 80012fe:	23fa      	movs	r3, #250	@ 0xfa
 8001300:	0098      	lsls	r0, r3, #2
 8001302:	f7fe ff0b 	bl	800011c <__udivsi3>
 8001306:	0003      	movs	r3, r0
 8001308:	0019      	movs	r1, r3
 800130a:	0020      	movs	r0, r4
 800130c:	f7fe ff06 	bl	800011c <__udivsi3>
 8001310:	0003      	movs	r3, r0
 8001312:	0018      	movs	r0, r3
 8001314:	f000 f92f 	bl	8001576 <HAL_SYSTICK_Config>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d001      	beq.n	8001320 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e00f      	b.n	8001340 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b03      	cmp	r3, #3
 8001324:	d80b      	bhi.n	800133e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	2301      	movs	r3, #1
 800132a:	425b      	negs	r3, r3
 800132c:	2200      	movs	r2, #0
 800132e:	0018      	movs	r0, r3
 8001330:	f000 f8fc 	bl	800152c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_InitTick+0x64>)
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	0018      	movs	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	b003      	add	sp, #12
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	20000000 	.word	0x20000000
 800134c:	20000008 	.word	0x20000008
 8001350:	20000004 	.word	0x20000004

08001354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <HAL_IncTick+0x1c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	001a      	movs	r2, r3
 800135e:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <HAL_IncTick+0x20>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	18d2      	adds	r2, r2, r3
 8001364:	4b03      	ldr	r3, [pc, #12]	@ (8001374 <HAL_IncTick+0x20>)
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	46c0      	nop			@ (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	20000008 	.word	0x20000008
 8001374:	20000274 	.word	0x20000274

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b02      	ldr	r3, [pc, #8]	@ (8001388 <HAL_GetTick+0x10>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	20000274 	.word	0x20000274

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff fff0 	bl	8001378 <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3301      	adds	r3, #1
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <HAL_Delay+0x44>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	001a      	movs	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	189b      	adds	r3, r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013b2:	46c0      	nop			@ (mov r8, r8)
 80013b4:	f7ff ffe0 	bl	8001378 <HAL_GetTick>
 80013b8:	0002      	movs	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	46c0      	nop			@ (mov r8, r8)
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b004      	add	sp, #16
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	20000008 	.word	0x20000008

080013d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	0002      	movs	r2, r0
 80013dc:	1dfb      	adds	r3, r7, #7
 80013de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013e0:	1dfb      	adds	r3, r7, #7
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80013e6:	d809      	bhi.n	80013fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e8:	1dfb      	adds	r3, r7, #7
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	001a      	movs	r2, r3
 80013ee:	231f      	movs	r3, #31
 80013f0:	401a      	ands	r2, r3
 80013f2:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <__NVIC_EnableIRQ+0x30>)
 80013f4:	2101      	movs	r1, #1
 80013f6:	4091      	lsls	r1, r2
 80013f8:	000a      	movs	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]
  }
}
 80013fc:	46c0      	nop			@ (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b002      	add	sp, #8
 8001402:	bd80      	pop	{r7, pc}
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	0002      	movs	r2, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b7f      	cmp	r3, #127	@ 0x7f
 800141c:	d828      	bhi.n	8001470 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800141e:	4a2f      	ldr	r2, [pc, #188]	@ (80014dc <__NVIC_SetPriority+0xd4>)
 8001420:	1dfb      	adds	r3, r7, #7
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b25b      	sxtb	r3, r3
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	33c0      	adds	r3, #192	@ 0xc0
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	589b      	ldr	r3, [r3, r2]
 800142e:	1dfa      	adds	r2, r7, #7
 8001430:	7812      	ldrb	r2, [r2, #0]
 8001432:	0011      	movs	r1, r2
 8001434:	2203      	movs	r2, #3
 8001436:	400a      	ands	r2, r1
 8001438:	00d2      	lsls	r2, r2, #3
 800143a:	21ff      	movs	r1, #255	@ 0xff
 800143c:	4091      	lsls	r1, r2
 800143e:	000a      	movs	r2, r1
 8001440:	43d2      	mvns	r2, r2
 8001442:	401a      	ands	r2, r3
 8001444:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	019b      	lsls	r3, r3, #6
 800144a:	22ff      	movs	r2, #255	@ 0xff
 800144c:	401a      	ands	r2, r3
 800144e:	1dfb      	adds	r3, r7, #7
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	0018      	movs	r0, r3
 8001454:	2303      	movs	r3, #3
 8001456:	4003      	ands	r3, r0
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800145c:	481f      	ldr	r0, [pc, #124]	@ (80014dc <__NVIC_SetPriority+0xd4>)
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b25b      	sxtb	r3, r3
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	430a      	orrs	r2, r1
 8001468:	33c0      	adds	r3, #192	@ 0xc0
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800146e:	e031      	b.n	80014d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001470:	4a1b      	ldr	r2, [pc, #108]	@ (80014e0 <__NVIC_SetPriority+0xd8>)
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	0019      	movs	r1, r3
 8001478:	230f      	movs	r3, #15
 800147a:	400b      	ands	r3, r1
 800147c:	3b08      	subs	r3, #8
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3306      	adds	r3, #6
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	18d3      	adds	r3, r2, r3
 8001486:	3304      	adds	r3, #4
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	1dfa      	adds	r2, r7, #7
 800148c:	7812      	ldrb	r2, [r2, #0]
 800148e:	0011      	movs	r1, r2
 8001490:	2203      	movs	r2, #3
 8001492:	400a      	ands	r2, r1
 8001494:	00d2      	lsls	r2, r2, #3
 8001496:	21ff      	movs	r1, #255	@ 0xff
 8001498:	4091      	lsls	r1, r2
 800149a:	000a      	movs	r2, r1
 800149c:	43d2      	mvns	r2, r2
 800149e:	401a      	ands	r2, r3
 80014a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	019b      	lsls	r3, r3, #6
 80014a6:	22ff      	movs	r2, #255	@ 0xff
 80014a8:	401a      	ands	r2, r3
 80014aa:	1dfb      	adds	r3, r7, #7
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	0018      	movs	r0, r3
 80014b0:	2303      	movs	r3, #3
 80014b2:	4003      	ands	r3, r0
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b8:	4809      	ldr	r0, [pc, #36]	@ (80014e0 <__NVIC_SetPriority+0xd8>)
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	001c      	movs	r4, r3
 80014c0:	230f      	movs	r3, #15
 80014c2:	4023      	ands	r3, r4
 80014c4:	3b08      	subs	r3, #8
 80014c6:	089b      	lsrs	r3, r3, #2
 80014c8:	430a      	orrs	r2, r1
 80014ca:	3306      	adds	r3, #6
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	18c3      	adds	r3, r0, r3
 80014d0:	3304      	adds	r3, #4
 80014d2:	601a      	str	r2, [r3, #0]
}
 80014d4:	46c0      	nop			@ (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b003      	add	sp, #12
 80014da:	bd90      	pop	{r4, r7, pc}
 80014dc:	e000e100 	.word	0xe000e100
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	1e5a      	subs	r2, r3, #1
 80014f0:	2380      	movs	r3, #128	@ 0x80
 80014f2:	045b      	lsls	r3, r3, #17
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d301      	bcc.n	80014fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f8:	2301      	movs	r3, #1
 80014fa:	e010      	b.n	800151e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <SysTick_Config+0x44>)
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	3a01      	subs	r2, #1
 8001502:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001504:	2301      	movs	r3, #1
 8001506:	425b      	negs	r3, r3
 8001508:	2103      	movs	r1, #3
 800150a:	0018      	movs	r0, r3
 800150c:	f7ff ff7c 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <SysTick_Config+0x44>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <SysTick_Config+0x44>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b002      	add	sp, #8
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	210f      	movs	r1, #15
 8001538:	187b      	adds	r3, r7, r1
 800153a:	1c02      	adds	r2, r0, #0
 800153c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	187b      	adds	r3, r7, r1
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b25b      	sxtb	r3, r3
 8001546:	0011      	movs	r1, r2
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff ff5d 	bl	8001408 <__NVIC_SetPriority>
}
 800154e:	46c0      	nop			@ (mov r8, r8)
 8001550:	46bd      	mov	sp, r7
 8001552:	b004      	add	sp, #16
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	0002      	movs	r2, r0
 800155e:	1dfb      	adds	r3, r7, #7
 8001560:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b25b      	sxtb	r3, r3
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff ff33 	bl	80013d4 <__NVIC_EnableIRQ>
}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	b002      	add	sp, #8
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	0018      	movs	r0, r3
 8001582:	f7ff ffaf 	bl	80014e4 <SysTick_Config>
 8001586:	0003      	movs	r3, r0
}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	b002      	add	sp, #8
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80015a6:	e149      	b.n	800183c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4091      	lsls	r1, r2
 80015b2:	000a      	movs	r2, r1
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d100      	bne.n	80015c0 <HAL_GPIO_Init+0x30>
 80015be:	e13a      	b.n	8001836 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2203      	movs	r2, #3
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d005      	beq.n	80015d8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2203      	movs	r2, #3
 80015d2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d130      	bne.n	800163a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	409a      	lsls	r2, r3
 80015e6:	0013      	movs	r3, r2
 80015e8:	43da      	mvns	r2, r3
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	409a      	lsls	r2, r3
 80015fa:	0013      	movs	r3, r2
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800160e:	2201      	movs	r2, #1
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
 8001614:	0013      	movs	r3, r2
 8001616:	43da      	mvns	r2, r3
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	2201      	movs	r2, #1
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
 800162c:	0013      	movs	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2203      	movs	r2, #3
 8001640:	4013      	ands	r3, r2
 8001642:	2b03      	cmp	r3, #3
 8001644:	d017      	beq.n	8001676 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	43da      	mvns	r2, r3
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	409a      	lsls	r2, r3
 8001668:	0013      	movs	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2203      	movs	r2, #3
 800167c:	4013      	ands	r3, r2
 800167e:	2b02      	cmp	r3, #2
 8001680:	d123      	bne.n	80016ca <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	58d3      	ldr	r3, [r2, r3]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2207      	movs	r2, #7
 8001694:	4013      	ands	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	409a      	lsls	r2, r3
 800169c:	0013      	movs	r3, r2
 800169e:	43da      	mvns	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2107      	movs	r1, #7
 80016ae:	400b      	ands	r3, r1
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	409a      	lsls	r2, r3
 80016b4:	0013      	movs	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	6939      	ldr	r1, [r7, #16]
 80016c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	409a      	lsls	r2, r3
 80016d8:	0013      	movs	r3, r2
 80016da:	43da      	mvns	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2203      	movs	r2, #3
 80016e8:	401a      	ands	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	409a      	lsls	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	23c0      	movs	r3, #192	@ 0xc0
 8001704:	029b      	lsls	r3, r3, #10
 8001706:	4013      	ands	r3, r2
 8001708:	d100      	bne.n	800170c <HAL_GPIO_Init+0x17c>
 800170a:	e094      	b.n	8001836 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170c:	4b51      	ldr	r3, [pc, #324]	@ (8001854 <HAL_GPIO_Init+0x2c4>)
 800170e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001710:	4b50      	ldr	r3, [pc, #320]	@ (8001854 <HAL_GPIO_Init+0x2c4>)
 8001712:	2101      	movs	r1, #1
 8001714:	430a      	orrs	r2, r1
 8001716:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001718:	4a4f      	ldr	r2, [pc, #316]	@ (8001858 <HAL_GPIO_Init+0x2c8>)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	3302      	adds	r3, #2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	589b      	ldr	r3, [r3, r2]
 8001724:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2203      	movs	r2, #3
 800172a:	4013      	ands	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	220f      	movs	r2, #15
 8001730:	409a      	lsls	r2, r3
 8001732:	0013      	movs	r3, r2
 8001734:	43da      	mvns	r2, r3
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	23a0      	movs	r3, #160	@ 0xa0
 8001740:	05db      	lsls	r3, r3, #23
 8001742:	429a      	cmp	r2, r3
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0x1de>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a44      	ldr	r2, [pc, #272]	@ (800185c <HAL_GPIO_Init+0x2cc>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00d      	beq.n	800176a <HAL_GPIO_Init+0x1da>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a43      	ldr	r2, [pc, #268]	@ (8001860 <HAL_GPIO_Init+0x2d0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d007      	beq.n	8001766 <HAL_GPIO_Init+0x1d6>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a42      	ldr	r2, [pc, #264]	@ (8001864 <HAL_GPIO_Init+0x2d4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_GPIO_Init+0x1d2>
 800175e:	2305      	movs	r3, #5
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x1e0>
 8001762:	2306      	movs	r3, #6
 8001764:	e004      	b.n	8001770 <HAL_GPIO_Init+0x1e0>
 8001766:	2302      	movs	r3, #2
 8001768:	e002      	b.n	8001770 <HAL_GPIO_Init+0x1e0>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <HAL_GPIO_Init+0x1e0>
 800176e:	2300      	movs	r3, #0
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	2103      	movs	r1, #3
 8001774:	400a      	ands	r2, r1
 8001776:	0092      	lsls	r2, r2, #2
 8001778:	4093      	lsls	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001780:	4935      	ldr	r1, [pc, #212]	@ (8001858 <HAL_GPIO_Init+0x2c8>)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800178e:	4b36      	ldr	r3, [pc, #216]	@ (8001868 <HAL_GPIO_Init+0x2d8>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43da      	mvns	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	2380      	movs	r3, #128	@ 0x80
 80017a4:	035b      	lsls	r3, r3, #13
 80017a6:	4013      	ands	r3, r2
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001868 <HAL_GPIO_Init+0x2d8>)
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001868 <HAL_GPIO_Init+0x2d8>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43da      	mvns	r2, r3
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	2380      	movs	r3, #128	@ 0x80
 80017ce:	039b      	lsls	r3, r3, #14
 80017d0:	4013      	ands	r3, r2
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017dc:	4b22      	ldr	r3, [pc, #136]	@ (8001868 <HAL_GPIO_Init+0x2d8>)
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80017e2:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <HAL_GPIO_Init+0x2d8>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43da      	mvns	r2, r3
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	2380      	movs	r3, #128	@ 0x80
 80017f8:	029b      	lsls	r3, r3, #10
 80017fa:	4013      	ands	r3, r2
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001806:	4b18      	ldr	r3, [pc, #96]	@ (8001868 <HAL_GPIO_Init+0x2d8>)
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800180c:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <HAL_GPIO_Init+0x2d8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43da      	mvns	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	025b      	lsls	r3, r3, #9
 8001824:	4013      	ands	r3, r2
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001830:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <HAL_GPIO_Init+0x2d8>)
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	40da      	lsrs	r2, r3
 8001844:	1e13      	subs	r3, r2, #0
 8001846:	d000      	beq.n	800184a <HAL_GPIO_Init+0x2ba>
 8001848:	e6ae      	b.n	80015a8 <HAL_GPIO_Init+0x18>
  }
}
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	46c0      	nop			@ (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b006      	add	sp, #24
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000
 800185c:	50000400 	.word	0x50000400
 8001860:	50000800 	.word	0x50000800
 8001864:	50001c00 	.word	0x50001c00
 8001868:	40010400 	.word	0x40010400

0800186c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	0008      	movs	r0, r1
 8001876:	0011      	movs	r1, r2
 8001878:	1cbb      	adds	r3, r7, #2
 800187a:	1c02      	adds	r2, r0, #0
 800187c:	801a      	strh	r2, [r3, #0]
 800187e:	1c7b      	adds	r3, r7, #1
 8001880:	1c0a      	adds	r2, r1, #0
 8001882:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001884:	1c7b      	adds	r3, r7, #1
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188c:	1cbb      	adds	r3, r7, #2
 800188e:	881a      	ldrh	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001894:	e003      	b.n	800189e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001896:	1cbb      	adds	r3, r7, #2
 8001898:	881a      	ldrh	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	0002      	movs	r2, r0
 80018b0:	1dbb      	adds	r3, r7, #6
 80018b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018b4:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	1dba      	adds	r2, r7, #6
 80018ba:	8812      	ldrh	r2, [r2, #0]
 80018bc:	4013      	ands	r3, r2
 80018be:	d008      	beq.n	80018d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80018c2:	1dba      	adds	r2, r7, #6
 80018c4:	8812      	ldrh	r2, [r2, #0]
 80018c6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018c8:	1dbb      	adds	r3, r7, #6
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 f807 	bl	80018e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b002      	add	sp, #8
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	40010400 	.word	0x40010400

080018e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	0002      	movs	r2, r0
 80018e8:	1dbb      	adds	r3, r7, #6
 80018ea:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018ec:	46c0      	nop			@ (mov r8, r8)
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b002      	add	sp, #8
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e082      	b.n	8001a0c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2241      	movs	r2, #65	@ 0x41
 800190a:	5c9b      	ldrb	r3, [r3, r2]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d107      	bne.n	8001922 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2240      	movs	r2, #64	@ 0x40
 8001916:	2100      	movs	r1, #0
 8001918:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	0018      	movs	r0, r3
 800191e:	f7ff fb3d 	bl	8000f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2241      	movs	r2, #65	@ 0x41
 8001926:	2124      	movs	r1, #36	@ 0x24
 8001928:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2101      	movs	r1, #1
 8001936:	438a      	bics	r2, r1
 8001938:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4934      	ldr	r1, [pc, #208]	@ (8001a14 <HAL_I2C_Init+0x120>)
 8001944:	400a      	ands	r2, r1
 8001946:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4931      	ldr	r1, [pc, #196]	@ (8001a18 <HAL_I2C_Init+0x124>)
 8001954:	400a      	ands	r2, r1
 8001956:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d108      	bne.n	8001972 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2180      	movs	r1, #128	@ 0x80
 800196a:	0209      	lsls	r1, r1, #8
 800196c:	430a      	orrs	r2, r1
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	e007      	b.n	8001982 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2184      	movs	r1, #132	@ 0x84
 800197c:	0209      	lsls	r1, r1, #8
 800197e:	430a      	orrs	r2, r1
 8001980:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d104      	bne.n	8001994 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2280      	movs	r2, #128	@ 0x80
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	491f      	ldr	r1, [pc, #124]	@ (8001a1c <HAL_I2C_Init+0x128>)
 80019a0:	430a      	orrs	r2, r1
 80019a2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	491a      	ldr	r1, [pc, #104]	@ (8001a18 <HAL_I2C_Init+0x124>)
 80019b0:	400a      	ands	r2, r1
 80019b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	431a      	orrs	r2, r3
 80019be:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69d9      	ldr	r1, [r3, #28]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1a      	ldr	r2, [r3, #32]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2101      	movs	r1, #1
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2241      	movs	r2, #65	@ 0x41
 80019f8:	2120      	movs	r1, #32
 80019fa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2242      	movs	r2, #66	@ 0x42
 8001a06:	2100      	movs	r1, #0
 8001a08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b002      	add	sp, #8
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	f0ffffff 	.word	0xf0ffffff
 8001a18:	ffff7fff 	.word	0xffff7fff
 8001a1c:	02008000 	.word	0x02008000

08001a20 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b089      	sub	sp, #36	@ 0x24
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	0008      	movs	r0, r1
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	230a      	movs	r3, #10
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	1c02      	adds	r2, r0, #0
 8001a34:	801a      	strh	r2, [r3, #0]
 8001a36:	2308      	movs	r3, #8
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	1c0a      	adds	r2, r1, #0
 8001a3c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2241      	movs	r2, #65	@ 0x41
 8001a42:	5c9b      	ldrb	r3, [r3, r2]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b20      	cmp	r3, #32
 8001a48:	d000      	beq.n	8001a4c <HAL_I2C_Master_Transmit+0x2c>
 8001a4a:	e0e7      	b.n	8001c1c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2240      	movs	r2, #64	@ 0x40
 8001a50:	5c9b      	ldrb	r3, [r3, r2]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_I2C_Master_Transmit+0x3a>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e0e1      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1fe>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2240      	movs	r2, #64	@ 0x40
 8001a5e:	2101      	movs	r1, #1
 8001a60:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a62:	f7ff fc89 	bl	8001378 <HAL_GetTick>
 8001a66:	0003      	movs	r3, r0
 8001a68:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a6a:	2380      	movs	r3, #128	@ 0x80
 8001a6c:	0219      	lsls	r1, r3, #8
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2319      	movs	r3, #25
 8001a76:	2201      	movs	r2, #1
 8001a78:	f000 fa04 	bl	8001e84 <I2C_WaitOnFlagUntilTimeout>
 8001a7c:	1e03      	subs	r3, r0, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0cc      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2241      	movs	r2, #65	@ 0x41
 8001a88:	2121      	movs	r1, #33	@ 0x21
 8001a8a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2242      	movs	r2, #66	@ 0x42
 8001a90:	2110      	movs	r1, #16
 8001a92:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	18ba      	adds	r2, r7, r2
 8001aa6:	8812      	ldrh	r2, [r2, #0]
 8001aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2bff      	cmp	r3, #255	@ 0xff
 8001ab8:	d911      	bls.n	8001ade <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	22ff      	movs	r2, #255	@ 0xff
 8001abe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	2380      	movs	r3, #128	@ 0x80
 8001ac8:	045c      	lsls	r4, r3, #17
 8001aca:	230a      	movs	r3, #10
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	8819      	ldrh	r1, [r3, #0]
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	4b55      	ldr	r3, [pc, #340]	@ (8001c28 <HAL_I2C_Master_Transmit+0x208>)
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	0023      	movs	r3, r4
 8001ad8:	f000 fc26 	bl	8002328 <I2C_TransferConfig>
 8001adc:	e075      	b.n	8001bca <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	2380      	movs	r3, #128	@ 0x80
 8001af0:	049c      	lsls	r4, r3, #18
 8001af2:	230a      	movs	r3, #10
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	8819      	ldrh	r1, [r3, #0]
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	4b4b      	ldr	r3, [pc, #300]	@ (8001c28 <HAL_I2C_Master_Transmit+0x208>)
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	0023      	movs	r3, r4
 8001b00:	f000 fc12 	bl	8002328 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001b04:	e061      	b.n	8001bca <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f000 fa07 	bl	8001f20 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b12:	1e03      	subs	r3, r0, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e081      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1e:	781a      	ldrb	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b42:	3b01      	subs	r3, #1
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d03a      	beq.n	8001bca <HAL_I2C_Master_Transmit+0x1aa>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d136      	bne.n	8001bca <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	0013      	movs	r3, r2
 8001b66:	2200      	movs	r2, #0
 8001b68:	2180      	movs	r1, #128	@ 0x80
 8001b6a:	f000 f98b 	bl	8001e84 <I2C_WaitOnFlagUntilTimeout>
 8001b6e:	1e03      	subs	r3, r0, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e053      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	2bff      	cmp	r3, #255	@ 0xff
 8001b7e:	d911      	bls.n	8001ba4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	22ff      	movs	r2, #255	@ 0xff
 8001b84:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	2380      	movs	r3, #128	@ 0x80
 8001b8e:	045c      	lsls	r4, r3, #17
 8001b90:	230a      	movs	r3, #10
 8001b92:	18fb      	adds	r3, r7, r3
 8001b94:	8819      	ldrh	r1, [r3, #0]
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	0023      	movs	r3, r4
 8001b9e:	f000 fbc3 	bl	8002328 <I2C_TransferConfig>
 8001ba2:	e012      	b.n	8001bca <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	2380      	movs	r3, #128	@ 0x80
 8001bb6:	049c      	lsls	r4, r3, #18
 8001bb8:	230a      	movs	r3, #10
 8001bba:	18fb      	adds	r3, r7, r3
 8001bbc:	8819      	ldrh	r1, [r3, #0]
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	0023      	movs	r3, r4
 8001bc6:	f000 fbaf 	bl	8002328 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d198      	bne.n	8001b06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f000 f9e6 	bl	8001fac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001be0:	1e03      	subs	r3, r0, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e01a      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2220      	movs	r2, #32
 8001bee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	490c      	ldr	r1, [pc, #48]	@ (8001c2c <HAL_I2C_Master_Transmit+0x20c>)
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2241      	movs	r2, #65	@ 0x41
 8001c04:	2120      	movs	r1, #32
 8001c06:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2242      	movs	r2, #66	@ 0x42
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2240      	movs	r2, #64	@ 0x40
 8001c14:	2100      	movs	r1, #0
 8001c16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e000      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001c1c:	2302      	movs	r3, #2
  }
}
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b007      	add	sp, #28
 8001c24:	bd90      	pop	{r4, r7, pc}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	80002000 	.word	0x80002000
 8001c2c:	fe00e800 	.word	0xfe00e800

08001c30 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b089      	sub	sp, #36	@ 0x24
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	0008      	movs	r0, r1
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	230a      	movs	r3, #10
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	1c02      	adds	r2, r0, #0
 8001c44:	801a      	strh	r2, [r3, #0]
 8001c46:	2308      	movs	r3, #8
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	1c0a      	adds	r2, r1, #0
 8001c4c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2241      	movs	r2, #65	@ 0x41
 8001c52:	5c9b      	ldrb	r3, [r3, r2]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b20      	cmp	r3, #32
 8001c58:	d000      	beq.n	8001c5c <HAL_I2C_Master_Receive+0x2c>
 8001c5a:	e0e8      	b.n	8001e2e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2240      	movs	r2, #64	@ 0x40
 8001c60:	5c9b      	ldrb	r3, [r3, r2]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_I2C_Master_Receive+0x3a>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e0e2      	b.n	8001e30 <HAL_I2C_Master_Receive+0x200>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2240      	movs	r2, #64	@ 0x40
 8001c6e:	2101      	movs	r1, #1
 8001c70:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c72:	f7ff fb81 	bl	8001378 <HAL_GetTick>
 8001c76:	0003      	movs	r3, r0
 8001c78:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c7a:	2380      	movs	r3, #128	@ 0x80
 8001c7c:	0219      	lsls	r1, r3, #8
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2319      	movs	r3, #25
 8001c86:	2201      	movs	r2, #1
 8001c88:	f000 f8fc 	bl	8001e84 <I2C_WaitOnFlagUntilTimeout>
 8001c8c:	1e03      	subs	r3, r0, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0cd      	b.n	8001e30 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2241      	movs	r2, #65	@ 0x41
 8001c98:	2122      	movs	r1, #34	@ 0x22
 8001c9a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2242      	movs	r2, #66	@ 0x42
 8001ca0:	2110      	movs	r1, #16
 8001ca2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2208      	movs	r2, #8
 8001cb4:	18ba      	adds	r2, r7, r2
 8001cb6:	8812      	ldrh	r2, [r2, #0]
 8001cb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2bff      	cmp	r3, #255	@ 0xff
 8001cc8:	d911      	bls.n	8001cee <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	22ff      	movs	r2, #255	@ 0xff
 8001cce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	2380      	movs	r3, #128	@ 0x80
 8001cd8:	045c      	lsls	r4, r3, #17
 8001cda:	230a      	movs	r3, #10
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	8819      	ldrh	r1, [r3, #0]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	4b55      	ldr	r3, [pc, #340]	@ (8001e38 <HAL_I2C_Master_Receive+0x208>)
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	0023      	movs	r3, r4
 8001ce8:	f000 fb1e 	bl	8002328 <I2C_TransferConfig>
 8001cec:	e076      	b.n	8001ddc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	2380      	movs	r3, #128	@ 0x80
 8001d00:	049c      	lsls	r4, r3, #18
 8001d02:	230a      	movs	r3, #10
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	8819      	ldrh	r1, [r3, #0]
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e38 <HAL_I2C_Master_Receive+0x208>)
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	0023      	movs	r3, r4
 8001d10:	f000 fb0a 	bl	8002328 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001d14:	e062      	b.n	8001ddc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f000 f989 	bl	8002034 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d22:	1e03      	subs	r3, r0, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e082      	b.n	8001e30 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d03a      	beq.n	8001ddc <HAL_I2C_Master_Receive+0x1ac>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d136      	bne.n	8001ddc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	0013      	movs	r3, r2
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2180      	movs	r1, #128	@ 0x80
 8001d7c:	f000 f882 	bl	8001e84 <I2C_WaitOnFlagUntilTimeout>
 8001d80:	1e03      	subs	r3, r0, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e053      	b.n	8001e30 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2bff      	cmp	r3, #255	@ 0xff
 8001d90:	d911      	bls.n	8001db6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	22ff      	movs	r2, #255	@ 0xff
 8001d96:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	2380      	movs	r3, #128	@ 0x80
 8001da0:	045c      	lsls	r4, r3, #17
 8001da2:	230a      	movs	r3, #10
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	8819      	ldrh	r1, [r3, #0]
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	2300      	movs	r3, #0
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	0023      	movs	r3, r4
 8001db0:	f000 faba 	bl	8002328 <I2C_TransferConfig>
 8001db4:	e012      	b.n	8001ddc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	2380      	movs	r3, #128	@ 0x80
 8001dc8:	049c      	lsls	r4, r3, #18
 8001dca:	230a      	movs	r3, #10
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	8819      	ldrh	r1, [r3, #0]
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	0023      	movs	r3, r4
 8001dd8:	f000 faa6 	bl	8002328 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d197      	bne.n	8001d16 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 f8dd 	bl	8001fac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001df2:	1e03      	subs	r3, r0, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e01a      	b.n	8001e30 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	490b      	ldr	r1, [pc, #44]	@ (8001e3c <HAL_I2C_Master_Receive+0x20c>)
 8001e0e:	400a      	ands	r2, r1
 8001e10:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2241      	movs	r2, #65	@ 0x41
 8001e16:	2120      	movs	r1, #32
 8001e18:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2242      	movs	r2, #66	@ 0x42
 8001e1e:	2100      	movs	r1, #0
 8001e20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2240      	movs	r2, #64	@ 0x40
 8001e26:	2100      	movs	r1, #0
 8001e28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e000      	b.n	8001e30 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001e2e:	2302      	movs	r3, #2
  }
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b007      	add	sp, #28
 8001e36:	bd90      	pop	{r4, r7, pc}
 8001e38:	80002400 	.word	0x80002400
 8001e3c:	fe00e800 	.word	0xfe00e800

08001e40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d103      	bne.n	8001e5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2201      	movs	r2, #1
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d007      	beq.n	8001e7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2101      	movs	r1, #1
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	619a      	str	r2, [r3, #24]
  }
}
 8001e7c:	46c0      	nop			@ (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b002      	add	sp, #8
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	1dfb      	adds	r3, r7, #7
 8001e92:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e94:	e030      	b.n	8001ef8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	d02d      	beq.n	8001ef8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e9c:	f7ff fa6c 	bl	8001378 <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d302      	bcc.n	8001eb2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d122      	bne.n	8001ef8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	425a      	negs	r2, r3
 8001ec2:	4153      	adcs	r3, r2
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	001a      	movs	r2, r3
 8001ec8:	1dfb      	adds	r3, r7, #7
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d113      	bne.n	8001ef8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2241      	movs	r2, #65	@ 0x41
 8001ee0:	2120      	movs	r1, #32
 8001ee2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2242      	movs	r2, #66	@ 0x42
 8001ee8:	2100      	movs	r1, #0
 8001eea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2240      	movs	r2, #64	@ 0x40
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e00f      	b.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	4013      	ands	r3, r2
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	425a      	negs	r2, r3
 8001f08:	4153      	adcs	r3, r2
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	1dfb      	adds	r3, r7, #7
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d0bf      	beq.n	8001e96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b004      	add	sp, #16
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f2c:	e032      	b.n	8001f94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f000 f8ff 	bl	8002138 <I2C_IsErrorOccurred>
 8001f3a:	1e03      	subs	r3, r0, #0
 8001f3c:	d001      	beq.n	8001f42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e030      	b.n	8001fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	3301      	adds	r3, #1
 8001f46:	d025      	beq.n	8001f94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f48:	f7ff fa16 	bl	8001378 <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d302      	bcc.n	8001f5e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d11a      	bne.n	8001f94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2202      	movs	r2, #2
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d013      	beq.n	8001f94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f70:	2220      	movs	r2, #32
 8001f72:	431a      	orrs	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2241      	movs	r2, #65	@ 0x41
 8001f7c:	2120      	movs	r1, #32
 8001f7e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2242      	movs	r2, #66	@ 0x42
 8001f84:	2100      	movs	r1, #0
 8001f86:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2240      	movs	r2, #64	@ 0x40
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e007      	b.n	8001fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d1c5      	bne.n	8001f2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b004      	add	sp, #16
 8001faa:	bd80      	pop	{r7, pc}

08001fac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fb8:	e02f      	b.n	800201a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f000 f8b9 	bl	8002138 <I2C_IsErrorOccurred>
 8001fc6:	1e03      	subs	r3, r0, #0
 8001fc8:	d001      	beq.n	8001fce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e02d      	b.n	800202a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fce:	f7ff f9d3 	bl	8001378 <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d302      	bcc.n	8001fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d11a      	bne.n	800201a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2220      	movs	r2, #32
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	d013      	beq.n	800201a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2241      	movs	r2, #65	@ 0x41
 8002002:	2120      	movs	r1, #32
 8002004:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2242      	movs	r2, #66	@ 0x42
 800200a:	2100      	movs	r1, #0
 800200c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2240      	movs	r2, #64	@ 0x40
 8002012:	2100      	movs	r1, #0
 8002014:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e007      	b.n	800202a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2220      	movs	r2, #32
 8002022:	4013      	ands	r3, r2
 8002024:	2b20      	cmp	r3, #32
 8002026:	d1c8      	bne.n	8001fba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	0018      	movs	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	b004      	add	sp, #16
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002040:	e06b      	b.n	800211a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	0018      	movs	r0, r3
 800204a:	f000 f875 	bl	8002138 <I2C_IsErrorOccurred>
 800204e:	1e03      	subs	r3, r0, #0
 8002050:	d001      	beq.n	8002056 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e069      	b.n	800212a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2220      	movs	r2, #32
 800205e:	4013      	ands	r3, r2
 8002060:	2b20      	cmp	r3, #32
 8002062:	d138      	bne.n	80020d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2204      	movs	r2, #4
 800206c:	4013      	ands	r3, r2
 800206e:	2b04      	cmp	r3, #4
 8002070:	d105      	bne.n	800207e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e055      	b.n	800212a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2210      	movs	r2, #16
 8002086:	4013      	ands	r3, r2
 8002088:	2b10      	cmp	r3, #16
 800208a:	d107      	bne.n	800209c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2210      	movs	r2, #16
 8002092:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2204      	movs	r2, #4
 8002098:	645a      	str	r2, [r3, #68]	@ 0x44
 800209a:	e002      	b.n	80020a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2220      	movs	r2, #32
 80020a8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	491f      	ldr	r1, [pc, #124]	@ (8002134 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80020b6:	400a      	ands	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2241      	movs	r2, #65	@ 0x41
 80020be:	2120      	movs	r1, #32
 80020c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2242      	movs	r2, #66	@ 0x42
 80020c6:	2100      	movs	r1, #0
 80020c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2240      	movs	r2, #64	@ 0x40
 80020ce:	2100      	movs	r1, #0
 80020d0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e029      	b.n	800212a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d6:	f7ff f94f 	bl	8001378 <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d302      	bcc.n	80020ec <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d116      	bne.n	800211a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2204      	movs	r2, #4
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d00f      	beq.n	800211a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fe:	2220      	movs	r2, #32
 8002100:	431a      	orrs	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2241      	movs	r2, #65	@ 0x41
 800210a:	2120      	movs	r1, #32
 800210c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2240      	movs	r2, #64	@ 0x40
 8002112:	2100      	movs	r1, #0
 8002114:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e007      	b.n	800212a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	2204      	movs	r2, #4
 8002122:	4013      	ands	r3, r2
 8002124:	2b04      	cmp	r3, #4
 8002126:	d18c      	bne.n	8002042 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	0018      	movs	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	b004      	add	sp, #16
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			@ (mov r8, r8)
 8002134:	fe00e800 	.word	0xfe00e800

08002138 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	@ 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002144:	2327      	movs	r3, #39	@ 0x27
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2210      	movs	r2, #16
 8002160:	4013      	ands	r3, r2
 8002162:	d100      	bne.n	8002166 <I2C_IsErrorOccurred+0x2e>
 8002164:	e079      	b.n	800225a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2210      	movs	r2, #16
 800216c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800216e:	e057      	b.n	8002220 <I2C_IsErrorOccurred+0xe8>
 8002170:	2227      	movs	r2, #39	@ 0x27
 8002172:	18bb      	adds	r3, r7, r2
 8002174:	18ba      	adds	r2, r7, r2
 8002176:	7812      	ldrb	r2, [r2, #0]
 8002178:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	3301      	adds	r3, #1
 800217e:	d04f      	beq.n	8002220 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002180:	f7ff f8fa 	bl	8001378 <HAL_GetTick>
 8002184:	0002      	movs	r2, r0
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	429a      	cmp	r2, r3
 800218e:	d302      	bcc.n	8002196 <I2C_IsErrorOccurred+0x5e>
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d144      	bne.n	8002220 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	2380      	movs	r3, #128	@ 0x80
 800219e:	01db      	lsls	r3, r3, #7
 80021a0:	4013      	ands	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021a4:	2013      	movs	r0, #19
 80021a6:	183b      	adds	r3, r7, r0
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	2142      	movs	r1, #66	@ 0x42
 80021ac:	5c52      	ldrb	r2, [r2, r1]
 80021ae:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	2380      	movs	r3, #128	@ 0x80
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	401a      	ands	r2, r3
 80021bc:	2380      	movs	r3, #128	@ 0x80
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d126      	bne.n	8002212 <I2C_IsErrorOccurred+0xda>
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	2380      	movs	r3, #128	@ 0x80
 80021c8:	01db      	lsls	r3, r3, #7
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d021      	beq.n	8002212 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80021ce:	183b      	adds	r3, r7, r0
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	d01d      	beq.n	8002212 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2180      	movs	r1, #128	@ 0x80
 80021e2:	01c9      	lsls	r1, r1, #7
 80021e4:	430a      	orrs	r2, r1
 80021e6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80021e8:	f7ff f8c6 	bl	8001378 <HAL_GetTick>
 80021ec:	0003      	movs	r3, r0
 80021ee:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021f0:	e00f      	b.n	8002212 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80021f2:	f7ff f8c1 	bl	8001378 <HAL_GetTick>
 80021f6:	0002      	movs	r2, r0
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b19      	cmp	r3, #25
 80021fe:	d908      	bls.n	8002212 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	2220      	movs	r2, #32
 8002204:	4313      	orrs	r3, r2
 8002206:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002208:	2327      	movs	r3, #39	@ 0x27
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]

              break;
 8002210:	e006      	b.n	8002220 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2220      	movs	r2, #32
 800221a:	4013      	ands	r3, r2
 800221c:	2b20      	cmp	r3, #32
 800221e:	d1e8      	bne.n	80021f2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2220      	movs	r2, #32
 8002228:	4013      	ands	r3, r2
 800222a:	2b20      	cmp	r3, #32
 800222c:	d004      	beq.n	8002238 <I2C_IsErrorOccurred+0x100>
 800222e:	2327      	movs	r3, #39	@ 0x27
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d09b      	beq.n	8002170 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002238:	2327      	movs	r3, #39	@ 0x27
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d103      	bne.n	800224a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2220      	movs	r2, #32
 8002248:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	2204      	movs	r2, #4
 800224e:	4313      	orrs	r3, r2
 8002250:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002252:	2327      	movs	r3, #39	@ 0x27
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4013      	ands	r3, r2
 800226a:	d00c      	beq.n	8002286 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	2201      	movs	r2, #1
 8002270:	4313      	orrs	r3, r2
 8002272:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2280      	movs	r2, #128	@ 0x80
 800227a:	0052      	lsls	r2, r2, #1
 800227c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800227e:	2327      	movs	r3, #39	@ 0x27
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	2380      	movs	r3, #128	@ 0x80
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4013      	ands	r3, r2
 800228e:	d00c      	beq.n	80022aa <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	2208      	movs	r2, #8
 8002294:	4313      	orrs	r3, r2
 8002296:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2280      	movs	r2, #128	@ 0x80
 800229e:	00d2      	lsls	r2, r2, #3
 80022a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022a2:	2327      	movs	r3, #39	@ 0x27
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	2380      	movs	r3, #128	@ 0x80
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4013      	ands	r3, r2
 80022b2:	d00c      	beq.n	80022ce <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	2202      	movs	r2, #2
 80022b8:	4313      	orrs	r3, r2
 80022ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2280      	movs	r2, #128	@ 0x80
 80022c2:	0092      	lsls	r2, r2, #2
 80022c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022c6:	2327      	movs	r3, #39	@ 0x27
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80022ce:	2327      	movs	r3, #39	@ 0x27
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01d      	beq.n	8002314 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	0018      	movs	r0, r3
 80022dc:	f7ff fdb0 	bl	8001e40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	490e      	ldr	r1, [pc, #56]	@ (8002324 <I2C_IsErrorOccurred+0x1ec>)
 80022ec:	400a      	ands	r2, r1
 80022ee:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2241      	movs	r2, #65	@ 0x41
 8002300:	2120      	movs	r1, #32
 8002302:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2242      	movs	r2, #66	@ 0x42
 8002308:	2100      	movs	r1, #0
 800230a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2240      	movs	r2, #64	@ 0x40
 8002310:	2100      	movs	r1, #0
 8002312:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002314:	2327      	movs	r3, #39	@ 0x27
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	781b      	ldrb	r3, [r3, #0]
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b00a      	add	sp, #40	@ 0x28
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	fe00e800 	.word	0xfe00e800

08002328 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	0008      	movs	r0, r1
 8002332:	0011      	movs	r1, r2
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	240a      	movs	r4, #10
 8002338:	193b      	adds	r3, r7, r4
 800233a:	1c02      	adds	r2, r0, #0
 800233c:	801a      	strh	r2, [r3, #0]
 800233e:	2009      	movs	r0, #9
 8002340:	183b      	adds	r3, r7, r0
 8002342:	1c0a      	adds	r2, r1, #0
 8002344:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002346:	193b      	adds	r3, r7, r4
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	059b      	lsls	r3, r3, #22
 800234c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800234e:	183b      	adds	r3, r7, r0
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	0419      	lsls	r1, r3, #16
 8002354:	23ff      	movs	r3, #255	@ 0xff
 8002356:	041b      	lsls	r3, r3, #16
 8002358:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800235a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002362:	4313      	orrs	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	085b      	lsrs	r3, r3, #1
 8002368:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002372:	0d51      	lsrs	r1, r2, #21
 8002374:	2280      	movs	r2, #128	@ 0x80
 8002376:	00d2      	lsls	r2, r2, #3
 8002378:	400a      	ands	r2, r1
 800237a:	4907      	ldr	r1, [pc, #28]	@ (8002398 <I2C_TransferConfig+0x70>)
 800237c:	430a      	orrs	r2, r1
 800237e:	43d2      	mvns	r2, r2
 8002380:	401a      	ands	r2, r3
 8002382:	0011      	movs	r1, r2
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	430a      	orrs	r2, r1
 800238c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	46bd      	mov	sp, r7
 8002392:	b007      	add	sp, #28
 8002394:	bd90      	pop	{r4, r7, pc}
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	03ff63ff 	.word	0x03ff63ff

0800239c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2241      	movs	r2, #65	@ 0x41
 80023aa:	5c9b      	ldrb	r3, [r3, r2]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d138      	bne.n	8002424 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2240      	movs	r2, #64	@ 0x40
 80023b6:	5c9b      	ldrb	r3, [r3, r2]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023bc:	2302      	movs	r3, #2
 80023be:	e032      	b.n	8002426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2240      	movs	r2, #64	@ 0x40
 80023c4:	2101      	movs	r1, #1
 80023c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2241      	movs	r2, #65	@ 0x41
 80023cc:	2124      	movs	r1, #36	@ 0x24
 80023ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2101      	movs	r1, #1
 80023dc:	438a      	bics	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4911      	ldr	r1, [pc, #68]	@ (8002430 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80023ec:	400a      	ands	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6819      	ldr	r1, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2101      	movs	r1, #1
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2241      	movs	r2, #65	@ 0x41
 8002414:	2120      	movs	r1, #32
 8002416:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2240      	movs	r2, #64	@ 0x40
 800241c:	2100      	movs	r1, #0
 800241e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	e000      	b.n	8002426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002424:	2302      	movs	r3, #2
  }
}
 8002426:	0018      	movs	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	b002      	add	sp, #8
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			@ (mov r8, r8)
 8002430:	ffffefff 	.word	0xffffefff

08002434 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2241      	movs	r2, #65	@ 0x41
 8002442:	5c9b      	ldrb	r3, [r3, r2]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b20      	cmp	r3, #32
 8002448:	d139      	bne.n	80024be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2240      	movs	r2, #64	@ 0x40
 800244e:	5c9b      	ldrb	r3, [r3, r2]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002454:	2302      	movs	r3, #2
 8002456:	e033      	b.n	80024c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2240      	movs	r2, #64	@ 0x40
 800245c:	2101      	movs	r1, #1
 800245e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2241      	movs	r2, #65	@ 0x41
 8002464:	2124      	movs	r1, #36	@ 0x24
 8002466:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2101      	movs	r1, #1
 8002474:	438a      	bics	r2, r1
 8002476:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4a11      	ldr	r2, [pc, #68]	@ (80024c8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002484:	4013      	ands	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2101      	movs	r1, #1
 80024a6:	430a      	orrs	r2, r1
 80024a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2241      	movs	r2, #65	@ 0x41
 80024ae:	2120      	movs	r1, #32
 80024b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2240      	movs	r2, #64	@ 0x40
 80024b6:	2100      	movs	r1, #0
 80024b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024be:	2302      	movs	r3, #2
  }
}
 80024c0:	0018      	movs	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b004      	add	sp, #16
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	fffff0ff 	.word	0xfffff0ff

080024cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024cc:	b5b0      	push	{r4, r5, r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	f000 fb6c 	bl	8002bb8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e0:	4bc8      	ldr	r3, [pc, #800]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	220c      	movs	r2, #12
 80024e6:	4013      	ands	r3, r2
 80024e8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ea:	4bc6      	ldr	r3, [pc, #792]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	2380      	movs	r3, #128	@ 0x80
 80024f0:	025b      	lsls	r3, r3, #9
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2201      	movs	r2, #1
 80024fc:	4013      	ands	r3, r2
 80024fe:	d100      	bne.n	8002502 <HAL_RCC_OscConfig+0x36>
 8002500:	e07d      	b.n	80025fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d007      	beq.n	8002518 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d112      	bne.n	8002534 <HAL_RCC_OscConfig+0x68>
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	2380      	movs	r3, #128	@ 0x80
 8002512:	025b      	lsls	r3, r3, #9
 8002514:	429a      	cmp	r2, r3
 8002516:	d10d      	bne.n	8002534 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	4bba      	ldr	r3, [pc, #744]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2380      	movs	r3, #128	@ 0x80
 800251e:	029b      	lsls	r3, r3, #10
 8002520:	4013      	ands	r3, r2
 8002522:	d100      	bne.n	8002526 <HAL_RCC_OscConfig+0x5a>
 8002524:	e06a      	b.n	80025fc <HAL_RCC_OscConfig+0x130>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d166      	bne.n	80025fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	f000 fb42 	bl	8002bb8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	025b      	lsls	r3, r3, #9
 800253c:	429a      	cmp	r2, r3
 800253e:	d107      	bne.n	8002550 <HAL_RCC_OscConfig+0x84>
 8002540:	4bb0      	ldr	r3, [pc, #704]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4baf      	ldr	r3, [pc, #700]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002546:	2180      	movs	r1, #128	@ 0x80
 8002548:	0249      	lsls	r1, r1, #9
 800254a:	430a      	orrs	r2, r1
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e027      	b.n	80025a0 <HAL_RCC_OscConfig+0xd4>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	23a0      	movs	r3, #160	@ 0xa0
 8002556:	02db      	lsls	r3, r3, #11
 8002558:	429a      	cmp	r2, r3
 800255a:	d10e      	bne.n	800257a <HAL_RCC_OscConfig+0xae>
 800255c:	4ba9      	ldr	r3, [pc, #676]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4ba8      	ldr	r3, [pc, #672]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002562:	2180      	movs	r1, #128	@ 0x80
 8002564:	02c9      	lsls	r1, r1, #11
 8002566:	430a      	orrs	r2, r1
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	4ba6      	ldr	r3, [pc, #664]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4ba5      	ldr	r3, [pc, #660]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002570:	2180      	movs	r1, #128	@ 0x80
 8002572:	0249      	lsls	r1, r1, #9
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	e012      	b.n	80025a0 <HAL_RCC_OscConfig+0xd4>
 800257a:	4ba2      	ldr	r3, [pc, #648]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4ba1      	ldr	r3, [pc, #644]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002580:	49a1      	ldr	r1, [pc, #644]	@ (8002808 <HAL_RCC_OscConfig+0x33c>)
 8002582:	400a      	ands	r2, r1
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	4b9f      	ldr	r3, [pc, #636]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2380      	movs	r3, #128	@ 0x80
 800258c:	025b      	lsls	r3, r3, #9
 800258e:	4013      	ands	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4b9b      	ldr	r3, [pc, #620]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b9a      	ldr	r3, [pc, #616]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 800259a:	499c      	ldr	r1, [pc, #624]	@ (800280c <HAL_RCC_OscConfig+0x340>)
 800259c:	400a      	ands	r2, r1
 800259e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d014      	beq.n	80025d2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fe fee6 	bl	8001378 <HAL_GetTick>
 80025ac:	0003      	movs	r3, r0
 80025ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b2:	f7fe fee1 	bl	8001378 <HAL_GetTick>
 80025b6:	0002      	movs	r2, r0
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b64      	cmp	r3, #100	@ 0x64
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e2f9      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	@ 0x80
 80025ca:	029b      	lsls	r3, r3, #10
 80025cc:	4013      	ands	r3, r2
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0xe6>
 80025d0:	e015      	b.n	80025fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d2:	f7fe fed1 	bl	8001378 <HAL_GetTick>
 80025d6:	0003      	movs	r3, r0
 80025d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025dc:	f7fe fecc 	bl	8001378 <HAL_GetTick>
 80025e0:	0002      	movs	r2, r0
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	@ 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e2e4      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ee:	4b85      	ldr	r3, [pc, #532]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	2380      	movs	r3, #128	@ 0x80
 80025f4:	029b      	lsls	r3, r3, #10
 80025f6:	4013      	ands	r3, r2
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x110>
 80025fa:	e000      	b.n	80025fe <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2202      	movs	r2, #2
 8002604:	4013      	ands	r3, r2
 8002606:	d100      	bne.n	800260a <HAL_RCC_OscConfig+0x13e>
 8002608:	e099      	b.n	800273e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	2220      	movs	r2, #32
 8002614:	4013      	ands	r3, r2
 8002616:	d009      	beq.n	800262c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002618:	4b7a      	ldr	r3, [pc, #488]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b79      	ldr	r3, [pc, #484]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 800261e:	2120      	movs	r1, #32
 8002620:	430a      	orrs	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	2220      	movs	r2, #32
 8002628:	4393      	bics	r3, r2
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	2b04      	cmp	r3, #4
 8002630:	d005      	beq.n	800263e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	2b0c      	cmp	r3, #12
 8002636:	d13e      	bne.n	80026b6 <HAL_RCC_OscConfig+0x1ea>
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d13b      	bne.n	80026b6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800263e:	4b71      	ldr	r3, [pc, #452]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2204      	movs	r2, #4
 8002644:	4013      	ands	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_RCC_OscConfig+0x186>
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e2b2      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b6c      	ldr	r3, [pc, #432]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4a6e      	ldr	r2, [pc, #440]	@ (8002810 <HAL_RCC_OscConfig+0x344>)
 8002658:	4013      	ands	r3, r2
 800265a:	0019      	movs	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	021a      	lsls	r2, r3, #8
 8002662:	4b68      	ldr	r3, [pc, #416]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002664:	430a      	orrs	r2, r1
 8002666:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002668:	4b66      	ldr	r3, [pc, #408]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2209      	movs	r2, #9
 800266e:	4393      	bics	r3, r2
 8002670:	0019      	movs	r1, r3
 8002672:	4b64      	ldr	r3, [pc, #400]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002676:	430a      	orrs	r2, r1
 8002678:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800267a:	f000 fbeb 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 800267e:	0001      	movs	r1, r0
 8002680:	4b60      	ldr	r3, [pc, #384]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	220f      	movs	r2, #15
 8002688:	4013      	ands	r3, r2
 800268a:	4a62      	ldr	r2, [pc, #392]	@ (8002814 <HAL_RCC_OscConfig+0x348>)
 800268c:	5cd3      	ldrb	r3, [r2, r3]
 800268e:	000a      	movs	r2, r1
 8002690:	40da      	lsrs	r2, r3
 8002692:	4b61      	ldr	r3, [pc, #388]	@ (8002818 <HAL_RCC_OscConfig+0x34c>)
 8002694:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002696:	4b61      	ldr	r3, [pc, #388]	@ (800281c <HAL_RCC_OscConfig+0x350>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2513      	movs	r5, #19
 800269c:	197c      	adds	r4, r7, r5
 800269e:	0018      	movs	r0, r3
 80026a0:	f7fe fe24 	bl	80012ec <HAL_InitTick>
 80026a4:	0003      	movs	r3, r0
 80026a6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80026a8:	197b      	adds	r3, r7, r5
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d046      	beq.n	800273e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80026b0:	197b      	adds	r3, r7, r5
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	e280      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d027      	beq.n	800270c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80026bc:	4b51      	ldr	r3, [pc, #324]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2209      	movs	r2, #9
 80026c2:	4393      	bics	r3, r2
 80026c4:	0019      	movs	r1, r3
 80026c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 80026c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ca:	430a      	orrs	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7fe fe53 	bl	8001378 <HAL_GetTick>
 80026d2:	0003      	movs	r3, r0
 80026d4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d8:	f7fe fe4e 	bl	8001378 <HAL_GetTick>
 80026dc:	0002      	movs	r2, r0
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e266      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ea:	4b46      	ldr	r3, [pc, #280]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2204      	movs	r2, #4
 80026f0:	4013      	ands	r3, r2
 80026f2:	d0f1      	beq.n	80026d8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f4:	4b43      	ldr	r3, [pc, #268]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a45      	ldr	r2, [pc, #276]	@ (8002810 <HAL_RCC_OscConfig+0x344>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	021a      	lsls	r2, r3, #8
 8002704:	4b3f      	ldr	r3, [pc, #252]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002706:	430a      	orrs	r2, r1
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	e018      	b.n	800273e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270c:	4b3d      	ldr	r3, [pc, #244]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b3c      	ldr	r3, [pc, #240]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002712:	2101      	movs	r1, #1
 8002714:	438a      	bics	r2, r1
 8002716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7fe fe2e 	bl	8001378 <HAL_GetTick>
 800271c:	0003      	movs	r3, r0
 800271e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002722:	f7fe fe29 	bl	8001378 <HAL_GetTick>
 8002726:	0002      	movs	r2, r0
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e241      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002734:	4b33      	ldr	r3, [pc, #204]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2204      	movs	r2, #4
 800273a:	4013      	ands	r3, r2
 800273c:	d1f1      	bne.n	8002722 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2210      	movs	r2, #16
 8002744:	4013      	ands	r3, r2
 8002746:	d100      	bne.n	800274a <HAL_RCC_OscConfig+0x27e>
 8002748:	e0a1      	b.n	800288e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d140      	bne.n	80027d2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002750:	4b2c      	ldr	r3, [pc, #176]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	2380      	movs	r3, #128	@ 0x80
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4013      	ands	r3, r2
 800275a:	d005      	beq.n	8002768 <HAL_RCC_OscConfig+0x29c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e227      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002768:	4b26      	ldr	r3, [pc, #152]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a2c      	ldr	r2, [pc, #176]	@ (8002820 <HAL_RCC_OscConfig+0x354>)
 800276e:	4013      	ands	r3, r2
 8002770:	0019      	movs	r1, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1a      	ldr	r2, [r3, #32]
 8002776:	4b23      	ldr	r3, [pc, #140]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002778:	430a      	orrs	r2, r1
 800277a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800277c:	4b21      	ldr	r3, [pc, #132]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	0a19      	lsrs	r1, r3, #8
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	061a      	lsls	r2, r3, #24
 800278a:	4b1e      	ldr	r3, [pc, #120]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	0b5b      	lsrs	r3, r3, #13
 8002796:	3301      	adds	r3, #1
 8002798:	2280      	movs	r2, #128	@ 0x80
 800279a:	0212      	lsls	r2, r2, #8
 800279c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800279e:	4b19      	ldr	r3, [pc, #100]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	210f      	movs	r1, #15
 80027a6:	400b      	ands	r3, r1
 80027a8:	491a      	ldr	r1, [pc, #104]	@ (8002814 <HAL_RCC_OscConfig+0x348>)
 80027aa:	5ccb      	ldrb	r3, [r1, r3]
 80027ac:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80027ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002818 <HAL_RCC_OscConfig+0x34c>)
 80027b0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80027b2:	4b1a      	ldr	r3, [pc, #104]	@ (800281c <HAL_RCC_OscConfig+0x350>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2513      	movs	r5, #19
 80027b8:	197c      	adds	r4, r7, r5
 80027ba:	0018      	movs	r0, r3
 80027bc:	f7fe fd96 	bl	80012ec <HAL_InitTick>
 80027c0:	0003      	movs	r3, r0
 80027c2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80027c4:	197b      	adds	r3, r7, r5
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d060      	beq.n	800288e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80027cc:	197b      	adds	r3, r7, r5
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	e1f2      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d03f      	beq.n	800285a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027da:	4b0a      	ldr	r3, [pc, #40]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 80027e0:	2180      	movs	r1, #128	@ 0x80
 80027e2:	0049      	lsls	r1, r1, #1
 80027e4:	430a      	orrs	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe fdc6 	bl	8001378 <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027f0:	e018      	b.n	8002824 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027f2:	f7fe fdc1 	bl	8001378 <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d911      	bls.n	8002824 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e1d9      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
 8002804:	40021000 	.word	0x40021000
 8002808:	fffeffff 	.word	0xfffeffff
 800280c:	fffbffff 	.word	0xfffbffff
 8002810:	ffffe0ff 	.word	0xffffe0ff
 8002814:	08004d74 	.word	0x08004d74
 8002818:	20000000 	.word	0x20000000
 800281c:	20000004 	.word	0x20000004
 8002820:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002824:	4bc9      	ldr	r3, [pc, #804]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	2380      	movs	r3, #128	@ 0x80
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4013      	ands	r3, r2
 800282e:	d0e0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002830:	4bc6      	ldr	r3, [pc, #792]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4ac6      	ldr	r2, [pc, #792]	@ (8002b50 <HAL_RCC_OscConfig+0x684>)
 8002836:	4013      	ands	r3, r2
 8002838:	0019      	movs	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1a      	ldr	r2, [r3, #32]
 800283e:	4bc3      	ldr	r3, [pc, #780]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002840:	430a      	orrs	r2, r1
 8002842:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002844:	4bc1      	ldr	r3, [pc, #772]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	0a19      	lsrs	r1, r3, #8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	061a      	lsls	r2, r3, #24
 8002852:	4bbe      	ldr	r3, [pc, #760]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002854:	430a      	orrs	r2, r1
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	e019      	b.n	800288e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800285a:	4bbc      	ldr	r3, [pc, #752]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4bbb      	ldr	r3, [pc, #748]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002860:	49bc      	ldr	r1, [pc, #752]	@ (8002b54 <HAL_RCC_OscConfig+0x688>)
 8002862:	400a      	ands	r2, r1
 8002864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7fe fd87 	bl	8001378 <HAL_GetTick>
 800286a:	0003      	movs	r3, r0
 800286c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002870:	f7fe fd82 	bl	8001378 <HAL_GetTick>
 8002874:	0002      	movs	r2, r0
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e19a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002882:	4bb2      	ldr	r3, [pc, #712]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	2380      	movs	r3, #128	@ 0x80
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4013      	ands	r3, r2
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2208      	movs	r2, #8
 8002894:	4013      	ands	r3, r2
 8002896:	d036      	beq.n	8002906 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d019      	beq.n	80028d4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a0:	4baa      	ldr	r3, [pc, #680]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80028a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028a4:	4ba9      	ldr	r3, [pc, #676]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80028a6:	2101      	movs	r1, #1
 80028a8:	430a      	orrs	r2, r1
 80028aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ac:	f7fe fd64 	bl	8001378 <HAL_GetTick>
 80028b0:	0003      	movs	r3, r0
 80028b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b6:	f7fe fd5f 	bl	8001378 <HAL_GetTick>
 80028ba:	0002      	movs	r2, r0
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e177      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028c8:	4ba0      	ldr	r3, [pc, #640]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80028ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028cc:	2202      	movs	r2, #2
 80028ce:	4013      	ands	r3, r2
 80028d0:	d0f1      	beq.n	80028b6 <HAL_RCC_OscConfig+0x3ea>
 80028d2:	e018      	b.n	8002906 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d4:	4b9d      	ldr	r3, [pc, #628]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80028d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028d8:	4b9c      	ldr	r3, [pc, #624]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80028da:	2101      	movs	r1, #1
 80028dc:	438a      	bics	r2, r1
 80028de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e0:	f7fe fd4a 	bl	8001378 <HAL_GetTick>
 80028e4:	0003      	movs	r3, r0
 80028e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ea:	f7fe fd45 	bl	8001378 <HAL_GetTick>
 80028ee:	0002      	movs	r2, r0
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e15d      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028fc:	4b93      	ldr	r3, [pc, #588]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80028fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002900:	2202      	movs	r2, #2
 8002902:	4013      	ands	r3, r2
 8002904:	d1f1      	bne.n	80028ea <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2204      	movs	r2, #4
 800290c:	4013      	ands	r3, r2
 800290e:	d100      	bne.n	8002912 <HAL_RCC_OscConfig+0x446>
 8002910:	e0ae      	b.n	8002a70 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002912:	2023      	movs	r0, #35	@ 0x23
 8002914:	183b      	adds	r3, r7, r0
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291a:	4b8c      	ldr	r3, [pc, #560]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 800291c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800291e:	2380      	movs	r3, #128	@ 0x80
 8002920:	055b      	lsls	r3, r3, #21
 8002922:	4013      	ands	r3, r2
 8002924:	d109      	bne.n	800293a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002926:	4b89      	ldr	r3, [pc, #548]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002928:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800292a:	4b88      	ldr	r3, [pc, #544]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 800292c:	2180      	movs	r1, #128	@ 0x80
 800292e:	0549      	lsls	r1, r1, #21
 8002930:	430a      	orrs	r2, r1
 8002932:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002934:	183b      	adds	r3, r7, r0
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	4b87      	ldr	r3, [pc, #540]	@ (8002b58 <HAL_RCC_OscConfig+0x68c>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	2380      	movs	r3, #128	@ 0x80
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4013      	ands	r3, r2
 8002944:	d11a      	bne.n	800297c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002946:	4b84      	ldr	r3, [pc, #528]	@ (8002b58 <HAL_RCC_OscConfig+0x68c>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4b83      	ldr	r3, [pc, #524]	@ (8002b58 <HAL_RCC_OscConfig+0x68c>)
 800294c:	2180      	movs	r1, #128	@ 0x80
 800294e:	0049      	lsls	r1, r1, #1
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002954:	f7fe fd10 	bl	8001378 <HAL_GetTick>
 8002958:	0003      	movs	r3, r0
 800295a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295e:	f7fe fd0b 	bl	8001378 <HAL_GetTick>
 8002962:	0002      	movs	r2, r0
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b64      	cmp	r3, #100	@ 0x64
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e123      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002970:	4b79      	ldr	r3, [pc, #484]	@ (8002b58 <HAL_RCC_OscConfig+0x68c>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	2380      	movs	r3, #128	@ 0x80
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4013      	ands	r3, r2
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	2380      	movs	r3, #128	@ 0x80
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	429a      	cmp	r2, r3
 8002986:	d107      	bne.n	8002998 <HAL_RCC_OscConfig+0x4cc>
 8002988:	4b70      	ldr	r3, [pc, #448]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 800298a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800298c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 800298e:	2180      	movs	r1, #128	@ 0x80
 8002990:	0049      	lsls	r1, r1, #1
 8002992:	430a      	orrs	r2, r1
 8002994:	651a      	str	r2, [r3, #80]	@ 0x50
 8002996:	e031      	b.n	80029fc <HAL_RCC_OscConfig+0x530>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10c      	bne.n	80029ba <HAL_RCC_OscConfig+0x4ee>
 80029a0:	4b6a      	ldr	r3, [pc, #424]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80029a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029a4:	4b69      	ldr	r3, [pc, #420]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80029a6:	496b      	ldr	r1, [pc, #428]	@ (8002b54 <HAL_RCC_OscConfig+0x688>)
 80029a8:	400a      	ands	r2, r1
 80029aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80029ac:	4b67      	ldr	r3, [pc, #412]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80029ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029b0:	4b66      	ldr	r3, [pc, #408]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80029b2:	496a      	ldr	r1, [pc, #424]	@ (8002b5c <HAL_RCC_OscConfig+0x690>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80029b8:	e020      	b.n	80029fc <HAL_RCC_OscConfig+0x530>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	23a0      	movs	r3, #160	@ 0xa0
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d10e      	bne.n	80029e4 <HAL_RCC_OscConfig+0x518>
 80029c6:	4b61      	ldr	r3, [pc, #388]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80029c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029ca:	4b60      	ldr	r3, [pc, #384]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80029cc:	2180      	movs	r1, #128	@ 0x80
 80029ce:	00c9      	lsls	r1, r1, #3
 80029d0:	430a      	orrs	r2, r1
 80029d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80029d4:	4b5d      	ldr	r3, [pc, #372]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80029d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029d8:	4b5c      	ldr	r3, [pc, #368]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80029da:	2180      	movs	r1, #128	@ 0x80
 80029dc:	0049      	lsls	r1, r1, #1
 80029de:	430a      	orrs	r2, r1
 80029e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80029e2:	e00b      	b.n	80029fc <HAL_RCC_OscConfig+0x530>
 80029e4:	4b59      	ldr	r3, [pc, #356]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80029e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029e8:	4b58      	ldr	r3, [pc, #352]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80029ea:	495a      	ldr	r1, [pc, #360]	@ (8002b54 <HAL_RCC_OscConfig+0x688>)
 80029ec:	400a      	ands	r2, r1
 80029ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80029f0:	4b56      	ldr	r3, [pc, #344]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80029f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029f4:	4b55      	ldr	r3, [pc, #340]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 80029f6:	4959      	ldr	r1, [pc, #356]	@ (8002b5c <HAL_RCC_OscConfig+0x690>)
 80029f8:	400a      	ands	r2, r1
 80029fa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d015      	beq.n	8002a30 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a04:	f7fe fcb8 	bl	8001378 <HAL_GetTick>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a0c:	e009      	b.n	8002a22 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0e:	f7fe fcb3 	bl	8001378 <HAL_GetTick>
 8002a12:	0002      	movs	r2, r0
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	4a51      	ldr	r2, [pc, #324]	@ (8002b60 <HAL_RCC_OscConfig+0x694>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e0ca      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a22:	4b4a      	ldr	r3, [pc, #296]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002a24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a26:	2380      	movs	r3, #128	@ 0x80
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d0ef      	beq.n	8002a0e <HAL_RCC_OscConfig+0x542>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a30:	f7fe fca2 	bl	8001378 <HAL_GetTick>
 8002a34:	0003      	movs	r3, r0
 8002a36:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a38:	e009      	b.n	8002a4e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a3a:	f7fe fc9d 	bl	8001378 <HAL_GetTick>
 8002a3e:	0002      	movs	r2, r0
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	4a46      	ldr	r2, [pc, #280]	@ (8002b60 <HAL_RCC_OscConfig+0x694>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e0b4      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002a50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a52:	2380      	movs	r3, #128	@ 0x80
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4013      	ands	r3, r2
 8002a58:	d1ef      	bne.n	8002a3a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a5a:	2323      	movs	r3, #35	@ 0x23
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a64:	4b39      	ldr	r3, [pc, #228]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002a66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a68:	4b38      	ldr	r3, [pc, #224]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002a6a:	493e      	ldr	r1, [pc, #248]	@ (8002b64 <HAL_RCC_OscConfig+0x698>)
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d100      	bne.n	8002a7a <HAL_RCC_OscConfig+0x5ae>
 8002a78:	e09d      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	2b0c      	cmp	r3, #12
 8002a7e:	d100      	bne.n	8002a82 <HAL_RCC_OscConfig+0x5b6>
 8002a80:	e076      	b.n	8002b70 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d145      	bne.n	8002b16 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8a:	4b30      	ldr	r3, [pc, #192]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002a90:	4935      	ldr	r1, [pc, #212]	@ (8002b68 <HAL_RCC_OscConfig+0x69c>)
 8002a92:	400a      	ands	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a96:	f7fe fc6f 	bl	8001378 <HAL_GetTick>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7fe fc6a 	bl	8001378 <HAL_GetTick>
 8002aa4:	0002      	movs	r2, r0
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e082      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ab2:	4b26      	ldr	r3, [pc, #152]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	2380      	movs	r3, #128	@ 0x80
 8002ab8:	049b      	lsls	r3, r3, #18
 8002aba:	4013      	ands	r3, r2
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002abe:	4b23      	ldr	r3, [pc, #140]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8002b6c <HAL_RCC_OscConfig+0x6a0>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002ada:	430a      	orrs	r2, r1
 8002adc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ade:	4b1b      	ldr	r3, [pc, #108]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002ae4:	2180      	movs	r1, #128	@ 0x80
 8002ae6:	0449      	lsls	r1, r1, #17
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe fc44 	bl	8001378 <HAL_GetTick>
 8002af0:	0003      	movs	r3, r0
 8002af2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af6:	f7fe fc3f 	bl	8001378 <HAL_GetTick>
 8002afa:	0002      	movs	r2, r0
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e057      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b08:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	2380      	movs	r3, #128	@ 0x80
 8002b0e:	049b      	lsls	r3, r3, #18
 8002b10:	4013      	ands	r3, r2
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x62a>
 8002b14:	e04f      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b16:	4b0d      	ldr	r3, [pc, #52]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002b1c:	4912      	ldr	r1, [pc, #72]	@ (8002b68 <HAL_RCC_OscConfig+0x69c>)
 8002b1e:	400a      	ands	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7fe fc29 	bl	8001378 <HAL_GetTick>
 8002b26:	0003      	movs	r3, r0
 8002b28:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe fc24 	bl	8001378 <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e03c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b3e:	4b03      	ldr	r3, [pc, #12]	@ (8002b4c <HAL_RCC_OscConfig+0x680>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	2380      	movs	r3, #128	@ 0x80
 8002b44:	049b      	lsls	r3, r3, #18
 8002b46:	4013      	ands	r3, r2
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x660>
 8002b4a:	e034      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6ea>
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	ffff1fff 	.word	0xffff1fff
 8002b54:	fffffeff 	.word	0xfffffeff
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	fffffbff 	.word	0xfffffbff
 8002b60:	00001388 	.word	0x00001388
 8002b64:	efffffff 	.word	0xefffffff
 8002b68:	feffffff 	.word	0xfeffffff
 8002b6c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e01d      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b7c:	4b10      	ldr	r3, [pc, #64]	@ (8002bc0 <HAL_RCC_OscConfig+0x6f4>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	025b      	lsls	r3, r3, #9
 8002b88:	401a      	ands	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d10f      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	23f0      	movs	r3, #240	@ 0xf0
 8002b96:	039b      	lsls	r3, r3, #14
 8002b98:	401a      	ands	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d107      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	23c0      	movs	r3, #192	@ 0xc0
 8002ba6:	041b      	lsls	r3, r3, #16
 8002ba8:	401a      	ands	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b00a      	add	sp, #40	@ 0x28
 8002bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc4:	b5b0      	push	{r4, r5, r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e128      	b.n	8002e2a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b96      	ldr	r3, [pc, #600]	@ (8002e34 <HAL_RCC_ClockConfig+0x270>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	4013      	ands	r3, r2
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d91e      	bls.n	8002c24 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b93      	ldr	r3, [pc, #588]	@ (8002e34 <HAL_RCC_ClockConfig+0x270>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2201      	movs	r2, #1
 8002bec:	4393      	bics	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	4b90      	ldr	r3, [pc, #576]	@ (8002e34 <HAL_RCC_ClockConfig+0x270>)
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fbbe 	bl	8001378 <HAL_GetTick>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c00:	e009      	b.n	8002c16 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c02:	f7fe fbb9 	bl	8001378 <HAL_GetTick>
 8002c06:	0002      	movs	r2, r0
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	4a8a      	ldr	r2, [pc, #552]	@ (8002e38 <HAL_RCC_ClockConfig+0x274>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e109      	b.n	8002e2a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b87      	ldr	r3, [pc, #540]	@ (8002e34 <HAL_RCC_ClockConfig+0x270>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1ee      	bne.n	8002c02 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d009      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c2e:	4b83      	ldr	r3, [pc, #524]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	22f0      	movs	r2, #240	@ 0xf0
 8002c34:	4393      	bics	r3, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	4b7f      	ldr	r3, [pc, #508]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2201      	movs	r2, #1
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d100      	bne.n	8002c4e <HAL_RCC_ClockConfig+0x8a>
 8002c4c:	e089      	b.n	8002d62 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c56:	4b79      	ldr	r3, [pc, #484]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	2380      	movs	r3, #128	@ 0x80
 8002c5c:	029b      	lsls	r3, r3, #10
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d120      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e0e1      	b.n	8002e2a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c6e:	4b73      	ldr	r3, [pc, #460]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	2380      	movs	r3, #128	@ 0x80
 8002c74:	049b      	lsls	r3, r3, #18
 8002c76:	4013      	ands	r3, r2
 8002c78:	d114      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0d5      	b.n	8002e2a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d106      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c86:	4b6d      	ldr	r3, [pc, #436]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d109      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0ca      	b.n	8002e2a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c94:	4b69      	ldr	r3, [pc, #420]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0c2      	b.n	8002e2a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca4:	4b65      	ldr	r3, [pc, #404]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	4393      	bics	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	4b62      	ldr	r3, [pc, #392]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb8:	f7fe fb5e 	bl	8001378 <HAL_GetTick>
 8002cbc:	0003      	movs	r3, r0
 8002cbe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d111      	bne.n	8002cec <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc8:	e009      	b.n	8002cde <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cca:	f7fe fb55 	bl	8001378 <HAL_GetTick>
 8002cce:	0002      	movs	r2, r0
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	4a58      	ldr	r2, [pc, #352]	@ (8002e38 <HAL_RCC_ClockConfig+0x274>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0a5      	b.n	8002e2a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cde:	4b57      	ldr	r3, [pc, #348]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d1ef      	bne.n	8002cca <HAL_RCC_ClockConfig+0x106>
 8002cea:	e03a      	b.n	8002d62 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d111      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf4:	e009      	b.n	8002d0a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf6:	f7fe fb3f 	bl	8001378 <HAL_GetTick>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	4a4d      	ldr	r2, [pc, #308]	@ (8002e38 <HAL_RCC_ClockConfig+0x274>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e08f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d0a:	4b4c      	ldr	r3, [pc, #304]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	220c      	movs	r2, #12
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	d1ef      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0x132>
 8002d16:	e024      	b.n	8002d62 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d11b      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d20:	e009      	b.n	8002d36 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d22:	f7fe fb29 	bl	8001378 <HAL_GetTick>
 8002d26:	0002      	movs	r2, r0
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	4a42      	ldr	r2, [pc, #264]	@ (8002e38 <HAL_RCC_ClockConfig+0x274>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e079      	b.n	8002e2a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d36:	4b41      	ldr	r3, [pc, #260]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d1ef      	bne.n	8002d22 <HAL_RCC_ClockConfig+0x15e>
 8002d42:	e00e      	b.n	8002d62 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d44:	f7fe fb18 	bl	8001378 <HAL_GetTick>
 8002d48:	0002      	movs	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	4a3a      	ldr	r2, [pc, #232]	@ (8002e38 <HAL_RCC_ClockConfig+0x274>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e068      	b.n	8002e2a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d58:	4b38      	ldr	r3, [pc, #224]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	220c      	movs	r2, #12
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d62:	4b34      	ldr	r3, [pc, #208]	@ (8002e34 <HAL_RCC_ClockConfig+0x270>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2201      	movs	r2, #1
 8002d68:	4013      	ands	r3, r2
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d21e      	bcs.n	8002dae <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d70:	4b30      	ldr	r3, [pc, #192]	@ (8002e34 <HAL_RCC_ClockConfig+0x270>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2201      	movs	r2, #1
 8002d76:	4393      	bics	r3, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e34 <HAL_RCC_ClockConfig+0x270>)
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d82:	f7fe faf9 	bl	8001378 <HAL_GetTick>
 8002d86:	0003      	movs	r3, r0
 8002d88:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	e009      	b.n	8002da0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8c:	f7fe faf4 	bl	8001378 <HAL_GetTick>
 8002d90:	0002      	movs	r2, r0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	4a28      	ldr	r2, [pc, #160]	@ (8002e38 <HAL_RCC_ClockConfig+0x274>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e044      	b.n	8002e2a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da0:	4b24      	ldr	r3, [pc, #144]	@ (8002e34 <HAL_RCC_ClockConfig+0x270>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2201      	movs	r2, #1
 8002da6:	4013      	ands	r3, r2
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d1ee      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2204      	movs	r2, #4
 8002db4:	4013      	ands	r3, r2
 8002db6:	d009      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db8:	4b20      	ldr	r3, [pc, #128]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4a20      	ldr	r2, [pc, #128]	@ (8002e40 <HAL_RCC_ClockConfig+0x27c>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dd6:	4b19      	ldr	r3, [pc, #100]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	4a1a      	ldr	r2, [pc, #104]	@ (8002e44 <HAL_RCC_ClockConfig+0x280>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	0019      	movs	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	00da      	lsls	r2, r3, #3
 8002de6:	4b15      	ldr	r3, [pc, #84]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002de8:	430a      	orrs	r2, r1
 8002dea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dec:	f000 f832 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002df0:	0001      	movs	r1, r0
 8002df2:	4b12      	ldr	r3, [pc, #72]	@ (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	220f      	movs	r2, #15
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	4a12      	ldr	r2, [pc, #72]	@ (8002e48 <HAL_RCC_ClockConfig+0x284>)
 8002dfe:	5cd3      	ldrb	r3, [r2, r3]
 8002e00:	000a      	movs	r2, r1
 8002e02:	40da      	lsrs	r2, r3
 8002e04:	4b11      	ldr	r3, [pc, #68]	@ (8002e4c <HAL_RCC_ClockConfig+0x288>)
 8002e06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e08:	4b11      	ldr	r3, [pc, #68]	@ (8002e50 <HAL_RCC_ClockConfig+0x28c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	250b      	movs	r5, #11
 8002e0e:	197c      	adds	r4, r7, r5
 8002e10:	0018      	movs	r0, r3
 8002e12:	f7fe fa6b 	bl	80012ec <HAL_InitTick>
 8002e16:	0003      	movs	r3, r0
 8002e18:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002e1a:	197b      	adds	r3, r7, r5
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002e22:	197b      	adds	r3, r7, r5
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b004      	add	sp, #16
 8002e30:	bdb0      	pop	{r4, r5, r7, pc}
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	40022000 	.word	0x40022000
 8002e38:	00001388 	.word	0x00001388
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	fffff8ff 	.word	0xfffff8ff
 8002e44:	ffffc7ff 	.word	0xffffc7ff
 8002e48:	08004d74 	.word	0x08004d74
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	20000004 	.word	0x20000004

08002e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e54:	b5b0      	push	{r4, r5, r7, lr}
 8002e56:	b08e      	sub	sp, #56	@ 0x38
 8002e58:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002e5a:	4b4c      	ldr	r3, [pc, #304]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x138>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e62:	230c      	movs	r3, #12
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b0c      	cmp	r3, #12
 8002e68:	d014      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x40>
 8002e6a:	d900      	bls.n	8002e6e <HAL_RCC_GetSysClockFreq+0x1a>
 8002e6c:	e07b      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x112>
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d002      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0x24>
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d00b      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e76:	e076      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e78:	4b44      	ldr	r3, [pc, #272]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x138>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d002      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002e82:	4b43      	ldr	r3, [pc, #268]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e84:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002e86:	e07c      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002e88:	4b42      	ldr	r3, [pc, #264]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x140>)
 8002e8a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002e8c:	e079      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e8e:	4b42      	ldr	r3, [pc, #264]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x144>)
 8002e90:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002e92:	e076      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e96:	0c9a      	lsrs	r2, r3, #18
 8002e98:	230f      	movs	r3, #15
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x148>)
 8002e9e:	5c9b      	ldrb	r3, [r3, r2]
 8002ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea4:	0d9a      	lsrs	r2, r3, #22
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	3301      	adds	r3, #1
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eae:	4b37      	ldr	r3, [pc, #220]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x138>)
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	2380      	movs	r3, #128	@ 0x80
 8002eb4:	025b      	lsls	r3, r3, #9
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d01a      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	4a35      	ldr	r2, [pc, #212]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x144>)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	69b8      	ldr	r0, [r7, #24]
 8002ec8:	69f9      	ldr	r1, [r7, #28]
 8002eca:	f7fd f9d3 	bl	8000274 <__aeabi_lmul>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	000b      	movs	r3, r1
 8002ed2:	0010      	movs	r0, r2
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f7fd f9a7 	bl	8000234 <__aeabi_uldivmod>
 8002ee6:	0002      	movs	r2, r0
 8002ee8:	000b      	movs	r3, r1
 8002eea:	0013      	movs	r3, r2
 8002eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eee:	e037      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ef0:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x138>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d01a      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	4a23      	ldr	r2, [pc, #140]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f04:	2300      	movs	r3, #0
 8002f06:	68b8      	ldr	r0, [r7, #8]
 8002f08:	68f9      	ldr	r1, [r7, #12]
 8002f0a:	f7fd f9b3 	bl	8000274 <__aeabi_lmul>
 8002f0e:	0002      	movs	r2, r0
 8002f10:	000b      	movs	r3, r1
 8002f12:	0010      	movs	r0, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	607b      	str	r3, [r7, #4]
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f7fd f987 	bl	8000234 <__aeabi_uldivmod>
 8002f26:	0002      	movs	r2, r0
 8002f28:	000b      	movs	r3, r1
 8002f2a:	0013      	movs	r3, r2
 8002f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f2e:	e017      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f32:	0018      	movs	r0, r3
 8002f34:	2300      	movs	r3, #0
 8002f36:	0019      	movs	r1, r3
 8002f38:	4a16      	ldr	r2, [pc, #88]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x140>)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f7fd f99a 	bl	8000274 <__aeabi_lmul>
 8002f40:	0002      	movs	r2, r0
 8002f42:	000b      	movs	r3, r1
 8002f44:	0010      	movs	r0, r2
 8002f46:	0019      	movs	r1, r3
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	001c      	movs	r4, r3
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	001d      	movs	r5, r3
 8002f50:	0022      	movs	r2, r4
 8002f52:	002b      	movs	r3, r5
 8002f54:	f7fd f96e 	bl	8000234 <__aeabi_uldivmod>
 8002f58:	0002      	movs	r2, r0
 8002f5a:	000b      	movs	r3, r1
 8002f5c:	0013      	movs	r3, r2
 8002f5e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f62:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002f64:	e00d      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f66:	4b09      	ldr	r3, [pc, #36]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x138>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	0b5b      	lsrs	r3, r3, #13
 8002f6c:	2207      	movs	r2, #7
 8002f6e:	4013      	ands	r3, r2
 8002f70:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	3301      	adds	r3, #1
 8002f76:	2280      	movs	r2, #128	@ 0x80
 8002f78:	0212      	lsls	r2, r2, #8
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	0013      	movs	r3, r2
 8002f7e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002f80:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002f84:	0018      	movs	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b00e      	add	sp, #56	@ 0x38
 8002f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	003d0900 	.word	0x003d0900
 8002f94:	00f42400 	.word	0x00f42400
 8002f98:	007a1200 	.word	0x007a1200
 8002f9c:	08004d8c 	.word	0x08004d8c

08002fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa4:	4b02      	ldr	r3, [pc, #8]	@ (8002fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			@ (mov r8, r8)
 8002fb0:	20000000 	.word	0x20000000

08002fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fb8:	f7ff fff2 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fbc:	0001      	movs	r1, r0
 8002fbe:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	4a04      	ldr	r2, [pc, #16]	@ (8002fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	40d9      	lsrs	r1, r3
 8002fce:	000b      	movs	r3, r1
}
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			@ (mov r8, r8)
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	08004d84 	.word	0x08004d84

08002fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fe4:	f7ff ffdc 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fe8:	0001      	movs	r1, r0
 8002fea:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	0adb      	lsrs	r3, r3, #11
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	4a04      	ldr	r2, [pc, #16]	@ (8003008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ff6:	5cd3      	ldrb	r3, [r2, r3]
 8002ff8:	40d9      	lsrs	r1, r3
 8002ffa:	000b      	movs	r3, r1
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			@ (mov r8, r8)
 8003004:	40021000 	.word	0x40021000
 8003008:	08004d84 	.word	0x08004d84

0800300c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003014:	2017      	movs	r0, #23
 8003016:	183b      	adds	r3, r7, r0
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2220      	movs	r2, #32
 8003022:	4013      	ands	r3, r2
 8003024:	d100      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003026:	e0c7      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003028:	4b84      	ldr	r3, [pc, #528]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800302a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800302c:	2380      	movs	r3, #128	@ 0x80
 800302e:	055b      	lsls	r3, r3, #21
 8003030:	4013      	ands	r3, r2
 8003032:	d109      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003034:	4b81      	ldr	r3, [pc, #516]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003036:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003038:	4b80      	ldr	r3, [pc, #512]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800303a:	2180      	movs	r1, #128	@ 0x80
 800303c:	0549      	lsls	r1, r1, #21
 800303e:	430a      	orrs	r2, r1
 8003040:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003042:	183b      	adds	r3, r7, r0
 8003044:	2201      	movs	r2, #1
 8003046:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003048:	4b7d      	ldr	r3, [pc, #500]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	2380      	movs	r3, #128	@ 0x80
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4013      	ands	r3, r2
 8003052:	d11a      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003054:	4b7a      	ldr	r3, [pc, #488]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b79      	ldr	r3, [pc, #484]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800305a:	2180      	movs	r1, #128	@ 0x80
 800305c:	0049      	lsls	r1, r1, #1
 800305e:	430a      	orrs	r2, r1
 8003060:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003062:	f7fe f989 	bl	8001378 <HAL_GetTick>
 8003066:	0003      	movs	r3, r0
 8003068:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306a:	e008      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306c:	f7fe f984 	bl	8001378 <HAL_GetTick>
 8003070:	0002      	movs	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	@ 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0d9      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307e:	4b70      	ldr	r3, [pc, #448]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	2380      	movs	r3, #128	@ 0x80
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4013      	ands	r3, r2
 8003088:	d0f0      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800308a:	4b6c      	ldr	r3, [pc, #432]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	23c0      	movs	r3, #192	@ 0xc0
 8003090:	039b      	lsls	r3, r3, #14
 8003092:	4013      	ands	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	23c0      	movs	r3, #192	@ 0xc0
 800309c:	039b      	lsls	r3, r3, #14
 800309e:	4013      	ands	r3, r2
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d013      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	23c0      	movs	r3, #192	@ 0xc0
 80030ac:	029b      	lsls	r3, r3, #10
 80030ae:	401a      	ands	r2, r3
 80030b0:	23c0      	movs	r3, #192	@ 0xc0
 80030b2:	029b      	lsls	r3, r3, #10
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d10a      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80030b8:	4b60      	ldr	r3, [pc, #384]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	2380      	movs	r3, #128	@ 0x80
 80030be:	029b      	lsls	r3, r3, #10
 80030c0:	401a      	ands	r2, r3
 80030c2:	2380      	movs	r3, #128	@ 0x80
 80030c4:	029b      	lsls	r3, r3, #10
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d101      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e0b1      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80030ce:	4b5b      	ldr	r3, [pc, #364]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030d2:	23c0      	movs	r3, #192	@ 0xc0
 80030d4:	029b      	lsls	r3, r3, #10
 80030d6:	4013      	ands	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d03b      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	23c0      	movs	r3, #192	@ 0xc0
 80030e6:	029b      	lsls	r3, r3, #10
 80030e8:	4013      	ands	r3, r2
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d033      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2220      	movs	r2, #32
 80030f6:	4013      	ands	r3, r2
 80030f8:	d02e      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80030fa:	4b50      	ldr	r3, [pc, #320]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030fe:	4a51      	ldr	r2, [pc, #324]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003100:	4013      	ands	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003104:	4b4d      	ldr	r3, [pc, #308]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003106:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003108:	4b4c      	ldr	r3, [pc, #304]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800310a:	2180      	movs	r1, #128	@ 0x80
 800310c:	0309      	lsls	r1, r1, #12
 800310e:	430a      	orrs	r2, r1
 8003110:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003112:	4b4a      	ldr	r3, [pc, #296]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003114:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003116:	4b49      	ldr	r3, [pc, #292]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003118:	494b      	ldr	r1, [pc, #300]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800311a:	400a      	ands	r2, r1
 800311c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800311e:	4b47      	ldr	r3, [pc, #284]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	2380      	movs	r3, #128	@ 0x80
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4013      	ands	r3, r2
 800312c:	d014      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fe f923 	bl	8001378 <HAL_GetTick>
 8003132:	0003      	movs	r3, r0
 8003134:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003136:	e009      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003138:	f7fe f91e 	bl	8001378 <HAL_GetTick>
 800313c:	0002      	movs	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	4a42      	ldr	r2, [pc, #264]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d901      	bls.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e072      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800314c:	4b3b      	ldr	r3, [pc, #236]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800314e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003150:	2380      	movs	r3, #128	@ 0x80
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4013      	ands	r3, r2
 8003156:	d0ef      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2220      	movs	r2, #32
 800315e:	4013      	ands	r3, r2
 8003160:	d01f      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	23c0      	movs	r3, #192	@ 0xc0
 8003168:	029b      	lsls	r3, r3, #10
 800316a:	401a      	ands	r2, r3
 800316c:	23c0      	movs	r3, #192	@ 0xc0
 800316e:	029b      	lsls	r3, r3, #10
 8003170:	429a      	cmp	r2, r3
 8003172:	d10c      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003174:	4b31      	ldr	r3, [pc, #196]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a35      	ldr	r2, [pc, #212]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800317a:	4013      	ands	r3, r2
 800317c:	0019      	movs	r1, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	23c0      	movs	r3, #192	@ 0xc0
 8003184:	039b      	lsls	r3, r3, #14
 8003186:	401a      	ands	r2, r3
 8003188:	4b2c      	ldr	r3, [pc, #176]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800318a:	430a      	orrs	r2, r1
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	4b2b      	ldr	r3, [pc, #172]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003190:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	23c0      	movs	r3, #192	@ 0xc0
 8003198:	029b      	lsls	r3, r3, #10
 800319a:	401a      	ands	r2, r3
 800319c:	4b27      	ldr	r3, [pc, #156]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800319e:	430a      	orrs	r2, r1
 80031a0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031a2:	2317      	movs	r3, #23
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ac:	4b23      	ldr	r3, [pc, #140]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031b0:	4b22      	ldr	r3, [pc, #136]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031b2:	4928      	ldr	r1, [pc, #160]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031b4:	400a      	ands	r2, r1
 80031b6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2202      	movs	r2, #2
 80031be:	4013      	ands	r3, r2
 80031c0:	d009      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031c2:	4b1e      	ldr	r3, [pc, #120]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c6:	220c      	movs	r2, #12
 80031c8:	4393      	bics	r3, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	4b1a      	ldr	r3, [pc, #104]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031d2:	430a      	orrs	r2, r1
 80031d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2204      	movs	r2, #4
 80031dc:	4013      	ands	r3, r2
 80031de:	d009      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031e0:	4b16      	ldr	r3, [pc, #88]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	0019      	movs	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	4b13      	ldr	r3, [pc, #76]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031f0:	430a      	orrs	r2, r1
 80031f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2208      	movs	r2, #8
 80031fa:	4013      	ands	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031fe:	4b0f      	ldr	r3, [pc, #60]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003202:	4a16      	ldr	r2, [pc, #88]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003204:	4013      	ands	r3, r2
 8003206:	0019      	movs	r1, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800320e:	430a      	orrs	r2, r1
 8003210:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2280      	movs	r2, #128	@ 0x80
 8003218:	4013      	ands	r3, r2
 800321a:	d009      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800321c:	4b07      	ldr	r3, [pc, #28]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800321e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003220:	4a0f      	ldr	r2, [pc, #60]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003222:	4013      	ands	r3, r2
 8003224:	0019      	movs	r1, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	4b04      	ldr	r3, [pc, #16]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800322c:	430a      	orrs	r2, r1
 800322e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	0018      	movs	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	b006      	add	sp, #24
 8003238:	bd80      	pop	{r7, pc}
 800323a:	46c0      	nop			@ (mov r8, r8)
 800323c:	40021000 	.word	0x40021000
 8003240:	40007000 	.word	0x40007000
 8003244:	fffcffff 	.word	0xfffcffff
 8003248:	fff7ffff 	.word	0xfff7ffff
 800324c:	00001388 	.word	0x00001388
 8003250:	ffcfffff 	.word	0xffcfffff
 8003254:	efffffff 	.word	0xefffffff
 8003258:	fffff3ff 	.word	0xfffff3ff
 800325c:	ffffcfff 	.word	0xffffcfff
 8003260:	fff3ffff 	.word	0xfff3ffff

08003264 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e044      	b.n	8003300 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d107      	bne.n	800328e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2278      	movs	r2, #120	@ 0x78
 8003282:	2100      	movs	r1, #0
 8003284:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0018      	movs	r0, r3
 800328a:	f7fd fecb 	bl	8001024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2224      	movs	r2, #36	@ 0x24
 8003292:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2101      	movs	r1, #1
 80032a0:	438a      	bics	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	0018      	movs	r0, r3
 80032a8:	f000 f8d0 	bl	800344c <UART_SetConfig>
 80032ac:	0003      	movs	r3, r0
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e024      	b.n	8003300 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f000 fb0d 	bl	80038e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	490d      	ldr	r1, [pc, #52]	@ (8003308 <HAL_UART_Init+0xa4>)
 80032d2:	400a      	ands	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	212a      	movs	r1, #42	@ 0x2a
 80032e2:	438a      	bics	r2, r1
 80032e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2101      	movs	r1, #1
 80032f2:	430a      	orrs	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	0018      	movs	r0, r3
 80032fa:	f000 fba5 	bl	8003a48 <UART_CheckIdleState>
 80032fe:	0003      	movs	r3, r0
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}
 8003308:	ffffb7ff 	.word	0xffffb7ff

0800330c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	@ 0x28
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	1dbb      	adds	r3, r7, #6
 800331a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003320:	2b20      	cmp	r3, #32
 8003322:	d000      	beq.n	8003326 <HAL_UART_Transmit+0x1a>
 8003324:	e08c      	b.n	8003440 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_UART_Transmit+0x28>
 800332c:	1dbb      	adds	r3, r7, #6
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e084      	b.n	8003442 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	2380      	movs	r3, #128	@ 0x80
 800333e:	015b      	lsls	r3, r3, #5
 8003340:	429a      	cmp	r2, r3
 8003342:	d109      	bne.n	8003358 <HAL_UART_Transmit+0x4c>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d105      	bne.n	8003358 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2201      	movs	r2, #1
 8003350:	4013      	ands	r3, r2
 8003352:	d001      	beq.n	8003358 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e074      	b.n	8003442 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2284      	movs	r2, #132	@ 0x84
 800335c:	2100      	movs	r1, #0
 800335e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2221      	movs	r2, #33	@ 0x21
 8003364:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003366:	f7fe f807 	bl	8001378 <HAL_GetTick>
 800336a:	0003      	movs	r3, r0
 800336c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1dba      	adds	r2, r7, #6
 8003372:	2150      	movs	r1, #80	@ 0x50
 8003374:	8812      	ldrh	r2, [r2, #0]
 8003376:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1dba      	adds	r2, r7, #6
 800337c:	2152      	movs	r1, #82	@ 0x52
 800337e:	8812      	ldrh	r2, [r2, #0]
 8003380:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	2380      	movs	r3, #128	@ 0x80
 8003388:	015b      	lsls	r3, r3, #5
 800338a:	429a      	cmp	r2, r3
 800338c:	d108      	bne.n	80033a0 <HAL_UART_Transmit+0x94>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	e003      	b.n	80033a8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033a8:	e02f      	b.n	800340a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	0013      	movs	r3, r2
 80033b4:	2200      	movs	r2, #0
 80033b6:	2180      	movs	r1, #128	@ 0x80
 80033b8:	f000 fbee 	bl	8003b98 <UART_WaitOnFlagUntilTimeout>
 80033bc:	1e03      	subs	r3, r0, #0
 80033be:	d004      	beq.n	80033ca <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e03b      	b.n	8003442 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	001a      	movs	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	05d2      	lsls	r2, r2, #23
 80033dc:	0dd2      	lsrs	r2, r2, #23
 80033de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	3302      	adds	r3, #2
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	e007      	b.n	80033f8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	781a      	ldrb	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3301      	adds	r3, #1
 80033f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2252      	movs	r2, #82	@ 0x52
 80033fc:	5a9b      	ldrh	r3, [r3, r2]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b299      	uxth	r1, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2252      	movs	r2, #82	@ 0x52
 8003408:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2252      	movs	r2, #82	@ 0x52
 800340e:	5a9b      	ldrh	r3, [r3, r2]
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1c9      	bne.n	80033aa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	0013      	movs	r3, r2
 8003420:	2200      	movs	r2, #0
 8003422:	2140      	movs	r1, #64	@ 0x40
 8003424:	f000 fbb8 	bl	8003b98 <UART_WaitOnFlagUntilTimeout>
 8003428:	1e03      	subs	r3, r0, #0
 800342a:	d004      	beq.n	8003436 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e005      	b.n	8003442 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	e000      	b.n	8003442 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003440:	2302      	movs	r3, #2
  }
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b008      	add	sp, #32
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800344c:	b5b0      	push	{r4, r5, r7, lr}
 800344e:	b08e      	sub	sp, #56	@ 0x38
 8003450:	af00      	add	r7, sp, #0
 8003452:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003454:	231a      	movs	r3, #26
 8003456:	2218      	movs	r2, #24
 8003458:	189b      	adds	r3, r3, r2
 800345a:	19db      	adds	r3, r3, r7
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	431a      	orrs	r2, r3
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	431a      	orrs	r2, r3
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	4313      	orrs	r3, r2
 8003476:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4ab4      	ldr	r2, [pc, #720]	@ (8003750 <UART_SetConfig+0x304>)
 8003480:	4013      	ands	r3, r2
 8003482:	0019      	movs	r1, r3
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800348a:	430a      	orrs	r2, r1
 800348c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	4aaf      	ldr	r2, [pc, #700]	@ (8003754 <UART_SetConfig+0x308>)
 8003496:	4013      	ands	r3, r2
 8003498:	0019      	movs	r1, r3
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4aa9      	ldr	r2, [pc, #676]	@ (8003758 <UART_SetConfig+0x30c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d004      	beq.n	80034c0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034bc:	4313      	orrs	r3, r2
 80034be:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	4aa5      	ldr	r2, [pc, #660]	@ (800375c <UART_SetConfig+0x310>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034d2:	430a      	orrs	r2, r1
 80034d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4aa1      	ldr	r2, [pc, #644]	@ (8003760 <UART_SetConfig+0x314>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d131      	bne.n	8003544 <UART_SetConfig+0xf8>
 80034e0:	4ba0      	ldr	r3, [pc, #640]	@ (8003764 <UART_SetConfig+0x318>)
 80034e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e4:	220c      	movs	r2, #12
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b0c      	cmp	r3, #12
 80034ea:	d01d      	beq.n	8003528 <UART_SetConfig+0xdc>
 80034ec:	d823      	bhi.n	8003536 <UART_SetConfig+0xea>
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d00c      	beq.n	800350c <UART_SetConfig+0xc0>
 80034f2:	d820      	bhi.n	8003536 <UART_SetConfig+0xea>
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <UART_SetConfig+0xb2>
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d00e      	beq.n	800351a <UART_SetConfig+0xce>
 80034fc:	e01b      	b.n	8003536 <UART_SetConfig+0xea>
 80034fe:	231b      	movs	r3, #27
 8003500:	2218      	movs	r2, #24
 8003502:	189b      	adds	r3, r3, r2
 8003504:	19db      	adds	r3, r3, r7
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]
 800350a:	e065      	b.n	80035d8 <UART_SetConfig+0x18c>
 800350c:	231b      	movs	r3, #27
 800350e:	2218      	movs	r2, #24
 8003510:	189b      	adds	r3, r3, r2
 8003512:	19db      	adds	r3, r3, r7
 8003514:	2202      	movs	r2, #2
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e05e      	b.n	80035d8 <UART_SetConfig+0x18c>
 800351a:	231b      	movs	r3, #27
 800351c:	2218      	movs	r2, #24
 800351e:	189b      	adds	r3, r3, r2
 8003520:	19db      	adds	r3, r3, r7
 8003522:	2204      	movs	r2, #4
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	e057      	b.n	80035d8 <UART_SetConfig+0x18c>
 8003528:	231b      	movs	r3, #27
 800352a:	2218      	movs	r2, #24
 800352c:	189b      	adds	r3, r3, r2
 800352e:	19db      	adds	r3, r3, r7
 8003530:	2208      	movs	r2, #8
 8003532:	701a      	strb	r2, [r3, #0]
 8003534:	e050      	b.n	80035d8 <UART_SetConfig+0x18c>
 8003536:	231b      	movs	r3, #27
 8003538:	2218      	movs	r2, #24
 800353a:	189b      	adds	r3, r3, r2
 800353c:	19db      	adds	r3, r3, r7
 800353e:	2210      	movs	r2, #16
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	e049      	b.n	80035d8 <UART_SetConfig+0x18c>
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a83      	ldr	r2, [pc, #524]	@ (8003758 <UART_SetConfig+0x30c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d13e      	bne.n	80035cc <UART_SetConfig+0x180>
 800354e:	4b85      	ldr	r3, [pc, #532]	@ (8003764 <UART_SetConfig+0x318>)
 8003550:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003552:	23c0      	movs	r3, #192	@ 0xc0
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	4013      	ands	r3, r2
 8003558:	22c0      	movs	r2, #192	@ 0xc0
 800355a:	0112      	lsls	r2, r2, #4
 800355c:	4293      	cmp	r3, r2
 800355e:	d027      	beq.n	80035b0 <UART_SetConfig+0x164>
 8003560:	22c0      	movs	r2, #192	@ 0xc0
 8003562:	0112      	lsls	r2, r2, #4
 8003564:	4293      	cmp	r3, r2
 8003566:	d82a      	bhi.n	80035be <UART_SetConfig+0x172>
 8003568:	2280      	movs	r2, #128	@ 0x80
 800356a:	0112      	lsls	r2, r2, #4
 800356c:	4293      	cmp	r3, r2
 800356e:	d011      	beq.n	8003594 <UART_SetConfig+0x148>
 8003570:	2280      	movs	r2, #128	@ 0x80
 8003572:	0112      	lsls	r2, r2, #4
 8003574:	4293      	cmp	r3, r2
 8003576:	d822      	bhi.n	80035be <UART_SetConfig+0x172>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <UART_SetConfig+0x13a>
 800357c:	2280      	movs	r2, #128	@ 0x80
 800357e:	00d2      	lsls	r2, r2, #3
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <UART_SetConfig+0x156>
 8003584:	e01b      	b.n	80035be <UART_SetConfig+0x172>
 8003586:	231b      	movs	r3, #27
 8003588:	2218      	movs	r2, #24
 800358a:	189b      	adds	r3, r3, r2
 800358c:	19db      	adds	r3, r3, r7
 800358e:	2200      	movs	r2, #0
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	e021      	b.n	80035d8 <UART_SetConfig+0x18c>
 8003594:	231b      	movs	r3, #27
 8003596:	2218      	movs	r2, #24
 8003598:	189b      	adds	r3, r3, r2
 800359a:	19db      	adds	r3, r3, r7
 800359c:	2202      	movs	r2, #2
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e01a      	b.n	80035d8 <UART_SetConfig+0x18c>
 80035a2:	231b      	movs	r3, #27
 80035a4:	2218      	movs	r2, #24
 80035a6:	189b      	adds	r3, r3, r2
 80035a8:	19db      	adds	r3, r3, r7
 80035aa:	2204      	movs	r2, #4
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	e013      	b.n	80035d8 <UART_SetConfig+0x18c>
 80035b0:	231b      	movs	r3, #27
 80035b2:	2218      	movs	r2, #24
 80035b4:	189b      	adds	r3, r3, r2
 80035b6:	19db      	adds	r3, r3, r7
 80035b8:	2208      	movs	r2, #8
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	e00c      	b.n	80035d8 <UART_SetConfig+0x18c>
 80035be:	231b      	movs	r3, #27
 80035c0:	2218      	movs	r2, #24
 80035c2:	189b      	adds	r3, r3, r2
 80035c4:	19db      	adds	r3, r3, r7
 80035c6:	2210      	movs	r2, #16
 80035c8:	701a      	strb	r2, [r3, #0]
 80035ca:	e005      	b.n	80035d8 <UART_SetConfig+0x18c>
 80035cc:	231b      	movs	r3, #27
 80035ce:	2218      	movs	r2, #24
 80035d0:	189b      	adds	r3, r3, r2
 80035d2:	19db      	adds	r3, r3, r7
 80035d4:	2210      	movs	r2, #16
 80035d6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a5e      	ldr	r2, [pc, #376]	@ (8003758 <UART_SetConfig+0x30c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d000      	beq.n	80035e4 <UART_SetConfig+0x198>
 80035e2:	e084      	b.n	80036ee <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035e4:	231b      	movs	r3, #27
 80035e6:	2218      	movs	r2, #24
 80035e8:	189b      	adds	r3, r3, r2
 80035ea:	19db      	adds	r3, r3, r7
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d01d      	beq.n	800362e <UART_SetConfig+0x1e2>
 80035f2:	dc20      	bgt.n	8003636 <UART_SetConfig+0x1ea>
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d015      	beq.n	8003624 <UART_SetConfig+0x1d8>
 80035f8:	dc1d      	bgt.n	8003636 <UART_SetConfig+0x1ea>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <UART_SetConfig+0x1b8>
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d005      	beq.n	800360e <UART_SetConfig+0x1c2>
 8003602:	e018      	b.n	8003636 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003604:	f7ff fcd6 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8003608:	0003      	movs	r3, r0
 800360a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800360c:	e01c      	b.n	8003648 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800360e:	4b55      	ldr	r3, [pc, #340]	@ (8003764 <UART_SetConfig+0x318>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2210      	movs	r2, #16
 8003614:	4013      	ands	r3, r2
 8003616:	d002      	beq.n	800361e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003618:	4b53      	ldr	r3, [pc, #332]	@ (8003768 <UART_SetConfig+0x31c>)
 800361a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800361c:	e014      	b.n	8003648 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800361e:	4b53      	ldr	r3, [pc, #332]	@ (800376c <UART_SetConfig+0x320>)
 8003620:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003622:	e011      	b.n	8003648 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003624:	f7ff fc16 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8003628:	0003      	movs	r3, r0
 800362a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800362c:	e00c      	b.n	8003648 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800362e:	2380      	movs	r3, #128	@ 0x80
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003634:	e008      	b.n	8003648 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800363a:	231a      	movs	r3, #26
 800363c:	2218      	movs	r2, #24
 800363e:	189b      	adds	r3, r3, r2
 8003640:	19db      	adds	r3, r3, r7
 8003642:	2201      	movs	r2, #1
 8003644:	701a      	strb	r2, [r3, #0]
        break;
 8003646:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d100      	bne.n	8003650 <UART_SetConfig+0x204>
 800364e:	e12f      	b.n	80038b0 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	0013      	movs	r3, r2
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	189b      	adds	r3, r3, r2
 800365a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800365c:	429a      	cmp	r2, r3
 800365e:	d305      	bcc.n	800366c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003668:	429a      	cmp	r2, r3
 800366a:	d906      	bls.n	800367a <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 800366c:	231a      	movs	r3, #26
 800366e:	2218      	movs	r2, #24
 8003670:	189b      	adds	r3, r3, r2
 8003672:	19db      	adds	r3, r3, r7
 8003674:	2201      	movs	r2, #1
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	e11a      	b.n	80038b0 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800367a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	6939      	ldr	r1, [r7, #16]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	000b      	movs	r3, r1
 8003688:	0e1b      	lsrs	r3, r3, #24
 800368a:	0010      	movs	r0, r2
 800368c:	0205      	lsls	r5, r0, #8
 800368e:	431d      	orrs	r5, r3
 8003690:	000b      	movs	r3, r1
 8003692:	021c      	lsls	r4, r3, #8
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	68b8      	ldr	r0, [r7, #8]
 80036a2:	68f9      	ldr	r1, [r7, #12]
 80036a4:	1900      	adds	r0, r0, r4
 80036a6:	4169      	adcs	r1, r5
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	2300      	movs	r3, #0
 80036b0:	607b      	str	r3, [r7, #4]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f7fc fdbd 	bl	8000234 <__aeabi_uldivmod>
 80036ba:	0002      	movs	r2, r0
 80036bc:	000b      	movs	r3, r1
 80036be:	0013      	movs	r3, r2
 80036c0:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036c4:	23c0      	movs	r3, #192	@ 0xc0
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d309      	bcc.n	80036e0 <UART_SetConfig+0x294>
 80036cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036ce:	2380      	movs	r3, #128	@ 0x80
 80036d0:	035b      	lsls	r3, r3, #13
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d204      	bcs.n	80036e0 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036dc:	60da      	str	r2, [r3, #12]
 80036de:	e0e7      	b.n	80038b0 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80036e0:	231a      	movs	r3, #26
 80036e2:	2218      	movs	r2, #24
 80036e4:	189b      	adds	r3, r3, r2
 80036e6:	19db      	adds	r3, r3, r7
 80036e8:	2201      	movs	r2, #1
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	e0e0      	b.n	80038b0 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	69da      	ldr	r2, [r3, #28]
 80036f2:	2380      	movs	r3, #128	@ 0x80
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d000      	beq.n	80036fc <UART_SetConfig+0x2b0>
 80036fa:	e082      	b.n	8003802 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80036fc:	231b      	movs	r3, #27
 80036fe:	2218      	movs	r2, #24
 8003700:	189b      	adds	r3, r3, r2
 8003702:	19db      	adds	r3, r3, r7
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b08      	cmp	r3, #8
 8003708:	d834      	bhi.n	8003774 <UART_SetConfig+0x328>
 800370a:	009a      	lsls	r2, r3, #2
 800370c:	4b18      	ldr	r3, [pc, #96]	@ (8003770 <UART_SetConfig+0x324>)
 800370e:	18d3      	adds	r3, r2, r3
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003714:	f7ff fc4e 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8003718:	0003      	movs	r3, r0
 800371a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800371c:	e033      	b.n	8003786 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800371e:	f7ff fc5f 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 8003722:	0003      	movs	r3, r0
 8003724:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003726:	e02e      	b.n	8003786 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003728:	4b0e      	ldr	r3, [pc, #56]	@ (8003764 <UART_SetConfig+0x318>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2210      	movs	r2, #16
 800372e:	4013      	ands	r3, r2
 8003730:	d002      	beq.n	8003738 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003732:	4b0d      	ldr	r3, [pc, #52]	@ (8003768 <UART_SetConfig+0x31c>)
 8003734:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003736:	e026      	b.n	8003786 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003738:	4b0c      	ldr	r3, [pc, #48]	@ (800376c <UART_SetConfig+0x320>)
 800373a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800373c:	e023      	b.n	8003786 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800373e:	f7ff fb89 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8003742:	0003      	movs	r3, r0
 8003744:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003746:	e01e      	b.n	8003786 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003748:	2380      	movs	r3, #128	@ 0x80
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800374e:	e01a      	b.n	8003786 <UART_SetConfig+0x33a>
 8003750:	efff69f3 	.word	0xefff69f3
 8003754:	ffffcfff 	.word	0xffffcfff
 8003758:	40004800 	.word	0x40004800
 800375c:	fffff4ff 	.word	0xfffff4ff
 8003760:	40004400 	.word	0x40004400
 8003764:	40021000 	.word	0x40021000
 8003768:	003d0900 	.word	0x003d0900
 800376c:	00f42400 	.word	0x00f42400
 8003770:	08004d98 	.word	0x08004d98
      default:
        pclk = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003778:	231a      	movs	r3, #26
 800377a:	2218      	movs	r2, #24
 800377c:	189b      	adds	r3, r3, r2
 800377e:	19db      	adds	r3, r3, r7
 8003780:	2201      	movs	r2, #1
 8003782:	701a      	strb	r2, [r3, #0]
        break;
 8003784:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d100      	bne.n	800378e <UART_SetConfig+0x342>
 800378c:	e090      	b.n	80038b0 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800378e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003790:	005a      	lsls	r2, r3, #1
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	085b      	lsrs	r3, r3, #1
 8003798:	18d2      	adds	r2, r2, r3
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	0019      	movs	r1, r3
 80037a0:	0010      	movs	r0, r2
 80037a2:	f7fc fcbb 	bl	800011c <__udivsi3>
 80037a6:	0003      	movs	r3, r0
 80037a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ac:	2b0f      	cmp	r3, #15
 80037ae:	d921      	bls.n	80037f4 <UART_SetConfig+0x3a8>
 80037b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037b2:	2380      	movs	r3, #128	@ 0x80
 80037b4:	025b      	lsls	r3, r3, #9
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d21c      	bcs.n	80037f4 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037bc:	b29a      	uxth	r2, r3
 80037be:	200e      	movs	r0, #14
 80037c0:	2418      	movs	r4, #24
 80037c2:	1903      	adds	r3, r0, r4
 80037c4:	19db      	adds	r3, r3, r7
 80037c6:	210f      	movs	r1, #15
 80037c8:	438a      	bics	r2, r1
 80037ca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2207      	movs	r2, #7
 80037d4:	4013      	ands	r3, r2
 80037d6:	b299      	uxth	r1, r3
 80037d8:	1903      	adds	r3, r0, r4
 80037da:	19db      	adds	r3, r3, r7
 80037dc:	1902      	adds	r2, r0, r4
 80037de:	19d2      	adds	r2, r2, r7
 80037e0:	8812      	ldrh	r2, [r2, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1902      	adds	r2, r0, r4
 80037ec:	19d2      	adds	r2, r2, r7
 80037ee:	8812      	ldrh	r2, [r2, #0]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	e05d      	b.n	80038b0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80037f4:	231a      	movs	r3, #26
 80037f6:	2218      	movs	r2, #24
 80037f8:	189b      	adds	r3, r3, r2
 80037fa:	19db      	adds	r3, r3, r7
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	e056      	b.n	80038b0 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003802:	231b      	movs	r3, #27
 8003804:	2218      	movs	r2, #24
 8003806:	189b      	adds	r3, r3, r2
 8003808:	19db      	adds	r3, r3, r7
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d822      	bhi.n	8003856 <UART_SetConfig+0x40a>
 8003810:	009a      	lsls	r2, r3, #2
 8003812:	4b2f      	ldr	r3, [pc, #188]	@ (80038d0 <UART_SetConfig+0x484>)
 8003814:	18d3      	adds	r3, r2, r3
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800381a:	f7ff fbcb 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 800381e:	0003      	movs	r3, r0
 8003820:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003822:	e021      	b.n	8003868 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003824:	f7ff fbdc 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 8003828:	0003      	movs	r3, r0
 800382a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800382c:	e01c      	b.n	8003868 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800382e:	4b29      	ldr	r3, [pc, #164]	@ (80038d4 <UART_SetConfig+0x488>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2210      	movs	r2, #16
 8003834:	4013      	ands	r3, r2
 8003836:	d002      	beq.n	800383e <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003838:	4b27      	ldr	r3, [pc, #156]	@ (80038d8 <UART_SetConfig+0x48c>)
 800383a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800383c:	e014      	b.n	8003868 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800383e:	4b27      	ldr	r3, [pc, #156]	@ (80038dc <UART_SetConfig+0x490>)
 8003840:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003842:	e011      	b.n	8003868 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003844:	f7ff fb06 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8003848:	0003      	movs	r3, r0
 800384a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800384c:	e00c      	b.n	8003868 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800384e:	2380      	movs	r3, #128	@ 0x80
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003854:	e008      	b.n	8003868 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800385a:	231a      	movs	r3, #26
 800385c:	2218      	movs	r2, #24
 800385e:	189b      	adds	r3, r3, r2
 8003860:	19db      	adds	r3, r3, r7
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
        break;
 8003866:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d020      	beq.n	80038b0 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	085a      	lsrs	r2, r3, #1
 8003874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003876:	18d2      	adds	r2, r2, r3
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	0019      	movs	r1, r3
 800387e:	0010      	movs	r0, r2
 8003880:	f7fc fc4c 	bl	800011c <__udivsi3>
 8003884:	0003      	movs	r3, r0
 8003886:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388a:	2b0f      	cmp	r3, #15
 800388c:	d90a      	bls.n	80038a4 <UART_SetConfig+0x458>
 800388e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003890:	2380      	movs	r3, #128	@ 0x80
 8003892:	025b      	lsls	r3, r3, #9
 8003894:	429a      	cmp	r2, r3
 8003896:	d205      	bcs.n	80038a4 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389a:	b29a      	uxth	r2, r3
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60da      	str	r2, [r3, #12]
 80038a2:	e005      	b.n	80038b0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80038a4:	231a      	movs	r3, #26
 80038a6:	2218      	movs	r2, #24
 80038a8:	189b      	adds	r3, r3, r2
 80038aa:	19db      	adds	r3, r3, r7
 80038ac:	2201      	movs	r2, #1
 80038ae:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2200      	movs	r2, #0
 80038b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	2200      	movs	r2, #0
 80038ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80038bc:	231a      	movs	r3, #26
 80038be:	2218      	movs	r2, #24
 80038c0:	189b      	adds	r3, r3, r2
 80038c2:	19db      	adds	r3, r3, r7
 80038c4:	781b      	ldrb	r3, [r3, #0]
}
 80038c6:	0018      	movs	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b00e      	add	sp, #56	@ 0x38
 80038cc:	bdb0      	pop	{r4, r5, r7, pc}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	08004dbc 	.word	0x08004dbc
 80038d4:	40021000 	.word	0x40021000
 80038d8:	003d0900 	.word	0x003d0900
 80038dc:	00f42400 	.word	0x00f42400

080038e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	2201      	movs	r2, #1
 80038ee:	4013      	ands	r3, r2
 80038f0:	d00b      	beq.n	800390a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003a24 <UART_AdvFeatureConfig+0x144>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	0019      	movs	r1, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	2202      	movs	r2, #2
 8003910:	4013      	ands	r3, r2
 8003912:	d00b      	beq.n	800392c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4a43      	ldr	r2, [pc, #268]	@ (8003a28 <UART_AdvFeatureConfig+0x148>)
 800391c:	4013      	ands	r3, r2
 800391e:	0019      	movs	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003930:	2204      	movs	r2, #4
 8003932:	4013      	ands	r3, r2
 8003934:	d00b      	beq.n	800394e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	4a3b      	ldr	r2, [pc, #236]	@ (8003a2c <UART_AdvFeatureConfig+0x14c>)
 800393e:	4013      	ands	r3, r2
 8003940:	0019      	movs	r1, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	2208      	movs	r2, #8
 8003954:	4013      	ands	r3, r2
 8003956:	d00b      	beq.n	8003970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4a34      	ldr	r2, [pc, #208]	@ (8003a30 <UART_AdvFeatureConfig+0x150>)
 8003960:	4013      	ands	r3, r2
 8003962:	0019      	movs	r1, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	2210      	movs	r2, #16
 8003976:	4013      	ands	r3, r2
 8003978:	d00b      	beq.n	8003992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a2c      	ldr	r2, [pc, #176]	@ (8003a34 <UART_AdvFeatureConfig+0x154>)
 8003982:	4013      	ands	r3, r2
 8003984:	0019      	movs	r1, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003996:	2220      	movs	r2, #32
 8003998:	4013      	ands	r3, r2
 800399a:	d00b      	beq.n	80039b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	4a25      	ldr	r2, [pc, #148]	@ (8003a38 <UART_AdvFeatureConfig+0x158>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	0019      	movs	r1, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	2240      	movs	r2, #64	@ 0x40
 80039ba:	4013      	ands	r3, r2
 80039bc:	d01d      	beq.n	80039fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a3c <UART_AdvFeatureConfig+0x15c>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039da:	2380      	movs	r3, #128	@ 0x80
 80039dc:	035b      	lsls	r3, r3, #13
 80039de:	429a      	cmp	r2, r3
 80039e0:	d10b      	bne.n	80039fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	4a15      	ldr	r2, [pc, #84]	@ (8003a40 <UART_AdvFeatureConfig+0x160>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	0019      	movs	r1, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	2280      	movs	r2, #128	@ 0x80
 8003a00:	4013      	ands	r3, r2
 8003a02:	d00b      	beq.n	8003a1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8003a44 <UART_AdvFeatureConfig+0x164>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	0019      	movs	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  }
}
 8003a1c:	46c0      	nop			@ (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b002      	add	sp, #8
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	fffdffff 	.word	0xfffdffff
 8003a28:	fffeffff 	.word	0xfffeffff
 8003a2c:	fffbffff 	.word	0xfffbffff
 8003a30:	ffff7fff 	.word	0xffff7fff
 8003a34:	ffffefff 	.word	0xffffefff
 8003a38:	ffffdfff 	.word	0xffffdfff
 8003a3c:	ffefffff 	.word	0xffefffff
 8003a40:	ff9fffff 	.word	0xff9fffff
 8003a44:	fff7ffff 	.word	0xfff7ffff

08003a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b092      	sub	sp, #72	@ 0x48
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2284      	movs	r2, #132	@ 0x84
 8003a54:	2100      	movs	r1, #0
 8003a56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a58:	f7fd fc8e 	bl	8001378 <HAL_GetTick>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2208      	movs	r2, #8
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d12c      	bne.n	8003ac8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a70:	2280      	movs	r2, #128	@ 0x80
 8003a72:	0391      	lsls	r1, r2, #14
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	4a46      	ldr	r2, [pc, #280]	@ (8003b90 <UART_CheckIdleState+0x148>)
 8003a78:	9200      	str	r2, [sp, #0]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f000 f88c 	bl	8003b98 <UART_WaitOnFlagUntilTimeout>
 8003a80:	1e03      	subs	r3, r0, #0
 8003a82:	d021      	beq.n	8003ac8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a84:	f3ef 8310 	mrs	r3, PRIMASK
 8003a88:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a8e:	2301      	movs	r3, #1
 8003a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a94:	f383 8810 	msr	PRIMASK, r3
}
 8003a98:	46c0      	nop			@ (mov r8, r8)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2180      	movs	r1, #128	@ 0x80
 8003aa6:	438a      	bics	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab0:	f383 8810 	msr	PRIMASK, r3
}
 8003ab4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2278      	movs	r2, #120	@ 0x78
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e05f      	b.n	8003b88 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2204      	movs	r2, #4
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d146      	bne.n	8003b64 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad8:	2280      	movs	r2, #128	@ 0x80
 8003ada:	03d1      	lsls	r1, r2, #15
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	4a2c      	ldr	r2, [pc, #176]	@ (8003b90 <UART_CheckIdleState+0x148>)
 8003ae0:	9200      	str	r2, [sp, #0]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f000 f858 	bl	8003b98 <UART_WaitOnFlagUntilTimeout>
 8003ae8:	1e03      	subs	r3, r0, #0
 8003aea:	d03b      	beq.n	8003b64 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aec:	f3ef 8310 	mrs	r3, PRIMASK
 8003af0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003af2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af6:	2301      	movs	r3, #1
 8003af8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f383 8810 	msr	PRIMASK, r3
}
 8003b00:	46c0      	nop			@ (mov r8, r8)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4921      	ldr	r1, [pc, #132]	@ (8003b94 <UART_CheckIdleState+0x14c>)
 8003b0e:	400a      	ands	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f383 8810 	msr	PRIMASK, r3
}
 8003b1c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b22:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b24:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b26:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b28:	2301      	movs	r3, #1
 8003b2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f383 8810 	msr	PRIMASK, r3
}
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2101      	movs	r1, #1
 8003b40:	438a      	bics	r2, r1
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	f383 8810 	msr	PRIMASK, r3
}
 8003b4e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2280      	movs	r2, #128	@ 0x80
 8003b54:	2120      	movs	r1, #32
 8003b56:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2278      	movs	r2, #120	@ 0x78
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e011      	b.n	8003b88 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2280      	movs	r2, #128	@ 0x80
 8003b6e:	2120      	movs	r1, #32
 8003b70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2278      	movs	r2, #120	@ 0x78
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	0018      	movs	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b010      	add	sp, #64	@ 0x40
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	01ffffff 	.word	0x01ffffff
 8003b94:	fffffedf 	.word	0xfffffedf

08003b98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	1dfb      	adds	r3, r7, #7
 8003ba6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba8:	e04b      	b.n	8003c42 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	3301      	adds	r3, #1
 8003bae:	d048      	beq.n	8003c42 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb0:	f7fd fbe2 	bl	8001378 <HAL_GetTick>
 8003bb4:	0002      	movs	r2, r0
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d302      	bcc.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e04b      	b.n	8003c62 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d035      	beq.n	8003c42 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	2208      	movs	r2, #8
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d111      	bne.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2208      	movs	r2, #8
 8003bea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f000 f83c 	bl	8003c6c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2284      	movs	r2, #132	@ 0x84
 8003bf8:	2108      	movs	r1, #8
 8003bfa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2278      	movs	r2, #120	@ 0x78
 8003c00:	2100      	movs	r1, #0
 8003c02:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e02c      	b.n	8003c62 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	2380      	movs	r3, #128	@ 0x80
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	401a      	ands	r2, r3
 8003c14:	2380      	movs	r3, #128	@ 0x80
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d112      	bne.n	8003c42 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2280      	movs	r2, #128	@ 0x80
 8003c22:	0112      	lsls	r2, r2, #4
 8003c24:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f000 f81f 	bl	8003c6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2284      	movs	r2, #132	@ 0x84
 8003c32:	2120      	movs	r1, #32
 8003c34:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2278      	movs	r2, #120	@ 0x78
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e00f      	b.n	8003c62 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	425a      	negs	r2, r3
 8003c52:	4153      	adcs	r3, r2
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	001a      	movs	r2, r3
 8003c58:	1dfb      	adds	r3, r7, #7
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d0a4      	beq.n	8003baa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	0018      	movs	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b004      	add	sp, #16
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08e      	sub	sp, #56	@ 0x38
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c74:	f3ef 8310 	mrs	r3, PRIMASK
 8003c78:	617b      	str	r3, [r7, #20]
  return(result);
 8003c7a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c7e:	2301      	movs	r3, #1
 8003c80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	f383 8810 	msr	PRIMASK, r3
}
 8003c88:	46c0      	nop			@ (mov r8, r8)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4926      	ldr	r1, [pc, #152]	@ (8003d30 <UART_EndRxTransfer+0xc4>)
 8003c96:	400a      	ands	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f383 8810 	msr	PRIMASK, r3
}
 8003ca4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8003caa:	623b      	str	r3, [r7, #32]
  return(result);
 8003cac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cae:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	f383 8810 	msr	PRIMASK, r3
}
 8003cba:	46c0      	nop			@ (mov r8, r8)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	438a      	bics	r2, r1
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cce:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd2:	f383 8810 	msr	PRIMASK, r3
}
 8003cd6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d118      	bne.n	8003d12 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cea:	2301      	movs	r3, #1
 8003cec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f383 8810 	msr	PRIMASK, r3
}
 8003cf4:	46c0      	nop			@ (mov r8, r8)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2110      	movs	r1, #16
 8003d02:	438a      	bics	r2, r1
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f383 8810 	msr	PRIMASK, r3
}
 8003d10:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2280      	movs	r2, #128	@ 0x80
 8003d16:	2120      	movs	r1, #32
 8003d18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b00e      	add	sp, #56	@ 0x38
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	46c0      	nop			@ (mov r8, r8)
 8003d30:	fffffedf 	.word	0xfffffedf

08003d34 <std>:
 8003d34:	2300      	movs	r3, #0
 8003d36:	b510      	push	{r4, lr}
 8003d38:	0004      	movs	r4, r0
 8003d3a:	6003      	str	r3, [r0, #0]
 8003d3c:	6043      	str	r3, [r0, #4]
 8003d3e:	6083      	str	r3, [r0, #8]
 8003d40:	8181      	strh	r1, [r0, #12]
 8003d42:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d44:	81c2      	strh	r2, [r0, #14]
 8003d46:	6103      	str	r3, [r0, #16]
 8003d48:	6143      	str	r3, [r0, #20]
 8003d4a:	6183      	str	r3, [r0, #24]
 8003d4c:	0019      	movs	r1, r3
 8003d4e:	2208      	movs	r2, #8
 8003d50:	305c      	adds	r0, #92	@ 0x5c
 8003d52:	f000 fa0f 	bl	8004174 <memset>
 8003d56:	4b0b      	ldr	r3, [pc, #44]	@ (8003d84 <std+0x50>)
 8003d58:	6224      	str	r4, [r4, #32]
 8003d5a:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d88 <std+0x54>)
 8003d5e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d60:	4b0a      	ldr	r3, [pc, #40]	@ (8003d8c <std+0x58>)
 8003d62:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d64:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <std+0x5c>)
 8003d66:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d68:	4b0a      	ldr	r3, [pc, #40]	@ (8003d94 <std+0x60>)
 8003d6a:	429c      	cmp	r4, r3
 8003d6c:	d005      	beq.n	8003d7a <std+0x46>
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d98 <std+0x64>)
 8003d70:	429c      	cmp	r4, r3
 8003d72:	d002      	beq.n	8003d7a <std+0x46>
 8003d74:	4b09      	ldr	r3, [pc, #36]	@ (8003d9c <std+0x68>)
 8003d76:	429c      	cmp	r4, r3
 8003d78:	d103      	bne.n	8003d82 <std+0x4e>
 8003d7a:	0020      	movs	r0, r4
 8003d7c:	3058      	adds	r0, #88	@ 0x58
 8003d7e:	f000 fa79 	bl	8004274 <__retarget_lock_init_recursive>
 8003d82:	bd10      	pop	{r4, pc}
 8003d84:	08003f9d 	.word	0x08003f9d
 8003d88:	08003fc5 	.word	0x08003fc5
 8003d8c:	08003ffd 	.word	0x08003ffd
 8003d90:	08004029 	.word	0x08004029
 8003d94:	20000278 	.word	0x20000278
 8003d98:	200002e0 	.word	0x200002e0
 8003d9c:	20000348 	.word	0x20000348

08003da0 <stdio_exit_handler>:
 8003da0:	b510      	push	{r4, lr}
 8003da2:	4a03      	ldr	r2, [pc, #12]	@ (8003db0 <stdio_exit_handler+0x10>)
 8003da4:	4903      	ldr	r1, [pc, #12]	@ (8003db4 <stdio_exit_handler+0x14>)
 8003da6:	4804      	ldr	r0, [pc, #16]	@ (8003db8 <stdio_exit_handler+0x18>)
 8003da8:	f000 f86c 	bl	8003e84 <_fwalk_sglue>
 8003dac:	bd10      	pop	{r4, pc}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	2000000c 	.word	0x2000000c
 8003db4:	08004b05 	.word	0x08004b05
 8003db8:	2000001c 	.word	0x2000001c

08003dbc <cleanup_stdio>:
 8003dbc:	6841      	ldr	r1, [r0, #4]
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <cleanup_stdio+0x30>)
 8003dc0:	b510      	push	{r4, lr}
 8003dc2:	0004      	movs	r4, r0
 8003dc4:	4299      	cmp	r1, r3
 8003dc6:	d001      	beq.n	8003dcc <cleanup_stdio+0x10>
 8003dc8:	f000 fe9c 	bl	8004b04 <_fflush_r>
 8003dcc:	68a1      	ldr	r1, [r4, #8]
 8003dce:	4b08      	ldr	r3, [pc, #32]	@ (8003df0 <cleanup_stdio+0x34>)
 8003dd0:	4299      	cmp	r1, r3
 8003dd2:	d002      	beq.n	8003dda <cleanup_stdio+0x1e>
 8003dd4:	0020      	movs	r0, r4
 8003dd6:	f000 fe95 	bl	8004b04 <_fflush_r>
 8003dda:	68e1      	ldr	r1, [r4, #12]
 8003ddc:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <cleanup_stdio+0x38>)
 8003dde:	4299      	cmp	r1, r3
 8003de0:	d002      	beq.n	8003de8 <cleanup_stdio+0x2c>
 8003de2:	0020      	movs	r0, r4
 8003de4:	f000 fe8e 	bl	8004b04 <_fflush_r>
 8003de8:	bd10      	pop	{r4, pc}
 8003dea:	46c0      	nop			@ (mov r8, r8)
 8003dec:	20000278 	.word	0x20000278
 8003df0:	200002e0 	.word	0x200002e0
 8003df4:	20000348 	.word	0x20000348

08003df8 <global_stdio_init.part.0>:
 8003df8:	b510      	push	{r4, lr}
 8003dfa:	4b09      	ldr	r3, [pc, #36]	@ (8003e20 <global_stdio_init.part.0+0x28>)
 8003dfc:	4a09      	ldr	r2, [pc, #36]	@ (8003e24 <global_stdio_init.part.0+0x2c>)
 8003dfe:	2104      	movs	r1, #4
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	4809      	ldr	r0, [pc, #36]	@ (8003e28 <global_stdio_init.part.0+0x30>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	f7ff ff95 	bl	8003d34 <std>
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	2109      	movs	r1, #9
 8003e0e:	4807      	ldr	r0, [pc, #28]	@ (8003e2c <global_stdio_init.part.0+0x34>)
 8003e10:	f7ff ff90 	bl	8003d34 <std>
 8003e14:	2202      	movs	r2, #2
 8003e16:	2112      	movs	r1, #18
 8003e18:	4805      	ldr	r0, [pc, #20]	@ (8003e30 <global_stdio_init.part.0+0x38>)
 8003e1a:	f7ff ff8b 	bl	8003d34 <std>
 8003e1e:	bd10      	pop	{r4, pc}
 8003e20:	200003b0 	.word	0x200003b0
 8003e24:	08003da1 	.word	0x08003da1
 8003e28:	20000278 	.word	0x20000278
 8003e2c:	200002e0 	.word	0x200002e0
 8003e30:	20000348 	.word	0x20000348

08003e34 <__sfp_lock_acquire>:
 8003e34:	b510      	push	{r4, lr}
 8003e36:	4802      	ldr	r0, [pc, #8]	@ (8003e40 <__sfp_lock_acquire+0xc>)
 8003e38:	f000 fa1d 	bl	8004276 <__retarget_lock_acquire_recursive>
 8003e3c:	bd10      	pop	{r4, pc}
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	200003b9 	.word	0x200003b9

08003e44 <__sfp_lock_release>:
 8003e44:	b510      	push	{r4, lr}
 8003e46:	4802      	ldr	r0, [pc, #8]	@ (8003e50 <__sfp_lock_release+0xc>)
 8003e48:	f000 fa16 	bl	8004278 <__retarget_lock_release_recursive>
 8003e4c:	bd10      	pop	{r4, pc}
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	200003b9 	.word	0x200003b9

08003e54 <__sinit>:
 8003e54:	b510      	push	{r4, lr}
 8003e56:	0004      	movs	r4, r0
 8003e58:	f7ff ffec 	bl	8003e34 <__sfp_lock_acquire>
 8003e5c:	6a23      	ldr	r3, [r4, #32]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <__sinit+0x14>
 8003e62:	f7ff ffef 	bl	8003e44 <__sfp_lock_release>
 8003e66:	bd10      	pop	{r4, pc}
 8003e68:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <__sinit+0x28>)
 8003e6a:	6223      	str	r3, [r4, #32]
 8003e6c:	4b04      	ldr	r3, [pc, #16]	@ (8003e80 <__sinit+0x2c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f6      	bne.n	8003e62 <__sinit+0xe>
 8003e74:	f7ff ffc0 	bl	8003df8 <global_stdio_init.part.0>
 8003e78:	e7f3      	b.n	8003e62 <__sinit+0xe>
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	08003dbd 	.word	0x08003dbd
 8003e80:	200003b0 	.word	0x200003b0

08003e84 <_fwalk_sglue>:
 8003e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e86:	0014      	movs	r4, r2
 8003e88:	2600      	movs	r6, #0
 8003e8a:	9000      	str	r0, [sp, #0]
 8003e8c:	9101      	str	r1, [sp, #4]
 8003e8e:	68a5      	ldr	r5, [r4, #8]
 8003e90:	6867      	ldr	r7, [r4, #4]
 8003e92:	3f01      	subs	r7, #1
 8003e94:	d504      	bpl.n	8003ea0 <_fwalk_sglue+0x1c>
 8003e96:	6824      	ldr	r4, [r4, #0]
 8003e98:	2c00      	cmp	r4, #0
 8003e9a:	d1f8      	bne.n	8003e8e <_fwalk_sglue+0xa>
 8003e9c:	0030      	movs	r0, r6
 8003e9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ea0:	89ab      	ldrh	r3, [r5, #12]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d908      	bls.n	8003eb8 <_fwalk_sglue+0x34>
 8003ea6:	220e      	movs	r2, #14
 8003ea8:	5eab      	ldrsh	r3, [r5, r2]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	d004      	beq.n	8003eb8 <_fwalk_sglue+0x34>
 8003eae:	0029      	movs	r1, r5
 8003eb0:	9800      	ldr	r0, [sp, #0]
 8003eb2:	9b01      	ldr	r3, [sp, #4]
 8003eb4:	4798      	blx	r3
 8003eb6:	4306      	orrs	r6, r0
 8003eb8:	3568      	adds	r5, #104	@ 0x68
 8003eba:	e7ea      	b.n	8003e92 <_fwalk_sglue+0xe>

08003ebc <iprintf>:
 8003ebc:	b40f      	push	{r0, r1, r2, r3}
 8003ebe:	b507      	push	{r0, r1, r2, lr}
 8003ec0:	4905      	ldr	r1, [pc, #20]	@ (8003ed8 <iprintf+0x1c>)
 8003ec2:	ab04      	add	r3, sp, #16
 8003ec4:	6808      	ldr	r0, [r1, #0]
 8003ec6:	cb04      	ldmia	r3!, {r2}
 8003ec8:	6881      	ldr	r1, [r0, #8]
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	f000 fafa 	bl	80044c4 <_vfiprintf_r>
 8003ed0:	b003      	add	sp, #12
 8003ed2:	bc08      	pop	{r3}
 8003ed4:	b004      	add	sp, #16
 8003ed6:	4718      	bx	r3
 8003ed8:	20000018 	.word	0x20000018

08003edc <_puts_r>:
 8003edc:	6a03      	ldr	r3, [r0, #32]
 8003ede:	b570      	push	{r4, r5, r6, lr}
 8003ee0:	0005      	movs	r5, r0
 8003ee2:	000e      	movs	r6, r1
 8003ee4:	6884      	ldr	r4, [r0, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <_puts_r+0x12>
 8003eea:	f7ff ffb3 	bl	8003e54 <__sinit>
 8003eee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ef0:	07db      	lsls	r3, r3, #31
 8003ef2:	d405      	bmi.n	8003f00 <_puts_r+0x24>
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	059b      	lsls	r3, r3, #22
 8003ef8:	d402      	bmi.n	8003f00 <_puts_r+0x24>
 8003efa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003efc:	f000 f9bb 	bl	8004276 <__retarget_lock_acquire_recursive>
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	071b      	lsls	r3, r3, #28
 8003f04:	d502      	bpl.n	8003f0c <_puts_r+0x30>
 8003f06:	6923      	ldr	r3, [r4, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d11f      	bne.n	8003f4c <_puts_r+0x70>
 8003f0c:	0021      	movs	r1, r4
 8003f0e:	0028      	movs	r0, r5
 8003f10:	f000 f8d2 	bl	80040b8 <__swsetup_r>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d019      	beq.n	8003f4c <_puts_r+0x70>
 8003f18:	2501      	movs	r5, #1
 8003f1a:	426d      	negs	r5, r5
 8003f1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f1e:	07db      	lsls	r3, r3, #31
 8003f20:	d405      	bmi.n	8003f2e <_puts_r+0x52>
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	059b      	lsls	r3, r3, #22
 8003f26:	d402      	bmi.n	8003f2e <_puts_r+0x52>
 8003f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f2a:	f000 f9a5 	bl	8004278 <__retarget_lock_release_recursive>
 8003f2e:	0028      	movs	r0, r5
 8003f30:	bd70      	pop	{r4, r5, r6, pc}
 8003f32:	3601      	adds	r6, #1
 8003f34:	60a3      	str	r3, [r4, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	da04      	bge.n	8003f44 <_puts_r+0x68>
 8003f3a:	69a2      	ldr	r2, [r4, #24]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	dc16      	bgt.n	8003f6e <_puts_r+0x92>
 8003f40:	290a      	cmp	r1, #10
 8003f42:	d014      	beq.n	8003f6e <_puts_r+0x92>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	6022      	str	r2, [r4, #0]
 8003f4a:	7019      	strb	r1, [r3, #0]
 8003f4c:	68a3      	ldr	r3, [r4, #8]
 8003f4e:	7831      	ldrb	r1, [r6, #0]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	2900      	cmp	r1, #0
 8003f54:	d1ed      	bne.n	8003f32 <_puts_r+0x56>
 8003f56:	60a3      	str	r3, [r4, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	da0f      	bge.n	8003f7c <_puts_r+0xa0>
 8003f5c:	0022      	movs	r2, r4
 8003f5e:	0028      	movs	r0, r5
 8003f60:	310a      	adds	r1, #10
 8003f62:	f000 f867 	bl	8004034 <__swbuf_r>
 8003f66:	3001      	adds	r0, #1
 8003f68:	d0d6      	beq.n	8003f18 <_puts_r+0x3c>
 8003f6a:	250a      	movs	r5, #10
 8003f6c:	e7d6      	b.n	8003f1c <_puts_r+0x40>
 8003f6e:	0022      	movs	r2, r4
 8003f70:	0028      	movs	r0, r5
 8003f72:	f000 f85f 	bl	8004034 <__swbuf_r>
 8003f76:	3001      	adds	r0, #1
 8003f78:	d1e8      	bne.n	8003f4c <_puts_r+0x70>
 8003f7a:	e7cd      	b.n	8003f18 <_puts_r+0x3c>
 8003f7c:	6823      	ldr	r3, [r4, #0]
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	6022      	str	r2, [r4, #0]
 8003f82:	220a      	movs	r2, #10
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	e7f0      	b.n	8003f6a <_puts_r+0x8e>

08003f88 <puts>:
 8003f88:	b510      	push	{r4, lr}
 8003f8a:	4b03      	ldr	r3, [pc, #12]	@ (8003f98 <puts+0x10>)
 8003f8c:	0001      	movs	r1, r0
 8003f8e:	6818      	ldr	r0, [r3, #0]
 8003f90:	f7ff ffa4 	bl	8003edc <_puts_r>
 8003f94:	bd10      	pop	{r4, pc}
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	20000018 	.word	0x20000018

08003f9c <__sread>:
 8003f9c:	b570      	push	{r4, r5, r6, lr}
 8003f9e:	000c      	movs	r4, r1
 8003fa0:	250e      	movs	r5, #14
 8003fa2:	5f49      	ldrsh	r1, [r1, r5]
 8003fa4:	f000 f914 	bl	80041d0 <_read_r>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	db03      	blt.n	8003fb4 <__sread+0x18>
 8003fac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003fae:	181b      	adds	r3, r3, r0
 8003fb0:	6563      	str	r3, [r4, #84]	@ 0x54
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	89a3      	ldrh	r3, [r4, #12]
 8003fb6:	4a02      	ldr	r2, [pc, #8]	@ (8003fc0 <__sread+0x24>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	81a3      	strh	r3, [r4, #12]
 8003fbc:	e7f9      	b.n	8003fb2 <__sread+0x16>
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	ffffefff 	.word	0xffffefff

08003fc4 <__swrite>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	001f      	movs	r7, r3
 8003fc8:	898b      	ldrh	r3, [r1, #12]
 8003fca:	0005      	movs	r5, r0
 8003fcc:	000c      	movs	r4, r1
 8003fce:	0016      	movs	r6, r2
 8003fd0:	05db      	lsls	r3, r3, #23
 8003fd2:	d505      	bpl.n	8003fe0 <__swrite+0x1c>
 8003fd4:	230e      	movs	r3, #14
 8003fd6:	5ec9      	ldrsh	r1, [r1, r3]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2302      	movs	r3, #2
 8003fdc:	f000 f8e4 	bl	80041a8 <_lseek_r>
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	4a05      	ldr	r2, [pc, #20]	@ (8003ff8 <__swrite+0x34>)
 8003fe4:	0028      	movs	r0, r5
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	81a3      	strh	r3, [r4, #12]
 8003fea:	0032      	movs	r2, r6
 8003fec:	230e      	movs	r3, #14
 8003fee:	5ee1      	ldrsh	r1, [r4, r3]
 8003ff0:	003b      	movs	r3, r7
 8003ff2:	f000 f901 	bl	80041f8 <_write_r>
 8003ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ff8:	ffffefff 	.word	0xffffefff

08003ffc <__sseek>:
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	000c      	movs	r4, r1
 8004000:	250e      	movs	r5, #14
 8004002:	5f49      	ldrsh	r1, [r1, r5]
 8004004:	f000 f8d0 	bl	80041a8 <_lseek_r>
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	1c42      	adds	r2, r0, #1
 800400c:	d103      	bne.n	8004016 <__sseek+0x1a>
 800400e:	4a05      	ldr	r2, [pc, #20]	@ (8004024 <__sseek+0x28>)
 8004010:	4013      	ands	r3, r2
 8004012:	81a3      	strh	r3, [r4, #12]
 8004014:	bd70      	pop	{r4, r5, r6, pc}
 8004016:	2280      	movs	r2, #128	@ 0x80
 8004018:	0152      	lsls	r2, r2, #5
 800401a:	4313      	orrs	r3, r2
 800401c:	81a3      	strh	r3, [r4, #12]
 800401e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004020:	e7f8      	b.n	8004014 <__sseek+0x18>
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	ffffefff 	.word	0xffffefff

08004028 <__sclose>:
 8004028:	b510      	push	{r4, lr}
 800402a:	230e      	movs	r3, #14
 800402c:	5ec9      	ldrsh	r1, [r1, r3]
 800402e:	f000 f8a9 	bl	8004184 <_close_r>
 8004032:	bd10      	pop	{r4, pc}

08004034 <__swbuf_r>:
 8004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004036:	0006      	movs	r6, r0
 8004038:	000d      	movs	r5, r1
 800403a:	0014      	movs	r4, r2
 800403c:	2800      	cmp	r0, #0
 800403e:	d004      	beq.n	800404a <__swbuf_r+0x16>
 8004040:	6a03      	ldr	r3, [r0, #32]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <__swbuf_r+0x16>
 8004046:	f7ff ff05 	bl	8003e54 <__sinit>
 800404a:	69a3      	ldr	r3, [r4, #24]
 800404c:	60a3      	str	r3, [r4, #8]
 800404e:	89a3      	ldrh	r3, [r4, #12]
 8004050:	071b      	lsls	r3, r3, #28
 8004052:	d502      	bpl.n	800405a <__swbuf_r+0x26>
 8004054:	6923      	ldr	r3, [r4, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <__swbuf_r+0x3a>
 800405a:	0021      	movs	r1, r4
 800405c:	0030      	movs	r0, r6
 800405e:	f000 f82b 	bl	80040b8 <__swsetup_r>
 8004062:	2800      	cmp	r0, #0
 8004064:	d003      	beq.n	800406e <__swbuf_r+0x3a>
 8004066:	2501      	movs	r5, #1
 8004068:	426d      	negs	r5, r5
 800406a:	0028      	movs	r0, r5
 800406c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800406e:	6923      	ldr	r3, [r4, #16]
 8004070:	6820      	ldr	r0, [r4, #0]
 8004072:	b2ef      	uxtb	r7, r5
 8004074:	1ac0      	subs	r0, r0, r3
 8004076:	6963      	ldr	r3, [r4, #20]
 8004078:	b2ed      	uxtb	r5, r5
 800407a:	4283      	cmp	r3, r0
 800407c:	dc05      	bgt.n	800408a <__swbuf_r+0x56>
 800407e:	0021      	movs	r1, r4
 8004080:	0030      	movs	r0, r6
 8004082:	f000 fd3f 	bl	8004b04 <_fflush_r>
 8004086:	2800      	cmp	r0, #0
 8004088:	d1ed      	bne.n	8004066 <__swbuf_r+0x32>
 800408a:	68a3      	ldr	r3, [r4, #8]
 800408c:	3001      	adds	r0, #1
 800408e:	3b01      	subs	r3, #1
 8004090:	60a3      	str	r3, [r4, #8]
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	6022      	str	r2, [r4, #0]
 8004098:	701f      	strb	r7, [r3, #0]
 800409a:	6963      	ldr	r3, [r4, #20]
 800409c:	4283      	cmp	r3, r0
 800409e:	d004      	beq.n	80040aa <__swbuf_r+0x76>
 80040a0:	89a3      	ldrh	r3, [r4, #12]
 80040a2:	07db      	lsls	r3, r3, #31
 80040a4:	d5e1      	bpl.n	800406a <__swbuf_r+0x36>
 80040a6:	2d0a      	cmp	r5, #10
 80040a8:	d1df      	bne.n	800406a <__swbuf_r+0x36>
 80040aa:	0021      	movs	r1, r4
 80040ac:	0030      	movs	r0, r6
 80040ae:	f000 fd29 	bl	8004b04 <_fflush_r>
 80040b2:	2800      	cmp	r0, #0
 80040b4:	d0d9      	beq.n	800406a <__swbuf_r+0x36>
 80040b6:	e7d6      	b.n	8004066 <__swbuf_r+0x32>

080040b8 <__swsetup_r>:
 80040b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004170 <__swsetup_r+0xb8>)
 80040ba:	b570      	push	{r4, r5, r6, lr}
 80040bc:	0005      	movs	r5, r0
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	000c      	movs	r4, r1
 80040c2:	2800      	cmp	r0, #0
 80040c4:	d004      	beq.n	80040d0 <__swsetup_r+0x18>
 80040c6:	6a03      	ldr	r3, [r0, #32]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <__swsetup_r+0x18>
 80040cc:	f7ff fec2 	bl	8003e54 <__sinit>
 80040d0:	230c      	movs	r3, #12
 80040d2:	5ee2      	ldrsh	r2, [r4, r3]
 80040d4:	0713      	lsls	r3, r2, #28
 80040d6:	d423      	bmi.n	8004120 <__swsetup_r+0x68>
 80040d8:	06d3      	lsls	r3, r2, #27
 80040da:	d407      	bmi.n	80040ec <__swsetup_r+0x34>
 80040dc:	2309      	movs	r3, #9
 80040de:	602b      	str	r3, [r5, #0]
 80040e0:	2340      	movs	r3, #64	@ 0x40
 80040e2:	2001      	movs	r0, #1
 80040e4:	4313      	orrs	r3, r2
 80040e6:	81a3      	strh	r3, [r4, #12]
 80040e8:	4240      	negs	r0, r0
 80040ea:	e03a      	b.n	8004162 <__swsetup_r+0xaa>
 80040ec:	0752      	lsls	r2, r2, #29
 80040ee:	d513      	bpl.n	8004118 <__swsetup_r+0x60>
 80040f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040f2:	2900      	cmp	r1, #0
 80040f4:	d008      	beq.n	8004108 <__swsetup_r+0x50>
 80040f6:	0023      	movs	r3, r4
 80040f8:	3344      	adds	r3, #68	@ 0x44
 80040fa:	4299      	cmp	r1, r3
 80040fc:	d002      	beq.n	8004104 <__swsetup_r+0x4c>
 80040fe:	0028      	movs	r0, r5
 8004100:	f000 f8bc 	bl	800427c <_free_r>
 8004104:	2300      	movs	r3, #0
 8004106:	6363      	str	r3, [r4, #52]	@ 0x34
 8004108:	2224      	movs	r2, #36	@ 0x24
 800410a:	89a3      	ldrh	r3, [r4, #12]
 800410c:	4393      	bics	r3, r2
 800410e:	81a3      	strh	r3, [r4, #12]
 8004110:	2300      	movs	r3, #0
 8004112:	6063      	str	r3, [r4, #4]
 8004114:	6923      	ldr	r3, [r4, #16]
 8004116:	6023      	str	r3, [r4, #0]
 8004118:	2308      	movs	r3, #8
 800411a:	89a2      	ldrh	r2, [r4, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	81a3      	strh	r3, [r4, #12]
 8004120:	6923      	ldr	r3, [r4, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10b      	bne.n	800413e <__swsetup_r+0x86>
 8004126:	21a0      	movs	r1, #160	@ 0xa0
 8004128:	2280      	movs	r2, #128	@ 0x80
 800412a:	89a3      	ldrh	r3, [r4, #12]
 800412c:	0089      	lsls	r1, r1, #2
 800412e:	0092      	lsls	r2, r2, #2
 8004130:	400b      	ands	r3, r1
 8004132:	4293      	cmp	r3, r2
 8004134:	d003      	beq.n	800413e <__swsetup_r+0x86>
 8004136:	0021      	movs	r1, r4
 8004138:	0028      	movs	r0, r5
 800413a:	f000 fd39 	bl	8004bb0 <__smakebuf_r>
 800413e:	230c      	movs	r3, #12
 8004140:	5ee2      	ldrsh	r2, [r4, r3]
 8004142:	2101      	movs	r1, #1
 8004144:	0013      	movs	r3, r2
 8004146:	400b      	ands	r3, r1
 8004148:	420a      	tst	r2, r1
 800414a:	d00b      	beq.n	8004164 <__swsetup_r+0xac>
 800414c:	2300      	movs	r3, #0
 800414e:	60a3      	str	r3, [r4, #8]
 8004150:	6963      	ldr	r3, [r4, #20]
 8004152:	425b      	negs	r3, r3
 8004154:	61a3      	str	r3, [r4, #24]
 8004156:	2000      	movs	r0, #0
 8004158:	6923      	ldr	r3, [r4, #16]
 800415a:	4283      	cmp	r3, r0
 800415c:	d101      	bne.n	8004162 <__swsetup_r+0xaa>
 800415e:	0613      	lsls	r3, r2, #24
 8004160:	d4be      	bmi.n	80040e0 <__swsetup_r+0x28>
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	0791      	lsls	r1, r2, #30
 8004166:	d400      	bmi.n	800416a <__swsetup_r+0xb2>
 8004168:	6963      	ldr	r3, [r4, #20]
 800416a:	60a3      	str	r3, [r4, #8]
 800416c:	e7f3      	b.n	8004156 <__swsetup_r+0x9e>
 800416e:	46c0      	nop			@ (mov r8, r8)
 8004170:	20000018 	.word	0x20000018

08004174 <memset>:
 8004174:	0003      	movs	r3, r0
 8004176:	1882      	adds	r2, r0, r2
 8004178:	4293      	cmp	r3, r2
 800417a:	d100      	bne.n	800417e <memset+0xa>
 800417c:	4770      	bx	lr
 800417e:	7019      	strb	r1, [r3, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	e7f9      	b.n	8004178 <memset+0x4>

08004184 <_close_r>:
 8004184:	2300      	movs	r3, #0
 8004186:	b570      	push	{r4, r5, r6, lr}
 8004188:	4d06      	ldr	r5, [pc, #24]	@ (80041a4 <_close_r+0x20>)
 800418a:	0004      	movs	r4, r0
 800418c:	0008      	movs	r0, r1
 800418e:	602b      	str	r3, [r5, #0]
 8004190:	f7fc fffa 	bl	8001188 <_close>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d103      	bne.n	80041a0 <_close_r+0x1c>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d000      	beq.n	80041a0 <_close_r+0x1c>
 800419e:	6023      	str	r3, [r4, #0]
 80041a0:	bd70      	pop	{r4, r5, r6, pc}
 80041a2:	46c0      	nop			@ (mov r8, r8)
 80041a4:	200003b4 	.word	0x200003b4

080041a8 <_lseek_r>:
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	0004      	movs	r4, r0
 80041ac:	0008      	movs	r0, r1
 80041ae:	0011      	movs	r1, r2
 80041b0:	001a      	movs	r2, r3
 80041b2:	2300      	movs	r3, #0
 80041b4:	4d05      	ldr	r5, [pc, #20]	@ (80041cc <_lseek_r+0x24>)
 80041b6:	602b      	str	r3, [r5, #0]
 80041b8:	f7fd f807 	bl	80011ca <_lseek>
 80041bc:	1c43      	adds	r3, r0, #1
 80041be:	d103      	bne.n	80041c8 <_lseek_r+0x20>
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d000      	beq.n	80041c8 <_lseek_r+0x20>
 80041c6:	6023      	str	r3, [r4, #0]
 80041c8:	bd70      	pop	{r4, r5, r6, pc}
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	200003b4 	.word	0x200003b4

080041d0 <_read_r>:
 80041d0:	b570      	push	{r4, r5, r6, lr}
 80041d2:	0004      	movs	r4, r0
 80041d4:	0008      	movs	r0, r1
 80041d6:	0011      	movs	r1, r2
 80041d8:	001a      	movs	r2, r3
 80041da:	2300      	movs	r3, #0
 80041dc:	4d05      	ldr	r5, [pc, #20]	@ (80041f4 <_read_r+0x24>)
 80041de:	602b      	str	r3, [r5, #0]
 80041e0:	f7fc ff99 	bl	8001116 <_read>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d103      	bne.n	80041f0 <_read_r+0x20>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d000      	beq.n	80041f0 <_read_r+0x20>
 80041ee:	6023      	str	r3, [r4, #0]
 80041f0:	bd70      	pop	{r4, r5, r6, pc}
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	200003b4 	.word	0x200003b4

080041f8 <_write_r>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	0004      	movs	r4, r0
 80041fc:	0008      	movs	r0, r1
 80041fe:	0011      	movs	r1, r2
 8004200:	001a      	movs	r2, r3
 8004202:	2300      	movs	r3, #0
 8004204:	4d05      	ldr	r5, [pc, #20]	@ (800421c <_write_r+0x24>)
 8004206:	602b      	str	r3, [r5, #0]
 8004208:	f7fc ffa2 	bl	8001150 <_write>
 800420c:	1c43      	adds	r3, r0, #1
 800420e:	d103      	bne.n	8004218 <_write_r+0x20>
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d000      	beq.n	8004218 <_write_r+0x20>
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	bd70      	pop	{r4, r5, r6, pc}
 800421a:	46c0      	nop			@ (mov r8, r8)
 800421c:	200003b4 	.word	0x200003b4

08004220 <__errno>:
 8004220:	4b01      	ldr	r3, [pc, #4]	@ (8004228 <__errno+0x8>)
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	4770      	bx	lr
 8004226:	46c0      	nop			@ (mov r8, r8)
 8004228:	20000018 	.word	0x20000018

0800422c <__libc_init_array>:
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	2600      	movs	r6, #0
 8004230:	4c0c      	ldr	r4, [pc, #48]	@ (8004264 <__libc_init_array+0x38>)
 8004232:	4d0d      	ldr	r5, [pc, #52]	@ (8004268 <__libc_init_array+0x3c>)
 8004234:	1b64      	subs	r4, r4, r5
 8004236:	10a4      	asrs	r4, r4, #2
 8004238:	42a6      	cmp	r6, r4
 800423a:	d109      	bne.n	8004250 <__libc_init_array+0x24>
 800423c:	2600      	movs	r6, #0
 800423e:	f000 fd3b 	bl	8004cb8 <_init>
 8004242:	4c0a      	ldr	r4, [pc, #40]	@ (800426c <__libc_init_array+0x40>)
 8004244:	4d0a      	ldr	r5, [pc, #40]	@ (8004270 <__libc_init_array+0x44>)
 8004246:	1b64      	subs	r4, r4, r5
 8004248:	10a4      	asrs	r4, r4, #2
 800424a:	42a6      	cmp	r6, r4
 800424c:	d105      	bne.n	800425a <__libc_init_array+0x2e>
 800424e:	bd70      	pop	{r4, r5, r6, pc}
 8004250:	00b3      	lsls	r3, r6, #2
 8004252:	58eb      	ldr	r3, [r5, r3]
 8004254:	4798      	blx	r3
 8004256:	3601      	adds	r6, #1
 8004258:	e7ee      	b.n	8004238 <__libc_init_array+0xc>
 800425a:	00b3      	lsls	r3, r6, #2
 800425c:	58eb      	ldr	r3, [r5, r3]
 800425e:	4798      	blx	r3
 8004260:	3601      	adds	r6, #1
 8004262:	e7f2      	b.n	800424a <__libc_init_array+0x1e>
 8004264:	08004e1c 	.word	0x08004e1c
 8004268:	08004e1c 	.word	0x08004e1c
 800426c:	08004e20 	.word	0x08004e20
 8004270:	08004e1c 	.word	0x08004e1c

08004274 <__retarget_lock_init_recursive>:
 8004274:	4770      	bx	lr

08004276 <__retarget_lock_acquire_recursive>:
 8004276:	4770      	bx	lr

08004278 <__retarget_lock_release_recursive>:
 8004278:	4770      	bx	lr
	...

0800427c <_free_r>:
 800427c:	b570      	push	{r4, r5, r6, lr}
 800427e:	0005      	movs	r5, r0
 8004280:	1e0c      	subs	r4, r1, #0
 8004282:	d010      	beq.n	80042a6 <_free_r+0x2a>
 8004284:	3c04      	subs	r4, #4
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	da00      	bge.n	800428e <_free_r+0x12>
 800428c:	18e4      	adds	r4, r4, r3
 800428e:	0028      	movs	r0, r5
 8004290:	f000 f8e0 	bl	8004454 <__malloc_lock>
 8004294:	4a1d      	ldr	r2, [pc, #116]	@ (800430c <_free_r+0x90>)
 8004296:	6813      	ldr	r3, [r2, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d105      	bne.n	80042a8 <_free_r+0x2c>
 800429c:	6063      	str	r3, [r4, #4]
 800429e:	6014      	str	r4, [r2, #0]
 80042a0:	0028      	movs	r0, r5
 80042a2:	f000 f8df 	bl	8004464 <__malloc_unlock>
 80042a6:	bd70      	pop	{r4, r5, r6, pc}
 80042a8:	42a3      	cmp	r3, r4
 80042aa:	d908      	bls.n	80042be <_free_r+0x42>
 80042ac:	6820      	ldr	r0, [r4, #0]
 80042ae:	1821      	adds	r1, r4, r0
 80042b0:	428b      	cmp	r3, r1
 80042b2:	d1f3      	bne.n	800429c <_free_r+0x20>
 80042b4:	6819      	ldr	r1, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	1809      	adds	r1, r1, r0
 80042ba:	6021      	str	r1, [r4, #0]
 80042bc:	e7ee      	b.n	800429c <_free_r+0x20>
 80042be:	001a      	movs	r2, r3
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <_free_r+0x4e>
 80042c6:	42a3      	cmp	r3, r4
 80042c8:	d9f9      	bls.n	80042be <_free_r+0x42>
 80042ca:	6811      	ldr	r1, [r2, #0]
 80042cc:	1850      	adds	r0, r2, r1
 80042ce:	42a0      	cmp	r0, r4
 80042d0:	d10b      	bne.n	80042ea <_free_r+0x6e>
 80042d2:	6820      	ldr	r0, [r4, #0]
 80042d4:	1809      	adds	r1, r1, r0
 80042d6:	1850      	adds	r0, r2, r1
 80042d8:	6011      	str	r1, [r2, #0]
 80042da:	4283      	cmp	r3, r0
 80042dc:	d1e0      	bne.n	80042a0 <_free_r+0x24>
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	1841      	adds	r1, r0, r1
 80042e4:	6011      	str	r1, [r2, #0]
 80042e6:	6053      	str	r3, [r2, #4]
 80042e8:	e7da      	b.n	80042a0 <_free_r+0x24>
 80042ea:	42a0      	cmp	r0, r4
 80042ec:	d902      	bls.n	80042f4 <_free_r+0x78>
 80042ee:	230c      	movs	r3, #12
 80042f0:	602b      	str	r3, [r5, #0]
 80042f2:	e7d5      	b.n	80042a0 <_free_r+0x24>
 80042f4:	6820      	ldr	r0, [r4, #0]
 80042f6:	1821      	adds	r1, r4, r0
 80042f8:	428b      	cmp	r3, r1
 80042fa:	d103      	bne.n	8004304 <_free_r+0x88>
 80042fc:	6819      	ldr	r1, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	1809      	adds	r1, r1, r0
 8004302:	6021      	str	r1, [r4, #0]
 8004304:	6063      	str	r3, [r4, #4]
 8004306:	6054      	str	r4, [r2, #4]
 8004308:	e7ca      	b.n	80042a0 <_free_r+0x24>
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	200003c0 	.word	0x200003c0

08004310 <sbrk_aligned>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	4e0f      	ldr	r6, [pc, #60]	@ (8004350 <sbrk_aligned+0x40>)
 8004314:	000d      	movs	r5, r1
 8004316:	6831      	ldr	r1, [r6, #0]
 8004318:	0004      	movs	r4, r0
 800431a:	2900      	cmp	r1, #0
 800431c:	d102      	bne.n	8004324 <sbrk_aligned+0x14>
 800431e:	f000 fcad 	bl	8004c7c <_sbrk_r>
 8004322:	6030      	str	r0, [r6, #0]
 8004324:	0029      	movs	r1, r5
 8004326:	0020      	movs	r0, r4
 8004328:	f000 fca8 	bl	8004c7c <_sbrk_r>
 800432c:	1c43      	adds	r3, r0, #1
 800432e:	d103      	bne.n	8004338 <sbrk_aligned+0x28>
 8004330:	2501      	movs	r5, #1
 8004332:	426d      	negs	r5, r5
 8004334:	0028      	movs	r0, r5
 8004336:	bd70      	pop	{r4, r5, r6, pc}
 8004338:	2303      	movs	r3, #3
 800433a:	1cc5      	adds	r5, r0, #3
 800433c:	439d      	bics	r5, r3
 800433e:	42a8      	cmp	r0, r5
 8004340:	d0f8      	beq.n	8004334 <sbrk_aligned+0x24>
 8004342:	1a29      	subs	r1, r5, r0
 8004344:	0020      	movs	r0, r4
 8004346:	f000 fc99 	bl	8004c7c <_sbrk_r>
 800434a:	3001      	adds	r0, #1
 800434c:	d1f2      	bne.n	8004334 <sbrk_aligned+0x24>
 800434e:	e7ef      	b.n	8004330 <sbrk_aligned+0x20>
 8004350:	200003bc 	.word	0x200003bc

08004354 <_malloc_r>:
 8004354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004356:	2203      	movs	r2, #3
 8004358:	1ccb      	adds	r3, r1, #3
 800435a:	4393      	bics	r3, r2
 800435c:	3308      	adds	r3, #8
 800435e:	0005      	movs	r5, r0
 8004360:	001f      	movs	r7, r3
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d234      	bcs.n	80043d0 <_malloc_r+0x7c>
 8004366:	270c      	movs	r7, #12
 8004368:	42b9      	cmp	r1, r7
 800436a:	d833      	bhi.n	80043d4 <_malloc_r+0x80>
 800436c:	0028      	movs	r0, r5
 800436e:	f000 f871 	bl	8004454 <__malloc_lock>
 8004372:	4e37      	ldr	r6, [pc, #220]	@ (8004450 <_malloc_r+0xfc>)
 8004374:	6833      	ldr	r3, [r6, #0]
 8004376:	001c      	movs	r4, r3
 8004378:	2c00      	cmp	r4, #0
 800437a:	d12f      	bne.n	80043dc <_malloc_r+0x88>
 800437c:	0039      	movs	r1, r7
 800437e:	0028      	movs	r0, r5
 8004380:	f7ff ffc6 	bl	8004310 <sbrk_aligned>
 8004384:	0004      	movs	r4, r0
 8004386:	1c43      	adds	r3, r0, #1
 8004388:	d15f      	bne.n	800444a <_malloc_r+0xf6>
 800438a:	6834      	ldr	r4, [r6, #0]
 800438c:	9400      	str	r4, [sp, #0]
 800438e:	9b00      	ldr	r3, [sp, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d14a      	bne.n	800442a <_malloc_r+0xd6>
 8004394:	2c00      	cmp	r4, #0
 8004396:	d052      	beq.n	800443e <_malloc_r+0xea>
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	0028      	movs	r0, r5
 800439c:	18e3      	adds	r3, r4, r3
 800439e:	9900      	ldr	r1, [sp, #0]
 80043a0:	9301      	str	r3, [sp, #4]
 80043a2:	f000 fc6b 	bl	8004c7c <_sbrk_r>
 80043a6:	9b01      	ldr	r3, [sp, #4]
 80043a8:	4283      	cmp	r3, r0
 80043aa:	d148      	bne.n	800443e <_malloc_r+0xea>
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	0028      	movs	r0, r5
 80043b0:	1aff      	subs	r7, r7, r3
 80043b2:	0039      	movs	r1, r7
 80043b4:	f7ff ffac 	bl	8004310 <sbrk_aligned>
 80043b8:	3001      	adds	r0, #1
 80043ba:	d040      	beq.n	800443e <_malloc_r+0xea>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	19db      	adds	r3, r3, r7
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	6833      	ldr	r3, [r6, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	2a00      	cmp	r2, #0
 80043c8:	d133      	bne.n	8004432 <_malloc_r+0xde>
 80043ca:	9b00      	ldr	r3, [sp, #0]
 80043cc:	6033      	str	r3, [r6, #0]
 80043ce:	e019      	b.n	8004404 <_malloc_r+0xb0>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	dac9      	bge.n	8004368 <_malloc_r+0x14>
 80043d4:	230c      	movs	r3, #12
 80043d6:	602b      	str	r3, [r5, #0]
 80043d8:	2000      	movs	r0, #0
 80043da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043dc:	6821      	ldr	r1, [r4, #0]
 80043de:	1bc9      	subs	r1, r1, r7
 80043e0:	d420      	bmi.n	8004424 <_malloc_r+0xd0>
 80043e2:	290b      	cmp	r1, #11
 80043e4:	d90a      	bls.n	80043fc <_malloc_r+0xa8>
 80043e6:	19e2      	adds	r2, r4, r7
 80043e8:	6027      	str	r7, [r4, #0]
 80043ea:	42a3      	cmp	r3, r4
 80043ec:	d104      	bne.n	80043f8 <_malloc_r+0xa4>
 80043ee:	6032      	str	r2, [r6, #0]
 80043f0:	6863      	ldr	r3, [r4, #4]
 80043f2:	6011      	str	r1, [r2, #0]
 80043f4:	6053      	str	r3, [r2, #4]
 80043f6:	e005      	b.n	8004404 <_malloc_r+0xb0>
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	e7f9      	b.n	80043f0 <_malloc_r+0x9c>
 80043fc:	6862      	ldr	r2, [r4, #4]
 80043fe:	42a3      	cmp	r3, r4
 8004400:	d10e      	bne.n	8004420 <_malloc_r+0xcc>
 8004402:	6032      	str	r2, [r6, #0]
 8004404:	0028      	movs	r0, r5
 8004406:	f000 f82d 	bl	8004464 <__malloc_unlock>
 800440a:	0020      	movs	r0, r4
 800440c:	2207      	movs	r2, #7
 800440e:	300b      	adds	r0, #11
 8004410:	1d23      	adds	r3, r4, #4
 8004412:	4390      	bics	r0, r2
 8004414:	1ac2      	subs	r2, r0, r3
 8004416:	4298      	cmp	r0, r3
 8004418:	d0df      	beq.n	80043da <_malloc_r+0x86>
 800441a:	1a1b      	subs	r3, r3, r0
 800441c:	50a3      	str	r3, [r4, r2]
 800441e:	e7dc      	b.n	80043da <_malloc_r+0x86>
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	e7ef      	b.n	8004404 <_malloc_r+0xb0>
 8004424:	0023      	movs	r3, r4
 8004426:	6864      	ldr	r4, [r4, #4]
 8004428:	e7a6      	b.n	8004378 <_malloc_r+0x24>
 800442a:	9c00      	ldr	r4, [sp, #0]
 800442c:	6863      	ldr	r3, [r4, #4]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	e7ad      	b.n	800438e <_malloc_r+0x3a>
 8004432:	001a      	movs	r2, r3
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	42a3      	cmp	r3, r4
 8004438:	d1fb      	bne.n	8004432 <_malloc_r+0xde>
 800443a:	2300      	movs	r3, #0
 800443c:	e7da      	b.n	80043f4 <_malloc_r+0xa0>
 800443e:	230c      	movs	r3, #12
 8004440:	0028      	movs	r0, r5
 8004442:	602b      	str	r3, [r5, #0]
 8004444:	f000 f80e 	bl	8004464 <__malloc_unlock>
 8004448:	e7c6      	b.n	80043d8 <_malloc_r+0x84>
 800444a:	6007      	str	r7, [r0, #0]
 800444c:	e7da      	b.n	8004404 <_malloc_r+0xb0>
 800444e:	46c0      	nop			@ (mov r8, r8)
 8004450:	200003c0 	.word	0x200003c0

08004454 <__malloc_lock>:
 8004454:	b510      	push	{r4, lr}
 8004456:	4802      	ldr	r0, [pc, #8]	@ (8004460 <__malloc_lock+0xc>)
 8004458:	f7ff ff0d 	bl	8004276 <__retarget_lock_acquire_recursive>
 800445c:	bd10      	pop	{r4, pc}
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	200003b8 	.word	0x200003b8

08004464 <__malloc_unlock>:
 8004464:	b510      	push	{r4, lr}
 8004466:	4802      	ldr	r0, [pc, #8]	@ (8004470 <__malloc_unlock+0xc>)
 8004468:	f7ff ff06 	bl	8004278 <__retarget_lock_release_recursive>
 800446c:	bd10      	pop	{r4, pc}
 800446e:	46c0      	nop			@ (mov r8, r8)
 8004470:	200003b8 	.word	0x200003b8

08004474 <__sfputc_r>:
 8004474:	6893      	ldr	r3, [r2, #8]
 8004476:	b510      	push	{r4, lr}
 8004478:	3b01      	subs	r3, #1
 800447a:	6093      	str	r3, [r2, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	da04      	bge.n	800448a <__sfputc_r+0x16>
 8004480:	6994      	ldr	r4, [r2, #24]
 8004482:	42a3      	cmp	r3, r4
 8004484:	db07      	blt.n	8004496 <__sfputc_r+0x22>
 8004486:	290a      	cmp	r1, #10
 8004488:	d005      	beq.n	8004496 <__sfputc_r+0x22>
 800448a:	6813      	ldr	r3, [r2, #0]
 800448c:	1c58      	adds	r0, r3, #1
 800448e:	6010      	str	r0, [r2, #0]
 8004490:	7019      	strb	r1, [r3, #0]
 8004492:	0008      	movs	r0, r1
 8004494:	bd10      	pop	{r4, pc}
 8004496:	f7ff fdcd 	bl	8004034 <__swbuf_r>
 800449a:	0001      	movs	r1, r0
 800449c:	e7f9      	b.n	8004492 <__sfputc_r+0x1e>

0800449e <__sfputs_r>:
 800449e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a0:	0006      	movs	r6, r0
 80044a2:	000f      	movs	r7, r1
 80044a4:	0014      	movs	r4, r2
 80044a6:	18d5      	adds	r5, r2, r3
 80044a8:	42ac      	cmp	r4, r5
 80044aa:	d101      	bne.n	80044b0 <__sfputs_r+0x12>
 80044ac:	2000      	movs	r0, #0
 80044ae:	e007      	b.n	80044c0 <__sfputs_r+0x22>
 80044b0:	7821      	ldrb	r1, [r4, #0]
 80044b2:	003a      	movs	r2, r7
 80044b4:	0030      	movs	r0, r6
 80044b6:	f7ff ffdd 	bl	8004474 <__sfputc_r>
 80044ba:	3401      	adds	r4, #1
 80044bc:	1c43      	adds	r3, r0, #1
 80044be:	d1f3      	bne.n	80044a8 <__sfputs_r+0xa>
 80044c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044c4 <_vfiprintf_r>:
 80044c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044c6:	b0a1      	sub	sp, #132	@ 0x84
 80044c8:	000f      	movs	r7, r1
 80044ca:	0015      	movs	r5, r2
 80044cc:	001e      	movs	r6, r3
 80044ce:	9003      	str	r0, [sp, #12]
 80044d0:	2800      	cmp	r0, #0
 80044d2:	d004      	beq.n	80044de <_vfiprintf_r+0x1a>
 80044d4:	6a03      	ldr	r3, [r0, #32]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <_vfiprintf_r+0x1a>
 80044da:	f7ff fcbb 	bl	8003e54 <__sinit>
 80044de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044e0:	07db      	lsls	r3, r3, #31
 80044e2:	d405      	bmi.n	80044f0 <_vfiprintf_r+0x2c>
 80044e4:	89bb      	ldrh	r3, [r7, #12]
 80044e6:	059b      	lsls	r3, r3, #22
 80044e8:	d402      	bmi.n	80044f0 <_vfiprintf_r+0x2c>
 80044ea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80044ec:	f7ff fec3 	bl	8004276 <__retarget_lock_acquire_recursive>
 80044f0:	89bb      	ldrh	r3, [r7, #12]
 80044f2:	071b      	lsls	r3, r3, #28
 80044f4:	d502      	bpl.n	80044fc <_vfiprintf_r+0x38>
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d113      	bne.n	8004524 <_vfiprintf_r+0x60>
 80044fc:	0039      	movs	r1, r7
 80044fe:	9803      	ldr	r0, [sp, #12]
 8004500:	f7ff fdda 	bl	80040b8 <__swsetup_r>
 8004504:	2800      	cmp	r0, #0
 8004506:	d00d      	beq.n	8004524 <_vfiprintf_r+0x60>
 8004508:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800450a:	07db      	lsls	r3, r3, #31
 800450c:	d503      	bpl.n	8004516 <_vfiprintf_r+0x52>
 800450e:	2001      	movs	r0, #1
 8004510:	4240      	negs	r0, r0
 8004512:	b021      	add	sp, #132	@ 0x84
 8004514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004516:	89bb      	ldrh	r3, [r7, #12]
 8004518:	059b      	lsls	r3, r3, #22
 800451a:	d4f8      	bmi.n	800450e <_vfiprintf_r+0x4a>
 800451c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800451e:	f7ff feab 	bl	8004278 <__retarget_lock_release_recursive>
 8004522:	e7f4      	b.n	800450e <_vfiprintf_r+0x4a>
 8004524:	2300      	movs	r3, #0
 8004526:	ac08      	add	r4, sp, #32
 8004528:	6163      	str	r3, [r4, #20]
 800452a:	3320      	adds	r3, #32
 800452c:	7663      	strb	r3, [r4, #25]
 800452e:	3310      	adds	r3, #16
 8004530:	76a3      	strb	r3, [r4, #26]
 8004532:	9607      	str	r6, [sp, #28]
 8004534:	002e      	movs	r6, r5
 8004536:	7833      	ldrb	r3, [r6, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <_vfiprintf_r+0x7c>
 800453c:	2b25      	cmp	r3, #37	@ 0x25
 800453e:	d148      	bne.n	80045d2 <_vfiprintf_r+0x10e>
 8004540:	1b73      	subs	r3, r6, r5
 8004542:	9305      	str	r3, [sp, #20]
 8004544:	42ae      	cmp	r6, r5
 8004546:	d00b      	beq.n	8004560 <_vfiprintf_r+0x9c>
 8004548:	002a      	movs	r2, r5
 800454a:	0039      	movs	r1, r7
 800454c:	9803      	ldr	r0, [sp, #12]
 800454e:	f7ff ffa6 	bl	800449e <__sfputs_r>
 8004552:	3001      	adds	r0, #1
 8004554:	d100      	bne.n	8004558 <_vfiprintf_r+0x94>
 8004556:	e0ae      	b.n	80046b6 <_vfiprintf_r+0x1f2>
 8004558:	6963      	ldr	r3, [r4, #20]
 800455a:	9a05      	ldr	r2, [sp, #20]
 800455c:	189b      	adds	r3, r3, r2
 800455e:	6163      	str	r3, [r4, #20]
 8004560:	7833      	ldrb	r3, [r6, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d100      	bne.n	8004568 <_vfiprintf_r+0xa4>
 8004566:	e0a6      	b.n	80046b6 <_vfiprintf_r+0x1f2>
 8004568:	2201      	movs	r2, #1
 800456a:	2300      	movs	r3, #0
 800456c:	4252      	negs	r2, r2
 800456e:	6062      	str	r2, [r4, #4]
 8004570:	a904      	add	r1, sp, #16
 8004572:	3254      	adds	r2, #84	@ 0x54
 8004574:	1852      	adds	r2, r2, r1
 8004576:	1c75      	adds	r5, r6, #1
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	60e3      	str	r3, [r4, #12]
 800457c:	60a3      	str	r3, [r4, #8]
 800457e:	7013      	strb	r3, [r2, #0]
 8004580:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004582:	4b59      	ldr	r3, [pc, #356]	@ (80046e8 <_vfiprintf_r+0x224>)
 8004584:	2205      	movs	r2, #5
 8004586:	0018      	movs	r0, r3
 8004588:	7829      	ldrb	r1, [r5, #0]
 800458a:	9305      	str	r3, [sp, #20]
 800458c:	f000 fb88 	bl	8004ca0 <memchr>
 8004590:	1c6e      	adds	r6, r5, #1
 8004592:	2800      	cmp	r0, #0
 8004594:	d11f      	bne.n	80045d6 <_vfiprintf_r+0x112>
 8004596:	6822      	ldr	r2, [r4, #0]
 8004598:	06d3      	lsls	r3, r2, #27
 800459a:	d504      	bpl.n	80045a6 <_vfiprintf_r+0xe2>
 800459c:	2353      	movs	r3, #83	@ 0x53
 800459e:	a904      	add	r1, sp, #16
 80045a0:	185b      	adds	r3, r3, r1
 80045a2:	2120      	movs	r1, #32
 80045a4:	7019      	strb	r1, [r3, #0]
 80045a6:	0713      	lsls	r3, r2, #28
 80045a8:	d504      	bpl.n	80045b4 <_vfiprintf_r+0xf0>
 80045aa:	2353      	movs	r3, #83	@ 0x53
 80045ac:	a904      	add	r1, sp, #16
 80045ae:	185b      	adds	r3, r3, r1
 80045b0:	212b      	movs	r1, #43	@ 0x2b
 80045b2:	7019      	strb	r1, [r3, #0]
 80045b4:	782b      	ldrb	r3, [r5, #0]
 80045b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80045b8:	d016      	beq.n	80045e8 <_vfiprintf_r+0x124>
 80045ba:	002e      	movs	r6, r5
 80045bc:	2100      	movs	r1, #0
 80045be:	200a      	movs	r0, #10
 80045c0:	68e3      	ldr	r3, [r4, #12]
 80045c2:	7832      	ldrb	r2, [r6, #0]
 80045c4:	1c75      	adds	r5, r6, #1
 80045c6:	3a30      	subs	r2, #48	@ 0x30
 80045c8:	2a09      	cmp	r2, #9
 80045ca:	d950      	bls.n	800466e <_vfiprintf_r+0x1aa>
 80045cc:	2900      	cmp	r1, #0
 80045ce:	d111      	bne.n	80045f4 <_vfiprintf_r+0x130>
 80045d0:	e017      	b.n	8004602 <_vfiprintf_r+0x13e>
 80045d2:	3601      	adds	r6, #1
 80045d4:	e7af      	b.n	8004536 <_vfiprintf_r+0x72>
 80045d6:	9b05      	ldr	r3, [sp, #20]
 80045d8:	6822      	ldr	r2, [r4, #0]
 80045da:	1ac0      	subs	r0, r0, r3
 80045dc:	2301      	movs	r3, #1
 80045de:	4083      	lsls	r3, r0
 80045e0:	4313      	orrs	r3, r2
 80045e2:	0035      	movs	r5, r6
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	e7cc      	b.n	8004582 <_vfiprintf_r+0xbe>
 80045e8:	9b07      	ldr	r3, [sp, #28]
 80045ea:	1d19      	adds	r1, r3, #4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	9107      	str	r1, [sp, #28]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	db01      	blt.n	80045f8 <_vfiprintf_r+0x134>
 80045f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045f6:	e004      	b.n	8004602 <_vfiprintf_r+0x13e>
 80045f8:	425b      	negs	r3, r3
 80045fa:	60e3      	str	r3, [r4, #12]
 80045fc:	2302      	movs	r3, #2
 80045fe:	4313      	orrs	r3, r2
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	7833      	ldrb	r3, [r6, #0]
 8004604:	2b2e      	cmp	r3, #46	@ 0x2e
 8004606:	d10c      	bne.n	8004622 <_vfiprintf_r+0x15e>
 8004608:	7873      	ldrb	r3, [r6, #1]
 800460a:	2b2a      	cmp	r3, #42	@ 0x2a
 800460c:	d134      	bne.n	8004678 <_vfiprintf_r+0x1b4>
 800460e:	9b07      	ldr	r3, [sp, #28]
 8004610:	3602      	adds	r6, #2
 8004612:	1d1a      	adds	r2, r3, #4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	9207      	str	r2, [sp, #28]
 8004618:	2b00      	cmp	r3, #0
 800461a:	da01      	bge.n	8004620 <_vfiprintf_r+0x15c>
 800461c:	2301      	movs	r3, #1
 800461e:	425b      	negs	r3, r3
 8004620:	9309      	str	r3, [sp, #36]	@ 0x24
 8004622:	4d32      	ldr	r5, [pc, #200]	@ (80046ec <_vfiprintf_r+0x228>)
 8004624:	2203      	movs	r2, #3
 8004626:	0028      	movs	r0, r5
 8004628:	7831      	ldrb	r1, [r6, #0]
 800462a:	f000 fb39 	bl	8004ca0 <memchr>
 800462e:	2800      	cmp	r0, #0
 8004630:	d006      	beq.n	8004640 <_vfiprintf_r+0x17c>
 8004632:	2340      	movs	r3, #64	@ 0x40
 8004634:	1b40      	subs	r0, r0, r5
 8004636:	4083      	lsls	r3, r0
 8004638:	6822      	ldr	r2, [r4, #0]
 800463a:	3601      	adds	r6, #1
 800463c:	4313      	orrs	r3, r2
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	7831      	ldrb	r1, [r6, #0]
 8004642:	2206      	movs	r2, #6
 8004644:	482a      	ldr	r0, [pc, #168]	@ (80046f0 <_vfiprintf_r+0x22c>)
 8004646:	1c75      	adds	r5, r6, #1
 8004648:	7621      	strb	r1, [r4, #24]
 800464a:	f000 fb29 	bl	8004ca0 <memchr>
 800464e:	2800      	cmp	r0, #0
 8004650:	d040      	beq.n	80046d4 <_vfiprintf_r+0x210>
 8004652:	4b28      	ldr	r3, [pc, #160]	@ (80046f4 <_vfiprintf_r+0x230>)
 8004654:	2b00      	cmp	r3, #0
 8004656:	d122      	bne.n	800469e <_vfiprintf_r+0x1da>
 8004658:	2207      	movs	r2, #7
 800465a:	9b07      	ldr	r3, [sp, #28]
 800465c:	3307      	adds	r3, #7
 800465e:	4393      	bics	r3, r2
 8004660:	3308      	adds	r3, #8
 8004662:	9307      	str	r3, [sp, #28]
 8004664:	6963      	ldr	r3, [r4, #20]
 8004666:	9a04      	ldr	r2, [sp, #16]
 8004668:	189b      	adds	r3, r3, r2
 800466a:	6163      	str	r3, [r4, #20]
 800466c:	e762      	b.n	8004534 <_vfiprintf_r+0x70>
 800466e:	4343      	muls	r3, r0
 8004670:	002e      	movs	r6, r5
 8004672:	2101      	movs	r1, #1
 8004674:	189b      	adds	r3, r3, r2
 8004676:	e7a4      	b.n	80045c2 <_vfiprintf_r+0xfe>
 8004678:	2300      	movs	r3, #0
 800467a:	200a      	movs	r0, #10
 800467c:	0019      	movs	r1, r3
 800467e:	3601      	adds	r6, #1
 8004680:	6063      	str	r3, [r4, #4]
 8004682:	7832      	ldrb	r2, [r6, #0]
 8004684:	1c75      	adds	r5, r6, #1
 8004686:	3a30      	subs	r2, #48	@ 0x30
 8004688:	2a09      	cmp	r2, #9
 800468a:	d903      	bls.n	8004694 <_vfiprintf_r+0x1d0>
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0c8      	beq.n	8004622 <_vfiprintf_r+0x15e>
 8004690:	9109      	str	r1, [sp, #36]	@ 0x24
 8004692:	e7c6      	b.n	8004622 <_vfiprintf_r+0x15e>
 8004694:	4341      	muls	r1, r0
 8004696:	002e      	movs	r6, r5
 8004698:	2301      	movs	r3, #1
 800469a:	1889      	adds	r1, r1, r2
 800469c:	e7f1      	b.n	8004682 <_vfiprintf_r+0x1be>
 800469e:	aa07      	add	r2, sp, #28
 80046a0:	9200      	str	r2, [sp, #0]
 80046a2:	0021      	movs	r1, r4
 80046a4:	003a      	movs	r2, r7
 80046a6:	4b14      	ldr	r3, [pc, #80]	@ (80046f8 <_vfiprintf_r+0x234>)
 80046a8:	9803      	ldr	r0, [sp, #12]
 80046aa:	e000      	b.n	80046ae <_vfiprintf_r+0x1ea>
 80046ac:	bf00      	nop
 80046ae:	9004      	str	r0, [sp, #16]
 80046b0:	9b04      	ldr	r3, [sp, #16]
 80046b2:	3301      	adds	r3, #1
 80046b4:	d1d6      	bne.n	8004664 <_vfiprintf_r+0x1a0>
 80046b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046b8:	07db      	lsls	r3, r3, #31
 80046ba:	d405      	bmi.n	80046c8 <_vfiprintf_r+0x204>
 80046bc:	89bb      	ldrh	r3, [r7, #12]
 80046be:	059b      	lsls	r3, r3, #22
 80046c0:	d402      	bmi.n	80046c8 <_vfiprintf_r+0x204>
 80046c2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80046c4:	f7ff fdd8 	bl	8004278 <__retarget_lock_release_recursive>
 80046c8:	89bb      	ldrh	r3, [r7, #12]
 80046ca:	065b      	lsls	r3, r3, #25
 80046cc:	d500      	bpl.n	80046d0 <_vfiprintf_r+0x20c>
 80046ce:	e71e      	b.n	800450e <_vfiprintf_r+0x4a>
 80046d0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80046d2:	e71e      	b.n	8004512 <_vfiprintf_r+0x4e>
 80046d4:	aa07      	add	r2, sp, #28
 80046d6:	9200      	str	r2, [sp, #0]
 80046d8:	0021      	movs	r1, r4
 80046da:	003a      	movs	r2, r7
 80046dc:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <_vfiprintf_r+0x234>)
 80046de:	9803      	ldr	r0, [sp, #12]
 80046e0:	f000 f87c 	bl	80047dc <_printf_i>
 80046e4:	e7e3      	b.n	80046ae <_vfiprintf_r+0x1ea>
 80046e6:	46c0      	nop			@ (mov r8, r8)
 80046e8:	08004de0 	.word	0x08004de0
 80046ec:	08004de6 	.word	0x08004de6
 80046f0:	08004dea 	.word	0x08004dea
 80046f4:	00000000 	.word	0x00000000
 80046f8:	0800449f 	.word	0x0800449f

080046fc <_printf_common>:
 80046fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046fe:	0016      	movs	r6, r2
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	688a      	ldr	r2, [r1, #8]
 8004704:	690b      	ldr	r3, [r1, #16]
 8004706:	000c      	movs	r4, r1
 8004708:	9000      	str	r0, [sp, #0]
 800470a:	4293      	cmp	r3, r2
 800470c:	da00      	bge.n	8004710 <_printf_common+0x14>
 800470e:	0013      	movs	r3, r2
 8004710:	0022      	movs	r2, r4
 8004712:	6033      	str	r3, [r6, #0]
 8004714:	3243      	adds	r2, #67	@ 0x43
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	2a00      	cmp	r2, #0
 800471a:	d001      	beq.n	8004720 <_printf_common+0x24>
 800471c:	3301      	adds	r3, #1
 800471e:	6033      	str	r3, [r6, #0]
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	069b      	lsls	r3, r3, #26
 8004724:	d502      	bpl.n	800472c <_printf_common+0x30>
 8004726:	6833      	ldr	r3, [r6, #0]
 8004728:	3302      	adds	r3, #2
 800472a:	6033      	str	r3, [r6, #0]
 800472c:	6822      	ldr	r2, [r4, #0]
 800472e:	2306      	movs	r3, #6
 8004730:	0015      	movs	r5, r2
 8004732:	401d      	ands	r5, r3
 8004734:	421a      	tst	r2, r3
 8004736:	d027      	beq.n	8004788 <_printf_common+0x8c>
 8004738:	0023      	movs	r3, r4
 800473a:	3343      	adds	r3, #67	@ 0x43
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	1e5a      	subs	r2, r3, #1
 8004740:	4193      	sbcs	r3, r2
 8004742:	6822      	ldr	r2, [r4, #0]
 8004744:	0692      	lsls	r2, r2, #26
 8004746:	d430      	bmi.n	80047aa <_printf_common+0xae>
 8004748:	0022      	movs	r2, r4
 800474a:	9901      	ldr	r1, [sp, #4]
 800474c:	9800      	ldr	r0, [sp, #0]
 800474e:	9d08      	ldr	r5, [sp, #32]
 8004750:	3243      	adds	r2, #67	@ 0x43
 8004752:	47a8      	blx	r5
 8004754:	3001      	adds	r0, #1
 8004756:	d025      	beq.n	80047a4 <_printf_common+0xa8>
 8004758:	2206      	movs	r2, #6
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	2500      	movs	r5, #0
 800475e:	4013      	ands	r3, r2
 8004760:	2b04      	cmp	r3, #4
 8004762:	d105      	bne.n	8004770 <_printf_common+0x74>
 8004764:	6833      	ldr	r3, [r6, #0]
 8004766:	68e5      	ldr	r5, [r4, #12]
 8004768:	1aed      	subs	r5, r5, r3
 800476a:	43eb      	mvns	r3, r5
 800476c:	17db      	asrs	r3, r3, #31
 800476e:	401d      	ands	r5, r3
 8004770:	68a3      	ldr	r3, [r4, #8]
 8004772:	6922      	ldr	r2, [r4, #16]
 8004774:	4293      	cmp	r3, r2
 8004776:	dd01      	ble.n	800477c <_printf_common+0x80>
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	18ed      	adds	r5, r5, r3
 800477c:	2600      	movs	r6, #0
 800477e:	42b5      	cmp	r5, r6
 8004780:	d120      	bne.n	80047c4 <_printf_common+0xc8>
 8004782:	2000      	movs	r0, #0
 8004784:	e010      	b.n	80047a8 <_printf_common+0xac>
 8004786:	3501      	adds	r5, #1
 8004788:	68e3      	ldr	r3, [r4, #12]
 800478a:	6832      	ldr	r2, [r6, #0]
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	42ab      	cmp	r3, r5
 8004790:	ddd2      	ble.n	8004738 <_printf_common+0x3c>
 8004792:	0022      	movs	r2, r4
 8004794:	2301      	movs	r3, #1
 8004796:	9901      	ldr	r1, [sp, #4]
 8004798:	9800      	ldr	r0, [sp, #0]
 800479a:	9f08      	ldr	r7, [sp, #32]
 800479c:	3219      	adds	r2, #25
 800479e:	47b8      	blx	r7
 80047a0:	3001      	adds	r0, #1
 80047a2:	d1f0      	bne.n	8004786 <_printf_common+0x8a>
 80047a4:	2001      	movs	r0, #1
 80047a6:	4240      	negs	r0, r0
 80047a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047aa:	2030      	movs	r0, #48	@ 0x30
 80047ac:	18e1      	adds	r1, r4, r3
 80047ae:	3143      	adds	r1, #67	@ 0x43
 80047b0:	7008      	strb	r0, [r1, #0]
 80047b2:	0021      	movs	r1, r4
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	3145      	adds	r1, #69	@ 0x45
 80047b8:	7809      	ldrb	r1, [r1, #0]
 80047ba:	18a2      	adds	r2, r4, r2
 80047bc:	3243      	adds	r2, #67	@ 0x43
 80047be:	3302      	adds	r3, #2
 80047c0:	7011      	strb	r1, [r2, #0]
 80047c2:	e7c1      	b.n	8004748 <_printf_common+0x4c>
 80047c4:	0022      	movs	r2, r4
 80047c6:	2301      	movs	r3, #1
 80047c8:	9901      	ldr	r1, [sp, #4]
 80047ca:	9800      	ldr	r0, [sp, #0]
 80047cc:	9f08      	ldr	r7, [sp, #32]
 80047ce:	321a      	adds	r2, #26
 80047d0:	47b8      	blx	r7
 80047d2:	3001      	adds	r0, #1
 80047d4:	d0e6      	beq.n	80047a4 <_printf_common+0xa8>
 80047d6:	3601      	adds	r6, #1
 80047d8:	e7d1      	b.n	800477e <_printf_common+0x82>
	...

080047dc <_printf_i>:
 80047dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047de:	b08b      	sub	sp, #44	@ 0x2c
 80047e0:	9206      	str	r2, [sp, #24]
 80047e2:	000a      	movs	r2, r1
 80047e4:	3243      	adds	r2, #67	@ 0x43
 80047e6:	9307      	str	r3, [sp, #28]
 80047e8:	9005      	str	r0, [sp, #20]
 80047ea:	9203      	str	r2, [sp, #12]
 80047ec:	7e0a      	ldrb	r2, [r1, #24]
 80047ee:	000c      	movs	r4, r1
 80047f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80047f2:	2a78      	cmp	r2, #120	@ 0x78
 80047f4:	d809      	bhi.n	800480a <_printf_i+0x2e>
 80047f6:	2a62      	cmp	r2, #98	@ 0x62
 80047f8:	d80b      	bhi.n	8004812 <_printf_i+0x36>
 80047fa:	2a00      	cmp	r2, #0
 80047fc:	d100      	bne.n	8004800 <_printf_i+0x24>
 80047fe:	e0bc      	b.n	800497a <_printf_i+0x19e>
 8004800:	497b      	ldr	r1, [pc, #492]	@ (80049f0 <_printf_i+0x214>)
 8004802:	9104      	str	r1, [sp, #16]
 8004804:	2a58      	cmp	r2, #88	@ 0x58
 8004806:	d100      	bne.n	800480a <_printf_i+0x2e>
 8004808:	e090      	b.n	800492c <_printf_i+0x150>
 800480a:	0025      	movs	r5, r4
 800480c:	3542      	adds	r5, #66	@ 0x42
 800480e:	702a      	strb	r2, [r5, #0]
 8004810:	e022      	b.n	8004858 <_printf_i+0x7c>
 8004812:	0010      	movs	r0, r2
 8004814:	3863      	subs	r0, #99	@ 0x63
 8004816:	2815      	cmp	r0, #21
 8004818:	d8f7      	bhi.n	800480a <_printf_i+0x2e>
 800481a:	f7fb fc75 	bl	8000108 <__gnu_thumb1_case_shi>
 800481e:	0016      	.short	0x0016
 8004820:	fff6001f 	.word	0xfff6001f
 8004824:	fff6fff6 	.word	0xfff6fff6
 8004828:	001ffff6 	.word	0x001ffff6
 800482c:	fff6fff6 	.word	0xfff6fff6
 8004830:	fff6fff6 	.word	0xfff6fff6
 8004834:	003600a1 	.word	0x003600a1
 8004838:	fff60080 	.word	0xfff60080
 800483c:	00b2fff6 	.word	0x00b2fff6
 8004840:	0036fff6 	.word	0x0036fff6
 8004844:	fff6fff6 	.word	0xfff6fff6
 8004848:	0084      	.short	0x0084
 800484a:	0025      	movs	r5, r4
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	3542      	adds	r5, #66	@ 0x42
 8004850:	1d11      	adds	r1, r2, #4
 8004852:	6019      	str	r1, [r3, #0]
 8004854:	6813      	ldr	r3, [r2, #0]
 8004856:	702b      	strb	r3, [r5, #0]
 8004858:	2301      	movs	r3, #1
 800485a:	e0a0      	b.n	800499e <_printf_i+0x1c2>
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	6809      	ldr	r1, [r1, #0]
 8004860:	1d02      	adds	r2, r0, #4
 8004862:	060d      	lsls	r5, r1, #24
 8004864:	d50b      	bpl.n	800487e <_printf_i+0xa2>
 8004866:	6806      	ldr	r6, [r0, #0]
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	2e00      	cmp	r6, #0
 800486c:	da03      	bge.n	8004876 <_printf_i+0x9a>
 800486e:	232d      	movs	r3, #45	@ 0x2d
 8004870:	9a03      	ldr	r2, [sp, #12]
 8004872:	4276      	negs	r6, r6
 8004874:	7013      	strb	r3, [r2, #0]
 8004876:	4b5e      	ldr	r3, [pc, #376]	@ (80049f0 <_printf_i+0x214>)
 8004878:	270a      	movs	r7, #10
 800487a:	9304      	str	r3, [sp, #16]
 800487c:	e018      	b.n	80048b0 <_printf_i+0xd4>
 800487e:	6806      	ldr	r6, [r0, #0]
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	0649      	lsls	r1, r1, #25
 8004884:	d5f1      	bpl.n	800486a <_printf_i+0x8e>
 8004886:	b236      	sxth	r6, r6
 8004888:	e7ef      	b.n	800486a <_printf_i+0x8e>
 800488a:	6808      	ldr	r0, [r1, #0]
 800488c:	6819      	ldr	r1, [r3, #0]
 800488e:	c940      	ldmia	r1!, {r6}
 8004890:	0605      	lsls	r5, r0, #24
 8004892:	d402      	bmi.n	800489a <_printf_i+0xbe>
 8004894:	0640      	lsls	r0, r0, #25
 8004896:	d500      	bpl.n	800489a <_printf_i+0xbe>
 8004898:	b2b6      	uxth	r6, r6
 800489a:	6019      	str	r1, [r3, #0]
 800489c:	4b54      	ldr	r3, [pc, #336]	@ (80049f0 <_printf_i+0x214>)
 800489e:	270a      	movs	r7, #10
 80048a0:	9304      	str	r3, [sp, #16]
 80048a2:	2a6f      	cmp	r2, #111	@ 0x6f
 80048a4:	d100      	bne.n	80048a8 <_printf_i+0xcc>
 80048a6:	3f02      	subs	r7, #2
 80048a8:	0023      	movs	r3, r4
 80048aa:	2200      	movs	r2, #0
 80048ac:	3343      	adds	r3, #67	@ 0x43
 80048ae:	701a      	strb	r2, [r3, #0]
 80048b0:	6863      	ldr	r3, [r4, #4]
 80048b2:	60a3      	str	r3, [r4, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	db03      	blt.n	80048c0 <_printf_i+0xe4>
 80048b8:	2104      	movs	r1, #4
 80048ba:	6822      	ldr	r2, [r4, #0]
 80048bc:	438a      	bics	r2, r1
 80048be:	6022      	str	r2, [r4, #0]
 80048c0:	2e00      	cmp	r6, #0
 80048c2:	d102      	bne.n	80048ca <_printf_i+0xee>
 80048c4:	9d03      	ldr	r5, [sp, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00c      	beq.n	80048e4 <_printf_i+0x108>
 80048ca:	9d03      	ldr	r5, [sp, #12]
 80048cc:	0030      	movs	r0, r6
 80048ce:	0039      	movs	r1, r7
 80048d0:	f7fb fcaa 	bl	8000228 <__aeabi_uidivmod>
 80048d4:	9b04      	ldr	r3, [sp, #16]
 80048d6:	3d01      	subs	r5, #1
 80048d8:	5c5b      	ldrb	r3, [r3, r1]
 80048da:	702b      	strb	r3, [r5, #0]
 80048dc:	0033      	movs	r3, r6
 80048de:	0006      	movs	r6, r0
 80048e0:	429f      	cmp	r7, r3
 80048e2:	d9f3      	bls.n	80048cc <_printf_i+0xf0>
 80048e4:	2f08      	cmp	r7, #8
 80048e6:	d109      	bne.n	80048fc <_printf_i+0x120>
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	07db      	lsls	r3, r3, #31
 80048ec:	d506      	bpl.n	80048fc <_printf_i+0x120>
 80048ee:	6862      	ldr	r2, [r4, #4]
 80048f0:	6923      	ldr	r3, [r4, #16]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	dc02      	bgt.n	80048fc <_printf_i+0x120>
 80048f6:	2330      	movs	r3, #48	@ 0x30
 80048f8:	3d01      	subs	r5, #1
 80048fa:	702b      	strb	r3, [r5, #0]
 80048fc:	9b03      	ldr	r3, [sp, #12]
 80048fe:	1b5b      	subs	r3, r3, r5
 8004900:	6123      	str	r3, [r4, #16]
 8004902:	9b07      	ldr	r3, [sp, #28]
 8004904:	0021      	movs	r1, r4
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	9805      	ldr	r0, [sp, #20]
 800490a:	9b06      	ldr	r3, [sp, #24]
 800490c:	aa09      	add	r2, sp, #36	@ 0x24
 800490e:	f7ff fef5 	bl	80046fc <_printf_common>
 8004912:	3001      	adds	r0, #1
 8004914:	d148      	bne.n	80049a8 <_printf_i+0x1cc>
 8004916:	2001      	movs	r0, #1
 8004918:	4240      	negs	r0, r0
 800491a:	b00b      	add	sp, #44	@ 0x2c
 800491c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800491e:	2220      	movs	r2, #32
 8004920:	6809      	ldr	r1, [r1, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	6022      	str	r2, [r4, #0]
 8004926:	2278      	movs	r2, #120	@ 0x78
 8004928:	4932      	ldr	r1, [pc, #200]	@ (80049f4 <_printf_i+0x218>)
 800492a:	9104      	str	r1, [sp, #16]
 800492c:	0021      	movs	r1, r4
 800492e:	3145      	adds	r1, #69	@ 0x45
 8004930:	700a      	strb	r2, [r1, #0]
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	6822      	ldr	r2, [r4, #0]
 8004936:	c940      	ldmia	r1!, {r6}
 8004938:	0610      	lsls	r0, r2, #24
 800493a:	d402      	bmi.n	8004942 <_printf_i+0x166>
 800493c:	0650      	lsls	r0, r2, #25
 800493e:	d500      	bpl.n	8004942 <_printf_i+0x166>
 8004940:	b2b6      	uxth	r6, r6
 8004942:	6019      	str	r1, [r3, #0]
 8004944:	07d3      	lsls	r3, r2, #31
 8004946:	d502      	bpl.n	800494e <_printf_i+0x172>
 8004948:	2320      	movs	r3, #32
 800494a:	4313      	orrs	r3, r2
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	2e00      	cmp	r6, #0
 8004950:	d001      	beq.n	8004956 <_printf_i+0x17a>
 8004952:	2710      	movs	r7, #16
 8004954:	e7a8      	b.n	80048a8 <_printf_i+0xcc>
 8004956:	2220      	movs	r2, #32
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	4393      	bics	r3, r2
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	e7f8      	b.n	8004952 <_printf_i+0x176>
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	680d      	ldr	r5, [r1, #0]
 8004964:	1d10      	adds	r0, r2, #4
 8004966:	6949      	ldr	r1, [r1, #20]
 8004968:	6018      	str	r0, [r3, #0]
 800496a:	6813      	ldr	r3, [r2, #0]
 800496c:	062e      	lsls	r6, r5, #24
 800496e:	d501      	bpl.n	8004974 <_printf_i+0x198>
 8004970:	6019      	str	r1, [r3, #0]
 8004972:	e002      	b.n	800497a <_printf_i+0x19e>
 8004974:	066d      	lsls	r5, r5, #25
 8004976:	d5fb      	bpl.n	8004970 <_printf_i+0x194>
 8004978:	8019      	strh	r1, [r3, #0]
 800497a:	2300      	movs	r3, #0
 800497c:	9d03      	ldr	r5, [sp, #12]
 800497e:	6123      	str	r3, [r4, #16]
 8004980:	e7bf      	b.n	8004902 <_printf_i+0x126>
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	1d11      	adds	r1, r2, #4
 8004986:	6019      	str	r1, [r3, #0]
 8004988:	6815      	ldr	r5, [r2, #0]
 800498a:	2100      	movs	r1, #0
 800498c:	0028      	movs	r0, r5
 800498e:	6862      	ldr	r2, [r4, #4]
 8004990:	f000 f986 	bl	8004ca0 <memchr>
 8004994:	2800      	cmp	r0, #0
 8004996:	d001      	beq.n	800499c <_printf_i+0x1c0>
 8004998:	1b40      	subs	r0, r0, r5
 800499a:	6060      	str	r0, [r4, #4]
 800499c:	6863      	ldr	r3, [r4, #4]
 800499e:	6123      	str	r3, [r4, #16]
 80049a0:	2300      	movs	r3, #0
 80049a2:	9a03      	ldr	r2, [sp, #12]
 80049a4:	7013      	strb	r3, [r2, #0]
 80049a6:	e7ac      	b.n	8004902 <_printf_i+0x126>
 80049a8:	002a      	movs	r2, r5
 80049aa:	6923      	ldr	r3, [r4, #16]
 80049ac:	9906      	ldr	r1, [sp, #24]
 80049ae:	9805      	ldr	r0, [sp, #20]
 80049b0:	9d07      	ldr	r5, [sp, #28]
 80049b2:	47a8      	blx	r5
 80049b4:	3001      	adds	r0, #1
 80049b6:	d0ae      	beq.n	8004916 <_printf_i+0x13a>
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	079b      	lsls	r3, r3, #30
 80049bc:	d415      	bmi.n	80049ea <_printf_i+0x20e>
 80049be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049c0:	68e0      	ldr	r0, [r4, #12]
 80049c2:	4298      	cmp	r0, r3
 80049c4:	daa9      	bge.n	800491a <_printf_i+0x13e>
 80049c6:	0018      	movs	r0, r3
 80049c8:	e7a7      	b.n	800491a <_printf_i+0x13e>
 80049ca:	0022      	movs	r2, r4
 80049cc:	2301      	movs	r3, #1
 80049ce:	9906      	ldr	r1, [sp, #24]
 80049d0:	9805      	ldr	r0, [sp, #20]
 80049d2:	9e07      	ldr	r6, [sp, #28]
 80049d4:	3219      	adds	r2, #25
 80049d6:	47b0      	blx	r6
 80049d8:	3001      	adds	r0, #1
 80049da:	d09c      	beq.n	8004916 <_printf_i+0x13a>
 80049dc:	3501      	adds	r5, #1
 80049de:	68e3      	ldr	r3, [r4, #12]
 80049e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	42ab      	cmp	r3, r5
 80049e6:	dcf0      	bgt.n	80049ca <_printf_i+0x1ee>
 80049e8:	e7e9      	b.n	80049be <_printf_i+0x1e2>
 80049ea:	2500      	movs	r5, #0
 80049ec:	e7f7      	b.n	80049de <_printf_i+0x202>
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	08004df1 	.word	0x08004df1
 80049f4:	08004e02 	.word	0x08004e02

080049f8 <__sflush_r>:
 80049f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049fa:	220c      	movs	r2, #12
 80049fc:	5e8b      	ldrsh	r3, [r1, r2]
 80049fe:	0005      	movs	r5, r0
 8004a00:	000c      	movs	r4, r1
 8004a02:	071a      	lsls	r2, r3, #28
 8004a04:	d456      	bmi.n	8004ab4 <__sflush_r+0xbc>
 8004a06:	684a      	ldr	r2, [r1, #4]
 8004a08:	2a00      	cmp	r2, #0
 8004a0a:	dc02      	bgt.n	8004a12 <__sflush_r+0x1a>
 8004a0c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004a0e:	2a00      	cmp	r2, #0
 8004a10:	dd4e      	ble.n	8004ab0 <__sflush_r+0xb8>
 8004a12:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004a14:	2f00      	cmp	r7, #0
 8004a16:	d04b      	beq.n	8004ab0 <__sflush_r+0xb8>
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2080      	movs	r0, #128	@ 0x80
 8004a1c:	682e      	ldr	r6, [r5, #0]
 8004a1e:	602a      	str	r2, [r5, #0]
 8004a20:	001a      	movs	r2, r3
 8004a22:	0140      	lsls	r0, r0, #5
 8004a24:	6a21      	ldr	r1, [r4, #32]
 8004a26:	4002      	ands	r2, r0
 8004a28:	4203      	tst	r3, r0
 8004a2a:	d033      	beq.n	8004a94 <__sflush_r+0x9c>
 8004a2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	075b      	lsls	r3, r3, #29
 8004a32:	d506      	bpl.n	8004a42 <__sflush_r+0x4a>
 8004a34:	6863      	ldr	r3, [r4, #4]
 8004a36:	1ad2      	subs	r2, r2, r3
 8004a38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <__sflush_r+0x4a>
 8004a3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a40:	1ad2      	subs	r2, r2, r3
 8004a42:	2300      	movs	r3, #0
 8004a44:	0028      	movs	r0, r5
 8004a46:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004a48:	6a21      	ldr	r1, [r4, #32]
 8004a4a:	47b8      	blx	r7
 8004a4c:	89a2      	ldrh	r2, [r4, #12]
 8004a4e:	1c43      	adds	r3, r0, #1
 8004a50:	d106      	bne.n	8004a60 <__sflush_r+0x68>
 8004a52:	6829      	ldr	r1, [r5, #0]
 8004a54:	291d      	cmp	r1, #29
 8004a56:	d846      	bhi.n	8004ae6 <__sflush_r+0xee>
 8004a58:	4b29      	ldr	r3, [pc, #164]	@ (8004b00 <__sflush_r+0x108>)
 8004a5a:	410b      	asrs	r3, r1
 8004a5c:	07db      	lsls	r3, r3, #31
 8004a5e:	d442      	bmi.n	8004ae6 <__sflush_r+0xee>
 8004a60:	2300      	movs	r3, #0
 8004a62:	6063      	str	r3, [r4, #4]
 8004a64:	6923      	ldr	r3, [r4, #16]
 8004a66:	6023      	str	r3, [r4, #0]
 8004a68:	04d2      	lsls	r2, r2, #19
 8004a6a:	d505      	bpl.n	8004a78 <__sflush_r+0x80>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d102      	bne.n	8004a76 <__sflush_r+0x7e>
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d100      	bne.n	8004a78 <__sflush_r+0x80>
 8004a76:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a7a:	602e      	str	r6, [r5, #0]
 8004a7c:	2900      	cmp	r1, #0
 8004a7e:	d017      	beq.n	8004ab0 <__sflush_r+0xb8>
 8004a80:	0023      	movs	r3, r4
 8004a82:	3344      	adds	r3, #68	@ 0x44
 8004a84:	4299      	cmp	r1, r3
 8004a86:	d002      	beq.n	8004a8e <__sflush_r+0x96>
 8004a88:	0028      	movs	r0, r5
 8004a8a:	f7ff fbf7 	bl	800427c <_free_r>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a92:	e00d      	b.n	8004ab0 <__sflush_r+0xb8>
 8004a94:	2301      	movs	r3, #1
 8004a96:	0028      	movs	r0, r5
 8004a98:	47b8      	blx	r7
 8004a9a:	0002      	movs	r2, r0
 8004a9c:	1c43      	adds	r3, r0, #1
 8004a9e:	d1c6      	bne.n	8004a2e <__sflush_r+0x36>
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0c3      	beq.n	8004a2e <__sflush_r+0x36>
 8004aa6:	2b1d      	cmp	r3, #29
 8004aa8:	d001      	beq.n	8004aae <__sflush_r+0xb6>
 8004aaa:	2b16      	cmp	r3, #22
 8004aac:	d11a      	bne.n	8004ae4 <__sflush_r+0xec>
 8004aae:	602e      	str	r6, [r5, #0]
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	e01e      	b.n	8004af2 <__sflush_r+0xfa>
 8004ab4:	690e      	ldr	r6, [r1, #16]
 8004ab6:	2e00      	cmp	r6, #0
 8004ab8:	d0fa      	beq.n	8004ab0 <__sflush_r+0xb8>
 8004aba:	680f      	ldr	r7, [r1, #0]
 8004abc:	600e      	str	r6, [r1, #0]
 8004abe:	1bba      	subs	r2, r7, r6
 8004ac0:	9201      	str	r2, [sp, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	079b      	lsls	r3, r3, #30
 8004ac6:	d100      	bne.n	8004aca <__sflush_r+0xd2>
 8004ac8:	694a      	ldr	r2, [r1, #20]
 8004aca:	60a2      	str	r2, [r4, #8]
 8004acc:	9b01      	ldr	r3, [sp, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	ddee      	ble.n	8004ab0 <__sflush_r+0xb8>
 8004ad2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004ad4:	0032      	movs	r2, r6
 8004ad6:	001f      	movs	r7, r3
 8004ad8:	0028      	movs	r0, r5
 8004ada:	9b01      	ldr	r3, [sp, #4]
 8004adc:	6a21      	ldr	r1, [r4, #32]
 8004ade:	47b8      	blx	r7
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	dc07      	bgt.n	8004af4 <__sflush_r+0xfc>
 8004ae4:	89a2      	ldrh	r2, [r4, #12]
 8004ae6:	2340      	movs	r3, #64	@ 0x40
 8004ae8:	2001      	movs	r0, #1
 8004aea:	4313      	orrs	r3, r2
 8004aec:	b21b      	sxth	r3, r3
 8004aee:	81a3      	strh	r3, [r4, #12]
 8004af0:	4240      	negs	r0, r0
 8004af2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004af4:	9b01      	ldr	r3, [sp, #4]
 8004af6:	1836      	adds	r6, r6, r0
 8004af8:	1a1b      	subs	r3, r3, r0
 8004afa:	9301      	str	r3, [sp, #4]
 8004afc:	e7e6      	b.n	8004acc <__sflush_r+0xd4>
 8004afe:	46c0      	nop			@ (mov r8, r8)
 8004b00:	dfbffffe 	.word	0xdfbffffe

08004b04 <_fflush_r>:
 8004b04:	690b      	ldr	r3, [r1, #16]
 8004b06:	b570      	push	{r4, r5, r6, lr}
 8004b08:	0005      	movs	r5, r0
 8004b0a:	000c      	movs	r4, r1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <_fflush_r+0x12>
 8004b10:	2500      	movs	r5, #0
 8004b12:	0028      	movs	r0, r5
 8004b14:	bd70      	pop	{r4, r5, r6, pc}
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d004      	beq.n	8004b24 <_fflush_r+0x20>
 8004b1a:	6a03      	ldr	r3, [r0, #32]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <_fflush_r+0x20>
 8004b20:	f7ff f998 	bl	8003e54 <__sinit>
 8004b24:	220c      	movs	r2, #12
 8004b26:	5ea3      	ldrsh	r3, [r4, r2]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f1      	beq.n	8004b10 <_fflush_r+0xc>
 8004b2c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b2e:	07d2      	lsls	r2, r2, #31
 8004b30:	d404      	bmi.n	8004b3c <_fflush_r+0x38>
 8004b32:	059b      	lsls	r3, r3, #22
 8004b34:	d402      	bmi.n	8004b3c <_fflush_r+0x38>
 8004b36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b38:	f7ff fb9d 	bl	8004276 <__retarget_lock_acquire_recursive>
 8004b3c:	0028      	movs	r0, r5
 8004b3e:	0021      	movs	r1, r4
 8004b40:	f7ff ff5a 	bl	80049f8 <__sflush_r>
 8004b44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b46:	0005      	movs	r5, r0
 8004b48:	07db      	lsls	r3, r3, #31
 8004b4a:	d4e2      	bmi.n	8004b12 <_fflush_r+0xe>
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	059b      	lsls	r3, r3, #22
 8004b50:	d4df      	bmi.n	8004b12 <_fflush_r+0xe>
 8004b52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b54:	f7ff fb90 	bl	8004278 <__retarget_lock_release_recursive>
 8004b58:	e7db      	b.n	8004b12 <_fflush_r+0xe>
	...

08004b5c <__swhatbuf_r>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	000e      	movs	r6, r1
 8004b60:	001d      	movs	r5, r3
 8004b62:	230e      	movs	r3, #14
 8004b64:	5ec9      	ldrsh	r1, [r1, r3]
 8004b66:	0014      	movs	r4, r2
 8004b68:	b096      	sub	sp, #88	@ 0x58
 8004b6a:	2900      	cmp	r1, #0
 8004b6c:	da0c      	bge.n	8004b88 <__swhatbuf_r+0x2c>
 8004b6e:	89b2      	ldrh	r2, [r6, #12]
 8004b70:	2380      	movs	r3, #128	@ 0x80
 8004b72:	0011      	movs	r1, r2
 8004b74:	4019      	ands	r1, r3
 8004b76:	421a      	tst	r2, r3
 8004b78:	d114      	bne.n	8004ba4 <__swhatbuf_r+0x48>
 8004b7a:	2380      	movs	r3, #128	@ 0x80
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	2000      	movs	r0, #0
 8004b80:	6029      	str	r1, [r5, #0]
 8004b82:	6023      	str	r3, [r4, #0]
 8004b84:	b016      	add	sp, #88	@ 0x58
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
 8004b88:	466a      	mov	r2, sp
 8004b8a:	f000 f853 	bl	8004c34 <_fstat_r>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	dbed      	blt.n	8004b6e <__swhatbuf_r+0x12>
 8004b92:	23f0      	movs	r3, #240	@ 0xf0
 8004b94:	9901      	ldr	r1, [sp, #4]
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	4019      	ands	r1, r3
 8004b9a:	4b04      	ldr	r3, [pc, #16]	@ (8004bac <__swhatbuf_r+0x50>)
 8004b9c:	18c9      	adds	r1, r1, r3
 8004b9e:	424b      	negs	r3, r1
 8004ba0:	4159      	adcs	r1, r3
 8004ba2:	e7ea      	b.n	8004b7a <__swhatbuf_r+0x1e>
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	2340      	movs	r3, #64	@ 0x40
 8004ba8:	e7e9      	b.n	8004b7e <__swhatbuf_r+0x22>
 8004baa:	46c0      	nop			@ (mov r8, r8)
 8004bac:	ffffe000 	.word	0xffffe000

08004bb0 <__smakebuf_r>:
 8004bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bb2:	2602      	movs	r6, #2
 8004bb4:	898b      	ldrh	r3, [r1, #12]
 8004bb6:	0005      	movs	r5, r0
 8004bb8:	000c      	movs	r4, r1
 8004bba:	b085      	sub	sp, #20
 8004bbc:	4233      	tst	r3, r6
 8004bbe:	d007      	beq.n	8004bd0 <__smakebuf_r+0x20>
 8004bc0:	0023      	movs	r3, r4
 8004bc2:	3347      	adds	r3, #71	@ 0x47
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	6123      	str	r3, [r4, #16]
 8004bc8:	2301      	movs	r3, #1
 8004bca:	6163      	str	r3, [r4, #20]
 8004bcc:	b005      	add	sp, #20
 8004bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd0:	ab03      	add	r3, sp, #12
 8004bd2:	aa02      	add	r2, sp, #8
 8004bd4:	f7ff ffc2 	bl	8004b5c <__swhatbuf_r>
 8004bd8:	9f02      	ldr	r7, [sp, #8]
 8004bda:	9001      	str	r0, [sp, #4]
 8004bdc:	0039      	movs	r1, r7
 8004bde:	0028      	movs	r0, r5
 8004be0:	f7ff fbb8 	bl	8004354 <_malloc_r>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d108      	bne.n	8004bfa <__smakebuf_r+0x4a>
 8004be8:	220c      	movs	r2, #12
 8004bea:	5ea3      	ldrsh	r3, [r4, r2]
 8004bec:	059a      	lsls	r2, r3, #22
 8004bee:	d4ed      	bmi.n	8004bcc <__smakebuf_r+0x1c>
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	4393      	bics	r3, r2
 8004bf4:	431e      	orrs	r6, r3
 8004bf6:	81a6      	strh	r6, [r4, #12]
 8004bf8:	e7e2      	b.n	8004bc0 <__smakebuf_r+0x10>
 8004bfa:	2380      	movs	r3, #128	@ 0x80
 8004bfc:	89a2      	ldrh	r2, [r4, #12]
 8004bfe:	6020      	str	r0, [r4, #0]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	81a3      	strh	r3, [r4, #12]
 8004c04:	9b03      	ldr	r3, [sp, #12]
 8004c06:	6120      	str	r0, [r4, #16]
 8004c08:	6167      	str	r7, [r4, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00c      	beq.n	8004c28 <__smakebuf_r+0x78>
 8004c0e:	0028      	movs	r0, r5
 8004c10:	230e      	movs	r3, #14
 8004c12:	5ee1      	ldrsh	r1, [r4, r3]
 8004c14:	f000 f820 	bl	8004c58 <_isatty_r>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	d005      	beq.n	8004c28 <__smakebuf_r+0x78>
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	89a2      	ldrh	r2, [r4, #12]
 8004c20:	439a      	bics	r2, r3
 8004c22:	3b02      	subs	r3, #2
 8004c24:	4313      	orrs	r3, r2
 8004c26:	81a3      	strh	r3, [r4, #12]
 8004c28:	89a3      	ldrh	r3, [r4, #12]
 8004c2a:	9a01      	ldr	r2, [sp, #4]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	81a3      	strh	r3, [r4, #12]
 8004c30:	e7cc      	b.n	8004bcc <__smakebuf_r+0x1c>
	...

08004c34 <_fstat_r>:
 8004c34:	2300      	movs	r3, #0
 8004c36:	b570      	push	{r4, r5, r6, lr}
 8004c38:	4d06      	ldr	r5, [pc, #24]	@ (8004c54 <_fstat_r+0x20>)
 8004c3a:	0004      	movs	r4, r0
 8004c3c:	0008      	movs	r0, r1
 8004c3e:	0011      	movs	r1, r2
 8004c40:	602b      	str	r3, [r5, #0]
 8004c42:	f7fc faab 	bl	800119c <_fstat>
 8004c46:	1c43      	adds	r3, r0, #1
 8004c48:	d103      	bne.n	8004c52 <_fstat_r+0x1e>
 8004c4a:	682b      	ldr	r3, [r5, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d000      	beq.n	8004c52 <_fstat_r+0x1e>
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	bd70      	pop	{r4, r5, r6, pc}
 8004c54:	200003b4 	.word	0x200003b4

08004c58 <_isatty_r>:
 8004c58:	2300      	movs	r3, #0
 8004c5a:	b570      	push	{r4, r5, r6, lr}
 8004c5c:	4d06      	ldr	r5, [pc, #24]	@ (8004c78 <_isatty_r+0x20>)
 8004c5e:	0004      	movs	r4, r0
 8004c60:	0008      	movs	r0, r1
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	f7fc faa8 	bl	80011b8 <_isatty>
 8004c68:	1c43      	adds	r3, r0, #1
 8004c6a:	d103      	bne.n	8004c74 <_isatty_r+0x1c>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d000      	beq.n	8004c74 <_isatty_r+0x1c>
 8004c72:	6023      	str	r3, [r4, #0]
 8004c74:	bd70      	pop	{r4, r5, r6, pc}
 8004c76:	46c0      	nop			@ (mov r8, r8)
 8004c78:	200003b4 	.word	0x200003b4

08004c7c <_sbrk_r>:
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	b570      	push	{r4, r5, r6, lr}
 8004c80:	4d06      	ldr	r5, [pc, #24]	@ (8004c9c <_sbrk_r+0x20>)
 8004c82:	0004      	movs	r4, r0
 8004c84:	0008      	movs	r0, r1
 8004c86:	602b      	str	r3, [r5, #0]
 8004c88:	f7fc faaa 	bl	80011e0 <_sbrk>
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	d103      	bne.n	8004c98 <_sbrk_r+0x1c>
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d000      	beq.n	8004c98 <_sbrk_r+0x1c>
 8004c96:	6023      	str	r3, [r4, #0]
 8004c98:	bd70      	pop	{r4, r5, r6, pc}
 8004c9a:	46c0      	nop			@ (mov r8, r8)
 8004c9c:	200003b4 	.word	0x200003b4

08004ca0 <memchr>:
 8004ca0:	b2c9      	uxtb	r1, r1
 8004ca2:	1882      	adds	r2, r0, r2
 8004ca4:	4290      	cmp	r0, r2
 8004ca6:	d101      	bne.n	8004cac <memchr+0xc>
 8004ca8:	2000      	movs	r0, #0
 8004caa:	4770      	bx	lr
 8004cac:	7803      	ldrb	r3, [r0, #0]
 8004cae:	428b      	cmp	r3, r1
 8004cb0:	d0fb      	beq.n	8004caa <memchr+0xa>
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	e7f6      	b.n	8004ca4 <memchr+0x4>
	...

08004cb8 <_init>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cbe:	bc08      	pop	{r3}
 8004cc0:	469e      	mov	lr, r3
 8004cc2:	4770      	bx	lr

08004cc4 <_fini>:
 8004cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc6:	46c0      	nop			@ (mov r8, r8)
 8004cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cca:	bc08      	pop	{r3}
 8004ccc:	469e      	mov	lr, r3
 8004cce:	4770      	bx	lr
