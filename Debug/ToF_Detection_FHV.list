
ToF_Detection_FHV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005484  08005484  00006484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055a0  080055a0  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080055a0  080055a0  000065a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055a8  080055a8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055a8  080055a8  000065a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055ac  080055ac  000065ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080055b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000068  08005618  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08005618  000073f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d203  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002092  00000000  00000000  00014293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  00016328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000978  00000000  00000000  00016f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012fba  00000000  00000000  000178e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010407  00000000  00000000  0002a89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ad50  00000000  00000000  0003aca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a59f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003374  00000000  00000000  000a5a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000a8da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800546c 	.word	0x0800546c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800546c 	.word	0x0800546c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8d8 	bl	80004a4 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8d3 	bl	80004a4 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzsi2>:
 8000468:	211c      	movs	r1, #28
 800046a:	2301      	movs	r3, #1
 800046c:	041b      	lsls	r3, r3, #16
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0xe>
 8000472:	0c00      	lsrs	r0, r0, #16
 8000474:	3910      	subs	r1, #16
 8000476:	0a1b      	lsrs	r3, r3, #8
 8000478:	4298      	cmp	r0, r3
 800047a:	d301      	bcc.n	8000480 <__clzsi2+0x18>
 800047c:	0a00      	lsrs	r0, r0, #8
 800047e:	3908      	subs	r1, #8
 8000480:	091b      	lsrs	r3, r3, #4
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0x22>
 8000486:	0900      	lsrs	r0, r0, #4
 8000488:	3904      	subs	r1, #4
 800048a:	a202      	add	r2, pc, #8	@ (adr r2, 8000494 <__clzsi2+0x2c>)
 800048c:	5c10      	ldrb	r0, [r2, r0]
 800048e:	1840      	adds	r0, r0, r1
 8000490:	4770      	bx	lr
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	02020304 	.word	0x02020304
 8000498:	01010101 	.word	0x01010101
	...

080004a4 <__clzdi2>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	2900      	cmp	r1, #0
 80004a8:	d103      	bne.n	80004b2 <__clzdi2+0xe>
 80004aa:	f7ff ffdd 	bl	8000468 <__clzsi2>
 80004ae:	3020      	adds	r0, #32
 80004b0:	e002      	b.n	80004b8 <__clzdi2+0x14>
 80004b2:	0008      	movs	r0, r1
 80004b4:	f7ff ffd8 	bl	8000468 <__clzsi2>
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	0002      	movs	r2, r0
 80004c4:	1dbb      	adds	r3, r7, #6
 80004c6:	801a      	strh	r2, [r3, #0]
 80004c8:	1d7b      	adds	r3, r7, #5
 80004ca:	1c0a      	adds	r2, r1, #0
 80004cc:	701a      	strb	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80004ce:	240f      	movs	r4, #15
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 80004d6:	1d7b      	adds	r3, r7, #5
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	085b      	lsrs	r3, r3, #1
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	1dbb      	adds	r3, r7, #6
 80004e0:	881b      	ldrh	r3, [r3, #0]
 80004e2:	2101      	movs	r1, #1
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fd95 	bl	8001014 <VL53L1_WrByte>
 80004ea:	0003      	movs	r3, r0
 80004ec:	0019      	movs	r1, r3
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	193a      	adds	r2, r7, r4
 80004f2:	7812      	ldrb	r2, [r2, #0]
 80004f4:	430a      	orrs	r2, r1
 80004f6:	701a      	strb	r2, [r3, #0]
	return status;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b25b      	sxtb	r3, r3
}
 80004fe:	0018      	movs	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	b005      	add	sp, #20
 8000504:	bd90      	pop	{r4, r7, pc}
	...

08000508 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	0002      	movs	r2, r0
 8000510:	1dbb      	adds	r3, r7, #6
 8000512:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8000514:	230f      	movs	r3, #15
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 800051c:	210e      	movs	r1, #14
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000524:	187b      	adds	r3, r7, r1
 8000526:	222d      	movs	r2, #45	@ 0x2d
 8000528:	701a      	strb	r2, [r3, #0]
 800052a:	e01a      	b.n	8000562 <VL53L1X_SensorInit+0x5a>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 800052c:	240e      	movs	r4, #14
 800052e:	193b      	adds	r3, r7, r4
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	b299      	uxth	r1, r3
 8000534:	193b      	adds	r3, r7, r4
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	3b2d      	subs	r3, #45	@ 0x2d
 800053a:	4a3e      	ldr	r2, [pc, #248]	@ (8000634 <VL53L1X_SensorInit+0x12c>)
 800053c:	5cd2      	ldrb	r2, [r2, r3]
 800053e:	1dbb      	adds	r3, r7, #6
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fd66 	bl	8001014 <VL53L1_WrByte>
 8000548:	0003      	movs	r3, r0
 800054a:	0019      	movs	r1, r3
 800054c:	220f      	movs	r2, #15
 800054e:	18bb      	adds	r3, r7, r2
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	7812      	ldrb	r2, [r2, #0]
 8000554:	430a      	orrs	r2, r1
 8000556:	701a      	strb	r2, [r3, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000558:	193b      	adds	r3, r7, r4
 800055a:	781a      	ldrb	r2, [r3, #0]
 800055c:	193b      	adds	r3, r7, r4
 800055e:	3201      	adds	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
 8000562:	230e      	movs	r3, #14
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b87      	cmp	r3, #135	@ 0x87
 800056a:	d9df      	bls.n	800052c <VL53L1X_SensorInit+0x24>
	}
	status |= VL53L1X_StartRanging(dev);
 800056c:	1dbb      	adds	r3, r7, #6
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	0018      	movs	r0, r3
 8000572:	f000 f8b3 	bl	80006dc <VL53L1X_StartRanging>
 8000576:	0003      	movs	r3, r0
 8000578:	0019      	movs	r1, r3
 800057a:	220f      	movs	r2, #15
 800057c:	18bb      	adds	r3, r7, r2
 800057e:	18ba      	adds	r2, r7, r2
 8000580:	7812      	ldrb	r2, [r2, #0]
 8000582:	430a      	orrs	r2, r1
 8000584:	701a      	strb	r2, [r3, #0]
	tmp  = 0;
 8000586:	230d      	movs	r3, #13
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 800058e:	e00f      	b.n	80005b0 <VL53L1X_SensorInit+0xa8>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8000590:	230d      	movs	r3, #13
 8000592:	18fa      	adds	r2, r7, r3
 8000594:	1dbb      	adds	r3, r7, #6
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	0011      	movs	r1, r2
 800059a:	0018      	movs	r0, r3
 800059c:	f000 f8dc 	bl	8000758 <VL53L1X_CheckForDataReady>
 80005a0:	0003      	movs	r3, r0
 80005a2:	0019      	movs	r1, r3
 80005a4:	220f      	movs	r2, #15
 80005a6:	18bb      	adds	r3, r7, r2
 80005a8:	18ba      	adds	r2, r7, r2
 80005aa:	7812      	ldrb	r2, [r2, #0]
 80005ac:	430a      	orrs	r2, r1
 80005ae:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 80005b0:	230d      	movs	r3, #13
 80005b2:	18fb      	adds	r3, r7, r3
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0ea      	beq.n	8000590 <VL53L1X_SensorInit+0x88>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 80005ba:	1dbb      	adds	r3, r7, #6
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	0018      	movs	r0, r3
 80005c0:	f000 f83a 	bl	8000638 <VL53L1X_ClearInterrupt>
 80005c4:	0003      	movs	r3, r0
 80005c6:	0019      	movs	r1, r3
 80005c8:	240f      	movs	r4, #15
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	193a      	adds	r2, r7, r4
 80005ce:	7812      	ldrb	r2, [r2, #0]
 80005d0:	430a      	orrs	r2, r1
 80005d2:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_StopRanging(dev);
 80005d4:	1dbb      	adds	r3, r7, #6
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	0018      	movs	r0, r3
 80005da:	f000 f89e 	bl	800071a <VL53L1X_StopRanging>
 80005de:	0003      	movs	r3, r0
 80005e0:	0019      	movs	r1, r3
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	193a      	adds	r2, r7, r4
 80005e6:	7812      	ldrb	r2, [r2, #0]
 80005e8:	430a      	orrs	r2, r1
 80005ea:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 80005ec:	1dbb      	adds	r3, r7, #6
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	2209      	movs	r2, #9
 80005f2:	2108      	movs	r1, #8
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 fd0d 	bl	8001014 <VL53L1_WrByte>
 80005fa:	0003      	movs	r3, r0
 80005fc:	0019      	movs	r1, r3
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	193a      	adds	r2, r7, r4
 8000602:	7812      	ldrb	r2, [r2, #0]
 8000604:	430a      	orrs	r2, r1
 8000606:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8000608:	1dbb      	adds	r3, r7, #6
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	210b      	movs	r1, #11
 8000610:	0018      	movs	r0, r3
 8000612:	f000 fcff 	bl	8001014 <VL53L1_WrByte>
 8000616:	0003      	movs	r3, r0
 8000618:	0019      	movs	r1, r3
 800061a:	193b      	adds	r3, r7, r4
 800061c:	193a      	adds	r2, r7, r4
 800061e:	7812      	ldrb	r2, [r2, #0]
 8000620:	430a      	orrs	r2, r1
 8000622:	701a      	strb	r2, [r3, #0]
	return status;
 8000624:	193b      	adds	r3, r7, r4
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b25b      	sxtb	r3, r3
}
 800062a:	0018      	movs	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	b005      	add	sp, #20
 8000630:	bd90      	pop	{r4, r7, pc}
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	080054a4 	.word	0x080054a4

08000638 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	0002      	movs	r2, r0
 8000640:	1dbb      	adds	r3, r7, #6
 8000642:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8000644:	240f      	movs	r4, #15
 8000646:	193b      	adds	r3, r7, r4
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 800064c:	1dbb      	adds	r3, r7, #6
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	2201      	movs	r2, #1
 8000652:	2186      	movs	r1, #134	@ 0x86
 8000654:	0018      	movs	r0, r3
 8000656:	f000 fcdd 	bl	8001014 <VL53L1_WrByte>
 800065a:	0003      	movs	r3, r0
 800065c:	0019      	movs	r1, r3
 800065e:	193b      	adds	r3, r7, r4
 8000660:	193a      	adds	r2, r7, r4
 8000662:	7812      	ldrb	r2, [r2, #0]
 8000664:	430a      	orrs	r2, r1
 8000666:	701a      	strb	r2, [r3, #0]
	return status;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b25b      	sxtb	r3, r3
}
 800066e:	0018      	movs	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	b005      	add	sp, #20
 8000674:	bd90      	pop	{r4, r7, pc}

08000676 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8000676:	b5b0      	push	{r4, r5, r7, lr}
 8000678:	b084      	sub	sp, #16
 800067a:	af00      	add	r7, sp, #0
 800067c:	0002      	movs	r2, r0
 800067e:	6039      	str	r1, [r7, #0]
 8000680:	1dbb      	adds	r3, r7, #6
 8000682:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8000684:	240f      	movs	r4, #15
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 800068c:	250e      	movs	r5, #14
 800068e:	197a      	adds	r2, r7, r5
 8000690:	1dbb      	adds	r3, r7, #6
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	2130      	movs	r1, #48	@ 0x30
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fd20 	bl	80010dc <VL53L1_RdByte>
 800069c:	0003      	movs	r3, r0
 800069e:	0019      	movs	r1, r3
 80006a0:	0020      	movs	r0, r4
 80006a2:	183b      	adds	r3, r7, r0
 80006a4:	183a      	adds	r2, r7, r0
 80006a6:	7812      	ldrb	r2, [r2, #0]
 80006a8:	430a      	orrs	r2, r1
 80006aa:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x10;
 80006ac:	197b      	adds	r3, r7, r5
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2210      	movs	r2, #16
 80006b2:	4013      	ands	r3, r2
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	197b      	adds	r3, r7, r5
 80006b8:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 80006ba:	197b      	adds	r3, r7, r5
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	091b      	lsrs	r3, r3, #4
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	425a      	negs	r2, r3
 80006c4:	4153      	adcs	r3, r2
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	001a      	movs	r2, r3
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	701a      	strb	r2, [r3, #0]
	return status;
 80006ce:	183b      	adds	r3, r7, r0
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b25b      	sxtb	r3, r3
}
 80006d4:	0018      	movs	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b004      	add	sp, #16
 80006da:	bdb0      	pop	{r4, r5, r7, pc}

080006dc <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	0002      	movs	r2, r0
 80006e4:	1dbb      	adds	r3, r7, #6
 80006e6:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80006e8:	240f      	movs	r4, #15
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 80006f0:	1dbb      	adds	r3, r7, #6
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	2240      	movs	r2, #64	@ 0x40
 80006f6:	2187      	movs	r1, #135	@ 0x87
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 fc8b 	bl	8001014 <VL53L1_WrByte>
 80006fe:	0003      	movs	r3, r0
 8000700:	0019      	movs	r1, r3
 8000702:	193b      	adds	r3, r7, r4
 8000704:	193a      	adds	r2, r7, r4
 8000706:	7812      	ldrb	r2, [r2, #0]
 8000708:	430a      	orrs	r2, r1
 800070a:	701a      	strb	r2, [r3, #0]
	return status;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b25b      	sxtb	r3, r3
}
 8000712:	0018      	movs	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	b005      	add	sp, #20
 8000718:	bd90      	pop	{r4, r7, pc}

0800071a <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 800071a:	b590      	push	{r4, r7, lr}
 800071c:	b085      	sub	sp, #20
 800071e:	af00      	add	r7, sp, #0
 8000720:	0002      	movs	r2, r0
 8000722:	1dbb      	adds	r3, r7, #6
 8000724:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8000726:	240f      	movs	r4, #15
 8000728:	193b      	adds	r3, r7, r4
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 800072e:	1dbb      	adds	r3, r7, #6
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	2200      	movs	r2, #0
 8000734:	2187      	movs	r1, #135	@ 0x87
 8000736:	0018      	movs	r0, r3
 8000738:	f000 fc6c 	bl	8001014 <VL53L1_WrByte>
 800073c:	0003      	movs	r3, r0
 800073e:	0019      	movs	r1, r3
 8000740:	193b      	adds	r3, r7, r4
 8000742:	193a      	adds	r2, r7, r4
 8000744:	7812      	ldrb	r2, [r2, #0]
 8000746:	430a      	orrs	r2, r1
 8000748:	701a      	strb	r2, [r3, #0]
	return status;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b25b      	sxtb	r3, r3
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	b005      	add	sp, #20
 8000756:	bd90      	pop	{r4, r7, pc}

08000758 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8000758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	0002      	movs	r2, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	1dbb      	adds	r3, r7, #6
 8000764:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8000766:	240f      	movs	r4, #15
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 800076e:	250d      	movs	r5, #13
 8000770:	197a      	adds	r2, r7, r5
 8000772:	1dbb      	adds	r3, r7, #6
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	0011      	movs	r1, r2
 8000778:	0018      	movs	r0, r3
 800077a:	f7ff ff7c 	bl	8000676 <VL53L1X_GetInterruptPolarity>
 800077e:	0003      	movs	r3, r0
 8000780:	0019      	movs	r1, r3
 8000782:	193b      	adds	r3, r7, r4
 8000784:	193a      	adds	r2, r7, r4
 8000786:	7812      	ldrb	r2, [r2, #0]
 8000788:	430a      	orrs	r2, r1
 800078a:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 800078c:	260e      	movs	r6, #14
 800078e:	19ba      	adds	r2, r7, r6
 8000790:	1dbb      	adds	r3, r7, #6
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	2131      	movs	r1, #49	@ 0x31
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fca0 	bl	80010dc <VL53L1_RdByte>
 800079c:	0003      	movs	r3, r0
 800079e:	0019      	movs	r1, r3
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	193a      	adds	r2, r7, r4
 80007a4:	7812      	ldrb	r2, [r2, #0]
 80007a6:	430a      	orrs	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d10f      	bne.n	80007d4 <VL53L1X_CheckForDataReady+0x7c>
		if ((Temp & 1) == IntPol)
 80007b4:	19bb      	adds	r3, r7, r6
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	001a      	movs	r2, r3
 80007ba:	2301      	movs	r3, #1
 80007bc:	4013      	ands	r3, r2
 80007be:	197a      	adds	r2, r7, r5
 80007c0:	7812      	ldrb	r2, [r2, #0]
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d103      	bne.n	80007ce <VL53L1X_CheckForDataReady+0x76>
			*isDataReady = 1;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	e002      	b.n	80007d4 <VL53L1X_CheckForDataReady+0x7c>
		else
			*isDataReady = 0;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
	}
	return status;
 80007d4:	230f      	movs	r3, #15
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b25b      	sxtb	r3, r3
}
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	b005      	add	sp, #20
 80007e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007e4 <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	0002      	movs	r2, r0
 80007ec:	1dbb      	adds	r3, r7, #6
 80007ee:	801a      	strh	r2, [r3, #0]
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	1c0a      	adds	r2, r1, #0
 80007f4:	801a      	strh	r2, [r3, #0]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 80007f6:	240f      	movs	r4, #15
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetDistanceMode(dev, &DM);
 80007fe:	250c      	movs	r5, #12
 8000800:	197a      	adds	r2, r7, r5
 8000802:	1dbb      	adds	r3, r7, #6
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	0011      	movs	r1, r2
 8000808:	0018      	movs	r0, r3
 800080a:	f000 faa5 	bl	8000d58 <VL53L1X_GetDistanceMode>
 800080e:	0003      	movs	r3, r0
 8000810:	0019      	movs	r1, r3
 8000812:	193b      	adds	r3, r7, r4
 8000814:	193a      	adds	r2, r7, r4
 8000816:	7812      	ldrb	r2, [r2, #0]
 8000818:	430a      	orrs	r2, r1
 800081a:	701a      	strb	r2, [r3, #0]
	if (DM == 0)
 800081c:	197b      	adds	r3, r7, r5
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d101      	bne.n	8000828 <VL53L1X_SetTimingBudgetInMs+0x44>
		return 1;
 8000824:	2301      	movs	r3, #1
 8000826:	e11a      	b.n	8000a5e <VL53L1X_SetTimingBudgetInMs+0x27a>
	else if (DM == 1) {	/* Short DistanceMode */
 8000828:	230c      	movs	r3, #12
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d000      	beq.n	8000834 <VL53L1X_SetTimingBudgetInMs+0x50>
 8000832:	e092      	b.n	800095a <VL53L1X_SetTimingBudgetInMs+0x176>
		switch (TimingBudgetInMs) {
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	22fa      	movs	r2, #250	@ 0xfa
 800083a:	0052      	lsls	r2, r2, #1
 800083c:	4293      	cmp	r3, r2
 800083e:	d100      	bne.n	8000842 <VL53L1X_SetTimingBudgetInMs+0x5e>
 8000840:	e077      	b.n	8000932 <VL53L1X_SetTimingBudgetInMs+0x14e>
 8000842:	22fa      	movs	r2, #250	@ 0xfa
 8000844:	0052      	lsls	r2, r2, #1
 8000846:	4293      	cmp	r3, r2
 8000848:	dd00      	ble.n	800084c <VL53L1X_SetTimingBudgetInMs+0x68>
 800084a:	e081      	b.n	8000950 <VL53L1X_SetTimingBudgetInMs+0x16c>
 800084c:	2bc8      	cmp	r3, #200	@ 0xc8
 800084e:	d100      	bne.n	8000852 <VL53L1X_SetTimingBudgetInMs+0x6e>
 8000850:	e060      	b.n	8000914 <VL53L1X_SetTimingBudgetInMs+0x130>
 8000852:	dd00      	ble.n	8000856 <VL53L1X_SetTimingBudgetInMs+0x72>
 8000854:	e07c      	b.n	8000950 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8000856:	2b64      	cmp	r3, #100	@ 0x64
 8000858:	d04c      	beq.n	80008f4 <VL53L1X_SetTimingBudgetInMs+0x110>
 800085a:	dd00      	ble.n	800085e <VL53L1X_SetTimingBudgetInMs+0x7a>
 800085c:	e078      	b.n	8000950 <VL53L1X_SetTimingBudgetInMs+0x16c>
 800085e:	2b32      	cmp	r3, #50	@ 0x32
 8000860:	d037      	beq.n	80008d2 <VL53L1X_SetTimingBudgetInMs+0xee>
 8000862:	dd00      	ble.n	8000866 <VL53L1X_SetTimingBudgetInMs+0x82>
 8000864:	e074      	b.n	8000950 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8000866:	2b21      	cmp	r3, #33	@ 0x21
 8000868:	d024      	beq.n	80008b4 <VL53L1X_SetTimingBudgetInMs+0xd0>
 800086a:	dd00      	ble.n	800086e <VL53L1X_SetTimingBudgetInMs+0x8a>
 800086c:	e070      	b.n	8000950 <VL53L1X_SetTimingBudgetInMs+0x16c>
 800086e:	2b0f      	cmp	r3, #15
 8000870:	d002      	beq.n	8000878 <VL53L1X_SetTimingBudgetInMs+0x94>
 8000872:	2b14      	cmp	r3, #20
 8000874:	d00f      	beq.n	8000896 <VL53L1X_SetTimingBudgetInMs+0xb2>
 8000876:	e06b      	b.n	8000950 <VL53L1X_SetTimingBudgetInMs+0x16c>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000878:	1dbb      	adds	r3, r7, #6
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	221d      	movs	r2, #29
 800087e:	215e      	movs	r1, #94	@ 0x5e
 8000880:	0018      	movs	r0, r3
 8000882:	f000 fbf5 	bl	8001070 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000886:	1dbb      	adds	r3, r7, #6
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	2227      	movs	r2, #39	@ 0x27
 800088c:	2161      	movs	r1, #97	@ 0x61
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fbee 	bl	8001070 <VL53L1_WrWord>
					0x0027);
			break;
 8000894:	e0df      	b.n	8000a56 <VL53L1X_SetTimingBudgetInMs+0x272>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000896:	1dbb      	adds	r3, r7, #6
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	2251      	movs	r2, #81	@ 0x51
 800089c:	215e      	movs	r1, #94	@ 0x5e
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 fbe6 	bl	8001070 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80008a4:	1dbb      	adds	r3, r7, #6
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	226e      	movs	r2, #110	@ 0x6e
 80008aa:	2161      	movs	r1, #97	@ 0x61
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 fbdf 	bl	8001070 <VL53L1_WrWord>
					0x006E);
			break;
 80008b2:	e0d0      	b.n	8000a56 <VL53L1X_SetTimingBudgetInMs+0x272>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80008b4:	1dbb      	adds	r3, r7, #6
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	22d6      	movs	r2, #214	@ 0xd6
 80008ba:	215e      	movs	r1, #94	@ 0x5e
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fbd7 	bl	8001070 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80008c2:	1dbb      	adds	r3, r7, #6
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	226e      	movs	r2, #110	@ 0x6e
 80008c8:	2161      	movs	r1, #97	@ 0x61
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fbd0 	bl	8001070 <VL53L1_WrWord>
					0x006E);
			break;
 80008d0:	e0c1      	b.n	8000a56 <VL53L1X_SetTimingBudgetInMs+0x272>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80008d2:	23d7      	movs	r3, #215	@ 0xd7
 80008d4:	005a      	lsls	r2, r3, #1
 80008d6:	1dbb      	adds	r3, r7, #6
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	215e      	movs	r1, #94	@ 0x5e
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 fbc7 	bl	8001070 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80008e2:	23f4      	movs	r3, #244	@ 0xf4
 80008e4:	005a      	lsls	r2, r3, #1
 80008e6:	1dbb      	adds	r3, r7, #6
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	2161      	movs	r1, #97	@ 0x61
 80008ec:	0018      	movs	r0, r3
 80008ee:	f000 fbbf 	bl	8001070 <VL53L1_WrWord>
					0x01E8);
			break;
 80008f2:	e0b0      	b.n	8000a56 <VL53L1X_SetTimingBudgetInMs+0x272>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80008f4:	4a5c      	ldr	r2, [pc, #368]	@ (8000a68 <VL53L1X_SetTimingBudgetInMs+0x284>)
 80008f6:	1dbb      	adds	r3, r7, #6
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	215e      	movs	r1, #94	@ 0x5e
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fbb7 	bl	8001070 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000902:	23e2      	movs	r3, #226	@ 0xe2
 8000904:	009a      	lsls	r2, r3, #2
 8000906:	1dbb      	adds	r3, r7, #6
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	2161      	movs	r1, #97	@ 0x61
 800090c:	0018      	movs	r0, r3
 800090e:	f000 fbaf 	bl	8001070 <VL53L1_WrWord>
					0x0388);
			break;
 8000912:	e0a0      	b.n	8000a56 <VL53L1X_SetTimingBudgetInMs+0x272>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000914:	4a55      	ldr	r2, [pc, #340]	@ (8000a6c <VL53L1X_SetTimingBudgetInMs+0x288>)
 8000916:	1dbb      	adds	r3, r7, #6
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	215e      	movs	r1, #94	@ 0x5e
 800091c:	0018      	movs	r0, r3
 800091e:	f000 fba7 	bl	8001070 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000922:	4a53      	ldr	r2, [pc, #332]	@ (8000a70 <VL53L1X_SetTimingBudgetInMs+0x28c>)
 8000924:	1dbb      	adds	r3, r7, #6
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	2161      	movs	r1, #97	@ 0x61
 800092a:	0018      	movs	r0, r3
 800092c:	f000 fba0 	bl	8001070 <VL53L1_WrWord>
					0x0496);
			break;
 8000930:	e091      	b.n	8000a56 <VL53L1X_SetTimingBudgetInMs+0x272>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000932:	4a50      	ldr	r2, [pc, #320]	@ (8000a74 <VL53L1X_SetTimingBudgetInMs+0x290>)
 8000934:	1dbb      	adds	r3, r7, #6
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	215e      	movs	r1, #94	@ 0x5e
 800093a:	0018      	movs	r0, r3
 800093c:	f000 fb98 	bl	8001070 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000940:	4a4d      	ldr	r2, [pc, #308]	@ (8000a78 <VL53L1X_SetTimingBudgetInMs+0x294>)
 8000942:	1dbb      	adds	r3, r7, #6
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	2161      	movs	r1, #97	@ 0x61
 8000948:	0018      	movs	r0, r3
 800094a:	f000 fb91 	bl	8001070 <VL53L1_WrWord>
					0x05C1);
			break;
 800094e:	e082      	b.n	8000a56 <VL53L1X_SetTimingBudgetInMs+0x272>
		default:
			status = 1;
 8000950:	230f      	movs	r3, #15
 8000952:	18fb      	adds	r3, r7, r3
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
			break;
 8000958:	e07d      	b.n	8000a56 <VL53L1X_SetTimingBudgetInMs+0x272>
		}
	} else {
		switch (TimingBudgetInMs) {
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	22fa      	movs	r2, #250	@ 0xfa
 8000960:	0052      	lsls	r2, r2, #1
 8000962:	4293      	cmp	r3, r2
 8000964:	d100      	bne.n	8000968 <VL53L1X_SetTimingBudgetInMs+0x184>
 8000966:	e062      	b.n	8000a2e <VL53L1X_SetTimingBudgetInMs+0x24a>
 8000968:	22fa      	movs	r2, #250	@ 0xfa
 800096a:	0052      	lsls	r2, r2, #1
 800096c:	4293      	cmp	r3, r2
 800096e:	dd00      	ble.n	8000972 <VL53L1X_SetTimingBudgetInMs+0x18e>
 8000970:	e06c      	b.n	8000a4c <VL53L1X_SetTimingBudgetInMs+0x268>
 8000972:	2bc8      	cmp	r3, #200	@ 0xc8
 8000974:	d04b      	beq.n	8000a0e <VL53L1X_SetTimingBudgetInMs+0x22a>
 8000976:	dd00      	ble.n	800097a <VL53L1X_SetTimingBudgetInMs+0x196>
 8000978:	e068      	b.n	8000a4c <VL53L1X_SetTimingBudgetInMs+0x268>
 800097a:	2b64      	cmp	r3, #100	@ 0x64
 800097c:	d036      	beq.n	80009ec <VL53L1X_SetTimingBudgetInMs+0x208>
 800097e:	dd00      	ble.n	8000982 <VL53L1X_SetTimingBudgetInMs+0x19e>
 8000980:	e064      	b.n	8000a4c <VL53L1X_SetTimingBudgetInMs+0x268>
 8000982:	2b32      	cmp	r3, #50	@ 0x32
 8000984:	d023      	beq.n	80009ce <VL53L1X_SetTimingBudgetInMs+0x1ea>
 8000986:	dc61      	bgt.n	8000a4c <VL53L1X_SetTimingBudgetInMs+0x268>
 8000988:	2b14      	cmp	r3, #20
 800098a:	d002      	beq.n	8000992 <VL53L1X_SetTimingBudgetInMs+0x1ae>
 800098c:	2b21      	cmp	r3, #33	@ 0x21
 800098e:	d00f      	beq.n	80009b0 <VL53L1X_SetTimingBudgetInMs+0x1cc>
 8000990:	e05c      	b.n	8000a4c <VL53L1X_SetTimingBudgetInMs+0x268>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000992:	1dbb      	adds	r3, r7, #6
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	221e      	movs	r2, #30
 8000998:	215e      	movs	r1, #94	@ 0x5e
 800099a:	0018      	movs	r0, r3
 800099c:	f000 fb68 	bl	8001070 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80009a0:	1dbb      	adds	r3, r7, #6
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	2222      	movs	r2, #34	@ 0x22
 80009a6:	2161      	movs	r1, #97	@ 0x61
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fb61 	bl	8001070 <VL53L1_WrWord>
					0x0022);
			break;
 80009ae:	e052      	b.n	8000a56 <VL53L1X_SetTimingBudgetInMs+0x272>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80009b0:	1dbb      	adds	r3, r7, #6
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	2260      	movs	r2, #96	@ 0x60
 80009b6:	215e      	movs	r1, #94	@ 0x5e
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 fb59 	bl	8001070 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80009be:	1dbb      	adds	r3, r7, #6
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	226e      	movs	r2, #110	@ 0x6e
 80009c4:	2161      	movs	r1, #97	@ 0x61
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 fb52 	bl	8001070 <VL53L1_WrWord>
					0x006E);
			break;
 80009cc:	e043      	b.n	8000a56 <VL53L1X_SetTimingBudgetInMs+0x272>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80009ce:	1dbb      	adds	r3, r7, #6
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	22ad      	movs	r2, #173	@ 0xad
 80009d4:	215e      	movs	r1, #94	@ 0x5e
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 fb4a 	bl	8001070 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80009dc:	1dbb      	adds	r3, r7, #6
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	22c6      	movs	r2, #198	@ 0xc6
 80009e2:	2161      	movs	r1, #97	@ 0x61
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fb43 	bl	8001070 <VL53L1_WrWord>
					0x00C6);
			break;
 80009ea:	e034      	b.n	8000a56 <VL53L1X_SetTimingBudgetInMs+0x272>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80009ec:	23e6      	movs	r3, #230	@ 0xe6
 80009ee:	005a      	lsls	r2, r3, #1
 80009f0:	1dbb      	adds	r3, r7, #6
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	215e      	movs	r1, #94	@ 0x5e
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fb3a 	bl	8001070 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80009fc:	23f5      	movs	r3, #245	@ 0xf5
 80009fe:	005a      	lsls	r2, r3, #1
 8000a00:	1dbb      	adds	r3, r7, #6
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	2161      	movs	r1, #97	@ 0x61
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 fb32 	bl	8001070 <VL53L1_WrWord>
					0x01EA);
			break;
 8000a0c:	e023      	b.n	8000a56 <VL53L1X_SetTimingBudgetInMs+0x272>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000a7c <VL53L1X_SetTimingBudgetInMs+0x298>)
 8000a10:	1dbb      	adds	r3, r7, #6
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	215e      	movs	r1, #94	@ 0x5e
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fb2a 	bl	8001070 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000a1c:	23be      	movs	r3, #190	@ 0xbe
 8000a1e:	009a      	lsls	r2, r3, #2
 8000a20:	1dbb      	adds	r3, r7, #6
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	2161      	movs	r1, #97	@ 0x61
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 fb22 	bl	8001070 <VL53L1_WrWord>
					0x02F8);
			break;
 8000a2c:	e013      	b.n	8000a56 <VL53L1X_SetTimingBudgetInMs+0x272>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000a2e:	4a14      	ldr	r2, [pc, #80]	@ (8000a80 <VL53L1X_SetTimingBudgetInMs+0x29c>)
 8000a30:	1dbb      	adds	r3, r7, #6
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	215e      	movs	r1, #94	@ 0x5e
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 fb1a 	bl	8001070 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000a3c:	4a11      	ldr	r2, [pc, #68]	@ (8000a84 <VL53L1X_SetTimingBudgetInMs+0x2a0>)
 8000a3e:	1dbb      	adds	r3, r7, #6
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	2161      	movs	r1, #97	@ 0x61
 8000a44:	0018      	movs	r0, r3
 8000a46:	f000 fb13 	bl	8001070 <VL53L1_WrWord>
					0x04A4);
			break;
 8000a4a:	e004      	b.n	8000a56 <VL53L1X_SetTimingBudgetInMs+0x272>
		default:
			status = 1;
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
			break;
 8000a54:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return status;
 8000a56:	230f      	movs	r3, #15
 8000a58:	18fb      	adds	r3, r7, r3
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b25b      	sxtb	r3, r3
}
 8000a5e:	0018      	movs	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b004      	add	sp, #16
 8000a64:	bdb0      	pop	{r4, r5, r7, pc}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	000002e1 	.word	0x000002e1
 8000a6c:	000003e1 	.word	0x000003e1
 8000a70:	00000496 	.word	0x00000496
 8000a74:	00000591 	.word	0x00000591
 8000a78:	000005c1 	.word	0x000005c1
 8000a7c:	000002d9 	.word	0x000002d9
 8000a80:	0000048f 	.word	0x0000048f
 8000a84:	000004a4 	.word	0x000004a4

08000a88 <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 8000a88:	b5b0      	push	{r4, r5, r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	0002      	movs	r2, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	1dbb      	adds	r3, r7, #6
 8000a94:	801a      	strh	r2, [r3, #0]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 8000a96:	240f      	movs	r4, #15
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 8000a9e:	250c      	movs	r5, #12
 8000aa0:	197a      	adds	r2, r7, r5
 8000aa2:	1dbb      	adds	r3, r7, #6
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	215e      	movs	r1, #94	@ 0x5e
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f000 fb43 	bl	8001134 <VL53L1_RdWord>
 8000aae:	0003      	movs	r3, r0
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	193a      	adds	r2, r7, r4
 8000ab6:	7812      	ldrb	r2, [r2, #0]
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	701a      	strb	r2, [r3, #0]
	switch (Temp) {
 8000abc:	197b      	adds	r3, r7, r5
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	4a37      	ldr	r2, [pc, #220]	@ (8000ba0 <VL53L1X_GetTimingBudgetInMs+0x118>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d100      	bne.n	8000ac8 <VL53L1X_GetTimingBudgetInMs+0x40>
 8000ac6:	e057      	b.n	8000b78 <VL53L1X_GetTimingBudgetInMs+0xf0>
 8000ac8:	4a35      	ldr	r2, [pc, #212]	@ (8000ba0 <VL53L1X_GetTimingBudgetInMs+0x118>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	dd00      	ble.n	8000ad0 <VL53L1X_GetTimingBudgetInMs+0x48>
 8000ace:	e058      	b.n	8000b82 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8000ad0:	4a34      	ldr	r2, [pc, #208]	@ (8000ba4 <VL53L1X_GetTimingBudgetInMs+0x11c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d100      	bne.n	8000ad8 <VL53L1X_GetTimingBudgetInMs+0x50>
 8000ad6:	e04f      	b.n	8000b78 <VL53L1X_GetTimingBudgetInMs+0xf0>
 8000ad8:	2292      	movs	r2, #146	@ 0x92
 8000ada:	00d2      	lsls	r2, r2, #3
 8000adc:	4293      	cmp	r3, r2
 8000ade:	db00      	blt.n	8000ae2 <VL53L1X_GetTimingBudgetInMs+0x5a>
 8000ae0:	e04f      	b.n	8000b82 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8000ae2:	4a31      	ldr	r2, [pc, #196]	@ (8000ba8 <VL53L1X_GetTimingBudgetInMs+0x120>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d043      	beq.n	8000b70 <VL53L1X_GetTimingBudgetInMs+0xe8>
 8000ae8:	4a2f      	ldr	r2, [pc, #188]	@ (8000ba8 <VL53L1X_GetTimingBudgetInMs+0x120>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	dc49      	bgt.n	8000b82 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8000aee:	4a2f      	ldr	r2, [pc, #188]	@ (8000bac <VL53L1X_GetTimingBudgetInMs+0x124>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d039      	beq.n	8000b68 <VL53L1X_GetTimingBudgetInMs+0xe0>
 8000af4:	4a2d      	ldr	r2, [pc, #180]	@ (8000bac <VL53L1X_GetTimingBudgetInMs+0x124>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	dc43      	bgt.n	8000b82 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8000afa:	4a2d      	ldr	r2, [pc, #180]	@ (8000bb0 <VL53L1X_GetTimingBudgetInMs+0x128>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d037      	beq.n	8000b70 <VL53L1X_GetTimingBudgetInMs+0xe8>
 8000b00:	4a2b      	ldr	r2, [pc, #172]	@ (8000bb0 <VL53L1X_GetTimingBudgetInMs+0x128>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	dc3d      	bgt.n	8000b82 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8000b06:	22e6      	movs	r2, #230	@ 0xe6
 8000b08:	0052      	lsls	r2, r2, #1
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d02c      	beq.n	8000b68 <VL53L1X_GetTimingBudgetInMs+0xe0>
 8000b0e:	22e6      	movs	r2, #230	@ 0xe6
 8000b10:	0052      	lsls	r2, r2, #1
 8000b12:	4293      	cmp	r3, r2
 8000b14:	dc35      	bgt.n	8000b82 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8000b16:	22d7      	movs	r2, #215	@ 0xd7
 8000b18:	0052      	lsls	r2, r2, #1
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d020      	beq.n	8000b60 <VL53L1X_GetTimingBudgetInMs+0xd8>
 8000b1e:	22d7      	movs	r2, #215	@ 0xd7
 8000b20:	0052      	lsls	r2, r2, #1
 8000b22:	4293      	cmp	r3, r2
 8000b24:	dc2d      	bgt.n	8000b82 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8000b26:	2bd6      	cmp	r3, #214	@ 0xd6
 8000b28:	d016      	beq.n	8000b58 <VL53L1X_GetTimingBudgetInMs+0xd0>
 8000b2a:	dc2a      	bgt.n	8000b82 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8000b2c:	2bad      	cmp	r3, #173	@ 0xad
 8000b2e:	d017      	beq.n	8000b60 <VL53L1X_GetTimingBudgetInMs+0xd8>
 8000b30:	dc27      	bgt.n	8000b82 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8000b32:	2b60      	cmp	r3, #96	@ 0x60
 8000b34:	d010      	beq.n	8000b58 <VL53L1X_GetTimingBudgetInMs+0xd0>
 8000b36:	dc24      	bgt.n	8000b82 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8000b38:	2b51      	cmp	r3, #81	@ 0x51
 8000b3a:	d009      	beq.n	8000b50 <VL53L1X_GetTimingBudgetInMs+0xc8>
 8000b3c:	dc21      	bgt.n	8000b82 <VL53L1X_GetTimingBudgetInMs+0xfa>
 8000b3e:	2b1d      	cmp	r3, #29
 8000b40:	d002      	beq.n	8000b48 <VL53L1X_GetTimingBudgetInMs+0xc0>
 8000b42:	2b1e      	cmp	r3, #30
 8000b44:	d004      	beq.n	8000b50 <VL53L1X_GetTimingBudgetInMs+0xc8>
 8000b46:	e01c      	b.n	8000b82 <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x001D :
			*pTimingBudget = 15;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	220f      	movs	r2, #15
 8000b4c:	801a      	strh	r2, [r3, #0]
			break;
 8000b4e:	e01f      	b.n	8000b90 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	2214      	movs	r2, #20
 8000b54:	801a      	strh	r2, [r3, #0]
			break;
 8000b56:	e01b      	b.n	8000b90 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	2221      	movs	r2, #33	@ 0x21
 8000b5c:	801a      	strh	r2, [r3, #0]
			break;
 8000b5e:	e017      	b.n	8000b90 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	2232      	movs	r2, #50	@ 0x32
 8000b64:	801a      	strh	r2, [r3, #0]
			break;
 8000b66:	e013      	b.n	8000b90 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	2264      	movs	r2, #100	@ 0x64
 8000b6c:	801a      	strh	r2, [r3, #0]
			break;
 8000b6e:	e00f      	b.n	8000b90 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	22c8      	movs	r2, #200	@ 0xc8
 8000b74:	801a      	strh	r2, [r3, #0]
			break;
 8000b76:	e00b      	b.n	8000b90 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	22fa      	movs	r2, #250	@ 0xfa
 8000b7c:	0052      	lsls	r2, r2, #1
 8000b7e:	801a      	strh	r2, [r3, #0]
			break;
 8000b80:	e006      	b.n	8000b90 <VL53L1X_GetTimingBudgetInMs+0x108>
		default:
			status = 1;
 8000b82:	230f      	movs	r3, #15
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
			*pTimingBudget = 0;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	801a      	strh	r2, [r3, #0]
	}
	return status;
 8000b90:	230f      	movs	r3, #15
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b25b      	sxtb	r3, r3
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b004      	add	sp, #16
 8000b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8000ba0:	00000591 	.word	0x00000591
 8000ba4:	0000048f 	.word	0x0000048f
 8000ba8:	000003e1 	.word	0x000003e1
 8000bac:	000002e1 	.word	0x000002e1
 8000bb0:	000002d9 	.word	0x000002d9

08000bb4 <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 8000bb4:	b5b0      	push	{r4, r5, r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	0002      	movs	r2, r0
 8000bbc:	1dbb      	adds	r3, r7, #6
 8000bbe:	801a      	strh	r2, [r3, #0]
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	1c0a      	adds	r2, r1, #0
 8000bc4:	801a      	strh	r2, [r3, #0]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 8000bc6:	240f      	movs	r4, #15
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 8000bce:	230c      	movs	r3, #12
 8000bd0:	18fa      	adds	r2, r7, r3
 8000bd2:	1dbb      	adds	r3, r7, #6
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff ff55 	bl	8000a88 <VL53L1X_GetTimingBudgetInMs>
 8000bde:	0003      	movs	r3, r0
 8000be0:	0019      	movs	r1, r3
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	193a      	adds	r2, r7, r4
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	430a      	orrs	r2, r1
 8000bea:	701a      	strb	r2, [r3, #0]
	if (status != 0)
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b25b      	sxtb	r3, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <VL53L1X_SetDistanceMode+0x46>
		return 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e0a1      	b.n	8000d3e <VL53L1X_SetDistanceMode+0x18a>
	switch (DM) {
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d002      	beq.n	8000c08 <VL53L1X_SetDistanceMode+0x54>
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d03e      	beq.n	8000c84 <VL53L1X_SetDistanceMode+0xd0>
 8000c06:	e07b      	b.n	8000d00 <VL53L1X_SetDistanceMode+0x14c>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 8000c08:	250f      	movs	r5, #15
 8000c0a:	197c      	adds	r4, r7, r5
 8000c0c:	1dbb      	adds	r3, r7, #6
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	2214      	movs	r2, #20
 8000c12:	214b      	movs	r1, #75	@ 0x4b
 8000c14:	0018      	movs	r0, r3
 8000c16:	f000 f9fd 	bl	8001014 <VL53L1_WrByte>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8000c1e:	197c      	adds	r4, r7, r5
 8000c20:	1dbb      	adds	r3, r7, #6
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	2207      	movs	r2, #7
 8000c26:	2160      	movs	r1, #96	@ 0x60
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f000 f9f3 	bl	8001014 <VL53L1_WrByte>
 8000c2e:	0003      	movs	r3, r0
 8000c30:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8000c32:	197c      	adds	r4, r7, r5
 8000c34:	1dbb      	adds	r3, r7, #6
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	2205      	movs	r2, #5
 8000c3a:	2163      	movs	r1, #99	@ 0x63
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f000 f9e9 	bl	8001014 <VL53L1_WrByte>
 8000c42:	0003      	movs	r3, r0
 8000c44:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8000c46:	197c      	adds	r4, r7, r5
 8000c48:	1dbb      	adds	r3, r7, #6
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	2238      	movs	r2, #56	@ 0x38
 8000c4e:	2169      	movs	r1, #105	@ 0x69
 8000c50:	0018      	movs	r0, r3
 8000c52:	f000 f9df 	bl	8001014 <VL53L1_WrByte>
 8000c56:	0003      	movs	r3, r0
 8000c58:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8000c5a:	197c      	adds	r4, r7, r5
 8000c5c:	4a3a      	ldr	r2, [pc, #232]	@ (8000d48 <VL53L1X_SetDistanceMode+0x194>)
 8000c5e:	1dbb      	adds	r3, r7, #6
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	2178      	movs	r1, #120	@ 0x78
 8000c64:	0018      	movs	r0, r3
 8000c66:	f000 fa03 	bl	8001070 <VL53L1_WrWord>
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8000c6e:	197c      	adds	r4, r7, r5
 8000c70:	4a36      	ldr	r2, [pc, #216]	@ (8000d4c <VL53L1X_SetDistanceMode+0x198>)
 8000c72:	1dbb      	adds	r3, r7, #6
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	217a      	movs	r1, #122	@ 0x7a
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 f9f9 	bl	8001070 <VL53L1_WrWord>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	7023      	strb	r3, [r4, #0]
		break;
 8000c82:	e042      	b.n	8000d0a <VL53L1X_SetDistanceMode+0x156>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 8000c84:	250f      	movs	r5, #15
 8000c86:	197c      	adds	r4, r7, r5
 8000c88:	1dbb      	adds	r3, r7, #6
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	220a      	movs	r2, #10
 8000c8e:	214b      	movs	r1, #75	@ 0x4b
 8000c90:	0018      	movs	r0, r3
 8000c92:	f000 f9bf 	bl	8001014 <VL53L1_WrByte>
 8000c96:	0003      	movs	r3, r0
 8000c98:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8000c9a:	197c      	adds	r4, r7, r5
 8000c9c:	1dbb      	adds	r3, r7, #6
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	220f      	movs	r2, #15
 8000ca2:	2160      	movs	r1, #96	@ 0x60
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 f9b5 	bl	8001014 <VL53L1_WrByte>
 8000caa:	0003      	movs	r3, r0
 8000cac:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8000cae:	197c      	adds	r4, r7, r5
 8000cb0:	1dbb      	adds	r3, r7, #6
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	220d      	movs	r2, #13
 8000cb6:	2163      	movs	r1, #99	@ 0x63
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f000 f9ab 	bl	8001014 <VL53L1_WrByte>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8000cc2:	197c      	adds	r4, r7, r5
 8000cc4:	1dbb      	adds	r3, r7, #6
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	22b8      	movs	r2, #184	@ 0xb8
 8000cca:	2169      	movs	r1, #105	@ 0x69
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f000 f9a1 	bl	8001014 <VL53L1_WrByte>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8000cd6:	197c      	adds	r4, r7, r5
 8000cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d50 <VL53L1X_SetDistanceMode+0x19c>)
 8000cda:	1dbb      	adds	r3, r7, #6
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	2178      	movs	r1, #120	@ 0x78
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f000 f9c5 	bl	8001070 <VL53L1_WrWord>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 8000cea:	197c      	adds	r4, r7, r5
 8000cec:	4a19      	ldr	r2, [pc, #100]	@ (8000d54 <VL53L1X_SetDistanceMode+0x1a0>)
 8000cee:	1dbb      	adds	r3, r7, #6
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	217a      	movs	r1, #122	@ 0x7a
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f000 f9bb 	bl	8001070 <VL53L1_WrWord>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	7023      	strb	r3, [r4, #0]
		break;
 8000cfe:	e004      	b.n	8000d0a <VL53L1X_SetDistanceMode+0x156>
	default:
		status = 1;
 8000d00:	230f      	movs	r3, #15
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
		break;
 8000d08:	46c0      	nop			@ (mov r8, r8)
	}

	if (status == 0)
 8000d0a:	240f      	movs	r4, #15
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10f      	bne.n	8000d36 <VL53L1X_SetDistanceMode+0x182>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 8000d16:	230c      	movs	r3, #12
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	881a      	ldrh	r2, [r3, #0]
 8000d1c:	1dbb      	adds	r3, r7, #6
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	0011      	movs	r1, r2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fd5e 	bl	80007e4 <VL53L1X_SetTimingBudgetInMs>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	0019      	movs	r1, r3
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	193a      	adds	r2, r7, r4
 8000d30:	7812      	ldrb	r2, [r2, #0]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	701a      	strb	r2, [r3, #0]
	return status;
 8000d36:	230f      	movs	r3, #15
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b25b      	sxtb	r3, r3
}
 8000d3e:	0018      	movs	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b004      	add	sp, #16
 8000d44:	bdb0      	pop	{r4, r5, r7, pc}
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	00000705 	.word	0x00000705
 8000d4c:	00000606 	.word	0x00000606
 8000d50:	00000f0d 	.word	0x00000f0d
 8000d54:	00000e0e 	.word	0x00000e0e

08000d58 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8000d58:	b5b0      	push	{r4, r5, r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	0002      	movs	r2, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	1dbb      	adds	r3, r7, #6
 8000d64:	801a      	strh	r2, [r3, #0]
	uint8_t TempDM, status=0;
 8000d66:	240f      	movs	r4, #15
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8000d6e:	250e      	movs	r5, #14
 8000d70:	197a      	adds	r2, r7, r5
 8000d72:	1dbb      	adds	r3, r7, #6
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	214b      	movs	r1, #75	@ 0x4b
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f000 f9af 	bl	80010dc <VL53L1_RdByte>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	001a      	movs	r2, r3
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b25a      	sxtb	r2, r3
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	701a      	strb	r2, [r3, #0]
	if (TempDM == 0x14)
 8000d90:	197b      	adds	r3, r7, r5
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b14      	cmp	r3, #20
 8000d96:	d102      	bne.n	8000d9e <VL53L1X_GetDistanceMode+0x46>
		*DM=1;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8000d9e:	230e      	movs	r3, #14
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b0a      	cmp	r3, #10
 8000da6:	d102      	bne.n	8000dae <VL53L1X_GetDistanceMode+0x56>
		*DM=2;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2202      	movs	r2, #2
 8000dac:	801a      	strh	r2, [r3, #0]
	return status;
 8000dae:	230f      	movs	r3, #15
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b25b      	sxtb	r3, r3
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b004      	add	sp, #16
 8000dbc:	bdb0      	pop	{r4, r5, r7, pc}

08000dbe <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8000dbe:	b5b0      	push	{r4, r5, r7, lr}
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	0002      	movs	r2, r0
 8000dc6:	6039      	str	r1, [r7, #0]
 8000dc8:	1dbb      	adds	r3, r7, #6
 8000dca:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8000dcc:	240f      	movs	r4, #15
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = 0;
 8000dd4:	250e      	movs	r5, #14
 8000dd6:	197b      	adds	r3, r7, r5
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8000ddc:	197a      	adds	r2, r7, r5
 8000dde:	1dbb      	adds	r3, r7, #6
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	21e5      	movs	r1, #229	@ 0xe5
 8000de4:	0018      	movs	r0, r3
 8000de6:	f000 f979 	bl	80010dc <VL53L1_RdByte>
 8000dea:	0003      	movs	r3, r0
 8000dec:	0019      	movs	r1, r3
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	193a      	adds	r2, r7, r4
 8000df2:	7812      	ldrb	r2, [r2, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	701a      	strb	r2, [r3, #0]
	*state = tmp;
 8000df8:	197b      	adds	r3, r7, r5
 8000dfa:	781a      	ldrb	r2, [r3, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	701a      	strb	r2, [r3, #0]
	return status;
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b25b      	sxtb	r3, r3
}
 8000e06:	0018      	movs	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b004      	add	sp, #16
 8000e0c:	bdb0      	pop	{r4, r5, r7, pc}

08000e0e <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8000e0e:	b5b0      	push	{r4, r5, r7, lr}
 8000e10:	b084      	sub	sp, #16
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	0002      	movs	r2, r0
 8000e16:	6039      	str	r1, [r7, #0]
 8000e18:	1dbb      	adds	r3, r7, #6
 8000e1a:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8000e1c:	240f      	movs	r4, #15
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8000e24:	250c      	movs	r5, #12
 8000e26:	197a      	adds	r2, r7, r5
 8000e28:	1dbb      	adds	r3, r7, #6
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	2196      	movs	r1, #150	@ 0x96
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f000 f980 	bl	8001134 <VL53L1_RdWord>
 8000e34:	0003      	movs	r3, r0
 8000e36:	0019      	movs	r1, r3
 8000e38:	0020      	movs	r0, r4
 8000e3a:	183b      	adds	r3, r7, r0
 8000e3c:	183a      	adds	r2, r7, r0
 8000e3e:	7812      	ldrb	r2, [r2, #0]
 8000e40:	430a      	orrs	r2, r1
 8000e42:	701a      	strb	r2, [r3, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8000e44:	197b      	adds	r3, r7, r5
 8000e46:	881a      	ldrh	r2, [r3, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	801a      	strh	r2, [r3, #0]
	return status;
 8000e4c:	183b      	adds	r3, r7, r0
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b25b      	sxtb	r3, r3
}
 8000e52:	0018      	movs	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b004      	add	sp, #16
 8000e58:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e5c <tof_ctrl_boot>:
#include "tof_ctrl.h"
#include "VL53L1X_api.h"

#define RANGEMODE 1	//0 = Longrange, 1 = Shortrange

void tof_ctrl_boot(VL53L1_DEV dev, uint8_t addr){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	000a      	movs	r2, r1
 8000e66:	1cfb      	adds	r3, r7, #3
 8000e68:	701a      	strb	r2, [r3, #0]
	VL53L1_SensorOn(dev);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f000 f997 	bl	80011a0 <VL53L1_SensorOn>
	HAL_Delay(500);
 8000e72:	23fa      	movs	r3, #250	@ 0xfa
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	0018      	movs	r0, r3
 8000e78:	f000 fe46 	bl	8001b08 <HAL_Delay>

    uint8_t booted = 0;
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]

	//printf("Start Sensor: %x\r\n", (uint8_t)dev->tof_addr);
	while(booted == 0){
 8000e84:	e011      	b.n	8000eaa <tof_ctrl_boot+0x4e>
	    VL53L1X_BootState(dev->tof_addr, &booted);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	18ba      	adds	r2, r7, r2
 8000e90:	0011      	movs	r1, r2
 8000e92:	0018      	movs	r0, r3
 8000e94:	f7ff ff93 	bl	8000dbe <VL53L1X_BootState>
	    HAL_Delay(1000);
 8000e98:	23fa      	movs	r3, #250	@ 0xfa
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f000 fe33 	bl	8001b08 <HAL_Delay>
	    printf("Booting\r\n");
 8000ea2:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <tof_ctrl_boot+0xa8>)
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f003 fc49 	bl	800473c <puts>
	while(booted == 0){
 8000eaa:	230f      	movs	r3, #15
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0e8      	beq.n	8000e86 <tof_ctrl_boot+0x2a>
	}
	VL53L1X_SensorInit(dev->tof_addr);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f7ff fb24 	bl	8000508 <VL53L1X_SensorInit>
	VL53L1X_SetI2CAddress(dev->tof_addr, addr);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	1cfb      	adds	r3, r7, #3
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	0019      	movs	r1, r3
 8000ecc:	0010      	movs	r0, r2
 8000ece:	f7ff faf5 	bl	80004bc <VL53L1X_SetI2CAddress>
	dev->tof_addr = addr;
 8000ed2:	1cfb      	adds	r3, r7, #3
 8000ed4:	781a      	ldrb	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
	VL53L1X_SetDistanceMode(dev->tof_addr, RANGEMODE);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff fe66 	bl	8000bb4 <VL53L1X_SetDistanceMode>
	printf("Ready Sensor: %x\r\n", (uint8_t)dev->tof_addr);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	001a      	movs	r2, r3
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <tof_ctrl_boot+0xac>)
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f003 fbbb 	bl	8004670 <iprintf>
}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b004      	add	sp, #16
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	08005484 	.word	0x08005484
 8000f08:	08005490 	.word	0x08005490

08000f0c <tof_ctrl_get_distance>:

void tof_ctrl_get_distance(VL53L1_DEV dev, uint16_t* pDistance, uint16_t timeout){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	1dbb      	adds	r3, r7, #6
 8000f18:	801a      	strh	r2, [r3, #0]
    uint8_t dataReady = 0;
 8000f1a:	2313      	movs	r3, #19
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
    uint32_t timestamp = HAL_GetTick();
 8000f22:	f000 fde7 	bl	8001af4 <HAL_GetTick>
 8000f26:	0003      	movs	r3, r0
 8000f28:	617b      	str	r3, [r7, #20]

    VL53L1X_StartRanging(dev->tof_addr);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	0018      	movs	r0, r3
 8000f32:	f7ff fbd3 	bl	80006dc <VL53L1X_StartRanging>
    while(dataReady == 0){
 8000f36:	e011      	b.n	8000f5c <tof_ctrl_get_distance+0x50>
        VL53L1X_CheckForDataReady(dev->tof_addr, &dataReady);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	2213      	movs	r2, #19
 8000f40:	18ba      	adds	r2, r7, r2
 8000f42:	0011      	movs	r1, r2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f7ff fc07 	bl	8000758 <VL53L1X_CheckForDataReady>
        if((HAL_GetTick() - timestamp) > timeout){
 8000f4a:	f000 fdd3 	bl	8001af4 <HAL_GetTick>
 8000f4e:	0002      	movs	r2, r0
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	1ad2      	subs	r2, r2, r3
 8000f54:	1dbb      	adds	r3, r7, #6
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d819      	bhi.n	8000f90 <tof_ctrl_get_distance+0x84>
    while(dataReady == 0){
 8000f5c:	2313      	movs	r3, #19
 8000f5e:	18fb      	adds	r3, r7, r3
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0e8      	beq.n	8000f38 <tof_ctrl_get_distance+0x2c>
        	return;
        }
    }
    VL53L1X_GetDistance(dev->tof_addr, pDistance);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	0011      	movs	r1, r2
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff ff4c 	bl	8000e0e <VL53L1X_GetDistance>
    VL53L1X_ClearInterrupt(dev->tof_addr);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f7ff fb5b 	bl	8000638 <VL53L1X_ClearInterrupt>
    VL53L1X_StopRanging(dev->tof_addr);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff fbc6 	bl	800071a <VL53L1X_StopRanging>
 8000f8e:	e000      	b.n	8000f92 <tof_ctrl_get_distance+0x86>
        	return;
 8000f90:	46c0      	nop			@ (mov r8, r8)
}
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b006      	add	sp, #24
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <_I2CWrite>:
#define I2C_TIME_OUT_BASE   10
#define I2C_TIME_OUT_BYTE   1

uint8_t _I2CBuffer[256];

static void _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	210e      	movs	r1, #14
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	1c02      	adds	r2, r0, #0
 8000fa8:	801a      	strh	r2, [r3, #0]

    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	330a      	adds	r3, #10
 8000fae:	617b      	str	r3, [r7, #20]

    HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, i2c_time_out);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	b29d      	uxth	r5, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	68bc      	ldr	r4, [r7, #8]
 8000fb8:	187a      	adds	r2, r7, r1
 8000fba:	8811      	ldrh	r1, [r2, #0]
 8000fbc:	4804      	ldr	r0, [pc, #16]	@ (8000fd0 <_I2CWrite+0x38>)
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	002b      	movs	r3, r5
 8000fc2:	0022      	movs	r2, r4
 8000fc4:	f001 f906 	bl	80021d4 <HAL_I2C_Master_Transmit>
}
 8000fc8:	46c0      	nop			@ (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b006      	add	sp, #24
 8000fce:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd0:	20000184 	.word	0x20000184

08000fd4 <_I2CRead>:

static void _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b089      	sub	sp, #36	@ 0x24
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	210e      	movs	r1, #14
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	1c02      	adds	r2, r0, #0
 8000fe4:	801a      	strh	r2, [r3, #0]

    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	330a      	adds	r3, #10
 8000fea:	617b      	str	r3, [r7, #20]

    HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, i2c_time_out);
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	b29c      	uxth	r4, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	4804      	ldr	r0, [pc, #16]	@ (8001010 <_I2CRead+0x3c>)
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	0023      	movs	r3, r4
 8001004:	f001 f9ee 	bl	80023e4 <HAL_I2C_Master_Receive>
}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b007      	add	sp, #28
 800100e:	bd90      	pop	{r4, r7, pc}
 8001010:	20000184 	.word	0x20000184

08001014 <VL53L1_WrByte>:
    _I2CRead(dev, pdata, count);

    return 0;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	0004      	movs	r4, r0
 800101c:	0008      	movs	r0, r1
 800101e:	0011      	movs	r1, r2
 8001020:	1dbb      	adds	r3, r7, #6
 8001022:	1c22      	adds	r2, r4, #0
 8001024:	801a      	strh	r2, [r3, #0]
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	1c02      	adds	r2, r0, #0
 800102a:	801a      	strh	r2, [r3, #0]
 800102c:	1cfb      	adds	r3, r7, #3
 800102e:	1c0a      	adds	r2, r1, #0
 8001030:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[0] = index>>8;
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	b29b      	uxth	r3, r3
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <VL53L1_WrByte+0x58>)
 800103e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <VL53L1_WrByte+0x58>)
 8001048:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <VL53L1_WrByte+0x58>)
 800104c:	1cfa      	adds	r2, r7, #3
 800104e:	7812      	ldrb	r2, [r2, #0]
 8001050:	709a      	strb	r2, [r3, #2]

    _I2CWrite(dev, _I2CBuffer, 3);
 8001052:	4906      	ldr	r1, [pc, #24]	@ (800106c <VL53L1_WrByte+0x58>)
 8001054:	1dbb      	adds	r3, r7, #6
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	2203      	movs	r2, #3
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff ff9c 	bl	8000f98 <_I2CWrite>
	return 0;
 8001060:	2300      	movs	r3, #0
}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	b003      	add	sp, #12
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	20000084 	.word	0x20000084

08001070 <VL53L1_WrWord>:

int8_t VL53L1_WrWord(uint16_t dev, uint16_t index, uint16_t data) {
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	0004      	movs	r4, r0
 8001078:	0008      	movs	r0, r1
 800107a:	0011      	movs	r1, r2
 800107c:	1dbb      	adds	r3, r7, #6
 800107e:	1c22      	adds	r2, r4, #0
 8001080:	801a      	strh	r2, [r3, #0]
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	1c02      	adds	r2, r0, #0
 8001086:	801a      	strh	r2, [r3, #0]
 8001088:	1cbb      	adds	r3, r7, #2
 800108a:	1c0a      	adds	r2, r1, #0
 800108c:	801a      	strh	r2, [r3, #0]
    _I2CBuffer[0] = index>>8;
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	0a1b      	lsrs	r3, r3, #8
 8001094:	b29b      	uxth	r3, r3
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <VL53L1_WrWord+0x68>)
 800109a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <VL53L1_WrWord+0x68>)
 80010a4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80010a6:	1cbb      	adds	r3, r7, #2
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	0a1b      	lsrs	r3, r3, #8
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <VL53L1_WrWord+0x68>)
 80010b2:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80010b4:	1cbb      	adds	r3, r7, #2
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <VL53L1_WrWord+0x68>)
 80010bc:	70da      	strb	r2, [r3, #3]

    _I2CWrite(dev, _I2CBuffer, 4);
 80010be:	4906      	ldr	r1, [pc, #24]	@ (80010d8 <VL53L1_WrWord+0x68>)
 80010c0:	1dbb      	adds	r3, r7, #6
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	2204      	movs	r2, #4
 80010c6:	0018      	movs	r0, r3
 80010c8:	f7ff ff66 	bl	8000f98 <_I2CWrite>
	return 0;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	0018      	movs	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b003      	add	sp, #12
 80010d4:	bd90      	pop	{r4, r7, pc}
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	20000084 	.word	0x20000084

080010dc <VL53L1_RdByte>:
    _I2CWrite(dev, _I2CBuffer, 6);

	return 0;
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	603a      	str	r2, [r7, #0]
 80010e4:	1dbb      	adds	r3, r7, #6
 80010e6:	1c02      	adds	r2, r0, #0
 80010e8:	801a      	strh	r2, [r3, #0]
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	1c0a      	adds	r2, r1, #0
 80010ee:	801a      	strh	r2, [r3, #0]
	_I2CBuffer[0] = index>>8;
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <VL53L1_RdByte+0x54>)
 80010fc:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <VL53L1_RdByte+0x54>)
 8001106:	705a      	strb	r2, [r3, #1]
    _I2CWrite(dev, _I2CBuffer, 2);
 8001108:	4909      	ldr	r1, [pc, #36]	@ (8001130 <VL53L1_RdByte+0x54>)
 800110a:	1dbb      	adds	r3, r7, #6
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	2202      	movs	r2, #2
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff ff41 	bl	8000f98 <_I2CWrite>
    _I2CRead(dev, data, 1);
 8001116:	6839      	ldr	r1, [r7, #0]
 8001118:	1dbb      	adds	r3, r7, #6
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	2201      	movs	r2, #1
 800111e:	0018      	movs	r0, r3
 8001120:	f7ff ff58 	bl	8000fd4 <_I2CRead>

	return 0;
 8001124:	2300      	movs	r3, #0
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b002      	add	sp, #8
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	20000084 	.word	0x20000084

08001134 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	603a      	str	r2, [r7, #0]
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	1c02      	adds	r2, r0, #0
 8001140:	801a      	strh	r2, [r3, #0]
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	1c0a      	adds	r2, r1, #0
 8001146:	801a      	strh	r2, [r3, #0]
    _I2CBuffer[0] = index>>8;
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	b29b      	uxth	r3, r3
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b12      	ldr	r3, [pc, #72]	@ (800119c <VL53L1_RdWord+0x68>)
 8001154:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <VL53L1_RdWord+0x68>)
 800115e:	705a      	strb	r2, [r3, #1]
    _I2CWrite(dev, _I2CBuffer, 2);
 8001160:	490e      	ldr	r1, [pc, #56]	@ (800119c <VL53L1_RdWord+0x68>)
 8001162:	1dbb      	adds	r3, r7, #6
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	2202      	movs	r2, #2
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff ff15 	bl	8000f98 <_I2CWrite>
    _I2CRead(dev, _I2CBuffer, 2);
 800116e:	490b      	ldr	r1, [pc, #44]	@ (800119c <VL53L1_RdWord+0x68>)
 8001170:	1dbb      	adds	r3, r7, #6
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	2202      	movs	r2, #2
 8001176:	0018      	movs	r0, r3
 8001178:	f7ff ff2c 	bl	8000fd4 <_I2CRead>

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800117c:	4b07      	ldr	r3, [pc, #28]	@ (800119c <VL53L1_RdWord+0x68>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b29b      	uxth	r3, r3
 8001184:	4a05      	ldr	r2, [pc, #20]	@ (800119c <VL53L1_RdWord+0x68>)
 8001186:	7852      	ldrb	r2, [r2, #1]
 8001188:	189b      	adds	r3, r3, r2
 800118a:	b29a      	uxth	r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	801a      	strh	r2, [r3, #0]

	return 0;
 8001190:	2300      	movs	r3, #0
}
 8001192:	0018      	movs	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	b002      	add	sp, #8
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	20000084 	.word	0x20000084

080011a0 <VL53L1_SensorOn>:
	(void)dev;
	HAL_Delay(wait_ms);
	return 0;
}

int8_t VL53L1_SensorOn (VL53L1_DEV dev){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dev->tof_port, dev->tof_pin, GPIO_PIN_SET);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6858      	ldr	r0, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	899b      	ldrh	r3, [r3, #12]
 80011b0:	2201      	movs	r2, #1
 80011b2:	0019      	movs	r1, r3
 80011b4:	f000 ff35 	bl	8002022 <HAL_GPIO_WritePin>
	return 0;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	0018      	movs	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	b002      	add	sp, #8
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ca:	f000 fc2d 	bl	8001a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ce:	f000 f871 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d2:	f000 f96b 	bl	80014ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011d6:	f000 f939 	bl	800144c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011da:	f000 f8f7 	bl	80013cc <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80011de:	f000 f8df 	bl	80013a0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  TOF1_Init();
 80011e2:	f000 fa05 	bl	80015f0 <TOF1_Init>
  TOF2_Init();
 80011e6:	f000 fa1d 	bl	8001624 <TOF2_Init>
  TOF3_Init();
 80011ea:	f000 fa35 	bl	8001658 <TOF3_Init>
  TOF4_Init();
 80011ee:	f000 fa4b 	bl	8001688 <TOF4_Init>
  tof_ctrl_boot(&tof_1, 0x10);
 80011f2:	4b2c      	ldr	r3, [pc, #176]	@ (80012a4 <main+0xe0>)
 80011f4:	2110      	movs	r1, #16
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff fe30 	bl	8000e5c <tof_ctrl_boot>
  //tof_ctrl_boot(&tof_2, 0x20);
  //tof_ctrl_boot(&tof_3, 0x30);
  //tof_ctrl_boot(&tof_4, 0x40);

  uint16_t distance = 0;
 80011fc:	1dbb      	adds	r3, r7, #6
 80011fe:	2200      	movs	r2, #0
 8001200:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(X_DIR_IN_GPIO_Port, X_DIR_IN_Pin) == GPIO_PIN_SET){
 8001202:	23a0      	movs	r3, #160	@ 0xa0
 8001204:	05db      	lsls	r3, r3, #23
 8001206:	2101      	movs	r1, #1
 8001208:	0018      	movs	r0, r3
 800120a:	f000 feed 	bl	8001fe8 <HAL_GPIO_ReadPin>
 800120e:	0003      	movs	r3, r0
 8001210:	2b01      	cmp	r3, #1
 8001212:	d10b      	bne.n	800122c <main+0x68>
		  tof_ctrl_get_distance(&tof_1, &distance, 200);
 8001214:	1db9      	adds	r1, r7, #6
 8001216:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <main+0xe0>)
 8001218:	22c8      	movs	r2, #200	@ 0xc8
 800121a:	0018      	movs	r0, r3
 800121c:	f7ff fe76 	bl	8000f0c <tof_ctrl_get_distance>
		  tof_ctrl_get_distance(&tof_2, &distance, 200);
 8001220:	1db9      	adds	r1, r7, #6
 8001222:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <main+0xe4>)
 8001224:	22c8      	movs	r2, #200	@ 0xc8
 8001226:	0018      	movs	r0, r3
 8001228:	f7ff fe70 	bl	8000f0c <tof_ctrl_get_distance>
	  }

	  if(HAL_GPIO_ReadPin(Y_DIR_IN_GPIO_Port, Y_DIR_IN_Pin) == GPIO_PIN_SET){
 800122c:	23a0      	movs	r3, #160	@ 0xa0
 800122e:	05db      	lsls	r3, r3, #23
 8001230:	2102      	movs	r1, #2
 8001232:	0018      	movs	r0, r3
 8001234:	f000 fed8 	bl	8001fe8 <HAL_GPIO_ReadPin>
 8001238:	0003      	movs	r3, r0
 800123a:	2b01      	cmp	r3, #1
 800123c:	d10b      	bne.n	8001256 <main+0x92>
		  tof_ctrl_get_distance(&tof_3, &distance, 200);
 800123e:	1db9      	adds	r1, r7, #6
 8001240:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <main+0xe8>)
 8001242:	22c8      	movs	r2, #200	@ 0xc8
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff fe61 	bl	8000f0c <tof_ctrl_get_distance>
		  tof_ctrl_get_distance(&tof_4, &distance, 200);
 800124a:	1db9      	adds	r1, r7, #6
 800124c:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <main+0xec>)
 800124e:	22c8      	movs	r2, #200	@ 0xc8
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff fe5b 	bl	8000f0c <tof_ctrl_get_distance>
	  }

	  if(distance < DISTANCE_SLOW){
 8001256:	1dbb      	adds	r3, r7, #6
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	2b31      	cmp	r3, #49	@ 0x31
 800125c:	d807      	bhi.n	800126e <main+0xaa>
		  HAL_GPIO_WritePin(SLOW_OUT_GPIO_Port, SLOW_OUT_Pin, GPIO_PIN_SET);
 800125e:	23a0      	movs	r3, #160	@ 0xa0
 8001260:	05db      	lsls	r3, r3, #23
 8001262:	2201      	movs	r2, #1
 8001264:	2110      	movs	r1, #16
 8001266:	0018      	movs	r0, r3
 8001268:	f000 fedb 	bl	8002022 <HAL_GPIO_WritePin>
 800126c:	e006      	b.n	800127c <main+0xb8>
	  } else {
		  HAL_GPIO_WritePin(SLOW_OUT_GPIO_Port, SLOW_OUT_Pin, GPIO_PIN_RESET);
 800126e:	23a0      	movs	r3, #160	@ 0xa0
 8001270:	05db      	lsls	r3, r3, #23
 8001272:	2200      	movs	r2, #0
 8001274:	2110      	movs	r1, #16
 8001276:	0018      	movs	r0, r3
 8001278:	f000 fed3 	bl	8002022 <HAL_GPIO_WritePin>
	  }

	  if(distance < DISTANCE_STOP){
 800127c:	1dbb      	adds	r3, r7, #6
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	2b13      	cmp	r3, #19
 8001282:	d807      	bhi.n	8001294 <main+0xd0>
		  HAL_GPIO_WritePin(STOP_OUT_GPIO_Port, SLOW_OUT_Pin, GPIO_PIN_SET);
 8001284:	23a0      	movs	r3, #160	@ 0xa0
 8001286:	05db      	lsls	r3, r3, #23
 8001288:	2201      	movs	r2, #1
 800128a:	2110      	movs	r1, #16
 800128c:	0018      	movs	r0, r3
 800128e:	f000 fec8 	bl	8002022 <HAL_GPIO_WritePin>
 8001292:	e7b6      	b.n	8001202 <main+0x3e>
	  } else {
		  HAL_GPIO_WritePin(STOP_OUT_GPIO_Port, SLOW_OUT_Pin, GPIO_PIN_RESET);
 8001294:	23a0      	movs	r3, #160	@ 0xa0
 8001296:	05db      	lsls	r3, r3, #23
 8001298:	2200      	movs	r2, #0
 800129a:	2110      	movs	r1, #16
 800129c:	0018      	movs	r0, r3
 800129e:	f000 fec0 	bl	8002022 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(X_DIR_IN_GPIO_Port, X_DIR_IN_Pin) == GPIO_PIN_SET){
 80012a2:	e7ae      	b.n	8001202 <main+0x3e>
 80012a4:	20000260 	.word	0x20000260
 80012a8:	20000270 	.word	0x20000270
 80012ac:	20000280 	.word	0x20000280
 80012b0:	20000290 	.word	0x20000290

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b099      	sub	sp, #100	@ 0x64
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	242c      	movs	r4, #44	@ 0x2c
 80012bc:	193b      	adds	r3, r7, r4
 80012be:	0018      	movs	r0, r3
 80012c0:	2334      	movs	r3, #52	@ 0x34
 80012c2:	001a      	movs	r2, r3
 80012c4:	2100      	movs	r1, #0
 80012c6:	f003 fb2f 	bl	8004928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ca:	2318      	movs	r3, #24
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	0018      	movs	r0, r3
 80012d0:	2314      	movs	r3, #20
 80012d2:	001a      	movs	r2, r3
 80012d4:	2100      	movs	r1, #0
 80012d6:	f003 fb27 	bl	8004928 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012da:	003b      	movs	r3, r7
 80012dc:	0018      	movs	r0, r3
 80012de:	2318      	movs	r3, #24
 80012e0:	001a      	movs	r2, r3
 80012e2:	2100      	movs	r1, #0
 80012e4:	f003 fb20 	bl	8004928 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001398 <SystemClock_Config+0xe4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a2b      	ldr	r2, [pc, #172]	@ (800139c <SystemClock_Config+0xe8>)
 80012ee:	401a      	ands	r2, r3
 80012f0:	4b29      	ldr	r3, [pc, #164]	@ (8001398 <SystemClock_Config+0xe4>)
 80012f2:	2180      	movs	r1, #128	@ 0x80
 80012f4:	0109      	lsls	r1, r1, #4
 80012f6:	430a      	orrs	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012fa:	0021      	movs	r1, r4
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	2202      	movs	r2, #2
 8001300:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001302:	187b      	adds	r3, r7, r1
 8001304:	2201      	movs	r2, #1
 8001306:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001308:	187b      	adds	r3, r7, r1
 800130a:	2210      	movs	r2, #16
 800130c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130e:	187b      	adds	r3, r7, r1
 8001310:	2202      	movs	r2, #2
 8001312:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001314:	187b      	adds	r3, r7, r1
 8001316:	2200      	movs	r2, #0
 8001318:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800131a:	187b      	adds	r3, r7, r1
 800131c:	2280      	movs	r2, #128	@ 0x80
 800131e:	02d2      	lsls	r2, r2, #11
 8001320:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001322:	187b      	adds	r3, r7, r1
 8001324:	2280      	movs	r2, #128	@ 0x80
 8001326:	03d2      	lsls	r2, r2, #15
 8001328:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132a:	187b      	adds	r3, r7, r1
 800132c:	0018      	movs	r0, r3
 800132e:	f001 fca7 	bl	8002c80 <HAL_RCC_OscConfig>
 8001332:	1e03      	subs	r3, r0, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001336:	f000 f9d5 	bl	80016e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133a:	2118      	movs	r1, #24
 800133c:	187b      	adds	r3, r7, r1
 800133e:	220f      	movs	r2, #15
 8001340:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2203      	movs	r2, #3
 8001346:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001348:	187b      	adds	r3, r7, r1
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800134e:	187b      	adds	r3, r7, r1
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001354:	187b      	adds	r3, r7, r1
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2101      	movs	r1, #1
 800135e:	0018      	movs	r0, r3
 8001360:	f002 f80a 	bl	8003378 <HAL_RCC_ClockConfig>
 8001364:	1e03      	subs	r3, r0, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001368:	f000 f9bc 	bl	80016e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800136c:	003b      	movs	r3, r7
 800136e:	220a      	movs	r2, #10
 8001370:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001372:	003b      	movs	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001378:	003b      	movs	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800137e:	003b      	movs	r3, r7
 8001380:	0018      	movs	r0, r3
 8001382:	f002 fa1d 	bl	80037c0 <HAL_RCCEx_PeriphCLKConfig>
 8001386:	1e03      	subs	r3, r0, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800138a:	f000 f9ab 	bl	80016e4 <Error_Handler>
  }
}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b019      	add	sp, #100	@ 0x64
 8001394:	bd90      	pop	{r4, r7, pc}
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	40007000 	.word	0x40007000
 800139c:	ffffe7ff 	.word	0xffffe7ff

080013a0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	2007      	movs	r0, #7
 80013aa:	f000 fc7d 	bl	8001ca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80013ae:	2007      	movs	r0, #7
 80013b0:	f000 fc8f 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2005      	movs	r0, #5
 80013ba:	f000 fc75 	bl	8001ca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80013be:	2005      	movs	r0, #5
 80013c0:	f000 fc87 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
}
 80013c4:	46c0      	nop			@ (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001444 <MX_I2C1_Init+0x78>)
 80013d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001448 <MX_I2C1_Init+0x7c>)
 80013da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013dc:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e2:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013ee:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <MX_I2C1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001406:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <MX_I2C1_Init+0x74>)
 8001408:	0018      	movs	r0, r3
 800140a:	f000 fe4d 	bl	80020a8 <HAL_I2C_Init>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d001      	beq.n	8001416 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001412:	f000 f967 	bl	80016e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <MX_I2C1_Init+0x74>)
 8001418:	2100      	movs	r1, #0
 800141a:	0018      	movs	r0, r3
 800141c:	f001 fb98 	bl	8002b50 <HAL_I2CEx_ConfigAnalogFilter>
 8001420:	1e03      	subs	r3, r0, #0
 8001422:	d001      	beq.n	8001428 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001424:	f000 f95e 	bl	80016e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <MX_I2C1_Init+0x74>)
 800142a:	2100      	movs	r1, #0
 800142c:	0018      	movs	r0, r3
 800142e:	f001 fbdb 	bl	8002be8 <HAL_I2CEx_ConfigDigitalFilter>
 8001432:	1e03      	subs	r3, r0, #0
 8001434:	d001      	beq.n	800143a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001436:	f000 f955 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000184 	.word	0x20000184
 8001444:	40005400 	.word	0x40005400
 8001448:	00b07cb4 	.word	0x00b07cb4

0800144c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001450:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <MX_USART2_UART_Init+0x58>)
 8001452:	4a15      	ldr	r2, [pc, #84]	@ (80014a8 <MX_USART2_UART_Init+0x5c>)
 8001454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001456:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <MX_USART2_UART_Init+0x58>)
 8001458:	22e1      	movs	r2, #225	@ 0xe1
 800145a:	0252      	lsls	r2, r2, #9
 800145c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <MX_USART2_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <MX_USART2_UART_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <MX_USART2_UART_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <MX_USART2_UART_Init+0x58>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <MX_USART2_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <MX_USART2_UART_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001482:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <MX_USART2_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <MX_USART2_UART_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148e:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <MX_USART2_UART_Init+0x58>)
 8001490:	0018      	movs	r0, r3
 8001492:	f002 fac1 	bl	8003a18 <HAL_UART_Init>
 8001496:	1e03      	subs	r3, r0, #0
 8001498:	d001      	beq.n	800149e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800149a:	f000 f923 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200001d8 	.word	0x200001d8
 80014a8:	40004400 	.word	0x40004400

080014ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b089      	sub	sp, #36	@ 0x24
 80014b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	240c      	movs	r4, #12
 80014b4:	193b      	adds	r3, r7, r4
 80014b6:	0018      	movs	r0, r3
 80014b8:	2314      	movs	r3, #20
 80014ba:	001a      	movs	r2, r3
 80014bc:	2100      	movs	r1, #0
 80014be:	f003 fa33 	bl	8004928 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	4b49      	ldr	r3, [pc, #292]	@ (80015e8 <MX_GPIO_Init+0x13c>)
 80014c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014c6:	4b48      	ldr	r3, [pc, #288]	@ (80015e8 <MX_GPIO_Init+0x13c>)
 80014c8:	2104      	movs	r1, #4
 80014ca:	430a      	orrs	r2, r1
 80014cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014ce:	4b46      	ldr	r3, [pc, #280]	@ (80015e8 <MX_GPIO_Init+0x13c>)
 80014d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d2:	2204      	movs	r2, #4
 80014d4:	4013      	ands	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b43      	ldr	r3, [pc, #268]	@ (80015e8 <MX_GPIO_Init+0x13c>)
 80014dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014de:	4b42      	ldr	r3, [pc, #264]	@ (80015e8 <MX_GPIO_Init+0x13c>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014e6:	4b40      	ldr	r3, [pc, #256]	@ (80015e8 <MX_GPIO_Init+0x13c>)
 80014e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ea:	2201      	movs	r2, #1
 80014ec:	4013      	ands	r3, r2
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	4b3d      	ldr	r3, [pc, #244]	@ (80015e8 <MX_GPIO_Init+0x13c>)
 80014f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014f6:	4b3c      	ldr	r3, [pc, #240]	@ (80015e8 <MX_GPIO_Init+0x13c>)
 80014f8:	2102      	movs	r1, #2
 80014fa:	430a      	orrs	r2, r1
 80014fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014fe:	4b3a      	ldr	r3, [pc, #232]	@ (80015e8 <MX_GPIO_Init+0x13c>)
 8001500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001502:	2202      	movs	r2, #2
 8001504:	4013      	ands	r3, r2
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STOP_OUT_Pin|SLOW_OUT_Pin|SHUT_ToF1_Pin, GPIO_PIN_RESET);
 800150a:	238c      	movs	r3, #140	@ 0x8c
 800150c:	0059      	lsls	r1, r3, #1
 800150e:	23a0      	movs	r3, #160	@ 0xa0
 8001510:	05db      	lsls	r3, r3, #23
 8001512:	2200      	movs	r2, #0
 8001514:	0018      	movs	r0, r3
 8001516:	f000 fd84 	bl	8002022 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHUT_ToF2_Pin|SHUT_ToF3_Pin|SHUT_ToF4_Pin, GPIO_PIN_RESET);
 800151a:	4b34      	ldr	r3, [pc, #208]	@ (80015ec <MX_GPIO_Init+0x140>)
 800151c:	2200      	movs	r2, #0
 800151e:	2129      	movs	r1, #41	@ 0x29
 8001520:	0018      	movs	r0, r3
 8001522:	f000 fd7e 	bl	8002022 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : X_DIR_IN_Pin Y_DIR_IN_Pin */
  GPIO_InitStruct.Pin = X_DIR_IN_Pin|Y_DIR_IN_Pin;
 8001526:	193b      	adds	r3, r7, r4
 8001528:	2203      	movs	r2, #3
 800152a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152c:	193b      	adds	r3, r7, r4
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001532:	193b      	adds	r3, r7, r4
 8001534:	2202      	movs	r2, #2
 8001536:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	193a      	adds	r2, r7, r4
 800153a:	23a0      	movs	r3, #160	@ 0xa0
 800153c:	05db      	lsls	r3, r3, #23
 800153e:	0011      	movs	r1, r2
 8001540:	0018      	movs	r0, r3
 8001542:	f000 fbe3 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_OUT_Pin SLOW_OUT_Pin SHUT_ToF1_Pin */
  GPIO_InitStruct.Pin = STOP_OUT_Pin|SLOW_OUT_Pin|SHUT_ToF1_Pin;
 8001546:	0021      	movs	r1, r4
 8001548:	187b      	adds	r3, r7, r1
 800154a:	228c      	movs	r2, #140	@ 0x8c
 800154c:	0052      	lsls	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	000c      	movs	r4, r1
 8001552:	193b      	adds	r3, r7, r4
 8001554:	2201      	movs	r2, #1
 8001556:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	193b      	adds	r3, r7, r4
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	193b      	adds	r3, r7, r4
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	193a      	adds	r2, r7, r4
 8001566:	23a0      	movs	r3, #160	@ 0xa0
 8001568:	05db      	lsls	r3, r3, #23
 800156a:	0011      	movs	r1, r2
 800156c:	0018      	movs	r0, r3
 800156e:	f000 fbcd 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SHUT_ToF2_Pin SHUT_ToF3_Pin SHUT_ToF4_Pin */
  GPIO_InitStruct.Pin = SHUT_ToF2_Pin|SHUT_ToF3_Pin|SHUT_ToF4_Pin;
 8001572:	193b      	adds	r3, r7, r4
 8001574:	2229      	movs	r2, #41	@ 0x29
 8001576:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	193b      	adds	r3, r7, r4
 800157a:	2201      	movs	r2, #1
 800157c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	193b      	adds	r3, r7, r4
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	193b      	adds	r3, r7, r4
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	193b      	adds	r3, r7, r4
 800158c:	4a17      	ldr	r2, [pc, #92]	@ (80015ec <MX_GPIO_Init+0x140>)
 800158e:	0019      	movs	r1, r3
 8001590:	0010      	movs	r0, r2
 8001592:	f000 fbbb 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ToF1_Pin INT_ToF3_Pin */
  GPIO_InitStruct.Pin = INT_ToF1_Pin|INT_ToF3_Pin;
 8001596:	0021      	movs	r1, r4
 8001598:	187b      	adds	r3, r7, r1
 800159a:	2212      	movs	r2, #18
 800159c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	2284      	movs	r2, #132	@ 0x84
 80015a2:	0392      	lsls	r2, r2, #14
 80015a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	187b      	adds	r3, r7, r1
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ac:	000c      	movs	r4, r1
 80015ae:	187b      	adds	r3, r7, r1
 80015b0:	4a0e      	ldr	r2, [pc, #56]	@ (80015ec <MX_GPIO_Init+0x140>)
 80015b2:	0019      	movs	r1, r3
 80015b4:	0010      	movs	r0, r2
 80015b6:	f000 fba9 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ToF4_Pin INT_ToF2_Pin */
  GPIO_InitStruct.Pin = INT_ToF4_Pin|INT_ToF2_Pin;
 80015ba:	0021      	movs	r1, r4
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	22c0      	movs	r2, #192	@ 0xc0
 80015c0:	0152      	lsls	r2, r2, #5
 80015c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	2284      	movs	r2, #132	@ 0x84
 80015c8:	0392      	lsls	r2, r2, #14
 80015ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	187a      	adds	r2, r7, r1
 80015d4:	23a0      	movs	r3, #160	@ 0xa0
 80015d6:	05db      	lsls	r3, r3, #23
 80015d8:	0011      	movs	r1, r2
 80015da:	0018      	movs	r0, r3
 80015dc:	f000 fb96 	bl	8001d0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b009      	add	sp, #36	@ 0x24
 80015e6:	bd90      	pop	{r4, r7, pc}
 80015e8:	40021000 	.word	0x40021000
 80015ec:	50000400 	.word	0x50000400

080015f0 <TOF1_Init>:

/* USER CODE BEGIN 4 */

static void TOF1_Init(){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	tof_1.tof_addr = 0x52;
 80015f4:	4b09      	ldr	r3, [pc, #36]	@ (800161c <TOF1_Init+0x2c>)
 80015f6:	2252      	movs	r2, #82	@ 0x52
 80015f8:	601a      	str	r2, [r3, #0]
	tof_1.tof_port = SHUT_ToF1_GPIO_Port;
 80015fa:	4b08      	ldr	r3, [pc, #32]	@ (800161c <TOF1_Init+0x2c>)
 80015fc:	22a0      	movs	r2, #160	@ 0xa0
 80015fe:	05d2      	lsls	r2, r2, #23
 8001600:	605a      	str	r2, [r3, #4]
	tof_1.tof_pin = SHUT_ToF1_Pin;
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <TOF1_Init+0x2c>)
 8001604:	2280      	movs	r2, #128	@ 0x80
 8001606:	0052      	lsls	r2, r2, #1
 8001608:	819a      	strh	r2, [r3, #12]
	tof_1.tof_intport = INT_ToF1_GPIO_Port;
 800160a:	4b04      	ldr	r3, [pc, #16]	@ (800161c <TOF1_Init+0x2c>)
 800160c:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <TOF1_Init+0x30>)
 800160e:	609a      	str	r2, [r3, #8]
	tof_1.tof_intpin = INT_ToF1_Pin;
 8001610:	4b02      	ldr	r3, [pc, #8]	@ (800161c <TOF1_Init+0x2c>)
 8001612:	2202      	movs	r2, #2
 8001614:	81da      	strh	r2, [r3, #14]
}
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000260 	.word	0x20000260
 8001620:	50000400 	.word	0x50000400

08001624 <TOF2_Init>:

static void TOF2_Init(){
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	tof_2.tof_addr = 0x52;
 8001628:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <TOF2_Init+0x2c>)
 800162a:	2252      	movs	r2, #82	@ 0x52
 800162c:	601a      	str	r2, [r3, #0]
	tof_2.tof_port = SHUT_ToF2_GPIO_Port;
 800162e:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <TOF2_Init+0x2c>)
 8001630:	4a08      	ldr	r2, [pc, #32]	@ (8001654 <TOF2_Init+0x30>)
 8001632:	605a      	str	r2, [r3, #4]
	tof_2.tof_pin = SHUT_ToF2_Pin;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <TOF2_Init+0x2c>)
 8001636:	2201      	movs	r2, #1
 8001638:	819a      	strh	r2, [r3, #12]
	tof_2.tof_intport = INT_ToF2_GPIO_Port;
 800163a:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <TOF2_Init+0x2c>)
 800163c:	22a0      	movs	r2, #160	@ 0xa0
 800163e:	05d2      	lsls	r2, r2, #23
 8001640:	609a      	str	r2, [r3, #8]
	tof_2.tof_intpin = INT_ToF2_Pin;
 8001642:	4b03      	ldr	r3, [pc, #12]	@ (8001650 <TOF2_Init+0x2c>)
 8001644:	2280      	movs	r2, #128	@ 0x80
 8001646:	0152      	lsls	r2, r2, #5
 8001648:	81da      	strh	r2, [r3, #14]
}
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000270 	.word	0x20000270
 8001654:	50000400 	.word	0x50000400

08001658 <TOF3_Init>:

static void TOF3_Init(){
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	tof_3.tof_addr = 0x52;
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <TOF3_Init+0x28>)
 800165e:	2252      	movs	r2, #82	@ 0x52
 8001660:	601a      	str	r2, [r3, #0]
	tof_3.tof_port = SHUT_ToF3_GPIO_Port;
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <TOF3_Init+0x28>)
 8001664:	4a07      	ldr	r2, [pc, #28]	@ (8001684 <TOF3_Init+0x2c>)
 8001666:	605a      	str	r2, [r3, #4]
	tof_3.tof_pin = SHUT_ToF3_Pin;
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <TOF3_Init+0x28>)
 800166a:	2208      	movs	r2, #8
 800166c:	819a      	strh	r2, [r3, #12]
	tof_3.tof_intport = INT_ToF3_GPIO_Port;
 800166e:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <TOF3_Init+0x28>)
 8001670:	4a04      	ldr	r2, [pc, #16]	@ (8001684 <TOF3_Init+0x2c>)
 8001672:	609a      	str	r2, [r3, #8]
	tof_3.tof_intpin = INT_ToF3_Pin;
 8001674:	4b02      	ldr	r3, [pc, #8]	@ (8001680 <TOF3_Init+0x28>)
 8001676:	2210      	movs	r2, #16
 8001678:	81da      	strh	r2, [r3, #14]
}
 800167a:	46c0      	nop			@ (mov r8, r8)
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000280 	.word	0x20000280
 8001684:	50000400 	.word	0x50000400

08001688 <TOF4_Init>:

static void TOF4_Init(){
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	tof_4.tof_addr = 0x52;
 800168c:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <TOF4_Init+0x2c>)
 800168e:	2252      	movs	r2, #82	@ 0x52
 8001690:	601a      	str	r2, [r3, #0]
	tof_4.tof_port = SHUT_ToF4_GPIO_Port;
 8001692:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <TOF4_Init+0x2c>)
 8001694:	4a08      	ldr	r2, [pc, #32]	@ (80016b8 <TOF4_Init+0x30>)
 8001696:	605a      	str	r2, [r3, #4]
	tof_4.tof_pin = SHUT_ToF4_Pin;
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <TOF4_Init+0x2c>)
 800169a:	2220      	movs	r2, #32
 800169c:	819a      	strh	r2, [r3, #12]
	tof_4.tof_intport = INT_ToF4_GPIO_Port;
 800169e:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <TOF4_Init+0x2c>)
 80016a0:	22a0      	movs	r2, #160	@ 0xa0
 80016a2:	05d2      	lsls	r2, r2, #23
 80016a4:	609a      	str	r2, [r3, #8]
	tof_4.tof_intpin = INT_ToF4_Pin;
 80016a6:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <TOF4_Init+0x2c>)
 80016a8:	2280      	movs	r2, #128	@ 0x80
 80016aa:	0112      	lsls	r2, r2, #4
 80016ac:	81da      	strh	r2, [r3, #14]
}
 80016ae:	46c0      	nop			@ (mov r8, r8)
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000290 	.word	0x20000290
 80016b8:	50000400 	.word	0x50000400

080016bc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <__io_putchar+0x20>)
 80016c6:	1d39      	adds	r1, r7, #4
 80016c8:	4805      	ldr	r0, [pc, #20]	@ (80016e0 <__io_putchar+0x24>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	f002 f9f8 	bl	8003ac0 <HAL_UART_Transmit>

  return ch;
 80016d0:	687b      	ldr	r3, [r7, #4]
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	0000ffff 	.word	0x0000ffff
 80016e0:	200001d8 	.word	0x200001d8

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ec:	46c0      	nop			@ (mov r8, r8)
 80016ee:	e7fd      	b.n	80016ec <Error_Handler+0x8>

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f4:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <HAL_MspInit+0x24>)
 80016f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <HAL_MspInit+0x24>)
 80016fa:	2101      	movs	r1, #1
 80016fc:	430a      	orrs	r2, r1
 80016fe:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001700:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <HAL_MspInit+0x24>)
 8001702:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <HAL_MspInit+0x24>)
 8001706:	2180      	movs	r1, #128	@ 0x80
 8001708:	0549      	lsls	r1, r1, #21
 800170a:	430a      	orrs	r2, r1
 800170c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170e:	46c0      	nop			@ (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000

08001718 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b089      	sub	sp, #36	@ 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	240c      	movs	r4, #12
 8001722:	193b      	adds	r3, r7, r4
 8001724:	0018      	movs	r0, r3
 8001726:	2314      	movs	r3, #20
 8001728:	001a      	movs	r2, r3
 800172a:	2100      	movs	r1, #0
 800172c:	f003 f8fc 	bl	8004928 <memset>
  if(hi2c->Instance==I2C1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a17      	ldr	r2, [pc, #92]	@ (8001794 <HAL_I2C_MspInit+0x7c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d128      	bne.n	800178c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <HAL_I2C_MspInit+0x80>)
 800173c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800173e:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <HAL_I2C_MspInit+0x80>)
 8001740:	2102      	movs	r1, #2
 8001742:	430a      	orrs	r2, r1
 8001744:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001746:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <HAL_I2C_MspInit+0x80>)
 8001748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174a:	2202      	movs	r2, #2
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001752:	0021      	movs	r1, r4
 8001754:	187b      	adds	r3, r7, r1
 8001756:	22c0      	movs	r2, #192	@ 0xc0
 8001758:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175a:	187b      	adds	r3, r7, r1
 800175c:	2212      	movs	r2, #18
 800175e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001760:	187b      	adds	r3, r7, r1
 8001762:	2201      	movs	r2, #1
 8001764:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	187b      	adds	r3, r7, r1
 8001768:	2203      	movs	r2, #3
 800176a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800176c:	187b      	adds	r3, r7, r1
 800176e:	2201      	movs	r2, #1
 8001770:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001772:	187b      	adds	r3, r7, r1
 8001774:	4a09      	ldr	r2, [pc, #36]	@ (800179c <HAL_I2C_MspInit+0x84>)
 8001776:	0019      	movs	r1, r3
 8001778:	0010      	movs	r0, r2
 800177a:	f000 fac7 	bl	8001d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_I2C_MspInit+0x80>)
 8001780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001782:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <HAL_I2C_MspInit+0x80>)
 8001784:	2180      	movs	r1, #128	@ 0x80
 8001786:	0389      	lsls	r1, r1, #14
 8001788:	430a      	orrs	r2, r1
 800178a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800178c:	46c0      	nop			@ (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	b009      	add	sp, #36	@ 0x24
 8001792:	bd90      	pop	{r4, r7, pc}
 8001794:	40005400 	.word	0x40005400
 8001798:	40021000 	.word	0x40021000
 800179c:	50000400 	.word	0x50000400

080017a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	240c      	movs	r4, #12
 80017aa:	193b      	adds	r3, r7, r4
 80017ac:	0018      	movs	r0, r3
 80017ae:	2314      	movs	r3, #20
 80017b0:	001a      	movs	r2, r3
 80017b2:	2100      	movs	r1, #0
 80017b4:	f003 f8b8 	bl	8004928 <memset>
  if(huart->Instance==USART2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a18      	ldr	r2, [pc, #96]	@ (8001820 <HAL_UART_MspInit+0x80>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d129      	bne.n	8001816 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017c2:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <HAL_UART_MspInit+0x84>)
 80017c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017c6:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <HAL_UART_MspInit+0x84>)
 80017c8:	2180      	movs	r1, #128	@ 0x80
 80017ca:	0289      	lsls	r1, r1, #10
 80017cc:	430a      	orrs	r2, r1
 80017ce:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <HAL_UART_MspInit+0x84>)
 80017d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017d4:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <HAL_UART_MspInit+0x84>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	430a      	orrs	r2, r1
 80017da:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_UART_MspInit+0x84>)
 80017de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e0:	2201      	movs	r2, #1
 80017e2:	4013      	ands	r3, r2
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80017e8:	0021      	movs	r1, r4
 80017ea:	187b      	adds	r3, r7, r1
 80017ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <HAL_UART_MspInit+0x88>)
 80017ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	187b      	adds	r3, r7, r1
 80017f2:	2202      	movs	r2, #2
 80017f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	2203      	movs	r2, #3
 8001800:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001802:	187b      	adds	r3, r7, r1
 8001804:	2204      	movs	r2, #4
 8001806:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	187a      	adds	r2, r7, r1
 800180a:	23a0      	movs	r3, #160	@ 0xa0
 800180c:	05db      	lsls	r3, r3, #23
 800180e:	0011      	movs	r1, r2
 8001810:	0018      	movs	r0, r3
 8001812:	f000 fa7b 	bl	8001d0c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001816:	46c0      	nop			@ (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	b009      	add	sp, #36	@ 0x24
 800181c:	bd90      	pop	{r4, r7, pc}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	40004400 	.word	0x40004400
 8001824:	40021000 	.word	0x40021000
 8001828:	00008004 	.word	0x00008004

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001830:	46c0      	nop			@ (mov r8, r8)
 8001832:	e7fd      	b.n	8001830 <NMI_Handler+0x4>

08001834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001838:	46c0      	nop			@ (mov r8, r8)
 800183a:	e7fd      	b.n	8001838 <HardFault_Handler+0x4>

0800183c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001840:	46c0      	nop			@ (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001854:	f000 f93c 	bl	8001ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001858:	46c0      	nop			@ (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ToF1_Pin);
 8001862:	2002      	movs	r0, #2
 8001864:	f000 fbfa 	bl	800205c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001868:	46c0      	nop			@ (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ToF3_Pin);
 8001872:	2010      	movs	r0, #16
 8001874:	f000 fbf2 	bl	800205c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ToF4_Pin);
 8001878:	2380      	movs	r3, #128	@ 0x80
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	0018      	movs	r0, r3
 800187e:	f000 fbed 	bl	800205c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ToF2_Pin);
 8001882:	2380      	movs	r3, #128	@ 0x80
 8001884:	015b      	lsls	r3, r3, #5
 8001886:	0018      	movs	r0, r3
 8001888:	f000 fbe8 	bl	800205c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800188c:	46c0      	nop			@ (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e00a      	b.n	80018ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018a4:	e000      	b.n	80018a8 <_read+0x16>
 80018a6:	bf00      	nop
 80018a8:	0001      	movs	r1, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	60ba      	str	r2, [r7, #8]
 80018b0:	b2ca      	uxtb	r2, r1
 80018b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	429a      	cmp	r2, r3
 80018c0:	dbf0      	blt.n	80018a4 <_read+0x12>
  }

  return len;
 80018c2:	687b      	ldr	r3, [r7, #4]
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b006      	add	sp, #24
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e009      	b.n	80018f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	60ba      	str	r2, [r7, #8]
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	0018      	movs	r0, r3
 80018e8:	f7ff fee8 	bl	80016bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3301      	adds	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dbf1      	blt.n	80018de <_write+0x12>
  }
  return len;
 80018fa:	687b      	ldr	r3, [r7, #4]
}
 80018fc:	0018      	movs	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	b006      	add	sp, #24
 8001902:	bd80      	pop	{r7, pc}

08001904 <_close>:

int _close(int file)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800190c:	2301      	movs	r3, #1
 800190e:	425b      	negs	r3, r3
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b002      	add	sp, #8
 8001916:	bd80      	pop	{r7, pc}

08001918 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2280      	movs	r2, #128	@ 0x80
 8001926:	0192      	lsls	r2, r2, #6
 8001928:	605a      	str	r2, [r3, #4]
  return 0;
 800192a:	2300      	movs	r3, #0
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	b002      	add	sp, #8
 8001932:	bd80      	pop	{r7, pc}

08001934 <_isatty>:

int _isatty(int file)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800193c:	2301      	movs	r3, #1
}
 800193e:	0018      	movs	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	b002      	add	sp, #8
 8001944:	bd80      	pop	{r7, pc}

08001946 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001952:	2300      	movs	r3, #0
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b004      	add	sp, #16
 800195a:	bd80      	pop	{r7, pc}

0800195c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001964:	4a14      	ldr	r2, [pc, #80]	@ (80019b8 <_sbrk+0x5c>)
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <_sbrk+0x60>)
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001970:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001978:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <_sbrk+0x64>)
 800197a:	4a12      	ldr	r2, [pc, #72]	@ (80019c4 <_sbrk+0x68>)
 800197c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197e:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	18d3      	adds	r3, r2, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	429a      	cmp	r2, r3
 800198a:	d207      	bcs.n	800199c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800198c:	f003 f822 	bl	80049d4 <__errno>
 8001990:	0003      	movs	r3, r0
 8001992:	220c      	movs	r2, #12
 8001994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001996:	2301      	movs	r3, #1
 8001998:	425b      	negs	r3, r3
 800199a:	e009      	b.n	80019b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800199c:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a2:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	18d2      	adds	r2, r2, r3
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <_sbrk+0x64>)
 80019ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80019ae:	68fb      	ldr	r3, [r7, #12]
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b006      	add	sp, #24
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20002000 	.word	0x20002000
 80019bc:	00000400 	.word	0x00000400
 80019c0:	200002a0 	.word	0x200002a0
 80019c4:	200003f8 	.word	0x200003f8

080019c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019cc:	46c0      	nop			@ (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80019d4:	480d      	ldr	r0, [pc, #52]	@ (8001a0c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80019d6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019d8:	f7ff fff6 	bl	80019c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019dc:	480c      	ldr	r0, [pc, #48]	@ (8001a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80019de:	490d      	ldr	r1, [pc, #52]	@ (8001a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a18 <LoopForever+0xe>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e4:	e002      	b.n	80019ec <LoopCopyDataInit>

080019e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ea:	3304      	adds	r3, #4

080019ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f0:	d3f9      	bcc.n	80019e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80019f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001a20 <LoopForever+0x16>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f8:	e001      	b.n	80019fe <LoopFillZerobss>

080019fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019fc:	3204      	adds	r2, #4

080019fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a00:	d3fb      	bcc.n	80019fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a02:	f002 ffed 	bl	80049e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a06:	f7ff fbdd 	bl	80011c4 <main>

08001a0a <LoopForever>:

LoopForever:
    b LoopForever
 8001a0a:	e7fe      	b.n	8001a0a <LoopForever>
   ldr   r0, =_estack
 8001a0c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a18:	080055b0 	.word	0x080055b0
  ldr r2, =_sbss
 8001a1c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a20:	200003f4 	.word	0x200003f4

08001a24 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC1_COMP_IRQHandler>
	...

08001a28 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a2e:	1dfb      	adds	r3, r7, #7
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001a34:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <HAL_Init+0x3c>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <HAL_Init+0x3c>)
 8001a3a:	2140      	movs	r1, #64	@ 0x40
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a40:	2000      	movs	r0, #0
 8001a42:	f000 f811 	bl	8001a68 <HAL_InitTick>
 8001a46:	1e03      	subs	r3, r0, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001a4a:	1dfb      	adds	r3, r7, #7
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	e001      	b.n	8001a56 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a52:	f7ff fe4d 	bl	80016f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a56:	1dfb      	adds	r3, r7, #7
 8001a58:	781b      	ldrb	r3, [r3, #0]
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	40022000 	.word	0x40022000

08001a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a70:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <HAL_InitTick+0x5c>)
 8001a72:	681c      	ldr	r4, [r3, #0]
 8001a74:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <HAL_InitTick+0x60>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	0019      	movs	r1, r3
 8001a7a:	23fa      	movs	r3, #250	@ 0xfa
 8001a7c:	0098      	lsls	r0, r3, #2
 8001a7e:	f7fe fb4d 	bl	800011c <__udivsi3>
 8001a82:	0003      	movs	r3, r0
 8001a84:	0019      	movs	r1, r3
 8001a86:	0020      	movs	r0, r4
 8001a88:	f7fe fb48 	bl	800011c <__udivsi3>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f000 f92f 	bl	8001cf2 <HAL_SYSTICK_Config>
 8001a94:	1e03      	subs	r3, r0, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e00f      	b.n	8001abc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d80b      	bhi.n	8001aba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	425b      	negs	r3, r3
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f000 f8fc 	bl	8001ca8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_InitTick+0x64>)
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e000      	b.n	8001abc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b003      	add	sp, #12
 8001ac2:	bd90      	pop	{r4, r7, pc}
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	20000004 	.word	0x20000004

08001ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_IncTick+0x1c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	001a      	movs	r2, r3
 8001ada:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <HAL_IncTick+0x20>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	18d2      	adds	r2, r2, r3
 8001ae0:	4b03      	ldr	r3, [pc, #12]	@ (8001af0 <HAL_IncTick+0x20>)
 8001ae2:	601a      	str	r2, [r3, #0]
}
 8001ae4:	46c0      	nop			@ (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			@ (mov r8, r8)
 8001aec:	20000008 	.word	0x20000008
 8001af0:	200002a4 	.word	0x200002a4

08001af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  return uwTick;
 8001af8:	4b02      	ldr	r3, [pc, #8]	@ (8001b04 <HAL_GetTick+0x10>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			@ (mov r8, r8)
 8001b04:	200002a4 	.word	0x200002a4

08001b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff fff0 	bl	8001af4 <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	d005      	beq.n	8001b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <HAL_Delay+0x44>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	001a      	movs	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	189b      	adds	r3, r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b2e:	46c0      	nop			@ (mov r8, r8)
 8001b30:	f7ff ffe0 	bl	8001af4 <HAL_GetTick>
 8001b34:	0002      	movs	r2, r0
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d8f7      	bhi.n	8001b30 <HAL_Delay+0x28>
  {
  }
}
 8001b40:	46c0      	nop			@ (mov r8, r8)
 8001b42:	46c0      	nop			@ (mov r8, r8)
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b004      	add	sp, #16
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	20000008 	.word	0x20000008

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	0002      	movs	r2, r0
 8001b58:	1dfb      	adds	r3, r7, #7
 8001b5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b5c:	1dfb      	adds	r3, r7, #7
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b62:	d809      	bhi.n	8001b78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b64:	1dfb      	adds	r3, r7, #7
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	001a      	movs	r2, r3
 8001b6a:	231f      	movs	r3, #31
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	4b04      	ldr	r3, [pc, #16]	@ (8001b80 <__NVIC_EnableIRQ+0x30>)
 8001b70:	2101      	movs	r1, #1
 8001b72:	4091      	lsls	r1, r2
 8001b74:	000a      	movs	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]
  }
}
 8001b78:	46c0      	nop			@ (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b002      	add	sp, #8
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	1dfb      	adds	r3, r7, #7
 8001b90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b92:	1dfb      	adds	r3, r7, #7
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b98:	d828      	bhi.n	8001bec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b9a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c58 <__NVIC_SetPriority+0xd4>)
 8001b9c:	1dfb      	adds	r3, r7, #7
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b25b      	sxtb	r3, r3
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	33c0      	adds	r3, #192	@ 0xc0
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	589b      	ldr	r3, [r3, r2]
 8001baa:	1dfa      	adds	r2, r7, #7
 8001bac:	7812      	ldrb	r2, [r2, #0]
 8001bae:	0011      	movs	r1, r2
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	00d2      	lsls	r2, r2, #3
 8001bb6:	21ff      	movs	r1, #255	@ 0xff
 8001bb8:	4091      	lsls	r1, r2
 8001bba:	000a      	movs	r2, r1
 8001bbc:	43d2      	mvns	r2, r2
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	019b      	lsls	r3, r3, #6
 8001bc6:	22ff      	movs	r2, #255	@ 0xff
 8001bc8:	401a      	ands	r2, r3
 8001bca:	1dfb      	adds	r3, r7, #7
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	0018      	movs	r0, r3
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	4003      	ands	r3, r0
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bd8:	481f      	ldr	r0, [pc, #124]	@ (8001c58 <__NVIC_SetPriority+0xd4>)
 8001bda:	1dfb      	adds	r3, r7, #7
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b25b      	sxtb	r3, r3
 8001be0:	089b      	lsrs	r3, r3, #2
 8001be2:	430a      	orrs	r2, r1
 8001be4:	33c0      	adds	r3, #192	@ 0xc0
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bea:	e031      	b.n	8001c50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bec:	4a1b      	ldr	r2, [pc, #108]	@ (8001c5c <__NVIC_SetPriority+0xd8>)
 8001bee:	1dfb      	adds	r3, r7, #7
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	230f      	movs	r3, #15
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	3b08      	subs	r3, #8
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	3306      	adds	r3, #6
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	18d3      	adds	r3, r2, r3
 8001c02:	3304      	adds	r3, #4
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	1dfa      	adds	r2, r7, #7
 8001c08:	7812      	ldrb	r2, [r2, #0]
 8001c0a:	0011      	movs	r1, r2
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	400a      	ands	r2, r1
 8001c10:	00d2      	lsls	r2, r2, #3
 8001c12:	21ff      	movs	r1, #255	@ 0xff
 8001c14:	4091      	lsls	r1, r2
 8001c16:	000a      	movs	r2, r1
 8001c18:	43d2      	mvns	r2, r2
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	019b      	lsls	r3, r3, #6
 8001c22:	22ff      	movs	r2, #255	@ 0xff
 8001c24:	401a      	ands	r2, r3
 8001c26:	1dfb      	adds	r3, r7, #7
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	4003      	ands	r3, r0
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c34:	4809      	ldr	r0, [pc, #36]	@ (8001c5c <__NVIC_SetPriority+0xd8>)
 8001c36:	1dfb      	adds	r3, r7, #7
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	001c      	movs	r4, r3
 8001c3c:	230f      	movs	r3, #15
 8001c3e:	4023      	ands	r3, r4
 8001c40:	3b08      	subs	r3, #8
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	430a      	orrs	r2, r1
 8001c46:	3306      	adds	r3, #6
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	18c3      	adds	r3, r0, r3
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	601a      	str	r2, [r3, #0]
}
 8001c50:	46c0      	nop			@ (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b003      	add	sp, #12
 8001c56:	bd90      	pop	{r4, r7, pc}
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	1e5a      	subs	r2, r3, #1
 8001c6c:	2380      	movs	r3, #128	@ 0x80
 8001c6e:	045b      	lsls	r3, r3, #17
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d301      	bcc.n	8001c78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c74:	2301      	movs	r3, #1
 8001c76:	e010      	b.n	8001c9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <SysTick_Config+0x44>)
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	3a01      	subs	r2, #1
 8001c7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c80:	2301      	movs	r3, #1
 8001c82:	425b      	negs	r3, r3
 8001c84:	2103      	movs	r1, #3
 8001c86:	0018      	movs	r0, r3
 8001c88:	f7ff ff7c 	bl	8001b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <SysTick_Config+0x44>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c92:	4b04      	ldr	r3, [pc, #16]	@ (8001ca4 <SysTick_Config+0x44>)
 8001c94:	2207      	movs	r2, #7
 8001c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b002      	add	sp, #8
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	e000e010 	.word	0xe000e010

08001ca8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	210f      	movs	r1, #15
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	1c02      	adds	r2, r0, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	187b      	adds	r3, r7, r1
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	0011      	movs	r1, r2
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff ff5d 	bl	8001b84 <__NVIC_SetPriority>
}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b004      	add	sp, #16
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	0002      	movs	r2, r0
 8001cda:	1dfb      	adds	r3, r7, #7
 8001cdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cde:	1dfb      	adds	r3, r7, #7
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7ff ff33 	bl	8001b50 <__NVIC_EnableIRQ>
}
 8001cea:	46c0      	nop			@ (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b002      	add	sp, #8
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7ff ffaf 	bl	8001c60 <SysTick_Config>
 8001d02:	0003      	movs	r3, r0
}
 8001d04:	0018      	movs	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b002      	add	sp, #8
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d22:	e149      	b.n	8001fb8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4091      	lsls	r1, r2
 8001d2e:	000a      	movs	r2, r1
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d100      	bne.n	8001d3c <HAL_GPIO_Init+0x30>
 8001d3a:	e13a      	b.n	8001fb2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2203      	movs	r2, #3
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d005      	beq.n	8001d54 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d130      	bne.n	8001db6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	409a      	lsls	r2, r3
 8001d62:	0013      	movs	r3, r2
 8001d64:	43da      	mvns	r2, r3
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	409a      	lsls	r2, r3
 8001d76:	0013      	movs	r3, r2
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	0013      	movs	r3, r2
 8001d92:	43da      	mvns	r2, r3
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	2201      	movs	r2, #1
 8001da2:	401a      	ands	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	409a      	lsls	r2, r3
 8001da8:	0013      	movs	r3, r2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2203      	movs	r2, #3
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d017      	beq.n	8001df2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	0013      	movs	r3, r2
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	409a      	lsls	r2, r3
 8001de4:	0013      	movs	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2203      	movs	r2, #3
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d123      	bne.n	8001e46 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	08da      	lsrs	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3208      	adds	r2, #8
 8001e06:	0092      	lsls	r2, r2, #2
 8001e08:	58d3      	ldr	r3, [r2, r3]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2207      	movs	r2, #7
 8001e10:	4013      	ands	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	409a      	lsls	r2, r3
 8001e18:	0013      	movs	r3, r2
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	691a      	ldr	r2, [r3, #16]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2107      	movs	r1, #7
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	0013      	movs	r3, r2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	0092      	lsls	r2, r2, #2
 8001e42:	6939      	ldr	r1, [r7, #16]
 8001e44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2203      	movs	r2, #3
 8001e52:	409a      	lsls	r2, r3
 8001e54:	0013      	movs	r3, r2
 8001e56:	43da      	mvns	r2, r3
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2203      	movs	r2, #3
 8001e64:	401a      	ands	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	0013      	movs	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	23c0      	movs	r3, #192	@ 0xc0
 8001e80:	029b      	lsls	r3, r3, #10
 8001e82:	4013      	ands	r3, r2
 8001e84:	d100      	bne.n	8001e88 <HAL_GPIO_Init+0x17c>
 8001e86:	e094      	b.n	8001fb2 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e88:	4b51      	ldr	r3, [pc, #324]	@ (8001fd0 <HAL_GPIO_Init+0x2c4>)
 8001e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e8c:	4b50      	ldr	r3, [pc, #320]	@ (8001fd0 <HAL_GPIO_Init+0x2c4>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	430a      	orrs	r2, r1
 8001e92:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e94:	4a4f      	ldr	r2, [pc, #316]	@ (8001fd4 <HAL_GPIO_Init+0x2c8>)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	589b      	ldr	r3, [r3, r2]
 8001ea0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	220f      	movs	r2, #15
 8001eac:	409a      	lsls	r2, r3
 8001eae:	0013      	movs	r3, r2
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	23a0      	movs	r3, #160	@ 0xa0
 8001ebc:	05db      	lsls	r3, r3, #23
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0x1de>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a44      	ldr	r2, [pc, #272]	@ (8001fd8 <HAL_GPIO_Init+0x2cc>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00d      	beq.n	8001ee6 <HAL_GPIO_Init+0x1da>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a43      	ldr	r2, [pc, #268]	@ (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d007      	beq.n	8001ee2 <HAL_GPIO_Init+0x1d6>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a42      	ldr	r2, [pc, #264]	@ (8001fe0 <HAL_GPIO_Init+0x2d4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d101      	bne.n	8001ede <HAL_GPIO_Init+0x1d2>
 8001eda:	2305      	movs	r3, #5
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x1e0>
 8001ede:	2306      	movs	r3, #6
 8001ee0:	e004      	b.n	8001eec <HAL_GPIO_Init+0x1e0>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e002      	b.n	8001eec <HAL_GPIO_Init+0x1e0>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_GPIO_Init+0x1e0>
 8001eea:	2300      	movs	r3, #0
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	2103      	movs	r1, #3
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	4093      	lsls	r3, r2
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001efc:	4935      	ldr	r1, [pc, #212]	@ (8001fd4 <HAL_GPIO_Init+0x2c8>)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3302      	adds	r3, #2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0a:	4b36      	ldr	r3, [pc, #216]	@ (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	43da      	mvns	r2, r3
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	2380      	movs	r3, #128	@ 0x80
 8001f20:	035b      	lsls	r3, r3, #13
 8001f22:	4013      	ands	r3, r2
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f34:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	039b      	lsls	r3, r3, #14
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f58:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001f5e:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	43da      	mvns	r2, r3
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	2380      	movs	r3, #128	@ 0x80
 8001f74:	029b      	lsls	r3, r3, #10
 8001f76:	4013      	ands	r3, r2
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f82:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f88:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	43da      	mvns	r2, r3
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	2380      	movs	r3, #128	@ 0x80
 8001f9e:	025b      	lsls	r3, r3, #9
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fac:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	40da      	lsrs	r2, r3
 8001fc0:	1e13      	subs	r3, r2, #0
 8001fc2:	d000      	beq.n	8001fc6 <HAL_GPIO_Init+0x2ba>
 8001fc4:	e6ae      	b.n	8001d24 <HAL_GPIO_Init+0x18>
  }
}
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	46c0      	nop			@ (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b006      	add	sp, #24
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	50000400 	.word	0x50000400
 8001fdc:	50000800 	.word	0x50000800
 8001fe0:	50001c00 	.word	0x50001c00
 8001fe4:	40010400 	.word	0x40010400

08001fe8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	000a      	movs	r2, r1
 8001ff2:	1cbb      	adds	r3, r7, #2
 8001ff4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	1cba      	adds	r2, r7, #2
 8001ffc:	8812      	ldrh	r2, [r2, #0]
 8001ffe:	4013      	ands	r3, r2
 8002000:	d004      	beq.n	800200c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002002:	230f      	movs	r3, #15
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	e003      	b.n	8002014 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800200c:	230f      	movs	r3, #15
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002014:	230f      	movs	r3, #15
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	781b      	ldrb	r3, [r3, #0]
}
 800201a:	0018      	movs	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	b004      	add	sp, #16
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	0008      	movs	r0, r1
 800202c:	0011      	movs	r1, r2
 800202e:	1cbb      	adds	r3, r7, #2
 8002030:	1c02      	adds	r2, r0, #0
 8002032:	801a      	strh	r2, [r3, #0]
 8002034:	1c7b      	adds	r3, r7, #1
 8002036:	1c0a      	adds	r2, r1, #0
 8002038:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800203a:	1c7b      	adds	r3, r7, #1
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d004      	beq.n	800204c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002042:	1cbb      	adds	r3, r7, #2
 8002044:	881a      	ldrh	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800204a:	e003      	b.n	8002054 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800204c:	1cbb      	adds	r3, r7, #2
 800204e:	881a      	ldrh	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002054:	46c0      	nop			@ (mov r8, r8)
 8002056:	46bd      	mov	sp, r7
 8002058:	b002      	add	sp, #8
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	0002      	movs	r2, r0
 8002064:	1dbb      	adds	r3, r7, #6
 8002066:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002068:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	1dba      	adds	r2, r7, #6
 800206e:	8812      	ldrh	r2, [r2, #0]
 8002070:	4013      	ands	r3, r2
 8002072:	d008      	beq.n	8002086 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002074:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002076:	1dba      	adds	r2, r7, #6
 8002078:	8812      	ldrh	r2, [r2, #0]
 800207a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800207c:	1dbb      	adds	r3, r7, #6
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	0018      	movs	r0, r3
 8002082:	f000 f807 	bl	8002094 <HAL_GPIO_EXTI_Callback>
  }
}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b002      	add	sp, #8
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	40010400 	.word	0x40010400

08002094 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	0002      	movs	r2, r0
 800209c:	1dbb      	adds	r3, r7, #6
 800209e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020a0:	46c0      	nop			@ (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b002      	add	sp, #8
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e082      	b.n	80021c0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2241      	movs	r2, #65	@ 0x41
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2240      	movs	r2, #64	@ 0x40
 80020ca:	2100      	movs	r1, #0
 80020cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff fb21 	bl	8001718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2241      	movs	r2, #65	@ 0x41
 80020da:	2124      	movs	r1, #36	@ 0x24
 80020dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2101      	movs	r1, #1
 80020ea:	438a      	bics	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4934      	ldr	r1, [pc, #208]	@ (80021c8 <HAL_I2C_Init+0x120>)
 80020f8:	400a      	ands	r2, r1
 80020fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4931      	ldr	r1, [pc, #196]	@ (80021cc <HAL_I2C_Init+0x124>)
 8002108:	400a      	ands	r2, r1
 800210a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d108      	bne.n	8002126 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2180      	movs	r1, #128	@ 0x80
 800211e:	0209      	lsls	r1, r1, #8
 8002120:	430a      	orrs	r2, r1
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	e007      	b.n	8002136 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2184      	movs	r1, #132	@ 0x84
 8002130:	0209      	lsls	r1, r1, #8
 8002132:	430a      	orrs	r2, r1
 8002134:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d104      	bne.n	8002148 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2280      	movs	r2, #128	@ 0x80
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	491f      	ldr	r1, [pc, #124]	@ (80021d0 <HAL_I2C_Init+0x128>)
 8002154:	430a      	orrs	r2, r1
 8002156:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	491a      	ldr	r1, [pc, #104]	@ (80021cc <HAL_I2C_Init+0x124>)
 8002164:	400a      	ands	r2, r1
 8002166:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	431a      	orrs	r2, r3
 8002172:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69d9      	ldr	r1, [r3, #28]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1a      	ldr	r2, [r3, #32]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2101      	movs	r1, #1
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2241      	movs	r2, #65	@ 0x41
 80021ac:	2120      	movs	r1, #32
 80021ae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2242      	movs	r2, #66	@ 0x42
 80021ba:	2100      	movs	r1, #0
 80021bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	f0ffffff 	.word	0xf0ffffff
 80021cc:	ffff7fff 	.word	0xffff7fff
 80021d0:	02008000 	.word	0x02008000

080021d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b089      	sub	sp, #36	@ 0x24
 80021d8:	af02      	add	r7, sp, #8
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	0008      	movs	r0, r1
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	0019      	movs	r1, r3
 80021e2:	230a      	movs	r3, #10
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	1c02      	adds	r2, r0, #0
 80021e8:	801a      	strh	r2, [r3, #0]
 80021ea:	2308      	movs	r3, #8
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	1c0a      	adds	r2, r1, #0
 80021f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2241      	movs	r2, #65	@ 0x41
 80021f6:	5c9b      	ldrb	r3, [r3, r2]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	d000      	beq.n	8002200 <HAL_I2C_Master_Transmit+0x2c>
 80021fe:	e0e7      	b.n	80023d0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2240      	movs	r2, #64	@ 0x40
 8002204:	5c9b      	ldrb	r3, [r3, r2]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_I2C_Master_Transmit+0x3a>
 800220a:	2302      	movs	r3, #2
 800220c:	e0e1      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1fe>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2240      	movs	r2, #64	@ 0x40
 8002212:	2101      	movs	r1, #1
 8002214:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002216:	f7ff fc6d 	bl	8001af4 <HAL_GetTick>
 800221a:	0003      	movs	r3, r0
 800221c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800221e:	2380      	movs	r3, #128	@ 0x80
 8002220:	0219      	lsls	r1, r3, #8
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2319      	movs	r3, #25
 800222a:	2201      	movs	r2, #1
 800222c:	f000 fa04 	bl	8002638 <I2C_WaitOnFlagUntilTimeout>
 8002230:	1e03      	subs	r3, r0, #0
 8002232:	d001      	beq.n	8002238 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0cc      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2241      	movs	r2, #65	@ 0x41
 800223c:	2121      	movs	r1, #33	@ 0x21
 800223e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2242      	movs	r2, #66	@ 0x42
 8002244:	2110      	movs	r1, #16
 8002246:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2208      	movs	r2, #8
 8002258:	18ba      	adds	r2, r7, r2
 800225a:	8812      	ldrh	r2, [r2, #0]
 800225c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	2bff      	cmp	r3, #255	@ 0xff
 800226c:	d911      	bls.n	8002292 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	22ff      	movs	r2, #255	@ 0xff
 8002272:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002278:	b2da      	uxtb	r2, r3
 800227a:	2380      	movs	r3, #128	@ 0x80
 800227c:	045c      	lsls	r4, r3, #17
 800227e:	230a      	movs	r3, #10
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	8819      	ldrh	r1, [r3, #0]
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	4b55      	ldr	r3, [pc, #340]	@ (80023dc <HAL_I2C_Master_Transmit+0x208>)
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	0023      	movs	r3, r4
 800228c:	f000 fc26 	bl	8002adc <I2C_TransferConfig>
 8002290:	e075      	b.n	800237e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	2380      	movs	r3, #128	@ 0x80
 80022a4:	049c      	lsls	r4, r3, #18
 80022a6:	230a      	movs	r3, #10
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	8819      	ldrh	r1, [r3, #0]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	4b4b      	ldr	r3, [pc, #300]	@ (80023dc <HAL_I2C_Master_Transmit+0x208>)
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	0023      	movs	r3, r4
 80022b4:	f000 fc12 	bl	8002adc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80022b8:	e061      	b.n	800237e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	0018      	movs	r0, r3
 80022c2:	f000 fa07 	bl	80026d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80022c6:	1e03      	subs	r3, r0, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e081      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	781a      	ldrb	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002302:	b29b      	uxth	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d03a      	beq.n	800237e <HAL_I2C_Master_Transmit+0x1aa>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800230c:	2b00      	cmp	r3, #0
 800230e:	d136      	bne.n	800237e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	0013      	movs	r3, r2
 800231a:	2200      	movs	r2, #0
 800231c:	2180      	movs	r1, #128	@ 0x80
 800231e:	f000 f98b 	bl	8002638 <I2C_WaitOnFlagUntilTimeout>
 8002322:	1e03      	subs	r3, r0, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e053      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	2bff      	cmp	r3, #255	@ 0xff
 8002332:	d911      	bls.n	8002358 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	22ff      	movs	r2, #255	@ 0xff
 8002338:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233e:	b2da      	uxtb	r2, r3
 8002340:	2380      	movs	r3, #128	@ 0x80
 8002342:	045c      	lsls	r4, r3, #17
 8002344:	230a      	movs	r3, #10
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	8819      	ldrh	r1, [r3, #0]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	2300      	movs	r3, #0
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	0023      	movs	r3, r4
 8002352:	f000 fbc3 	bl	8002adc <I2C_TransferConfig>
 8002356:	e012      	b.n	800237e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002366:	b2da      	uxtb	r2, r3
 8002368:	2380      	movs	r3, #128	@ 0x80
 800236a:	049c      	lsls	r4, r3, #18
 800236c:	230a      	movs	r3, #10
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	8819      	ldrh	r1, [r3, #0]
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	2300      	movs	r3, #0
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	0023      	movs	r3, r4
 800237a:	f000 fbaf 	bl	8002adc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d198      	bne.n	80022ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	0018      	movs	r0, r3
 8002390:	f000 f9e6 	bl	8002760 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002394:	1e03      	subs	r3, r0, #0
 8002396:	d001      	beq.n	800239c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e01a      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2220      	movs	r2, #32
 80023a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	490c      	ldr	r1, [pc, #48]	@ (80023e0 <HAL_I2C_Master_Transmit+0x20c>)
 80023b0:	400a      	ands	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2241      	movs	r2, #65	@ 0x41
 80023b8:	2120      	movs	r1, #32
 80023ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2242      	movs	r2, #66	@ 0x42
 80023c0:	2100      	movs	r1, #0
 80023c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2240      	movs	r2, #64	@ 0x40
 80023c8:	2100      	movs	r1, #0
 80023ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	e000      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
  }
}
 80023d2:	0018      	movs	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b007      	add	sp, #28
 80023d8:	bd90      	pop	{r4, r7, pc}
 80023da:	46c0      	nop			@ (mov r8, r8)
 80023dc:	80002000 	.word	0x80002000
 80023e0:	fe00e800 	.word	0xfe00e800

080023e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b089      	sub	sp, #36	@ 0x24
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	0008      	movs	r0, r1
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	0019      	movs	r1, r3
 80023f2:	230a      	movs	r3, #10
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	1c02      	adds	r2, r0, #0
 80023f8:	801a      	strh	r2, [r3, #0]
 80023fa:	2308      	movs	r3, #8
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	1c0a      	adds	r2, r1, #0
 8002400:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2241      	movs	r2, #65	@ 0x41
 8002406:	5c9b      	ldrb	r3, [r3, r2]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b20      	cmp	r3, #32
 800240c:	d000      	beq.n	8002410 <HAL_I2C_Master_Receive+0x2c>
 800240e:	e0e8      	b.n	80025e2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2240      	movs	r2, #64	@ 0x40
 8002414:	5c9b      	ldrb	r3, [r3, r2]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_I2C_Master_Receive+0x3a>
 800241a:	2302      	movs	r3, #2
 800241c:	e0e2      	b.n	80025e4 <HAL_I2C_Master_Receive+0x200>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2240      	movs	r2, #64	@ 0x40
 8002422:	2101      	movs	r1, #1
 8002424:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002426:	f7ff fb65 	bl	8001af4 <HAL_GetTick>
 800242a:	0003      	movs	r3, r0
 800242c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	0219      	lsls	r1, r3, #8
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2319      	movs	r3, #25
 800243a:	2201      	movs	r2, #1
 800243c:	f000 f8fc 	bl	8002638 <I2C_WaitOnFlagUntilTimeout>
 8002440:	1e03      	subs	r3, r0, #0
 8002442:	d001      	beq.n	8002448 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0cd      	b.n	80025e4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2241      	movs	r2, #65	@ 0x41
 800244c:	2122      	movs	r1, #34	@ 0x22
 800244e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2242      	movs	r2, #66	@ 0x42
 8002454:	2110      	movs	r1, #16
 8002456:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2208      	movs	r2, #8
 8002468:	18ba      	adds	r2, r7, r2
 800246a:	8812      	ldrh	r2, [r2, #0]
 800246c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	2bff      	cmp	r3, #255	@ 0xff
 800247c:	d911      	bls.n	80024a2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	22ff      	movs	r2, #255	@ 0xff
 8002482:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002488:	b2da      	uxtb	r2, r3
 800248a:	2380      	movs	r3, #128	@ 0x80
 800248c:	045c      	lsls	r4, r3, #17
 800248e:	230a      	movs	r3, #10
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	8819      	ldrh	r1, [r3, #0]
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	4b55      	ldr	r3, [pc, #340]	@ (80025ec <HAL_I2C_Master_Receive+0x208>)
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	0023      	movs	r3, r4
 800249c:	f000 fb1e 	bl	8002adc <I2C_TransferConfig>
 80024a0:	e076      	b.n	8002590 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	2380      	movs	r3, #128	@ 0x80
 80024b4:	049c      	lsls	r4, r3, #18
 80024b6:	230a      	movs	r3, #10
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	8819      	ldrh	r1, [r3, #0]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	4b4b      	ldr	r3, [pc, #300]	@ (80025ec <HAL_I2C_Master_Receive+0x208>)
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	0023      	movs	r3, r4
 80024c4:	f000 fb0a 	bl	8002adc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80024c8:	e062      	b.n	8002590 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f000 f989 	bl	80027e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024d6:	1e03      	subs	r3, r0, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e082      	b.n	80025e4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002506:	b29b      	uxth	r3, r3
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d03a      	beq.n	8002590 <HAL_I2C_Master_Receive+0x1ac>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251e:	2b00      	cmp	r3, #0
 8002520:	d136      	bne.n	8002590 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002522:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	0013      	movs	r3, r2
 800252c:	2200      	movs	r2, #0
 800252e:	2180      	movs	r1, #128	@ 0x80
 8002530:	f000 f882 	bl	8002638 <I2C_WaitOnFlagUntilTimeout>
 8002534:	1e03      	subs	r3, r0, #0
 8002536:	d001      	beq.n	800253c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e053      	b.n	80025e4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002540:	b29b      	uxth	r3, r3
 8002542:	2bff      	cmp	r3, #255	@ 0xff
 8002544:	d911      	bls.n	800256a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	22ff      	movs	r2, #255	@ 0xff
 800254a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002550:	b2da      	uxtb	r2, r3
 8002552:	2380      	movs	r3, #128	@ 0x80
 8002554:	045c      	lsls	r4, r3, #17
 8002556:	230a      	movs	r3, #10
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	8819      	ldrh	r1, [r3, #0]
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	2300      	movs	r3, #0
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	0023      	movs	r3, r4
 8002564:	f000 faba 	bl	8002adc <I2C_TransferConfig>
 8002568:	e012      	b.n	8002590 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002578:	b2da      	uxtb	r2, r3
 800257a:	2380      	movs	r3, #128	@ 0x80
 800257c:	049c      	lsls	r4, r3, #18
 800257e:	230a      	movs	r3, #10
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	8819      	ldrh	r1, [r3, #0]
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	2300      	movs	r3, #0
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	0023      	movs	r3, r4
 800258c:	f000 faa6 	bl	8002adc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d197      	bne.n	80024ca <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f000 f8dd 	bl	8002760 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025a6:	1e03      	subs	r3, r0, #0
 80025a8:	d001      	beq.n	80025ae <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e01a      	b.n	80025e4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2220      	movs	r2, #32
 80025b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	490b      	ldr	r1, [pc, #44]	@ (80025f0 <HAL_I2C_Master_Receive+0x20c>)
 80025c2:	400a      	ands	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2241      	movs	r2, #65	@ 0x41
 80025ca:	2120      	movs	r1, #32
 80025cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2242      	movs	r2, #66	@ 0x42
 80025d2:	2100      	movs	r1, #0
 80025d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2240      	movs	r2, #64	@ 0x40
 80025da:	2100      	movs	r1, #0
 80025dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	e000      	b.n	80025e4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
  }
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b007      	add	sp, #28
 80025ea:	bd90      	pop	{r4, r7, pc}
 80025ec:	80002400 	.word	0x80002400
 80025f0:	fe00e800 	.word	0xfe00e800

080025f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2202      	movs	r2, #2
 8002604:	4013      	ands	r3, r2
 8002606:	2b02      	cmp	r3, #2
 8002608:	d103      	bne.n	8002612 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2200      	movs	r2, #0
 8002610:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2201      	movs	r2, #1
 800261a:	4013      	ands	r3, r2
 800261c:	2b01      	cmp	r3, #1
 800261e:	d007      	beq.n	8002630 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2101      	movs	r1, #1
 800262c:	430a      	orrs	r2, r1
 800262e:	619a      	str	r2, [r3, #24]
  }
}
 8002630:	46c0      	nop			@ (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}

08002638 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	1dfb      	adds	r3, r7, #7
 8002646:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002648:	e030      	b.n	80026ac <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	d02d      	beq.n	80026ac <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002650:	f7ff fa50 	bl	8001af4 <HAL_GetTick>
 8002654:	0002      	movs	r2, r0
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d302      	bcc.n	8002666 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d122      	bne.n	80026ac <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	4013      	ands	r3, r2
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	425a      	negs	r2, r3
 8002676:	4153      	adcs	r3, r2
 8002678:	b2db      	uxtb	r3, r3
 800267a:	001a      	movs	r2, r3
 800267c:	1dfb      	adds	r3, r7, #7
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d113      	bne.n	80026ac <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002688:	2220      	movs	r2, #32
 800268a:	431a      	orrs	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2241      	movs	r2, #65	@ 0x41
 8002694:	2120      	movs	r1, #32
 8002696:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2242      	movs	r2, #66	@ 0x42
 800269c:	2100      	movs	r1, #0
 800269e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2240      	movs	r2, #64	@ 0x40
 80026a4:	2100      	movs	r1, #0
 80026a6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e00f      	b.n	80026cc <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	4013      	ands	r3, r2
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	425a      	negs	r2, r3
 80026bc:	4153      	adcs	r3, r2
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	001a      	movs	r2, r3
 80026c2:	1dfb      	adds	r3, r7, #7
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d0bf      	beq.n	800264a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	0018      	movs	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b004      	add	sp, #16
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026e0:	e032      	b.n	8002748 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f000 f8ff 	bl	80028ec <I2C_IsErrorOccurred>
 80026ee:	1e03      	subs	r3, r0, #0
 80026f0:	d001      	beq.n	80026f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e030      	b.n	8002758 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	3301      	adds	r3, #1
 80026fa:	d025      	beq.n	8002748 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fc:	f7ff f9fa 	bl	8001af4 <HAL_GetTick>
 8002700:	0002      	movs	r2, r0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	429a      	cmp	r2, r3
 800270a:	d302      	bcc.n	8002712 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d11a      	bne.n	8002748 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2202      	movs	r2, #2
 800271a:	4013      	ands	r3, r2
 800271c:	2b02      	cmp	r3, #2
 800271e:	d013      	beq.n	8002748 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002724:	2220      	movs	r2, #32
 8002726:	431a      	orrs	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2241      	movs	r2, #65	@ 0x41
 8002730:	2120      	movs	r1, #32
 8002732:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2242      	movs	r2, #66	@ 0x42
 8002738:	2100      	movs	r1, #0
 800273a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2240      	movs	r2, #64	@ 0x40
 8002740:	2100      	movs	r1, #0
 8002742:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e007      	b.n	8002758 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2202      	movs	r2, #2
 8002750:	4013      	ands	r3, r2
 8002752:	2b02      	cmp	r3, #2
 8002754:	d1c5      	bne.n	80026e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b004      	add	sp, #16
 800275e:	bd80      	pop	{r7, pc}

08002760 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800276c:	e02f      	b.n	80027ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	0018      	movs	r0, r3
 8002776:	f000 f8b9 	bl	80028ec <I2C_IsErrorOccurred>
 800277a:	1e03      	subs	r3, r0, #0
 800277c:	d001      	beq.n	8002782 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e02d      	b.n	80027de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002782:	f7ff f9b7 	bl	8001af4 <HAL_GetTick>
 8002786:	0002      	movs	r2, r0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	429a      	cmp	r2, r3
 8002790:	d302      	bcc.n	8002798 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d11a      	bne.n	80027ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2220      	movs	r2, #32
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d013      	beq.n	80027ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027aa:	2220      	movs	r2, #32
 80027ac:	431a      	orrs	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2241      	movs	r2, #65	@ 0x41
 80027b6:	2120      	movs	r1, #32
 80027b8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2242      	movs	r2, #66	@ 0x42
 80027be:	2100      	movs	r1, #0
 80027c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2240      	movs	r2, #64	@ 0x40
 80027c6:	2100      	movs	r1, #0
 80027c8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e007      	b.n	80027de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	2220      	movs	r2, #32
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d1c8      	bne.n	800276e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b004      	add	sp, #16
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027f4:	e06b      	b.n	80028ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 f875 	bl	80028ec <I2C_IsErrorOccurred>
 8002802:	1e03      	subs	r3, r0, #0
 8002804:	d001      	beq.n	800280a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e069      	b.n	80028de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2220      	movs	r2, #32
 8002812:	4013      	ands	r3, r2
 8002814:	2b20      	cmp	r3, #32
 8002816:	d138      	bne.n	800288a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2204      	movs	r2, #4
 8002820:	4013      	ands	r3, r2
 8002822:	2b04      	cmp	r3, #4
 8002824:	d105      	bne.n	8002832 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e055      	b.n	80028de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2210      	movs	r2, #16
 800283a:	4013      	ands	r3, r2
 800283c:	2b10      	cmp	r3, #16
 800283e:	d107      	bne.n	8002850 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2210      	movs	r2, #16
 8002846:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2204      	movs	r2, #4
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
 800284e:	e002      	b.n	8002856 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2220      	movs	r2, #32
 800285c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	491f      	ldr	r1, [pc, #124]	@ (80028e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800286a:	400a      	ands	r2, r1
 800286c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2241      	movs	r2, #65	@ 0x41
 8002872:	2120      	movs	r1, #32
 8002874:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2242      	movs	r2, #66	@ 0x42
 800287a:	2100      	movs	r1, #0
 800287c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2240      	movs	r2, #64	@ 0x40
 8002882:	2100      	movs	r1, #0
 8002884:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e029      	b.n	80028de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288a:	f7ff f933 	bl	8001af4 <HAL_GetTick>
 800288e:	0002      	movs	r2, r0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	429a      	cmp	r2, r3
 8002898:	d302      	bcc.n	80028a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d116      	bne.n	80028ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2204      	movs	r2, #4
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d00f      	beq.n	80028ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b2:	2220      	movs	r2, #32
 80028b4:	431a      	orrs	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2241      	movs	r2, #65	@ 0x41
 80028be:	2120      	movs	r1, #32
 80028c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2240      	movs	r2, #64	@ 0x40
 80028c6:	2100      	movs	r1, #0
 80028c8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e007      	b.n	80028de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2204      	movs	r2, #4
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d18c      	bne.n	80027f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b004      	add	sp, #16
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	46c0      	nop			@ (mov r8, r8)
 80028e8:	fe00e800 	.word	0xfe00e800

080028ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	@ 0x28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f8:	2327      	movs	r3, #39	@ 0x27
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2210      	movs	r2, #16
 8002914:	4013      	ands	r3, r2
 8002916:	d100      	bne.n	800291a <I2C_IsErrorOccurred+0x2e>
 8002918:	e079      	b.n	8002a0e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2210      	movs	r2, #16
 8002920:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002922:	e057      	b.n	80029d4 <I2C_IsErrorOccurred+0xe8>
 8002924:	2227      	movs	r2, #39	@ 0x27
 8002926:	18bb      	adds	r3, r7, r2
 8002928:	18ba      	adds	r2, r7, r2
 800292a:	7812      	ldrb	r2, [r2, #0]
 800292c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	3301      	adds	r3, #1
 8002932:	d04f      	beq.n	80029d4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002934:	f7ff f8de 	bl	8001af4 <HAL_GetTick>
 8002938:	0002      	movs	r2, r0
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	429a      	cmp	r2, r3
 8002942:	d302      	bcc.n	800294a <I2C_IsErrorOccurred+0x5e>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d144      	bne.n	80029d4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	01db      	lsls	r3, r3, #7
 8002954:	4013      	ands	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002958:	2013      	movs	r0, #19
 800295a:	183b      	adds	r3, r7, r0
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	2142      	movs	r1, #66	@ 0x42
 8002960:	5c52      	ldrb	r2, [r2, r1]
 8002962:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699a      	ldr	r2, [r3, #24]
 800296a:	2380      	movs	r3, #128	@ 0x80
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	401a      	ands	r2, r3
 8002970:	2380      	movs	r3, #128	@ 0x80
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	429a      	cmp	r2, r3
 8002976:	d126      	bne.n	80029c6 <I2C_IsErrorOccurred+0xda>
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	2380      	movs	r3, #128	@ 0x80
 800297c:	01db      	lsls	r3, r3, #7
 800297e:	429a      	cmp	r2, r3
 8002980:	d021      	beq.n	80029c6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002982:	183b      	adds	r3, r7, r0
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b20      	cmp	r3, #32
 8002988:	d01d      	beq.n	80029c6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2180      	movs	r1, #128	@ 0x80
 8002996:	01c9      	lsls	r1, r1, #7
 8002998:	430a      	orrs	r2, r1
 800299a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800299c:	f7ff f8aa 	bl	8001af4 <HAL_GetTick>
 80029a0:	0003      	movs	r3, r0
 80029a2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029a4:	e00f      	b.n	80029c6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029a6:	f7ff f8a5 	bl	8001af4 <HAL_GetTick>
 80029aa:	0002      	movs	r2, r0
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b19      	cmp	r3, #25
 80029b2:	d908      	bls.n	80029c6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	2220      	movs	r2, #32
 80029b8:	4313      	orrs	r3, r2
 80029ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80029bc:	2327      	movs	r3, #39	@ 0x27
 80029be:	18fb      	adds	r3, r7, r3
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]

              break;
 80029c4:	e006      	b.n	80029d4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	2220      	movs	r2, #32
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d1e8      	bne.n	80029a6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2220      	movs	r2, #32
 80029dc:	4013      	ands	r3, r2
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d004      	beq.n	80029ec <I2C_IsErrorOccurred+0x100>
 80029e2:	2327      	movs	r3, #39	@ 0x27
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d09b      	beq.n	8002924 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029ec:	2327      	movs	r3, #39	@ 0x27
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d103      	bne.n	80029fe <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2220      	movs	r2, #32
 80029fc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	2204      	movs	r2, #4
 8002a02:	4313      	orrs	r3, r2
 8002a04:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a06:	2327      	movs	r3, #39	@ 0x27
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	2380      	movs	r3, #128	@ 0x80
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d00c      	beq.n	8002a3a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	2201      	movs	r2, #1
 8002a24:	4313      	orrs	r3, r2
 8002a26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2280      	movs	r2, #128	@ 0x80
 8002a2e:	0052      	lsls	r2, r2, #1
 8002a30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a32:	2327      	movs	r3, #39	@ 0x27
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	2380      	movs	r3, #128	@ 0x80
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4013      	ands	r3, r2
 8002a42:	d00c      	beq.n	8002a5e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	2208      	movs	r2, #8
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2280      	movs	r2, #128	@ 0x80
 8002a52:	00d2      	lsls	r2, r2, #3
 8002a54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a56:	2327      	movs	r3, #39	@ 0x27
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	2380      	movs	r3, #128	@ 0x80
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4013      	ands	r3, r2
 8002a66:	d00c      	beq.n	8002a82 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2280      	movs	r2, #128	@ 0x80
 8002a76:	0092      	lsls	r2, r2, #2
 8002a78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a7a:	2327      	movs	r3, #39	@ 0x27
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	2201      	movs	r2, #1
 8002a80:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002a82:	2327      	movs	r3, #39	@ 0x27
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01d      	beq.n	8002ac8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f7ff fdb0 	bl	80025f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	490e      	ldr	r1, [pc, #56]	@ (8002ad8 <I2C_IsErrorOccurred+0x1ec>)
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2241      	movs	r2, #65	@ 0x41
 8002ab4:	2120      	movs	r1, #32
 8002ab6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2242      	movs	r2, #66	@ 0x42
 8002abc:	2100      	movs	r1, #0
 8002abe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2240      	movs	r2, #64	@ 0x40
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002ac8:	2327      	movs	r3, #39	@ 0x27
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	781b      	ldrb	r3, [r3, #0]
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b00a      	add	sp, #40	@ 0x28
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	fe00e800 	.word	0xfe00e800

08002adc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	0008      	movs	r0, r1
 8002ae6:	0011      	movs	r1, r2
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	240a      	movs	r4, #10
 8002aec:	193b      	adds	r3, r7, r4
 8002aee:	1c02      	adds	r2, r0, #0
 8002af0:	801a      	strh	r2, [r3, #0]
 8002af2:	2009      	movs	r0, #9
 8002af4:	183b      	adds	r3, r7, r0
 8002af6:	1c0a      	adds	r2, r1, #0
 8002af8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002afa:	193b      	adds	r3, r7, r4
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	059b      	lsls	r3, r3, #22
 8002b00:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b02:	183b      	adds	r3, r7, r0
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	0419      	lsls	r1, r3, #16
 8002b08:	23ff      	movs	r3, #255	@ 0xff
 8002b0a:	041b      	lsls	r3, r3, #16
 8002b0c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b0e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b16:	4313      	orrs	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b26:	0d51      	lsrs	r1, r2, #21
 8002b28:	2280      	movs	r2, #128	@ 0x80
 8002b2a:	00d2      	lsls	r2, r2, #3
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	4907      	ldr	r1, [pc, #28]	@ (8002b4c <I2C_TransferConfig+0x70>)
 8002b30:	430a      	orrs	r2, r1
 8002b32:	43d2      	mvns	r2, r2
 8002b34:	401a      	ands	r2, r3
 8002b36:	0011      	movs	r1, r2
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b42:	46c0      	nop			@ (mov r8, r8)
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b007      	add	sp, #28
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	46c0      	nop			@ (mov r8, r8)
 8002b4c:	03ff63ff 	.word	0x03ff63ff

08002b50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2241      	movs	r2, #65	@ 0x41
 8002b5e:	5c9b      	ldrb	r3, [r3, r2]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d138      	bne.n	8002bd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2240      	movs	r2, #64	@ 0x40
 8002b6a:	5c9b      	ldrb	r3, [r3, r2]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e032      	b.n	8002bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2240      	movs	r2, #64	@ 0x40
 8002b78:	2101      	movs	r1, #1
 8002b7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2241      	movs	r2, #65	@ 0x41
 8002b80:	2124      	movs	r1, #36	@ 0x24
 8002b82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2101      	movs	r1, #1
 8002b90:	438a      	bics	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4911      	ldr	r1, [pc, #68]	@ (8002be4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6819      	ldr	r1, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2241      	movs	r2, #65	@ 0x41
 8002bc8:	2120      	movs	r1, #32
 8002bca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2240      	movs	r2, #64	@ 0x40
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e000      	b.n	8002bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
  }
}
 8002bda:	0018      	movs	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b002      	add	sp, #8
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	ffffefff 	.word	0xffffefff

08002be8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2241      	movs	r2, #65	@ 0x41
 8002bf6:	5c9b      	ldrb	r3, [r3, r2]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d139      	bne.n	8002c72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2240      	movs	r2, #64	@ 0x40
 8002c02:	5c9b      	ldrb	r3, [r3, r2]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e033      	b.n	8002c74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2240      	movs	r2, #64	@ 0x40
 8002c10:	2101      	movs	r1, #1
 8002c12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2241      	movs	r2, #65	@ 0x41
 8002c18:	2124      	movs	r1, #36	@ 0x24
 8002c1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2101      	movs	r1, #1
 8002c28:	438a      	bics	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a11      	ldr	r2, [pc, #68]	@ (8002c7c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2241      	movs	r2, #65	@ 0x41
 8002c62:	2120      	movs	r1, #32
 8002c64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2240      	movs	r2, #64	@ 0x40
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
  }
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b004      	add	sp, #16
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	fffff0ff 	.word	0xfffff0ff

08002c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c80:	b5b0      	push	{r4, r5, r7, lr}
 8002c82:	b08a      	sub	sp, #40	@ 0x28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d102      	bne.n	8002c94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f000 fb6c 	bl	800336c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c94:	4bc8      	ldr	r3, [pc, #800]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	220c      	movs	r2, #12
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c9e:	4bc6      	ldr	r3, [pc, #792]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	2380      	movs	r3, #128	@ 0x80
 8002ca4:	025b      	lsls	r3, r3, #9
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d100      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x36>
 8002cb4:	e07d      	b.n	8002db2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d007      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d112      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x68>
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	2380      	movs	r3, #128	@ 0x80
 8002cc6:	025b      	lsls	r3, r3, #9
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d10d      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	4bba      	ldr	r3, [pc, #744]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	2380      	movs	r3, #128	@ 0x80
 8002cd2:	029b      	lsls	r3, r3, #10
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d100      	bne.n	8002cda <HAL_RCC_OscConfig+0x5a>
 8002cd8:	e06a      	b.n	8002db0 <HAL_RCC_OscConfig+0x130>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d166      	bne.n	8002db0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f000 fb42 	bl	800336c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	2380      	movs	r3, #128	@ 0x80
 8002cee:	025b      	lsls	r3, r3, #9
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_OscConfig+0x84>
 8002cf4:	4bb0      	ldr	r3, [pc, #704]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4baf      	ldr	r3, [pc, #700]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002cfa:	2180      	movs	r1, #128	@ 0x80
 8002cfc:	0249      	lsls	r1, r1, #9
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	e027      	b.n	8002d54 <HAL_RCC_OscConfig+0xd4>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	23a0      	movs	r3, #160	@ 0xa0
 8002d0a:	02db      	lsls	r3, r3, #11
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d10e      	bne.n	8002d2e <HAL_RCC_OscConfig+0xae>
 8002d10:	4ba9      	ldr	r3, [pc, #676]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4ba8      	ldr	r3, [pc, #672]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002d16:	2180      	movs	r1, #128	@ 0x80
 8002d18:	02c9      	lsls	r1, r1, #11
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	4ba6      	ldr	r3, [pc, #664]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4ba5      	ldr	r3, [pc, #660]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002d24:	2180      	movs	r1, #128	@ 0x80
 8002d26:	0249      	lsls	r1, r1, #9
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	e012      	b.n	8002d54 <HAL_RCC_OscConfig+0xd4>
 8002d2e:	4ba2      	ldr	r3, [pc, #648]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	4ba1      	ldr	r3, [pc, #644]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002d34:	49a1      	ldr	r1, [pc, #644]	@ (8002fbc <HAL_RCC_OscConfig+0x33c>)
 8002d36:	400a      	ands	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	4b9f      	ldr	r3, [pc, #636]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	2380      	movs	r3, #128	@ 0x80
 8002d40:	025b      	lsls	r3, r3, #9
 8002d42:	4013      	ands	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4b9b      	ldr	r3, [pc, #620]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b9a      	ldr	r3, [pc, #616]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002d4e:	499c      	ldr	r1, [pc, #624]	@ (8002fc0 <HAL_RCC_OscConfig+0x340>)
 8002d50:	400a      	ands	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d014      	beq.n	8002d86 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe feca 	bl	8001af4 <HAL_GetTick>
 8002d60:	0003      	movs	r3, r0
 8002d62:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d66:	f7fe fec5 	bl	8001af4 <HAL_GetTick>
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b64      	cmp	r3, #100	@ 0x64
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e2f9      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d78:	4b8f      	ldr	r3, [pc, #572]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2380      	movs	r3, #128	@ 0x80
 8002d7e:	029b      	lsls	r3, r3, #10
 8002d80:	4013      	ands	r3, r2
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0xe6>
 8002d84:	e015      	b.n	8002db2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fe feb5 	bl	8001af4 <HAL_GetTick>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe feb0 	bl	8001af4 <HAL_GetTick>
 8002d94:	0002      	movs	r2, r0
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	@ 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e2e4      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002da2:	4b85      	ldr	r3, [pc, #532]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	2380      	movs	r3, #128	@ 0x80
 8002da8:	029b      	lsls	r3, r3, #10
 8002daa:	4013      	ands	r3, r2
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x110>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2202      	movs	r2, #2
 8002db8:	4013      	ands	r3, r2
 8002dba:	d100      	bne.n	8002dbe <HAL_RCC_OscConfig+0x13e>
 8002dbc:	e099      	b.n	8002ef2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d009      	beq.n	8002de0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002dcc:	4b7a      	ldr	r3, [pc, #488]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b79      	ldr	r3, [pc, #484]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002dd2:	2120      	movs	r1, #32
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	2220      	movs	r2, #32
 8002ddc:	4393      	bics	r3, r2
 8002dde:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	2b0c      	cmp	r3, #12
 8002dea:	d13e      	bne.n	8002e6a <HAL_RCC_OscConfig+0x1ea>
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d13b      	bne.n	8002e6a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002df2:	4b71      	ldr	r3, [pc, #452]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2204      	movs	r2, #4
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d004      	beq.n	8002e06 <HAL_RCC_OscConfig+0x186>
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e2b2      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e06:	4b6c      	ldr	r3, [pc, #432]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4a6e      	ldr	r2, [pc, #440]	@ (8002fc4 <HAL_RCC_OscConfig+0x344>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	0019      	movs	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	021a      	lsls	r2, r3, #8
 8002e16:	4b68      	ldr	r3, [pc, #416]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e1c:	4b66      	ldr	r3, [pc, #408]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2209      	movs	r2, #9
 8002e22:	4393      	bics	r3, r2
 8002e24:	0019      	movs	r1, r3
 8002e26:	4b64      	ldr	r3, [pc, #400]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002e28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e2e:	f000 fbeb 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 8002e32:	0001      	movs	r1, r0
 8002e34:	4b60      	ldr	r3, [pc, #384]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	220f      	movs	r2, #15
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	4a62      	ldr	r2, [pc, #392]	@ (8002fc8 <HAL_RCC_OscConfig+0x348>)
 8002e40:	5cd3      	ldrb	r3, [r2, r3]
 8002e42:	000a      	movs	r2, r1
 8002e44:	40da      	lsrs	r2, r3
 8002e46:	4b61      	ldr	r3, [pc, #388]	@ (8002fcc <HAL_RCC_OscConfig+0x34c>)
 8002e48:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002e4a:	4b61      	ldr	r3, [pc, #388]	@ (8002fd0 <HAL_RCC_OscConfig+0x350>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2513      	movs	r5, #19
 8002e50:	197c      	adds	r4, r7, r5
 8002e52:	0018      	movs	r0, r3
 8002e54:	f7fe fe08 	bl	8001a68 <HAL_InitTick>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002e5c:	197b      	adds	r3, r7, r5
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d046      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002e64:	197b      	adds	r3, r7, r5
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	e280      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d027      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e70:	4b51      	ldr	r3, [pc, #324]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2209      	movs	r2, #9
 8002e76:	4393      	bics	r3, r2
 8002e78:	0019      	movs	r1, r3
 8002e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e82:	f7fe fe37 	bl	8001af4 <HAL_GetTick>
 8002e86:	0003      	movs	r3, r0
 8002e88:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e8c:	f7fe fe32 	bl	8001af4 <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e266      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e9e:	4b46      	ldr	r3, [pc, #280]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d0f1      	beq.n	8002e8c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea8:	4b43      	ldr	r3, [pc, #268]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4a45      	ldr	r2, [pc, #276]	@ (8002fc4 <HAL_RCC_OscConfig+0x344>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	021a      	lsls	r2, r3, #8
 8002eb8:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	e018      	b.n	8002ef2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	438a      	bics	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fe12 	bl	8001af4 <HAL_GetTick>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed6:	f7fe fe0d 	bl	8001af4 <HAL_GetTick>
 8002eda:	0002      	movs	r2, r0
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e241      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ee8:	4b33      	ldr	r3, [pc, #204]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2204      	movs	r2, #4
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d1f1      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2210      	movs	r2, #16
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d100      	bne.n	8002efe <HAL_RCC_OscConfig+0x27e>
 8002efc:	e0a1      	b.n	8003042 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d140      	bne.n	8002f86 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f04:	4b2c      	ldr	r3, [pc, #176]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	2380      	movs	r3, #128	@ 0x80
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_OscConfig+0x29c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e227      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f1c:	4b26      	ldr	r3, [pc, #152]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a2c      	ldr	r2, [pc, #176]	@ (8002fd4 <HAL_RCC_OscConfig+0x354>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	4b23      	ldr	r3, [pc, #140]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f30:	4b21      	ldr	r3, [pc, #132]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	0a19      	lsrs	r1, r3, #8
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	061a      	lsls	r2, r3, #24
 8002f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	0b5b      	lsrs	r3, r3, #13
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	2280      	movs	r2, #128	@ 0x80
 8002f4e:	0212      	lsls	r2, r2, #8
 8002f50:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f52:	4b19      	ldr	r3, [pc, #100]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	091b      	lsrs	r3, r3, #4
 8002f58:	210f      	movs	r1, #15
 8002f5a:	400b      	ands	r3, r1
 8002f5c:	491a      	ldr	r1, [pc, #104]	@ (8002fc8 <HAL_RCC_OscConfig+0x348>)
 8002f5e:	5ccb      	ldrb	r3, [r1, r3]
 8002f60:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f62:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <HAL_RCC_OscConfig+0x34c>)
 8002f64:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002f66:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd0 <HAL_RCC_OscConfig+0x350>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2513      	movs	r5, #19
 8002f6c:	197c      	adds	r4, r7, r5
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f7fe fd7a 	bl	8001a68 <HAL_InitTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002f78:	197b      	adds	r3, r7, r5
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d060      	beq.n	8003042 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002f80:	197b      	adds	r3, r7, r5
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	e1f2      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d03f      	beq.n	800300e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	4b09      	ldr	r3, [pc, #36]	@ (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002f94:	2180      	movs	r1, #128	@ 0x80
 8002f96:	0049      	lsls	r1, r1, #1
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fdaa 	bl	8001af4 <HAL_GetTick>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fa4:	e018      	b.n	8002fd8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fa6:	f7fe fda5 	bl	8001af4 <HAL_GetTick>
 8002faa:	0002      	movs	r2, r0
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d911      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e1d9      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	fffeffff 	.word	0xfffeffff
 8002fc0:	fffbffff 	.word	0xfffbffff
 8002fc4:	ffffe0ff 	.word	0xffffe0ff
 8002fc8:	08005500 	.word	0x08005500
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	20000004 	.word	0x20000004
 8002fd4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fd8:	4bc9      	ldr	r3, [pc, #804]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	2380      	movs	r3, #128	@ 0x80
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d0e0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fe4:	4bc6      	ldr	r3, [pc, #792]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4ac6      	ldr	r2, [pc, #792]	@ (8003304 <HAL_RCC_OscConfig+0x684>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1a      	ldr	r2, [r3, #32]
 8002ff2:	4bc3      	ldr	r3, [pc, #780]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ff8:	4bc1      	ldr	r3, [pc, #772]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	0a19      	lsrs	r1, r3, #8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	061a      	lsls	r2, r3, #24
 8003006:	4bbe      	ldr	r3, [pc, #760]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003008:	430a      	orrs	r2, r1
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	e019      	b.n	8003042 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800300e:	4bbc      	ldr	r3, [pc, #752]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4bbb      	ldr	r3, [pc, #748]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003014:	49bc      	ldr	r1, [pc, #752]	@ (8003308 <HAL_RCC_OscConfig+0x688>)
 8003016:	400a      	ands	r2, r1
 8003018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7fe fd6b 	bl	8001af4 <HAL_GetTick>
 800301e:	0003      	movs	r3, r0
 8003020:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003024:	f7fe fd66 	bl	8001af4 <HAL_GetTick>
 8003028:	0002      	movs	r2, r0
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e19a      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003036:	4bb2      	ldr	r3, [pc, #712]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	2380      	movs	r3, #128	@ 0x80
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4013      	ands	r3, r2
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2208      	movs	r2, #8
 8003048:	4013      	ands	r3, r2
 800304a:	d036      	beq.n	80030ba <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d019      	beq.n	8003088 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003054:	4baa      	ldr	r3, [pc, #680]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003056:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003058:	4ba9      	ldr	r3, [pc, #676]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 800305a:	2101      	movs	r1, #1
 800305c:	430a      	orrs	r2, r1
 800305e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003060:	f7fe fd48 	bl	8001af4 <HAL_GetTick>
 8003064:	0003      	movs	r3, r0
 8003066:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306a:	f7fe fd43 	bl	8001af4 <HAL_GetTick>
 800306e:	0002      	movs	r2, r0
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e177      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800307c:	4ba0      	ldr	r3, [pc, #640]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 800307e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003080:	2202      	movs	r2, #2
 8003082:	4013      	ands	r3, r2
 8003084:	d0f1      	beq.n	800306a <HAL_RCC_OscConfig+0x3ea>
 8003086:	e018      	b.n	80030ba <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003088:	4b9d      	ldr	r3, [pc, #628]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 800308a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800308c:	4b9c      	ldr	r3, [pc, #624]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 800308e:	2101      	movs	r1, #1
 8003090:	438a      	bics	r2, r1
 8003092:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003094:	f7fe fd2e 	bl	8001af4 <HAL_GetTick>
 8003098:	0003      	movs	r3, r0
 800309a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309e:	f7fe fd29 	bl	8001af4 <HAL_GetTick>
 80030a2:	0002      	movs	r2, r0
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e15d      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030b0:	4b93      	ldr	r3, [pc, #588]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 80030b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b4:	2202      	movs	r2, #2
 80030b6:	4013      	ands	r3, r2
 80030b8:	d1f1      	bne.n	800309e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2204      	movs	r2, #4
 80030c0:	4013      	ands	r3, r2
 80030c2:	d100      	bne.n	80030c6 <HAL_RCC_OscConfig+0x446>
 80030c4:	e0ae      	b.n	8003224 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c6:	2023      	movs	r0, #35	@ 0x23
 80030c8:	183b      	adds	r3, r7, r0
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ce:	4b8c      	ldr	r3, [pc, #560]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 80030d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030d2:	2380      	movs	r3, #128	@ 0x80
 80030d4:	055b      	lsls	r3, r3, #21
 80030d6:	4013      	ands	r3, r2
 80030d8:	d109      	bne.n	80030ee <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	4b89      	ldr	r3, [pc, #548]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 80030dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030de:	4b88      	ldr	r3, [pc, #544]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 80030e0:	2180      	movs	r1, #128	@ 0x80
 80030e2:	0549      	lsls	r1, r1, #21
 80030e4:	430a      	orrs	r2, r1
 80030e6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80030e8:	183b      	adds	r3, r7, r0
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ee:	4b87      	ldr	r3, [pc, #540]	@ (800330c <HAL_RCC_OscConfig+0x68c>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	2380      	movs	r3, #128	@ 0x80
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4013      	ands	r3, r2
 80030f8:	d11a      	bne.n	8003130 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fa:	4b84      	ldr	r3, [pc, #528]	@ (800330c <HAL_RCC_OscConfig+0x68c>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4b83      	ldr	r3, [pc, #524]	@ (800330c <HAL_RCC_OscConfig+0x68c>)
 8003100:	2180      	movs	r1, #128	@ 0x80
 8003102:	0049      	lsls	r1, r1, #1
 8003104:	430a      	orrs	r2, r1
 8003106:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003108:	f7fe fcf4 	bl	8001af4 <HAL_GetTick>
 800310c:	0003      	movs	r3, r0
 800310e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003112:	f7fe fcef 	bl	8001af4 <HAL_GetTick>
 8003116:	0002      	movs	r2, r0
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b64      	cmp	r3, #100	@ 0x64
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e123      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	4b79      	ldr	r3, [pc, #484]	@ (800330c <HAL_RCC_OscConfig+0x68c>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	2380      	movs	r3, #128	@ 0x80
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4013      	ands	r3, r2
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	2380      	movs	r3, #128	@ 0x80
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	429a      	cmp	r2, r3
 800313a:	d107      	bne.n	800314c <HAL_RCC_OscConfig+0x4cc>
 800313c:	4b70      	ldr	r3, [pc, #448]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 800313e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003140:	4b6f      	ldr	r3, [pc, #444]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003142:	2180      	movs	r1, #128	@ 0x80
 8003144:	0049      	lsls	r1, r1, #1
 8003146:	430a      	orrs	r2, r1
 8003148:	651a      	str	r2, [r3, #80]	@ 0x50
 800314a:	e031      	b.n	80031b0 <HAL_RCC_OscConfig+0x530>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10c      	bne.n	800316e <HAL_RCC_OscConfig+0x4ee>
 8003154:	4b6a      	ldr	r3, [pc, #424]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003156:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003158:	4b69      	ldr	r3, [pc, #420]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 800315a:	496b      	ldr	r1, [pc, #428]	@ (8003308 <HAL_RCC_OscConfig+0x688>)
 800315c:	400a      	ands	r2, r1
 800315e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003160:	4b67      	ldr	r3, [pc, #412]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003162:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003164:	4b66      	ldr	r3, [pc, #408]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003166:	496a      	ldr	r1, [pc, #424]	@ (8003310 <HAL_RCC_OscConfig+0x690>)
 8003168:	400a      	ands	r2, r1
 800316a:	651a      	str	r2, [r3, #80]	@ 0x50
 800316c:	e020      	b.n	80031b0 <HAL_RCC_OscConfig+0x530>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	23a0      	movs	r3, #160	@ 0xa0
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	429a      	cmp	r2, r3
 8003178:	d10e      	bne.n	8003198 <HAL_RCC_OscConfig+0x518>
 800317a:	4b61      	ldr	r3, [pc, #388]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 800317c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800317e:	4b60      	ldr	r3, [pc, #384]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003180:	2180      	movs	r1, #128	@ 0x80
 8003182:	00c9      	lsls	r1, r1, #3
 8003184:	430a      	orrs	r2, r1
 8003186:	651a      	str	r2, [r3, #80]	@ 0x50
 8003188:	4b5d      	ldr	r3, [pc, #372]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 800318a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800318c:	4b5c      	ldr	r3, [pc, #368]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 800318e:	2180      	movs	r1, #128	@ 0x80
 8003190:	0049      	lsls	r1, r1, #1
 8003192:	430a      	orrs	r2, r1
 8003194:	651a      	str	r2, [r3, #80]	@ 0x50
 8003196:	e00b      	b.n	80031b0 <HAL_RCC_OscConfig+0x530>
 8003198:	4b59      	ldr	r3, [pc, #356]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 800319a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800319c:	4b58      	ldr	r3, [pc, #352]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 800319e:	495a      	ldr	r1, [pc, #360]	@ (8003308 <HAL_RCC_OscConfig+0x688>)
 80031a0:	400a      	ands	r2, r1
 80031a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80031a4:	4b56      	ldr	r3, [pc, #344]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 80031a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031a8:	4b55      	ldr	r3, [pc, #340]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 80031aa:	4959      	ldr	r1, [pc, #356]	@ (8003310 <HAL_RCC_OscConfig+0x690>)
 80031ac:	400a      	ands	r2, r1
 80031ae:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d015      	beq.n	80031e4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b8:	f7fe fc9c 	bl	8001af4 <HAL_GetTick>
 80031bc:	0003      	movs	r3, r0
 80031be:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031c0:	e009      	b.n	80031d6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c2:	f7fe fc97 	bl	8001af4 <HAL_GetTick>
 80031c6:	0002      	movs	r2, r0
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	4a51      	ldr	r2, [pc, #324]	@ (8003314 <HAL_RCC_OscConfig+0x694>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e0ca      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 80031d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031da:	2380      	movs	r3, #128	@ 0x80
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4013      	ands	r3, r2
 80031e0:	d0ef      	beq.n	80031c2 <HAL_RCC_OscConfig+0x542>
 80031e2:	e014      	b.n	800320e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e4:	f7fe fc86 	bl	8001af4 <HAL_GetTick>
 80031e8:	0003      	movs	r3, r0
 80031ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031ec:	e009      	b.n	8003202 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fe fc81 	bl	8001af4 <HAL_GetTick>
 80031f2:	0002      	movs	r2, r0
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	4a46      	ldr	r2, [pc, #280]	@ (8003314 <HAL_RCC_OscConfig+0x694>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e0b4      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003202:	4b3f      	ldr	r3, [pc, #252]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003204:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003206:	2380      	movs	r3, #128	@ 0x80
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4013      	ands	r3, r2
 800320c:	d1ef      	bne.n	80031ee <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800320e:	2323      	movs	r3, #35	@ 0x23
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d105      	bne.n	8003224 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003218:	4b39      	ldr	r3, [pc, #228]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 800321a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800321c:	4b38      	ldr	r3, [pc, #224]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 800321e:	493e      	ldr	r1, [pc, #248]	@ (8003318 <HAL_RCC_OscConfig+0x698>)
 8003220:	400a      	ands	r2, r1
 8003222:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	2b00      	cmp	r3, #0
 800322a:	d100      	bne.n	800322e <HAL_RCC_OscConfig+0x5ae>
 800322c:	e09d      	b.n	800336a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	2b0c      	cmp	r3, #12
 8003232:	d100      	bne.n	8003236 <HAL_RCC_OscConfig+0x5b6>
 8003234:	e076      	b.n	8003324 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323a:	2b02      	cmp	r3, #2
 800323c:	d145      	bne.n	80032ca <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323e:	4b30      	ldr	r3, [pc, #192]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4b2f      	ldr	r3, [pc, #188]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003244:	4935      	ldr	r1, [pc, #212]	@ (800331c <HAL_RCC_OscConfig+0x69c>)
 8003246:	400a      	ands	r2, r1
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7fe fc53 	bl	8001af4 <HAL_GetTick>
 800324e:	0003      	movs	r3, r0
 8003250:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003254:	f7fe fc4e 	bl	8001af4 <HAL_GetTick>
 8003258:	0002      	movs	r2, r0
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e082      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003266:	4b26      	ldr	r3, [pc, #152]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	@ 0x80
 800326c:	049b      	lsls	r3, r3, #18
 800326e:	4013      	ands	r3, r2
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003272:	4b23      	ldr	r3, [pc, #140]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	4a2a      	ldr	r2, [pc, #168]	@ (8003320 <HAL_RCC_OscConfig+0x6a0>)
 8003278:	4013      	ands	r3, r2
 800327a:	0019      	movs	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	431a      	orrs	r2, r3
 800328c:	4b1c      	ldr	r3, [pc, #112]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 800328e:	430a      	orrs	r2, r1
 8003290:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003292:	4b1b      	ldr	r3, [pc, #108]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4b1a      	ldr	r3, [pc, #104]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 8003298:	2180      	movs	r1, #128	@ 0x80
 800329a:	0449      	lsls	r1, r1, #17
 800329c:	430a      	orrs	r2, r1
 800329e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7fe fc28 	bl	8001af4 <HAL_GetTick>
 80032a4:	0003      	movs	r3, r0
 80032a6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032aa:	f7fe fc23 	bl	8001af4 <HAL_GetTick>
 80032ae:	0002      	movs	r2, r0
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e057      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032bc:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	2380      	movs	r3, #128	@ 0x80
 80032c2:	049b      	lsls	r3, r3, #18
 80032c4:	4013      	ands	r3, r2
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x62a>
 80032c8:	e04f      	b.n	800336a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 80032d0:	4912      	ldr	r1, [pc, #72]	@ (800331c <HAL_RCC_OscConfig+0x69c>)
 80032d2:	400a      	ands	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fe fc0d 	bl	8001af4 <HAL_GetTick>
 80032da:	0003      	movs	r3, r0
 80032dc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e0:	f7fe fc08 	bl	8001af4 <HAL_GetTick>
 80032e4:	0002      	movs	r2, r0
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e03c      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032f2:	4b03      	ldr	r3, [pc, #12]	@ (8003300 <HAL_RCC_OscConfig+0x680>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	2380      	movs	r3, #128	@ 0x80
 80032f8:	049b      	lsls	r3, r3, #18
 80032fa:	4013      	ands	r3, r2
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x660>
 80032fe:	e034      	b.n	800336a <HAL_RCC_OscConfig+0x6ea>
 8003300:	40021000 	.word	0x40021000
 8003304:	ffff1fff 	.word	0xffff1fff
 8003308:	fffffeff 	.word	0xfffffeff
 800330c:	40007000 	.word	0x40007000
 8003310:	fffffbff 	.word	0xfffffbff
 8003314:	00001388 	.word	0x00001388
 8003318:	efffffff 	.word	0xefffffff
 800331c:	feffffff 	.word	0xfeffffff
 8003320:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e01d      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003330:	4b10      	ldr	r3, [pc, #64]	@ (8003374 <HAL_RCC_OscConfig+0x6f4>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	025b      	lsls	r3, r3, #9
 800333c:	401a      	ands	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003342:	429a      	cmp	r2, r3
 8003344:	d10f      	bne.n	8003366 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	23f0      	movs	r3, #240	@ 0xf0
 800334a:	039b      	lsls	r3, r3, #14
 800334c:	401a      	ands	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	429a      	cmp	r2, r3
 8003354:	d107      	bne.n	8003366 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	23c0      	movs	r3, #192	@ 0xc0
 800335a:	041b      	lsls	r3, r3, #16
 800335c:	401a      	ands	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d001      	beq.n	800336a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	0018      	movs	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	b00a      	add	sp, #40	@ 0x28
 8003372:	bdb0      	pop	{r4, r5, r7, pc}
 8003374:	40021000 	.word	0x40021000

08003378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e128      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800338c:	4b96      	ldr	r3, [pc, #600]	@ (80035e8 <HAL_RCC_ClockConfig+0x270>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2201      	movs	r2, #1
 8003392:	4013      	ands	r3, r2
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d91e      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339a:	4b93      	ldr	r3, [pc, #588]	@ (80035e8 <HAL_RCC_ClockConfig+0x270>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2201      	movs	r2, #1
 80033a0:	4393      	bics	r3, r2
 80033a2:	0019      	movs	r1, r3
 80033a4:	4b90      	ldr	r3, [pc, #576]	@ (80035e8 <HAL_RCC_ClockConfig+0x270>)
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033ac:	f7fe fba2 	bl	8001af4 <HAL_GetTick>
 80033b0:	0003      	movs	r3, r0
 80033b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b4:	e009      	b.n	80033ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b6:	f7fe fb9d 	bl	8001af4 <HAL_GetTick>
 80033ba:	0002      	movs	r2, r0
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	4a8a      	ldr	r2, [pc, #552]	@ (80035ec <HAL_RCC_ClockConfig+0x274>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e109      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b87      	ldr	r3, [pc, #540]	@ (80035e8 <HAL_RCC_ClockConfig+0x270>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2201      	movs	r2, #1
 80033d0:	4013      	ands	r3, r2
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d1ee      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2202      	movs	r2, #2
 80033de:	4013      	ands	r3, r2
 80033e0:	d009      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e2:	4b83      	ldr	r3, [pc, #524]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	22f0      	movs	r2, #240	@ 0xf0
 80033e8:	4393      	bics	r3, r2
 80033ea:	0019      	movs	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	4b7f      	ldr	r3, [pc, #508]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 80033f2:	430a      	orrs	r2, r1
 80033f4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2201      	movs	r2, #1
 80033fc:	4013      	ands	r3, r2
 80033fe:	d100      	bne.n	8003402 <HAL_RCC_ClockConfig+0x8a>
 8003400:	e089      	b.n	8003516 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800340a:	4b79      	ldr	r3, [pc, #484]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	2380      	movs	r3, #128	@ 0x80
 8003410:	029b      	lsls	r3, r3, #10
 8003412:	4013      	ands	r3, r2
 8003414:	d120      	bne.n	8003458 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e0e1      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b03      	cmp	r3, #3
 8003420:	d107      	bne.n	8003432 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003422:	4b73      	ldr	r3, [pc, #460]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	2380      	movs	r3, #128	@ 0x80
 8003428:	049b      	lsls	r3, r3, #18
 800342a:	4013      	ands	r3, r2
 800342c:	d114      	bne.n	8003458 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e0d5      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d106      	bne.n	8003448 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800343a:	4b6d      	ldr	r3, [pc, #436]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2204      	movs	r2, #4
 8003440:	4013      	ands	r3, r2
 8003442:	d109      	bne.n	8003458 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0ca      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003448:	4b69      	ldr	r3, [pc, #420]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	2380      	movs	r3, #128	@ 0x80
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4013      	ands	r3, r2
 8003452:	d101      	bne.n	8003458 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0c2      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003458:	4b65      	ldr	r3, [pc, #404]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	2203      	movs	r2, #3
 800345e:	4393      	bics	r3, r2
 8003460:	0019      	movs	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	4b62      	ldr	r3, [pc, #392]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 8003468:	430a      	orrs	r2, r1
 800346a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800346c:	f7fe fb42 	bl	8001af4 <HAL_GetTick>
 8003470:	0003      	movs	r3, r0
 8003472:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d111      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800347c:	e009      	b.n	8003492 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347e:	f7fe fb39 	bl	8001af4 <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	4a58      	ldr	r2, [pc, #352]	@ (80035ec <HAL_RCC_ClockConfig+0x274>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0a5      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003492:	4b57      	ldr	r3, [pc, #348]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	220c      	movs	r2, #12
 8003498:	4013      	ands	r3, r2
 800349a:	2b08      	cmp	r3, #8
 800349c:	d1ef      	bne.n	800347e <HAL_RCC_ClockConfig+0x106>
 800349e:	e03a      	b.n	8003516 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d111      	bne.n	80034cc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034a8:	e009      	b.n	80034be <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034aa:	f7fe fb23 	bl	8001af4 <HAL_GetTick>
 80034ae:	0002      	movs	r2, r0
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	4a4d      	ldr	r2, [pc, #308]	@ (80035ec <HAL_RCC_ClockConfig+0x274>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e08f      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034be:	4b4c      	ldr	r3, [pc, #304]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	220c      	movs	r2, #12
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b0c      	cmp	r3, #12
 80034c8:	d1ef      	bne.n	80034aa <HAL_RCC_ClockConfig+0x132>
 80034ca:	e024      	b.n	8003516 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d11b      	bne.n	800350c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034d4:	e009      	b.n	80034ea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d6:	f7fe fb0d 	bl	8001af4 <HAL_GetTick>
 80034da:	0002      	movs	r2, r0
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	4a42      	ldr	r2, [pc, #264]	@ (80035ec <HAL_RCC_ClockConfig+0x274>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e079      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ea:	4b41      	ldr	r3, [pc, #260]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	220c      	movs	r2, #12
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d1ef      	bne.n	80034d6 <HAL_RCC_ClockConfig+0x15e>
 80034f6:	e00e      	b.n	8003516 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f8:	f7fe fafc 	bl	8001af4 <HAL_GetTick>
 80034fc:	0002      	movs	r2, r0
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	4a3a      	ldr	r2, [pc, #232]	@ (80035ec <HAL_RCC_ClockConfig+0x274>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e068      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800350c:	4b38      	ldr	r3, [pc, #224]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	220c      	movs	r2, #12
 8003512:	4013      	ands	r3, r2
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003516:	4b34      	ldr	r3, [pc, #208]	@ (80035e8 <HAL_RCC_ClockConfig+0x270>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2201      	movs	r2, #1
 800351c:	4013      	ands	r3, r2
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d21e      	bcs.n	8003562 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003524:	4b30      	ldr	r3, [pc, #192]	@ (80035e8 <HAL_RCC_ClockConfig+0x270>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2201      	movs	r2, #1
 800352a:	4393      	bics	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	4b2e      	ldr	r3, [pc, #184]	@ (80035e8 <HAL_RCC_ClockConfig+0x270>)
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003536:	f7fe fadd 	bl	8001af4 <HAL_GetTick>
 800353a:	0003      	movs	r3, r0
 800353c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	e009      	b.n	8003554 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003540:	f7fe fad8 	bl	8001af4 <HAL_GetTick>
 8003544:	0002      	movs	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	4a28      	ldr	r2, [pc, #160]	@ (80035ec <HAL_RCC_ClockConfig+0x274>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e044      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003554:	4b24      	ldr	r3, [pc, #144]	@ (80035e8 <HAL_RCC_ClockConfig+0x270>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2201      	movs	r2, #1
 800355a:	4013      	ands	r3, r2
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d1ee      	bne.n	8003540 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2204      	movs	r2, #4
 8003568:	4013      	ands	r3, r2
 800356a:	d009      	beq.n	8003580 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800356c:	4b20      	ldr	r3, [pc, #128]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4a20      	ldr	r2, [pc, #128]	@ (80035f4 <HAL_RCC_ClockConfig+0x27c>)
 8003572:	4013      	ands	r3, r2
 8003574:	0019      	movs	r1, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	4b1d      	ldr	r3, [pc, #116]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800357c:	430a      	orrs	r2, r1
 800357e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2208      	movs	r2, #8
 8003586:	4013      	ands	r3, r2
 8003588:	d00a      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800358a:	4b19      	ldr	r3, [pc, #100]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	4a1a      	ldr	r2, [pc, #104]	@ (80035f8 <HAL_RCC_ClockConfig+0x280>)
 8003590:	4013      	ands	r3, r2
 8003592:	0019      	movs	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	00da      	lsls	r2, r3, #3
 800359a:	4b15      	ldr	r3, [pc, #84]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800359c:	430a      	orrs	r2, r1
 800359e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035a0:	f000 f832 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 80035a4:	0001      	movs	r1, r0
 80035a6:	4b12      	ldr	r3, [pc, #72]	@ (80035f0 <HAL_RCC_ClockConfig+0x278>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	220f      	movs	r2, #15
 80035ae:	4013      	ands	r3, r2
 80035b0:	4a12      	ldr	r2, [pc, #72]	@ (80035fc <HAL_RCC_ClockConfig+0x284>)
 80035b2:	5cd3      	ldrb	r3, [r2, r3]
 80035b4:	000a      	movs	r2, r1
 80035b6:	40da      	lsrs	r2, r3
 80035b8:	4b11      	ldr	r3, [pc, #68]	@ (8003600 <HAL_RCC_ClockConfig+0x288>)
 80035ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035bc:	4b11      	ldr	r3, [pc, #68]	@ (8003604 <HAL_RCC_ClockConfig+0x28c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	250b      	movs	r5, #11
 80035c2:	197c      	adds	r4, r7, r5
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7fe fa4f 	bl	8001a68 <HAL_InitTick>
 80035ca:	0003      	movs	r3, r0
 80035cc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80035ce:	197b      	adds	r3, r7, r5
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80035d6:	197b      	adds	r3, r7, r5
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	e000      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b004      	add	sp, #16
 80035e4:	bdb0      	pop	{r4, r5, r7, pc}
 80035e6:	46c0      	nop			@ (mov r8, r8)
 80035e8:	40022000 	.word	0x40022000
 80035ec:	00001388 	.word	0x00001388
 80035f0:	40021000 	.word	0x40021000
 80035f4:	fffff8ff 	.word	0xfffff8ff
 80035f8:	ffffc7ff 	.word	0xffffc7ff
 80035fc:	08005500 	.word	0x08005500
 8003600:	20000000 	.word	0x20000000
 8003604:	20000004 	.word	0x20000004

08003608 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003608:	b5b0      	push	{r4, r5, r7, lr}
 800360a:	b08e      	sub	sp, #56	@ 0x38
 800360c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800360e:	4b4c      	ldr	r3, [pc, #304]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x138>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003614:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003616:	230c      	movs	r3, #12
 8003618:	4013      	ands	r3, r2
 800361a:	2b0c      	cmp	r3, #12
 800361c:	d014      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x40>
 800361e:	d900      	bls.n	8003622 <HAL_RCC_GetSysClockFreq+0x1a>
 8003620:	e07b      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x112>
 8003622:	2b04      	cmp	r3, #4
 8003624:	d002      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0x24>
 8003626:	2b08      	cmp	r3, #8
 8003628:	d00b      	beq.n	8003642 <HAL_RCC_GetSysClockFreq+0x3a>
 800362a:	e076      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800362c:	4b44      	ldr	r3, [pc, #272]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x138>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2210      	movs	r2, #16
 8003632:	4013      	ands	r3, r2
 8003634:	d002      	beq.n	800363c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003636:	4b43      	ldr	r3, [pc, #268]	@ (8003744 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003638:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800363a:	e07c      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800363c:	4b42      	ldr	r3, [pc, #264]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x140>)
 800363e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003640:	e079      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003642:	4b42      	ldr	r3, [pc, #264]	@ (800374c <HAL_RCC_GetSysClockFreq+0x144>)
 8003644:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003646:	e076      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364a:	0c9a      	lsrs	r2, r3, #18
 800364c:	230f      	movs	r3, #15
 800364e:	401a      	ands	r2, r3
 8003650:	4b3f      	ldr	r3, [pc, #252]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x148>)
 8003652:	5c9b      	ldrb	r3, [r3, r2]
 8003654:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003658:	0d9a      	lsrs	r2, r3, #22
 800365a:	2303      	movs	r3, #3
 800365c:	4013      	ands	r3, r2
 800365e:	3301      	adds	r3, #1
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003662:	4b37      	ldr	r3, [pc, #220]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x138>)
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	2380      	movs	r3, #128	@ 0x80
 8003668:	025b      	lsls	r3, r3, #9
 800366a:	4013      	ands	r3, r2
 800366c:	d01a      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800366e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	4a35      	ldr	r2, [pc, #212]	@ (800374c <HAL_RCC_GetSysClockFreq+0x144>)
 8003678:	2300      	movs	r3, #0
 800367a:	69b8      	ldr	r0, [r7, #24]
 800367c:	69f9      	ldr	r1, [r7, #28]
 800367e:	f7fc fdf9 	bl	8000274 <__aeabi_lmul>
 8003682:	0002      	movs	r2, r0
 8003684:	000b      	movs	r3, r1
 8003686:	0010      	movs	r0, r2
 8003688:	0019      	movs	r1, r3
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f7fc fdcd 	bl	8000234 <__aeabi_uldivmod>
 800369a:	0002      	movs	r2, r0
 800369c:	000b      	movs	r3, r1
 800369e:	0013      	movs	r3, r2
 80036a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80036a2:	e037      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80036a4:	4b26      	ldr	r3, [pc, #152]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x138>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2210      	movs	r2, #16
 80036aa:	4013      	ands	r3, r2
 80036ac:	d01a      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80036ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4a23      	ldr	r2, [pc, #140]	@ (8003744 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036b8:	2300      	movs	r3, #0
 80036ba:	68b8      	ldr	r0, [r7, #8]
 80036bc:	68f9      	ldr	r1, [r7, #12]
 80036be:	f7fc fdd9 	bl	8000274 <__aeabi_lmul>
 80036c2:	0002      	movs	r2, r0
 80036c4:	000b      	movs	r3, r1
 80036c6:	0010      	movs	r0, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	2300      	movs	r3, #0
 80036d0:	607b      	str	r3, [r7, #4]
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f7fc fdad 	bl	8000234 <__aeabi_uldivmod>
 80036da:	0002      	movs	r2, r0
 80036dc:	000b      	movs	r3, r1
 80036de:	0013      	movs	r3, r2
 80036e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80036e2:	e017      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e6:	0018      	movs	r0, r3
 80036e8:	2300      	movs	r3, #0
 80036ea:	0019      	movs	r1, r3
 80036ec:	4a16      	ldr	r2, [pc, #88]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x140>)
 80036ee:	2300      	movs	r3, #0
 80036f0:	f7fc fdc0 	bl	8000274 <__aeabi_lmul>
 80036f4:	0002      	movs	r2, r0
 80036f6:	000b      	movs	r3, r1
 80036f8:	0010      	movs	r0, r2
 80036fa:	0019      	movs	r1, r3
 80036fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fe:	001c      	movs	r4, r3
 8003700:	2300      	movs	r3, #0
 8003702:	001d      	movs	r5, r3
 8003704:	0022      	movs	r2, r4
 8003706:	002b      	movs	r3, r5
 8003708:	f7fc fd94 	bl	8000234 <__aeabi_uldivmod>
 800370c:	0002      	movs	r2, r0
 800370e:	000b      	movs	r3, r1
 8003710:	0013      	movs	r3, r2
 8003712:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8003714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003716:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003718:	e00d      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800371a:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x138>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	0b5b      	lsrs	r3, r3, #13
 8003720:	2207      	movs	r2, #7
 8003722:	4013      	ands	r3, r2
 8003724:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	3301      	adds	r3, #1
 800372a:	2280      	movs	r2, #128	@ 0x80
 800372c:	0212      	lsls	r2, r2, #8
 800372e:	409a      	lsls	r2, r3
 8003730:	0013      	movs	r3, r2
 8003732:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003734:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	b00e      	add	sp, #56	@ 0x38
 800373e:	bdb0      	pop	{r4, r5, r7, pc}
 8003740:	40021000 	.word	0x40021000
 8003744:	003d0900 	.word	0x003d0900
 8003748:	00f42400 	.word	0x00f42400
 800374c:	007a1200 	.word	0x007a1200
 8003750:	08005518 	.word	0x08005518

08003754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003758:	4b02      	ldr	r3, [pc, #8]	@ (8003764 <HAL_RCC_GetHCLKFreq+0x10>)
 800375a:	681b      	ldr	r3, [r3, #0]
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	20000000 	.word	0x20000000

08003768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800376c:	f7ff fff2 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 8003770:	0001      	movs	r1, r0
 8003772:	4b06      	ldr	r3, [pc, #24]	@ (800378c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	2207      	movs	r2, #7
 800377a:	4013      	ands	r3, r2
 800377c:	4a04      	ldr	r2, [pc, #16]	@ (8003790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800377e:	5cd3      	ldrb	r3, [r2, r3]
 8003780:	40d9      	lsrs	r1, r3
 8003782:	000b      	movs	r3, r1
}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			@ (mov r8, r8)
 800378c:	40021000 	.word	0x40021000
 8003790:	08005510 	.word	0x08005510

08003794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003798:	f7ff ffdc 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 800379c:	0001      	movs	r1, r0
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	0adb      	lsrs	r3, r3, #11
 80037a4:	2207      	movs	r2, #7
 80037a6:	4013      	ands	r3, r2
 80037a8:	4a04      	ldr	r2, [pc, #16]	@ (80037bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80037aa:	5cd3      	ldrb	r3, [r2, r3]
 80037ac:	40d9      	lsrs	r1, r3
 80037ae:	000b      	movs	r3, r1
}
 80037b0:	0018      	movs	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	40021000 	.word	0x40021000
 80037bc:	08005510 	.word	0x08005510

080037c0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80037c8:	2017      	movs	r0, #23
 80037ca:	183b      	adds	r3, r7, r0
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2220      	movs	r2, #32
 80037d6:	4013      	ands	r3, r2
 80037d8:	d100      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80037da:	e0c7      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037dc:	4b84      	ldr	r3, [pc, #528]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80037de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037e0:	2380      	movs	r3, #128	@ 0x80
 80037e2:	055b      	lsls	r3, r3, #21
 80037e4:	4013      	ands	r3, r2
 80037e6:	d109      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e8:	4b81      	ldr	r3, [pc, #516]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80037ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ec:	4b80      	ldr	r3, [pc, #512]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80037ee:	2180      	movs	r1, #128	@ 0x80
 80037f0:	0549      	lsls	r1, r1, #21
 80037f2:	430a      	orrs	r2, r1
 80037f4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80037f6:	183b      	adds	r3, r7, r0
 80037f8:	2201      	movs	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fc:	4b7d      	ldr	r3, [pc, #500]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	2380      	movs	r3, #128	@ 0x80
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	4013      	ands	r3, r2
 8003806:	d11a      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003808:	4b7a      	ldr	r3, [pc, #488]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b79      	ldr	r3, [pc, #484]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800380e:	2180      	movs	r1, #128	@ 0x80
 8003810:	0049      	lsls	r1, r1, #1
 8003812:	430a      	orrs	r2, r1
 8003814:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003816:	f7fe f96d 	bl	8001af4 <HAL_GetTick>
 800381a:	0003      	movs	r3, r0
 800381c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381e:	e008      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003820:	f7fe f968 	bl	8001af4 <HAL_GetTick>
 8003824:	0002      	movs	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	@ 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e0d9      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003832:	4b70      	ldr	r3, [pc, #448]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	2380      	movs	r3, #128	@ 0x80
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	4013      	ands	r3, r2
 800383c:	d0f0      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800383e:	4b6c      	ldr	r3, [pc, #432]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	23c0      	movs	r3, #192	@ 0xc0
 8003844:	039b      	lsls	r3, r3, #14
 8003846:	4013      	ands	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	23c0      	movs	r3, #192	@ 0xc0
 8003850:	039b      	lsls	r3, r3, #14
 8003852:	4013      	ands	r3, r2
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	429a      	cmp	r2, r3
 8003858:	d013      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	23c0      	movs	r3, #192	@ 0xc0
 8003860:	029b      	lsls	r3, r3, #10
 8003862:	401a      	ands	r2, r3
 8003864:	23c0      	movs	r3, #192	@ 0xc0
 8003866:	029b      	lsls	r3, r3, #10
 8003868:	429a      	cmp	r2, r3
 800386a:	d10a      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800386c:	4b60      	ldr	r3, [pc, #384]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	2380      	movs	r3, #128	@ 0x80
 8003872:	029b      	lsls	r3, r3, #10
 8003874:	401a      	ands	r2, r3
 8003876:	2380      	movs	r3, #128	@ 0x80
 8003878:	029b      	lsls	r3, r3, #10
 800387a:	429a      	cmp	r2, r3
 800387c:	d101      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e0b1      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003882:	4b5b      	ldr	r3, [pc, #364]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003884:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003886:	23c0      	movs	r3, #192	@ 0xc0
 8003888:	029b      	lsls	r3, r3, #10
 800388a:	4013      	ands	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d03b      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	23c0      	movs	r3, #192	@ 0xc0
 800389a:	029b      	lsls	r3, r3, #10
 800389c:	4013      	ands	r3, r2
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d033      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2220      	movs	r2, #32
 80038aa:	4013      	ands	r3, r2
 80038ac:	d02e      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80038ae:	4b50      	ldr	r3, [pc, #320]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b2:	4a51      	ldr	r2, [pc, #324]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038b8:	4b4d      	ldr	r3, [pc, #308]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038bc:	4b4c      	ldr	r3, [pc, #304]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038be:	2180      	movs	r1, #128	@ 0x80
 80038c0:	0309      	lsls	r1, r1, #12
 80038c2:	430a      	orrs	r2, r1
 80038c4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038c6:	4b4a      	ldr	r3, [pc, #296]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038ca:	4b49      	ldr	r3, [pc, #292]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038cc:	494b      	ldr	r1, [pc, #300]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80038ce:	400a      	ands	r2, r1
 80038d0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80038d2:	4b47      	ldr	r3, [pc, #284]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	2380      	movs	r3, #128	@ 0x80
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4013      	ands	r3, r2
 80038e0:	d014      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e2:	f7fe f907 	bl	8001af4 <HAL_GetTick>
 80038e6:	0003      	movs	r3, r0
 80038e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038ea:	e009      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ec:	f7fe f902 	bl	8001af4 <HAL_GetTick>
 80038f0:	0002      	movs	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	4a42      	ldr	r2, [pc, #264]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d901      	bls.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e072      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003900:	4b3b      	ldr	r3, [pc, #236]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003902:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003904:	2380      	movs	r3, #128	@ 0x80
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4013      	ands	r3, r2
 800390a:	d0ef      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2220      	movs	r2, #32
 8003912:	4013      	ands	r3, r2
 8003914:	d01f      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	23c0      	movs	r3, #192	@ 0xc0
 800391c:	029b      	lsls	r3, r3, #10
 800391e:	401a      	ands	r2, r3
 8003920:	23c0      	movs	r3, #192	@ 0xc0
 8003922:	029b      	lsls	r3, r3, #10
 8003924:	429a      	cmp	r2, r3
 8003926:	d10c      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003928:	4b31      	ldr	r3, [pc, #196]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a35      	ldr	r2, [pc, #212]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800392e:	4013      	ands	r3, r2
 8003930:	0019      	movs	r1, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	23c0      	movs	r3, #192	@ 0xc0
 8003938:	039b      	lsls	r3, r3, #14
 800393a:	401a      	ands	r2, r3
 800393c:	4b2c      	ldr	r3, [pc, #176]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800393e:	430a      	orrs	r2, r1
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	4b2b      	ldr	r3, [pc, #172]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003944:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	23c0      	movs	r3, #192	@ 0xc0
 800394c:	029b      	lsls	r3, r3, #10
 800394e:	401a      	ands	r2, r3
 8003950:	4b27      	ldr	r3, [pc, #156]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003952:	430a      	orrs	r2, r1
 8003954:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003956:	2317      	movs	r3, #23
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d105      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003960:	4b23      	ldr	r3, [pc, #140]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003962:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003964:	4b22      	ldr	r3, [pc, #136]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003966:	4928      	ldr	r1, [pc, #160]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003968:	400a      	ands	r2, r1
 800396a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2202      	movs	r2, #2
 8003972:	4013      	ands	r3, r2
 8003974:	d009      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003976:	4b1e      	ldr	r3, [pc, #120]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397a:	220c      	movs	r2, #12
 800397c:	4393      	bics	r3, r2
 800397e:	0019      	movs	r1, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	4b1a      	ldr	r3, [pc, #104]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003986:	430a      	orrs	r2, r1
 8003988:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2204      	movs	r2, #4
 8003990:	4013      	ands	r3, r2
 8003992:	d009      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003994:	4b16      	ldr	r3, [pc, #88]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003998:	4a1c      	ldr	r2, [pc, #112]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800399a:	4013      	ands	r3, r2
 800399c:	0019      	movs	r1, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	4b13      	ldr	r3, [pc, #76]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039a4:	430a      	orrs	r2, r1
 80039a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2208      	movs	r2, #8
 80039ae:	4013      	ands	r3, r2
 80039b0:	d009      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039b2:	4b0f      	ldr	r3, [pc, #60]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b6:	4a16      	ldr	r2, [pc, #88]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	0019      	movs	r1, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039c2:	430a      	orrs	r2, r1
 80039c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2280      	movs	r2, #128	@ 0x80
 80039cc:	4013      	ands	r3, r2
 80039ce:	d009      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80039d0:	4b07      	ldr	r3, [pc, #28]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	0019      	movs	r1, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	4b04      	ldr	r3, [pc, #16]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039e0:	430a      	orrs	r2, r1
 80039e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	0018      	movs	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b006      	add	sp, #24
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40007000 	.word	0x40007000
 80039f8:	fffcffff 	.word	0xfffcffff
 80039fc:	fff7ffff 	.word	0xfff7ffff
 8003a00:	00001388 	.word	0x00001388
 8003a04:	ffcfffff 	.word	0xffcfffff
 8003a08:	efffffff 	.word	0xefffffff
 8003a0c:	fffff3ff 	.word	0xfffff3ff
 8003a10:	ffffcfff 	.word	0xffffcfff
 8003a14:	fff3ffff 	.word	0xfff3ffff

08003a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e044      	b.n	8003ab4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d107      	bne.n	8003a42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2278      	movs	r2, #120	@ 0x78
 8003a36:	2100      	movs	r1, #0
 8003a38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f7fd feaf 	bl	80017a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2224      	movs	r2, #36	@ 0x24
 8003a46:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2101      	movs	r1, #1
 8003a54:	438a      	bics	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 f8d0 	bl	8003c00 <UART_SetConfig>
 8003a60:	0003      	movs	r3, r0
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e024      	b.n	8003ab4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	0018      	movs	r0, r3
 8003a76:	f000 fb0d 	bl	8004094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	490d      	ldr	r1, [pc, #52]	@ (8003abc <HAL_UART_Init+0xa4>)
 8003a86:	400a      	ands	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	212a      	movs	r1, #42	@ 0x2a
 8003a96:	438a      	bics	r2, r1
 8003a98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	0018      	movs	r0, r3
 8003aae:	f000 fba5 	bl	80041fc <UART_CheckIdleState>
 8003ab2:	0003      	movs	r3, r0
}
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b002      	add	sp, #8
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	ffffb7ff 	.word	0xffffb7ff

08003ac0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08a      	sub	sp, #40	@ 0x28
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	1dbb      	adds	r3, r7, #6
 8003ace:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d000      	beq.n	8003ada <HAL_UART_Transmit+0x1a>
 8003ad8:	e08c      	b.n	8003bf4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_UART_Transmit+0x28>
 8003ae0:	1dbb      	adds	r3, r7, #6
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e084      	b.n	8003bf6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	2380      	movs	r3, #128	@ 0x80
 8003af2:	015b      	lsls	r3, r3, #5
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d109      	bne.n	8003b0c <HAL_UART_Transmit+0x4c>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d105      	bne.n	8003b0c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2201      	movs	r2, #1
 8003b04:	4013      	ands	r3, r2
 8003b06:	d001      	beq.n	8003b0c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e074      	b.n	8003bf6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2284      	movs	r2, #132	@ 0x84
 8003b10:	2100      	movs	r1, #0
 8003b12:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2221      	movs	r2, #33	@ 0x21
 8003b18:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b1a:	f7fd ffeb 	bl	8001af4 <HAL_GetTick>
 8003b1e:	0003      	movs	r3, r0
 8003b20:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1dba      	adds	r2, r7, #6
 8003b26:	2150      	movs	r1, #80	@ 0x50
 8003b28:	8812      	ldrh	r2, [r2, #0]
 8003b2a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1dba      	adds	r2, r7, #6
 8003b30:	2152      	movs	r1, #82	@ 0x52
 8003b32:	8812      	ldrh	r2, [r2, #0]
 8003b34:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	2380      	movs	r3, #128	@ 0x80
 8003b3c:	015b      	lsls	r3, r3, #5
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d108      	bne.n	8003b54 <HAL_UART_Transmit+0x94>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d104      	bne.n	8003b54 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	e003      	b.n	8003b5c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b5c:	e02f      	b.n	8003bbe <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	0013      	movs	r3, r2
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2180      	movs	r1, #128	@ 0x80
 8003b6c:	f000 fbee 	bl	800434c <UART_WaitOnFlagUntilTimeout>
 8003b70:	1e03      	subs	r3, r0, #0
 8003b72:	d004      	beq.n	8003b7e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e03b      	b.n	8003bf6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	001a      	movs	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	05d2      	lsls	r2, r2, #23
 8003b90:	0dd2      	lsrs	r2, r2, #23
 8003b92:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	3302      	adds	r3, #2
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	e007      	b.n	8003bac <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	781a      	ldrb	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2252      	movs	r2, #82	@ 0x52
 8003bb0:	5a9b      	ldrh	r3, [r3, r2]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b299      	uxth	r1, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2252      	movs	r2, #82	@ 0x52
 8003bbc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2252      	movs	r2, #82	@ 0x52
 8003bc2:	5a9b      	ldrh	r3, [r3, r2]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1c9      	bne.n	8003b5e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	0013      	movs	r3, r2
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2140      	movs	r1, #64	@ 0x40
 8003bd8:	f000 fbb8 	bl	800434c <UART_WaitOnFlagUntilTimeout>
 8003bdc:	1e03      	subs	r3, r0, #0
 8003bde:	d004      	beq.n	8003bea <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e005      	b.n	8003bf6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2220      	movs	r2, #32
 8003bee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e000      	b.n	8003bf6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
  }
}
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	b008      	add	sp, #32
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c00:	b5b0      	push	{r4, r5, r7, lr}
 8003c02:	b08e      	sub	sp, #56	@ 0x38
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c08:	231a      	movs	r3, #26
 8003c0a:	2218      	movs	r2, #24
 8003c0c:	189b      	adds	r3, r3, r2
 8003c0e:	19db      	adds	r3, r3, r7
 8003c10:	2200      	movs	r2, #0
 8003c12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4ab4      	ldr	r2, [pc, #720]	@ (8003f04 <UART_SetConfig+0x304>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	0019      	movs	r1, r3
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4aaf      	ldr	r2, [pc, #700]	@ (8003f08 <UART_SetConfig+0x308>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	0019      	movs	r1, r3
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4aa9      	ldr	r2, [pc, #676]	@ (8003f0c <UART_SetConfig+0x30c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c70:	4313      	orrs	r3, r2
 8003c72:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	4aa5      	ldr	r2, [pc, #660]	@ (8003f10 <UART_SetConfig+0x310>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	0019      	movs	r1, r3
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c86:	430a      	orrs	r2, r1
 8003c88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4aa1      	ldr	r2, [pc, #644]	@ (8003f14 <UART_SetConfig+0x314>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d131      	bne.n	8003cf8 <UART_SetConfig+0xf8>
 8003c94:	4ba0      	ldr	r3, [pc, #640]	@ (8003f18 <UART_SetConfig+0x318>)
 8003c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c98:	220c      	movs	r2, #12
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b0c      	cmp	r3, #12
 8003c9e:	d01d      	beq.n	8003cdc <UART_SetConfig+0xdc>
 8003ca0:	d823      	bhi.n	8003cea <UART_SetConfig+0xea>
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d00c      	beq.n	8003cc0 <UART_SetConfig+0xc0>
 8003ca6:	d820      	bhi.n	8003cea <UART_SetConfig+0xea>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <UART_SetConfig+0xb2>
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d00e      	beq.n	8003cce <UART_SetConfig+0xce>
 8003cb0:	e01b      	b.n	8003cea <UART_SetConfig+0xea>
 8003cb2:	231b      	movs	r3, #27
 8003cb4:	2218      	movs	r2, #24
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	19db      	adds	r3, r3, r7
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	e065      	b.n	8003d8c <UART_SetConfig+0x18c>
 8003cc0:	231b      	movs	r3, #27
 8003cc2:	2218      	movs	r2, #24
 8003cc4:	189b      	adds	r3, r3, r2
 8003cc6:	19db      	adds	r3, r3, r7
 8003cc8:	2202      	movs	r2, #2
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e05e      	b.n	8003d8c <UART_SetConfig+0x18c>
 8003cce:	231b      	movs	r3, #27
 8003cd0:	2218      	movs	r2, #24
 8003cd2:	189b      	adds	r3, r3, r2
 8003cd4:	19db      	adds	r3, r3, r7
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	e057      	b.n	8003d8c <UART_SetConfig+0x18c>
 8003cdc:	231b      	movs	r3, #27
 8003cde:	2218      	movs	r2, #24
 8003ce0:	189b      	adds	r3, r3, r2
 8003ce2:	19db      	adds	r3, r3, r7
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	701a      	strb	r2, [r3, #0]
 8003ce8:	e050      	b.n	8003d8c <UART_SetConfig+0x18c>
 8003cea:	231b      	movs	r3, #27
 8003cec:	2218      	movs	r2, #24
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	19db      	adds	r3, r3, r7
 8003cf2:	2210      	movs	r2, #16
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	e049      	b.n	8003d8c <UART_SetConfig+0x18c>
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a83      	ldr	r2, [pc, #524]	@ (8003f0c <UART_SetConfig+0x30c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d13e      	bne.n	8003d80 <UART_SetConfig+0x180>
 8003d02:	4b85      	ldr	r3, [pc, #532]	@ (8003f18 <UART_SetConfig+0x318>)
 8003d04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d06:	23c0      	movs	r3, #192	@ 0xc0
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	22c0      	movs	r2, #192	@ 0xc0
 8003d0e:	0112      	lsls	r2, r2, #4
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d027      	beq.n	8003d64 <UART_SetConfig+0x164>
 8003d14:	22c0      	movs	r2, #192	@ 0xc0
 8003d16:	0112      	lsls	r2, r2, #4
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d82a      	bhi.n	8003d72 <UART_SetConfig+0x172>
 8003d1c:	2280      	movs	r2, #128	@ 0x80
 8003d1e:	0112      	lsls	r2, r2, #4
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d011      	beq.n	8003d48 <UART_SetConfig+0x148>
 8003d24:	2280      	movs	r2, #128	@ 0x80
 8003d26:	0112      	lsls	r2, r2, #4
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d822      	bhi.n	8003d72 <UART_SetConfig+0x172>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d004      	beq.n	8003d3a <UART_SetConfig+0x13a>
 8003d30:	2280      	movs	r2, #128	@ 0x80
 8003d32:	00d2      	lsls	r2, r2, #3
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00e      	beq.n	8003d56 <UART_SetConfig+0x156>
 8003d38:	e01b      	b.n	8003d72 <UART_SetConfig+0x172>
 8003d3a:	231b      	movs	r3, #27
 8003d3c:	2218      	movs	r2, #24
 8003d3e:	189b      	adds	r3, r3, r2
 8003d40:	19db      	adds	r3, r3, r7
 8003d42:	2200      	movs	r2, #0
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	e021      	b.n	8003d8c <UART_SetConfig+0x18c>
 8003d48:	231b      	movs	r3, #27
 8003d4a:	2218      	movs	r2, #24
 8003d4c:	189b      	adds	r3, r3, r2
 8003d4e:	19db      	adds	r3, r3, r7
 8003d50:	2202      	movs	r2, #2
 8003d52:	701a      	strb	r2, [r3, #0]
 8003d54:	e01a      	b.n	8003d8c <UART_SetConfig+0x18c>
 8003d56:	231b      	movs	r3, #27
 8003d58:	2218      	movs	r2, #24
 8003d5a:	189b      	adds	r3, r3, r2
 8003d5c:	19db      	adds	r3, r3, r7
 8003d5e:	2204      	movs	r2, #4
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	e013      	b.n	8003d8c <UART_SetConfig+0x18c>
 8003d64:	231b      	movs	r3, #27
 8003d66:	2218      	movs	r2, #24
 8003d68:	189b      	adds	r3, r3, r2
 8003d6a:	19db      	adds	r3, r3, r7
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	e00c      	b.n	8003d8c <UART_SetConfig+0x18c>
 8003d72:	231b      	movs	r3, #27
 8003d74:	2218      	movs	r2, #24
 8003d76:	189b      	adds	r3, r3, r2
 8003d78:	19db      	adds	r3, r3, r7
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e005      	b.n	8003d8c <UART_SetConfig+0x18c>
 8003d80:	231b      	movs	r3, #27
 8003d82:	2218      	movs	r2, #24
 8003d84:	189b      	adds	r3, r3, r2
 8003d86:	19db      	adds	r3, r3, r7
 8003d88:	2210      	movs	r2, #16
 8003d8a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a5e      	ldr	r2, [pc, #376]	@ (8003f0c <UART_SetConfig+0x30c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d000      	beq.n	8003d98 <UART_SetConfig+0x198>
 8003d96:	e084      	b.n	8003ea2 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d98:	231b      	movs	r3, #27
 8003d9a:	2218      	movs	r2, #24
 8003d9c:	189b      	adds	r3, r3, r2
 8003d9e:	19db      	adds	r3, r3, r7
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d01d      	beq.n	8003de2 <UART_SetConfig+0x1e2>
 8003da6:	dc20      	bgt.n	8003dea <UART_SetConfig+0x1ea>
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d015      	beq.n	8003dd8 <UART_SetConfig+0x1d8>
 8003dac:	dc1d      	bgt.n	8003dea <UART_SetConfig+0x1ea>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <UART_SetConfig+0x1b8>
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d005      	beq.n	8003dc2 <UART_SetConfig+0x1c2>
 8003db6:	e018      	b.n	8003dea <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db8:	f7ff fcd6 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003dc0:	e01c      	b.n	8003dfc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dc2:	4b55      	ldr	r3, [pc, #340]	@ (8003f18 <UART_SetConfig+0x318>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2210      	movs	r2, #16
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d002      	beq.n	8003dd2 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003dcc:	4b53      	ldr	r3, [pc, #332]	@ (8003f1c <UART_SetConfig+0x31c>)
 8003dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003dd0:	e014      	b.n	8003dfc <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003dd2:	4b53      	ldr	r3, [pc, #332]	@ (8003f20 <UART_SetConfig+0x320>)
 8003dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003dd6:	e011      	b.n	8003dfc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd8:	f7ff fc16 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003de0:	e00c      	b.n	8003dfc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de2:	2380      	movs	r3, #128	@ 0x80
 8003de4:	021b      	lsls	r3, r3, #8
 8003de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003de8:	e008      	b.n	8003dfc <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003dee:	231a      	movs	r3, #26
 8003df0:	2218      	movs	r2, #24
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	19db      	adds	r3, r3, r7
 8003df6:	2201      	movs	r2, #1
 8003df8:	701a      	strb	r2, [r3, #0]
        break;
 8003dfa:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d100      	bne.n	8003e04 <UART_SetConfig+0x204>
 8003e02:	e12f      	b.n	8004064 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	0013      	movs	r3, r2
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	189b      	adds	r3, r3, r2
 8003e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d305      	bcc.n	8003e20 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d906      	bls.n	8003e2e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003e20:	231a      	movs	r3, #26
 8003e22:	2218      	movs	r2, #24
 8003e24:	189b      	adds	r3, r3, r2
 8003e26:	19db      	adds	r3, r3, r7
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
 8003e2c:	e11a      	b.n	8004064 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	6939      	ldr	r1, [r7, #16]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	000b      	movs	r3, r1
 8003e3c:	0e1b      	lsrs	r3, r3, #24
 8003e3e:	0010      	movs	r0, r2
 8003e40:	0205      	lsls	r5, r0, #8
 8003e42:	431d      	orrs	r5, r3
 8003e44:	000b      	movs	r3, r1
 8003e46:	021c      	lsls	r4, r3, #8
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	085b      	lsrs	r3, r3, #1
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68b8      	ldr	r0, [r7, #8]
 8003e56:	68f9      	ldr	r1, [r7, #12]
 8003e58:	1900      	adds	r0, r0, r4
 8003e5a:	4169      	adcs	r1, r5
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	2300      	movs	r3, #0
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f7fc f9e3 	bl	8000234 <__aeabi_uldivmod>
 8003e6e:	0002      	movs	r2, r0
 8003e70:	000b      	movs	r3, r1
 8003e72:	0013      	movs	r3, r2
 8003e74:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e78:	23c0      	movs	r3, #192	@ 0xc0
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d309      	bcc.n	8003e94 <UART_SetConfig+0x294>
 8003e80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e82:	2380      	movs	r3, #128	@ 0x80
 8003e84:	035b      	lsls	r3, r3, #13
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d204      	bcs.n	8003e94 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e90:	60da      	str	r2, [r3, #12]
 8003e92:	e0e7      	b.n	8004064 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003e94:	231a      	movs	r3, #26
 8003e96:	2218      	movs	r2, #24
 8003e98:	189b      	adds	r3, r3, r2
 8003e9a:	19db      	adds	r3, r3, r7
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	701a      	strb	r2, [r3, #0]
 8003ea0:	e0e0      	b.n	8004064 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	69da      	ldr	r2, [r3, #28]
 8003ea6:	2380      	movs	r3, #128	@ 0x80
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d000      	beq.n	8003eb0 <UART_SetConfig+0x2b0>
 8003eae:	e082      	b.n	8003fb6 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003eb0:	231b      	movs	r3, #27
 8003eb2:	2218      	movs	r2, #24
 8003eb4:	189b      	adds	r3, r3, r2
 8003eb6:	19db      	adds	r3, r3, r7
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d834      	bhi.n	8003f28 <UART_SetConfig+0x328>
 8003ebe:	009a      	lsls	r2, r3, #2
 8003ec0:	4b18      	ldr	r3, [pc, #96]	@ (8003f24 <UART_SetConfig+0x324>)
 8003ec2:	18d3      	adds	r3, r2, r3
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec8:	f7ff fc4e 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 8003ecc:	0003      	movs	r3, r0
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ed0:	e033      	b.n	8003f3a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed2:	f7ff fc5f 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 8003ed6:	0003      	movs	r3, r0
 8003ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003eda:	e02e      	b.n	8003f3a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003edc:	4b0e      	ldr	r3, [pc, #56]	@ (8003f18 <UART_SetConfig+0x318>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d002      	beq.n	8003eec <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f1c <UART_SetConfig+0x31c>)
 8003ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003eea:	e026      	b.n	8003f3a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003eec:	4b0c      	ldr	r3, [pc, #48]	@ (8003f20 <UART_SetConfig+0x320>)
 8003eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ef0:	e023      	b.n	8003f3a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ef2:	f7ff fb89 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 8003ef6:	0003      	movs	r3, r0
 8003ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003efa:	e01e      	b.n	8003f3a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003efc:	2380      	movs	r3, #128	@ 0x80
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f02:	e01a      	b.n	8003f3a <UART_SetConfig+0x33a>
 8003f04:	efff69f3 	.word	0xefff69f3
 8003f08:	ffffcfff 	.word	0xffffcfff
 8003f0c:	40004800 	.word	0x40004800
 8003f10:	fffff4ff 	.word	0xfffff4ff
 8003f14:	40004400 	.word	0x40004400
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	003d0900 	.word	0x003d0900
 8003f20:	00f42400 	.word	0x00f42400
 8003f24:	08005524 	.word	0x08005524
      default:
        pclk = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003f2c:	231a      	movs	r3, #26
 8003f2e:	2218      	movs	r2, #24
 8003f30:	189b      	adds	r3, r3, r2
 8003f32:	19db      	adds	r3, r3, r7
 8003f34:	2201      	movs	r2, #1
 8003f36:	701a      	strb	r2, [r3, #0]
        break;
 8003f38:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d100      	bne.n	8003f42 <UART_SetConfig+0x342>
 8003f40:	e090      	b.n	8004064 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f44:	005a      	lsls	r2, r3, #1
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	18d2      	adds	r2, r2, r3
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	0019      	movs	r1, r3
 8003f54:	0010      	movs	r0, r2
 8003f56:	f7fc f8e1 	bl	800011c <__udivsi3>
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f60:	2b0f      	cmp	r3, #15
 8003f62:	d921      	bls.n	8003fa8 <UART_SetConfig+0x3a8>
 8003f64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f66:	2380      	movs	r3, #128	@ 0x80
 8003f68:	025b      	lsls	r3, r3, #9
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d21c      	bcs.n	8003fa8 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	200e      	movs	r0, #14
 8003f74:	2418      	movs	r4, #24
 8003f76:	1903      	adds	r3, r0, r4
 8003f78:	19db      	adds	r3, r3, r7
 8003f7a:	210f      	movs	r1, #15
 8003f7c:	438a      	bics	r2, r1
 8003f7e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2207      	movs	r2, #7
 8003f88:	4013      	ands	r3, r2
 8003f8a:	b299      	uxth	r1, r3
 8003f8c:	1903      	adds	r3, r0, r4
 8003f8e:	19db      	adds	r3, r3, r7
 8003f90:	1902      	adds	r2, r0, r4
 8003f92:	19d2      	adds	r2, r2, r7
 8003f94:	8812      	ldrh	r2, [r2, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	1902      	adds	r2, r0, r4
 8003fa0:	19d2      	adds	r2, r2, r7
 8003fa2:	8812      	ldrh	r2, [r2, #0]
 8003fa4:	60da      	str	r2, [r3, #12]
 8003fa6:	e05d      	b.n	8004064 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003fa8:	231a      	movs	r3, #26
 8003faa:	2218      	movs	r2, #24
 8003fac:	189b      	adds	r3, r3, r2
 8003fae:	19db      	adds	r3, r3, r7
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	701a      	strb	r2, [r3, #0]
 8003fb4:	e056      	b.n	8004064 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fb6:	231b      	movs	r3, #27
 8003fb8:	2218      	movs	r2, #24
 8003fba:	189b      	adds	r3, r3, r2
 8003fbc:	19db      	adds	r3, r3, r7
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d822      	bhi.n	800400a <UART_SetConfig+0x40a>
 8003fc4:	009a      	lsls	r2, r3, #2
 8003fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8004084 <UART_SetConfig+0x484>)
 8003fc8:	18d3      	adds	r3, r2, r3
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fce:	f7ff fbcb 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 8003fd2:	0003      	movs	r3, r0
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003fd6:	e021      	b.n	800401c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fd8:	f7ff fbdc 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003fe0:	e01c      	b.n	800401c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fe2:	4b29      	ldr	r3, [pc, #164]	@ (8004088 <UART_SetConfig+0x488>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2210      	movs	r2, #16
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d002      	beq.n	8003ff2 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003fec:	4b27      	ldr	r3, [pc, #156]	@ (800408c <UART_SetConfig+0x48c>)
 8003fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003ff0:	e014      	b.n	800401c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003ff2:	4b27      	ldr	r3, [pc, #156]	@ (8004090 <UART_SetConfig+0x490>)
 8003ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ff6:	e011      	b.n	800401c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff8:	f7ff fb06 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004000:	e00c      	b.n	800401c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004002:	2380      	movs	r3, #128	@ 0x80
 8004004:	021b      	lsls	r3, r3, #8
 8004006:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004008:	e008      	b.n	800401c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800400e:	231a      	movs	r3, #26
 8004010:	2218      	movs	r2, #24
 8004012:	189b      	adds	r3, r3, r2
 8004014:	19db      	adds	r3, r3, r7
 8004016:	2201      	movs	r2, #1
 8004018:	701a      	strb	r2, [r3, #0]
        break;
 800401a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800401c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d020      	beq.n	8004064 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	085a      	lsrs	r2, r3, #1
 8004028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402a:	18d2      	adds	r2, r2, r3
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	0019      	movs	r1, r3
 8004032:	0010      	movs	r0, r2
 8004034:	f7fc f872 	bl	800011c <__udivsi3>
 8004038:	0003      	movs	r3, r0
 800403a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800403c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403e:	2b0f      	cmp	r3, #15
 8004040:	d90a      	bls.n	8004058 <UART_SetConfig+0x458>
 8004042:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004044:	2380      	movs	r3, #128	@ 0x80
 8004046:	025b      	lsls	r3, r3, #9
 8004048:	429a      	cmp	r2, r3
 800404a:	d205      	bcs.n	8004058 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800404c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404e:	b29a      	uxth	r2, r3
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	e005      	b.n	8004064 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004058:	231a      	movs	r3, #26
 800405a:	2218      	movs	r2, #24
 800405c:	189b      	adds	r3, r3, r2
 800405e:	19db      	adds	r3, r3, r7
 8004060:	2201      	movs	r2, #1
 8004062:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2200      	movs	r2, #0
 8004068:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	2200      	movs	r2, #0
 800406e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004070:	231a      	movs	r3, #26
 8004072:	2218      	movs	r2, #24
 8004074:	189b      	adds	r3, r3, r2
 8004076:	19db      	adds	r3, r3, r7
 8004078:	781b      	ldrb	r3, [r3, #0]
}
 800407a:	0018      	movs	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	b00e      	add	sp, #56	@ 0x38
 8004080:	bdb0      	pop	{r4, r5, r7, pc}
 8004082:	46c0      	nop			@ (mov r8, r8)
 8004084:	08005548 	.word	0x08005548
 8004088:	40021000 	.word	0x40021000
 800408c:	003d0900 	.word	0x003d0900
 8004090:	00f42400 	.word	0x00f42400

08004094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	2201      	movs	r2, #1
 80040a2:	4013      	ands	r3, r2
 80040a4:	d00b      	beq.n	80040be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4a4a      	ldr	r2, [pc, #296]	@ (80041d8 <UART_AdvFeatureConfig+0x144>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	0019      	movs	r1, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	2202      	movs	r2, #2
 80040c4:	4013      	ands	r3, r2
 80040c6:	d00b      	beq.n	80040e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	4a43      	ldr	r2, [pc, #268]	@ (80041dc <UART_AdvFeatureConfig+0x148>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	0019      	movs	r1, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	2204      	movs	r2, #4
 80040e6:	4013      	ands	r3, r2
 80040e8:	d00b      	beq.n	8004102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4a3b      	ldr	r2, [pc, #236]	@ (80041e0 <UART_AdvFeatureConfig+0x14c>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	0019      	movs	r1, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	2208      	movs	r2, #8
 8004108:	4013      	ands	r3, r2
 800410a:	d00b      	beq.n	8004124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4a34      	ldr	r2, [pc, #208]	@ (80041e4 <UART_AdvFeatureConfig+0x150>)
 8004114:	4013      	ands	r3, r2
 8004116:	0019      	movs	r1, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	2210      	movs	r2, #16
 800412a:	4013      	ands	r3, r2
 800412c:	d00b      	beq.n	8004146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4a2c      	ldr	r2, [pc, #176]	@ (80041e8 <UART_AdvFeatureConfig+0x154>)
 8004136:	4013      	ands	r3, r2
 8004138:	0019      	movs	r1, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	2220      	movs	r2, #32
 800414c:	4013      	ands	r3, r2
 800414e:	d00b      	beq.n	8004168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	4a25      	ldr	r2, [pc, #148]	@ (80041ec <UART_AdvFeatureConfig+0x158>)
 8004158:	4013      	ands	r3, r2
 800415a:	0019      	movs	r1, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	2240      	movs	r2, #64	@ 0x40
 800416e:	4013      	ands	r3, r2
 8004170:	d01d      	beq.n	80041ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a1d      	ldr	r2, [pc, #116]	@ (80041f0 <UART_AdvFeatureConfig+0x15c>)
 800417a:	4013      	ands	r3, r2
 800417c:	0019      	movs	r1, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800418e:	2380      	movs	r3, #128	@ 0x80
 8004190:	035b      	lsls	r3, r3, #13
 8004192:	429a      	cmp	r2, r3
 8004194:	d10b      	bne.n	80041ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	4a15      	ldr	r2, [pc, #84]	@ (80041f4 <UART_AdvFeatureConfig+0x160>)
 800419e:	4013      	ands	r3, r2
 80041a0:	0019      	movs	r1, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	2280      	movs	r2, #128	@ 0x80
 80041b4:	4013      	ands	r3, r2
 80041b6:	d00b      	beq.n	80041d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	4a0e      	ldr	r2, [pc, #56]	@ (80041f8 <UART_AdvFeatureConfig+0x164>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	0019      	movs	r1, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	605a      	str	r2, [r3, #4]
  }
}
 80041d0:	46c0      	nop			@ (mov r8, r8)
 80041d2:	46bd      	mov	sp, r7
 80041d4:	b002      	add	sp, #8
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	fffdffff 	.word	0xfffdffff
 80041dc:	fffeffff 	.word	0xfffeffff
 80041e0:	fffbffff 	.word	0xfffbffff
 80041e4:	ffff7fff 	.word	0xffff7fff
 80041e8:	ffffefff 	.word	0xffffefff
 80041ec:	ffffdfff 	.word	0xffffdfff
 80041f0:	ffefffff 	.word	0xffefffff
 80041f4:	ff9fffff 	.word	0xff9fffff
 80041f8:	fff7ffff 	.word	0xfff7ffff

080041fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b092      	sub	sp, #72	@ 0x48
 8004200:	af02      	add	r7, sp, #8
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2284      	movs	r2, #132	@ 0x84
 8004208:	2100      	movs	r1, #0
 800420a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800420c:	f7fd fc72 	bl	8001af4 <HAL_GetTick>
 8004210:	0003      	movs	r3, r0
 8004212:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2208      	movs	r2, #8
 800421c:	4013      	ands	r3, r2
 800421e:	2b08      	cmp	r3, #8
 8004220:	d12c      	bne.n	800427c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004224:	2280      	movs	r2, #128	@ 0x80
 8004226:	0391      	lsls	r1, r2, #14
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	4a46      	ldr	r2, [pc, #280]	@ (8004344 <UART_CheckIdleState+0x148>)
 800422c:	9200      	str	r2, [sp, #0]
 800422e:	2200      	movs	r2, #0
 8004230:	f000 f88c 	bl	800434c <UART_WaitOnFlagUntilTimeout>
 8004234:	1e03      	subs	r3, r0, #0
 8004236:	d021      	beq.n	800427c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004238:	f3ef 8310 	mrs	r3, PRIMASK
 800423c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004240:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004242:	2301      	movs	r3, #1
 8004244:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004248:	f383 8810 	msr	PRIMASK, r3
}
 800424c:	46c0      	nop			@ (mov r8, r8)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2180      	movs	r1, #128	@ 0x80
 800425a:	438a      	bics	r2, r1
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004264:	f383 8810 	msr	PRIMASK, r3
}
 8004268:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2278      	movs	r2, #120	@ 0x78
 8004274:	2100      	movs	r1, #0
 8004276:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e05f      	b.n	800433c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2204      	movs	r2, #4
 8004284:	4013      	ands	r3, r2
 8004286:	2b04      	cmp	r3, #4
 8004288:	d146      	bne.n	8004318 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800428a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800428c:	2280      	movs	r2, #128	@ 0x80
 800428e:	03d1      	lsls	r1, r2, #15
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4a2c      	ldr	r2, [pc, #176]	@ (8004344 <UART_CheckIdleState+0x148>)
 8004294:	9200      	str	r2, [sp, #0]
 8004296:	2200      	movs	r2, #0
 8004298:	f000 f858 	bl	800434c <UART_WaitOnFlagUntilTimeout>
 800429c:	1e03      	subs	r3, r0, #0
 800429e:	d03b      	beq.n	8004318 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a0:	f3ef 8310 	mrs	r3, PRIMASK
 80042a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80042a6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80042aa:	2301      	movs	r3, #1
 80042ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f383 8810 	msr	PRIMASK, r3
}
 80042b4:	46c0      	nop			@ (mov r8, r8)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4921      	ldr	r1, [pc, #132]	@ (8004348 <UART_CheckIdleState+0x14c>)
 80042c2:	400a      	ands	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f383 8810 	msr	PRIMASK, r3
}
 80042d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d2:	f3ef 8310 	mrs	r3, PRIMASK
 80042d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80042d8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042da:	633b      	str	r3, [r7, #48]	@ 0x30
 80042dc:	2301      	movs	r3, #1
 80042de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f383 8810 	msr	PRIMASK, r3
}
 80042e6:	46c0      	nop			@ (mov r8, r8)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2101      	movs	r1, #1
 80042f4:	438a      	bics	r2, r1
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	f383 8810 	msr	PRIMASK, r3
}
 8004302:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2280      	movs	r2, #128	@ 0x80
 8004308:	2120      	movs	r1, #32
 800430a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2278      	movs	r2, #120	@ 0x78
 8004310:	2100      	movs	r1, #0
 8004312:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e011      	b.n	800433c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2280      	movs	r2, #128	@ 0x80
 8004322:	2120      	movs	r1, #32
 8004324:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2278      	movs	r2, #120	@ 0x78
 8004336:	2100      	movs	r1, #0
 8004338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	0018      	movs	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	b010      	add	sp, #64	@ 0x40
 8004342:	bd80      	pop	{r7, pc}
 8004344:	01ffffff 	.word	0x01ffffff
 8004348:	fffffedf 	.word	0xfffffedf

0800434c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	1dfb      	adds	r3, r7, #7
 800435a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435c:	e04b      	b.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	3301      	adds	r3, #1
 8004362:	d048      	beq.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004364:	f7fd fbc6 	bl	8001af4 <HAL_GetTick>
 8004368:	0002      	movs	r2, r0
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e04b      	b.n	8004416 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2204      	movs	r2, #4
 8004386:	4013      	ands	r3, r2
 8004388:	d035      	beq.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	2208      	movs	r2, #8
 8004392:	4013      	ands	r3, r2
 8004394:	2b08      	cmp	r3, #8
 8004396:	d111      	bne.n	80043bc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2208      	movs	r2, #8
 800439e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	0018      	movs	r0, r3
 80043a4:	f000 f83c 	bl	8004420 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2284      	movs	r2, #132	@ 0x84
 80043ac:	2108      	movs	r1, #8
 80043ae:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2278      	movs	r2, #120	@ 0x78
 80043b4:	2100      	movs	r1, #0
 80043b6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e02c      	b.n	8004416 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69da      	ldr	r2, [r3, #28]
 80043c2:	2380      	movs	r3, #128	@ 0x80
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	401a      	ands	r2, r3
 80043c8:	2380      	movs	r3, #128	@ 0x80
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d112      	bne.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2280      	movs	r2, #128	@ 0x80
 80043d6:	0112      	lsls	r2, r2, #4
 80043d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	0018      	movs	r0, r3
 80043de:	f000 f81f 	bl	8004420 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2284      	movs	r2, #132	@ 0x84
 80043e6:	2120      	movs	r1, #32
 80043e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2278      	movs	r2, #120	@ 0x78
 80043ee:	2100      	movs	r1, #0
 80043f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e00f      	b.n	8004416 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	4013      	ands	r3, r2
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	425a      	negs	r2, r3
 8004406:	4153      	adcs	r3, r2
 8004408:	b2db      	uxtb	r3, r3
 800440a:	001a      	movs	r2, r3
 800440c:	1dfb      	adds	r3, r7, #7
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d0a4      	beq.n	800435e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	0018      	movs	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	b004      	add	sp, #16
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08e      	sub	sp, #56	@ 0x38
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004428:	f3ef 8310 	mrs	r3, PRIMASK
 800442c:	617b      	str	r3, [r7, #20]
  return(result);
 800442e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004430:	637b      	str	r3, [r7, #52]	@ 0x34
 8004432:	2301      	movs	r3, #1
 8004434:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	f383 8810 	msr	PRIMASK, r3
}
 800443c:	46c0      	nop			@ (mov r8, r8)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4926      	ldr	r1, [pc, #152]	@ (80044e4 <UART_EndRxTransfer+0xc4>)
 800444a:	400a      	ands	r2, r1
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004450:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	f383 8810 	msr	PRIMASK, r3
}
 8004458:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800445a:	f3ef 8310 	mrs	r3, PRIMASK
 800445e:	623b      	str	r3, [r7, #32]
  return(result);
 8004460:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004462:	633b      	str	r3, [r7, #48]	@ 0x30
 8004464:	2301      	movs	r3, #1
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	f383 8810 	msr	PRIMASK, r3
}
 800446e:	46c0      	nop			@ (mov r8, r8)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2101      	movs	r1, #1
 800447c:	438a      	bics	r2, r1
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004482:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004486:	f383 8810 	msr	PRIMASK, r3
}
 800448a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004490:	2b01      	cmp	r3, #1
 8004492:	d118      	bne.n	80044c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004494:	f3ef 8310 	mrs	r3, PRIMASK
 8004498:	60bb      	str	r3, [r7, #8]
  return(result);
 800449a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800449c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800449e:	2301      	movs	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f383 8810 	msr	PRIMASK, r3
}
 80044a8:	46c0      	nop			@ (mov r8, r8)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2110      	movs	r1, #16
 80044b6:	438a      	bics	r2, r1
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f383 8810 	msr	PRIMASK, r3
}
 80044c4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2280      	movs	r2, #128	@ 0x80
 80044ca:	2120      	movs	r1, #32
 80044cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044da:	46c0      	nop			@ (mov r8, r8)
 80044dc:	46bd      	mov	sp, r7
 80044de:	b00e      	add	sp, #56	@ 0x38
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	46c0      	nop			@ (mov r8, r8)
 80044e4:	fffffedf 	.word	0xfffffedf

080044e8 <std>:
 80044e8:	2300      	movs	r3, #0
 80044ea:	b510      	push	{r4, lr}
 80044ec:	0004      	movs	r4, r0
 80044ee:	6003      	str	r3, [r0, #0]
 80044f0:	6043      	str	r3, [r0, #4]
 80044f2:	6083      	str	r3, [r0, #8]
 80044f4:	8181      	strh	r1, [r0, #12]
 80044f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80044f8:	81c2      	strh	r2, [r0, #14]
 80044fa:	6103      	str	r3, [r0, #16]
 80044fc:	6143      	str	r3, [r0, #20]
 80044fe:	6183      	str	r3, [r0, #24]
 8004500:	0019      	movs	r1, r3
 8004502:	2208      	movs	r2, #8
 8004504:	305c      	adds	r0, #92	@ 0x5c
 8004506:	f000 fa0f 	bl	8004928 <memset>
 800450a:	4b0b      	ldr	r3, [pc, #44]	@ (8004538 <std+0x50>)
 800450c:	6224      	str	r4, [r4, #32]
 800450e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004510:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <std+0x54>)
 8004512:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004514:	4b0a      	ldr	r3, [pc, #40]	@ (8004540 <std+0x58>)
 8004516:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004518:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <std+0x5c>)
 800451a:	6323      	str	r3, [r4, #48]	@ 0x30
 800451c:	4b0a      	ldr	r3, [pc, #40]	@ (8004548 <std+0x60>)
 800451e:	429c      	cmp	r4, r3
 8004520:	d005      	beq.n	800452e <std+0x46>
 8004522:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <std+0x64>)
 8004524:	429c      	cmp	r4, r3
 8004526:	d002      	beq.n	800452e <std+0x46>
 8004528:	4b09      	ldr	r3, [pc, #36]	@ (8004550 <std+0x68>)
 800452a:	429c      	cmp	r4, r3
 800452c:	d103      	bne.n	8004536 <std+0x4e>
 800452e:	0020      	movs	r0, r4
 8004530:	3058      	adds	r0, #88	@ 0x58
 8004532:	f000 fa79 	bl	8004a28 <__retarget_lock_init_recursive>
 8004536:	bd10      	pop	{r4, pc}
 8004538:	08004751 	.word	0x08004751
 800453c:	08004779 	.word	0x08004779
 8004540:	080047b1 	.word	0x080047b1
 8004544:	080047dd 	.word	0x080047dd
 8004548:	200002a8 	.word	0x200002a8
 800454c:	20000310 	.word	0x20000310
 8004550:	20000378 	.word	0x20000378

08004554 <stdio_exit_handler>:
 8004554:	b510      	push	{r4, lr}
 8004556:	4a03      	ldr	r2, [pc, #12]	@ (8004564 <stdio_exit_handler+0x10>)
 8004558:	4903      	ldr	r1, [pc, #12]	@ (8004568 <stdio_exit_handler+0x14>)
 800455a:	4804      	ldr	r0, [pc, #16]	@ (800456c <stdio_exit_handler+0x18>)
 800455c:	f000 f86c 	bl	8004638 <_fwalk_sglue>
 8004560:	bd10      	pop	{r4, pc}
 8004562:	46c0      	nop			@ (mov r8, r8)
 8004564:	2000000c 	.word	0x2000000c
 8004568:	080052b9 	.word	0x080052b9
 800456c:	2000001c 	.word	0x2000001c

08004570 <cleanup_stdio>:
 8004570:	6841      	ldr	r1, [r0, #4]
 8004572:	4b0b      	ldr	r3, [pc, #44]	@ (80045a0 <cleanup_stdio+0x30>)
 8004574:	b510      	push	{r4, lr}
 8004576:	0004      	movs	r4, r0
 8004578:	4299      	cmp	r1, r3
 800457a:	d001      	beq.n	8004580 <cleanup_stdio+0x10>
 800457c:	f000 fe9c 	bl	80052b8 <_fflush_r>
 8004580:	68a1      	ldr	r1, [r4, #8]
 8004582:	4b08      	ldr	r3, [pc, #32]	@ (80045a4 <cleanup_stdio+0x34>)
 8004584:	4299      	cmp	r1, r3
 8004586:	d002      	beq.n	800458e <cleanup_stdio+0x1e>
 8004588:	0020      	movs	r0, r4
 800458a:	f000 fe95 	bl	80052b8 <_fflush_r>
 800458e:	68e1      	ldr	r1, [r4, #12]
 8004590:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <cleanup_stdio+0x38>)
 8004592:	4299      	cmp	r1, r3
 8004594:	d002      	beq.n	800459c <cleanup_stdio+0x2c>
 8004596:	0020      	movs	r0, r4
 8004598:	f000 fe8e 	bl	80052b8 <_fflush_r>
 800459c:	bd10      	pop	{r4, pc}
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	200002a8 	.word	0x200002a8
 80045a4:	20000310 	.word	0x20000310
 80045a8:	20000378 	.word	0x20000378

080045ac <global_stdio_init.part.0>:
 80045ac:	b510      	push	{r4, lr}
 80045ae:	4b09      	ldr	r3, [pc, #36]	@ (80045d4 <global_stdio_init.part.0+0x28>)
 80045b0:	4a09      	ldr	r2, [pc, #36]	@ (80045d8 <global_stdio_init.part.0+0x2c>)
 80045b2:	2104      	movs	r1, #4
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	4809      	ldr	r0, [pc, #36]	@ (80045dc <global_stdio_init.part.0+0x30>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	f7ff ff95 	bl	80044e8 <std>
 80045be:	2201      	movs	r2, #1
 80045c0:	2109      	movs	r1, #9
 80045c2:	4807      	ldr	r0, [pc, #28]	@ (80045e0 <global_stdio_init.part.0+0x34>)
 80045c4:	f7ff ff90 	bl	80044e8 <std>
 80045c8:	2202      	movs	r2, #2
 80045ca:	2112      	movs	r1, #18
 80045cc:	4805      	ldr	r0, [pc, #20]	@ (80045e4 <global_stdio_init.part.0+0x38>)
 80045ce:	f7ff ff8b 	bl	80044e8 <std>
 80045d2:	bd10      	pop	{r4, pc}
 80045d4:	200003e0 	.word	0x200003e0
 80045d8:	08004555 	.word	0x08004555
 80045dc:	200002a8 	.word	0x200002a8
 80045e0:	20000310 	.word	0x20000310
 80045e4:	20000378 	.word	0x20000378

080045e8 <__sfp_lock_acquire>:
 80045e8:	b510      	push	{r4, lr}
 80045ea:	4802      	ldr	r0, [pc, #8]	@ (80045f4 <__sfp_lock_acquire+0xc>)
 80045ec:	f000 fa1d 	bl	8004a2a <__retarget_lock_acquire_recursive>
 80045f0:	bd10      	pop	{r4, pc}
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	200003e9 	.word	0x200003e9

080045f8 <__sfp_lock_release>:
 80045f8:	b510      	push	{r4, lr}
 80045fa:	4802      	ldr	r0, [pc, #8]	@ (8004604 <__sfp_lock_release+0xc>)
 80045fc:	f000 fa16 	bl	8004a2c <__retarget_lock_release_recursive>
 8004600:	bd10      	pop	{r4, pc}
 8004602:	46c0      	nop			@ (mov r8, r8)
 8004604:	200003e9 	.word	0x200003e9

08004608 <__sinit>:
 8004608:	b510      	push	{r4, lr}
 800460a:	0004      	movs	r4, r0
 800460c:	f7ff ffec 	bl	80045e8 <__sfp_lock_acquire>
 8004610:	6a23      	ldr	r3, [r4, #32]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <__sinit+0x14>
 8004616:	f7ff ffef 	bl	80045f8 <__sfp_lock_release>
 800461a:	bd10      	pop	{r4, pc}
 800461c:	4b04      	ldr	r3, [pc, #16]	@ (8004630 <__sinit+0x28>)
 800461e:	6223      	str	r3, [r4, #32]
 8004620:	4b04      	ldr	r3, [pc, #16]	@ (8004634 <__sinit+0x2c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f6      	bne.n	8004616 <__sinit+0xe>
 8004628:	f7ff ffc0 	bl	80045ac <global_stdio_init.part.0>
 800462c:	e7f3      	b.n	8004616 <__sinit+0xe>
 800462e:	46c0      	nop			@ (mov r8, r8)
 8004630:	08004571 	.word	0x08004571
 8004634:	200003e0 	.word	0x200003e0

08004638 <_fwalk_sglue>:
 8004638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800463a:	0014      	movs	r4, r2
 800463c:	2600      	movs	r6, #0
 800463e:	9000      	str	r0, [sp, #0]
 8004640:	9101      	str	r1, [sp, #4]
 8004642:	68a5      	ldr	r5, [r4, #8]
 8004644:	6867      	ldr	r7, [r4, #4]
 8004646:	3f01      	subs	r7, #1
 8004648:	d504      	bpl.n	8004654 <_fwalk_sglue+0x1c>
 800464a:	6824      	ldr	r4, [r4, #0]
 800464c:	2c00      	cmp	r4, #0
 800464e:	d1f8      	bne.n	8004642 <_fwalk_sglue+0xa>
 8004650:	0030      	movs	r0, r6
 8004652:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004654:	89ab      	ldrh	r3, [r5, #12]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d908      	bls.n	800466c <_fwalk_sglue+0x34>
 800465a:	220e      	movs	r2, #14
 800465c:	5eab      	ldrsh	r3, [r5, r2]
 800465e:	3301      	adds	r3, #1
 8004660:	d004      	beq.n	800466c <_fwalk_sglue+0x34>
 8004662:	0029      	movs	r1, r5
 8004664:	9800      	ldr	r0, [sp, #0]
 8004666:	9b01      	ldr	r3, [sp, #4]
 8004668:	4798      	blx	r3
 800466a:	4306      	orrs	r6, r0
 800466c:	3568      	adds	r5, #104	@ 0x68
 800466e:	e7ea      	b.n	8004646 <_fwalk_sglue+0xe>

08004670 <iprintf>:
 8004670:	b40f      	push	{r0, r1, r2, r3}
 8004672:	b507      	push	{r0, r1, r2, lr}
 8004674:	4905      	ldr	r1, [pc, #20]	@ (800468c <iprintf+0x1c>)
 8004676:	ab04      	add	r3, sp, #16
 8004678:	6808      	ldr	r0, [r1, #0]
 800467a:	cb04      	ldmia	r3!, {r2}
 800467c:	6881      	ldr	r1, [r0, #8]
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	f000 fafa 	bl	8004c78 <_vfiprintf_r>
 8004684:	b003      	add	sp, #12
 8004686:	bc08      	pop	{r3}
 8004688:	b004      	add	sp, #16
 800468a:	4718      	bx	r3
 800468c:	20000018 	.word	0x20000018

08004690 <_puts_r>:
 8004690:	6a03      	ldr	r3, [r0, #32]
 8004692:	b570      	push	{r4, r5, r6, lr}
 8004694:	0005      	movs	r5, r0
 8004696:	000e      	movs	r6, r1
 8004698:	6884      	ldr	r4, [r0, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <_puts_r+0x12>
 800469e:	f7ff ffb3 	bl	8004608 <__sinit>
 80046a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046a4:	07db      	lsls	r3, r3, #31
 80046a6:	d405      	bmi.n	80046b4 <_puts_r+0x24>
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	059b      	lsls	r3, r3, #22
 80046ac:	d402      	bmi.n	80046b4 <_puts_r+0x24>
 80046ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046b0:	f000 f9bb 	bl	8004a2a <__retarget_lock_acquire_recursive>
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	071b      	lsls	r3, r3, #28
 80046b8:	d502      	bpl.n	80046c0 <_puts_r+0x30>
 80046ba:	6923      	ldr	r3, [r4, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d11f      	bne.n	8004700 <_puts_r+0x70>
 80046c0:	0021      	movs	r1, r4
 80046c2:	0028      	movs	r0, r5
 80046c4:	f000 f8d2 	bl	800486c <__swsetup_r>
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d019      	beq.n	8004700 <_puts_r+0x70>
 80046cc:	2501      	movs	r5, #1
 80046ce:	426d      	negs	r5, r5
 80046d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046d2:	07db      	lsls	r3, r3, #31
 80046d4:	d405      	bmi.n	80046e2 <_puts_r+0x52>
 80046d6:	89a3      	ldrh	r3, [r4, #12]
 80046d8:	059b      	lsls	r3, r3, #22
 80046da:	d402      	bmi.n	80046e2 <_puts_r+0x52>
 80046dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046de:	f000 f9a5 	bl	8004a2c <__retarget_lock_release_recursive>
 80046e2:	0028      	movs	r0, r5
 80046e4:	bd70      	pop	{r4, r5, r6, pc}
 80046e6:	3601      	adds	r6, #1
 80046e8:	60a3      	str	r3, [r4, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	da04      	bge.n	80046f8 <_puts_r+0x68>
 80046ee:	69a2      	ldr	r2, [r4, #24]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	dc16      	bgt.n	8004722 <_puts_r+0x92>
 80046f4:	290a      	cmp	r1, #10
 80046f6:	d014      	beq.n	8004722 <_puts_r+0x92>
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	6022      	str	r2, [r4, #0]
 80046fe:	7019      	strb	r1, [r3, #0]
 8004700:	68a3      	ldr	r3, [r4, #8]
 8004702:	7831      	ldrb	r1, [r6, #0]
 8004704:	3b01      	subs	r3, #1
 8004706:	2900      	cmp	r1, #0
 8004708:	d1ed      	bne.n	80046e6 <_puts_r+0x56>
 800470a:	60a3      	str	r3, [r4, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	da0f      	bge.n	8004730 <_puts_r+0xa0>
 8004710:	0022      	movs	r2, r4
 8004712:	0028      	movs	r0, r5
 8004714:	310a      	adds	r1, #10
 8004716:	f000 f867 	bl	80047e8 <__swbuf_r>
 800471a:	3001      	adds	r0, #1
 800471c:	d0d6      	beq.n	80046cc <_puts_r+0x3c>
 800471e:	250a      	movs	r5, #10
 8004720:	e7d6      	b.n	80046d0 <_puts_r+0x40>
 8004722:	0022      	movs	r2, r4
 8004724:	0028      	movs	r0, r5
 8004726:	f000 f85f 	bl	80047e8 <__swbuf_r>
 800472a:	3001      	adds	r0, #1
 800472c:	d1e8      	bne.n	8004700 <_puts_r+0x70>
 800472e:	e7cd      	b.n	80046cc <_puts_r+0x3c>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	6022      	str	r2, [r4, #0]
 8004736:	220a      	movs	r2, #10
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	e7f0      	b.n	800471e <_puts_r+0x8e>

0800473c <puts>:
 800473c:	b510      	push	{r4, lr}
 800473e:	4b03      	ldr	r3, [pc, #12]	@ (800474c <puts+0x10>)
 8004740:	0001      	movs	r1, r0
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	f7ff ffa4 	bl	8004690 <_puts_r>
 8004748:	bd10      	pop	{r4, pc}
 800474a:	46c0      	nop			@ (mov r8, r8)
 800474c:	20000018 	.word	0x20000018

08004750 <__sread>:
 8004750:	b570      	push	{r4, r5, r6, lr}
 8004752:	000c      	movs	r4, r1
 8004754:	250e      	movs	r5, #14
 8004756:	5f49      	ldrsh	r1, [r1, r5]
 8004758:	f000 f914 	bl	8004984 <_read_r>
 800475c:	2800      	cmp	r0, #0
 800475e:	db03      	blt.n	8004768 <__sread+0x18>
 8004760:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004762:	181b      	adds	r3, r3, r0
 8004764:	6563      	str	r3, [r4, #84]	@ 0x54
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	89a3      	ldrh	r3, [r4, #12]
 800476a:	4a02      	ldr	r2, [pc, #8]	@ (8004774 <__sread+0x24>)
 800476c:	4013      	ands	r3, r2
 800476e:	81a3      	strh	r3, [r4, #12]
 8004770:	e7f9      	b.n	8004766 <__sread+0x16>
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	ffffefff 	.word	0xffffefff

08004778 <__swrite>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	001f      	movs	r7, r3
 800477c:	898b      	ldrh	r3, [r1, #12]
 800477e:	0005      	movs	r5, r0
 8004780:	000c      	movs	r4, r1
 8004782:	0016      	movs	r6, r2
 8004784:	05db      	lsls	r3, r3, #23
 8004786:	d505      	bpl.n	8004794 <__swrite+0x1c>
 8004788:	230e      	movs	r3, #14
 800478a:	5ec9      	ldrsh	r1, [r1, r3]
 800478c:	2200      	movs	r2, #0
 800478e:	2302      	movs	r3, #2
 8004790:	f000 f8e4 	bl	800495c <_lseek_r>
 8004794:	89a3      	ldrh	r3, [r4, #12]
 8004796:	4a05      	ldr	r2, [pc, #20]	@ (80047ac <__swrite+0x34>)
 8004798:	0028      	movs	r0, r5
 800479a:	4013      	ands	r3, r2
 800479c:	81a3      	strh	r3, [r4, #12]
 800479e:	0032      	movs	r2, r6
 80047a0:	230e      	movs	r3, #14
 80047a2:	5ee1      	ldrsh	r1, [r4, r3]
 80047a4:	003b      	movs	r3, r7
 80047a6:	f000 f901 	bl	80049ac <_write_r>
 80047aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ac:	ffffefff 	.word	0xffffefff

080047b0 <__sseek>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	000c      	movs	r4, r1
 80047b4:	250e      	movs	r5, #14
 80047b6:	5f49      	ldrsh	r1, [r1, r5]
 80047b8:	f000 f8d0 	bl	800495c <_lseek_r>
 80047bc:	89a3      	ldrh	r3, [r4, #12]
 80047be:	1c42      	adds	r2, r0, #1
 80047c0:	d103      	bne.n	80047ca <__sseek+0x1a>
 80047c2:	4a05      	ldr	r2, [pc, #20]	@ (80047d8 <__sseek+0x28>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	81a3      	strh	r3, [r4, #12]
 80047c8:	bd70      	pop	{r4, r5, r6, pc}
 80047ca:	2280      	movs	r2, #128	@ 0x80
 80047cc:	0152      	lsls	r2, r2, #5
 80047ce:	4313      	orrs	r3, r2
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80047d4:	e7f8      	b.n	80047c8 <__sseek+0x18>
 80047d6:	46c0      	nop			@ (mov r8, r8)
 80047d8:	ffffefff 	.word	0xffffefff

080047dc <__sclose>:
 80047dc:	b510      	push	{r4, lr}
 80047de:	230e      	movs	r3, #14
 80047e0:	5ec9      	ldrsh	r1, [r1, r3]
 80047e2:	f000 f8a9 	bl	8004938 <_close_r>
 80047e6:	bd10      	pop	{r4, pc}

080047e8 <__swbuf_r>:
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	0006      	movs	r6, r0
 80047ec:	000d      	movs	r5, r1
 80047ee:	0014      	movs	r4, r2
 80047f0:	2800      	cmp	r0, #0
 80047f2:	d004      	beq.n	80047fe <__swbuf_r+0x16>
 80047f4:	6a03      	ldr	r3, [r0, #32]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <__swbuf_r+0x16>
 80047fa:	f7ff ff05 	bl	8004608 <__sinit>
 80047fe:	69a3      	ldr	r3, [r4, #24]
 8004800:	60a3      	str	r3, [r4, #8]
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	071b      	lsls	r3, r3, #28
 8004806:	d502      	bpl.n	800480e <__swbuf_r+0x26>
 8004808:	6923      	ldr	r3, [r4, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d109      	bne.n	8004822 <__swbuf_r+0x3a>
 800480e:	0021      	movs	r1, r4
 8004810:	0030      	movs	r0, r6
 8004812:	f000 f82b 	bl	800486c <__swsetup_r>
 8004816:	2800      	cmp	r0, #0
 8004818:	d003      	beq.n	8004822 <__swbuf_r+0x3a>
 800481a:	2501      	movs	r5, #1
 800481c:	426d      	negs	r5, r5
 800481e:	0028      	movs	r0, r5
 8004820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004822:	6923      	ldr	r3, [r4, #16]
 8004824:	6820      	ldr	r0, [r4, #0]
 8004826:	b2ef      	uxtb	r7, r5
 8004828:	1ac0      	subs	r0, r0, r3
 800482a:	6963      	ldr	r3, [r4, #20]
 800482c:	b2ed      	uxtb	r5, r5
 800482e:	4283      	cmp	r3, r0
 8004830:	dc05      	bgt.n	800483e <__swbuf_r+0x56>
 8004832:	0021      	movs	r1, r4
 8004834:	0030      	movs	r0, r6
 8004836:	f000 fd3f 	bl	80052b8 <_fflush_r>
 800483a:	2800      	cmp	r0, #0
 800483c:	d1ed      	bne.n	800481a <__swbuf_r+0x32>
 800483e:	68a3      	ldr	r3, [r4, #8]
 8004840:	3001      	adds	r0, #1
 8004842:	3b01      	subs	r3, #1
 8004844:	60a3      	str	r3, [r4, #8]
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	6022      	str	r2, [r4, #0]
 800484c:	701f      	strb	r7, [r3, #0]
 800484e:	6963      	ldr	r3, [r4, #20]
 8004850:	4283      	cmp	r3, r0
 8004852:	d004      	beq.n	800485e <__swbuf_r+0x76>
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	07db      	lsls	r3, r3, #31
 8004858:	d5e1      	bpl.n	800481e <__swbuf_r+0x36>
 800485a:	2d0a      	cmp	r5, #10
 800485c:	d1df      	bne.n	800481e <__swbuf_r+0x36>
 800485e:	0021      	movs	r1, r4
 8004860:	0030      	movs	r0, r6
 8004862:	f000 fd29 	bl	80052b8 <_fflush_r>
 8004866:	2800      	cmp	r0, #0
 8004868:	d0d9      	beq.n	800481e <__swbuf_r+0x36>
 800486a:	e7d6      	b.n	800481a <__swbuf_r+0x32>

0800486c <__swsetup_r>:
 800486c:	4b2d      	ldr	r3, [pc, #180]	@ (8004924 <__swsetup_r+0xb8>)
 800486e:	b570      	push	{r4, r5, r6, lr}
 8004870:	0005      	movs	r5, r0
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	000c      	movs	r4, r1
 8004876:	2800      	cmp	r0, #0
 8004878:	d004      	beq.n	8004884 <__swsetup_r+0x18>
 800487a:	6a03      	ldr	r3, [r0, #32]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <__swsetup_r+0x18>
 8004880:	f7ff fec2 	bl	8004608 <__sinit>
 8004884:	230c      	movs	r3, #12
 8004886:	5ee2      	ldrsh	r2, [r4, r3]
 8004888:	0713      	lsls	r3, r2, #28
 800488a:	d423      	bmi.n	80048d4 <__swsetup_r+0x68>
 800488c:	06d3      	lsls	r3, r2, #27
 800488e:	d407      	bmi.n	80048a0 <__swsetup_r+0x34>
 8004890:	2309      	movs	r3, #9
 8004892:	602b      	str	r3, [r5, #0]
 8004894:	2340      	movs	r3, #64	@ 0x40
 8004896:	2001      	movs	r0, #1
 8004898:	4313      	orrs	r3, r2
 800489a:	81a3      	strh	r3, [r4, #12]
 800489c:	4240      	negs	r0, r0
 800489e:	e03a      	b.n	8004916 <__swsetup_r+0xaa>
 80048a0:	0752      	lsls	r2, r2, #29
 80048a2:	d513      	bpl.n	80048cc <__swsetup_r+0x60>
 80048a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048a6:	2900      	cmp	r1, #0
 80048a8:	d008      	beq.n	80048bc <__swsetup_r+0x50>
 80048aa:	0023      	movs	r3, r4
 80048ac:	3344      	adds	r3, #68	@ 0x44
 80048ae:	4299      	cmp	r1, r3
 80048b0:	d002      	beq.n	80048b8 <__swsetup_r+0x4c>
 80048b2:	0028      	movs	r0, r5
 80048b4:	f000 f8bc 	bl	8004a30 <_free_r>
 80048b8:	2300      	movs	r3, #0
 80048ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80048bc:	2224      	movs	r2, #36	@ 0x24
 80048be:	89a3      	ldrh	r3, [r4, #12]
 80048c0:	4393      	bics	r3, r2
 80048c2:	81a3      	strh	r3, [r4, #12]
 80048c4:	2300      	movs	r3, #0
 80048c6:	6063      	str	r3, [r4, #4]
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	6023      	str	r3, [r4, #0]
 80048cc:	2308      	movs	r3, #8
 80048ce:	89a2      	ldrh	r2, [r4, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	81a3      	strh	r3, [r4, #12]
 80048d4:	6923      	ldr	r3, [r4, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10b      	bne.n	80048f2 <__swsetup_r+0x86>
 80048da:	21a0      	movs	r1, #160	@ 0xa0
 80048dc:	2280      	movs	r2, #128	@ 0x80
 80048de:	89a3      	ldrh	r3, [r4, #12]
 80048e0:	0089      	lsls	r1, r1, #2
 80048e2:	0092      	lsls	r2, r2, #2
 80048e4:	400b      	ands	r3, r1
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d003      	beq.n	80048f2 <__swsetup_r+0x86>
 80048ea:	0021      	movs	r1, r4
 80048ec:	0028      	movs	r0, r5
 80048ee:	f000 fd39 	bl	8005364 <__smakebuf_r>
 80048f2:	230c      	movs	r3, #12
 80048f4:	5ee2      	ldrsh	r2, [r4, r3]
 80048f6:	2101      	movs	r1, #1
 80048f8:	0013      	movs	r3, r2
 80048fa:	400b      	ands	r3, r1
 80048fc:	420a      	tst	r2, r1
 80048fe:	d00b      	beq.n	8004918 <__swsetup_r+0xac>
 8004900:	2300      	movs	r3, #0
 8004902:	60a3      	str	r3, [r4, #8]
 8004904:	6963      	ldr	r3, [r4, #20]
 8004906:	425b      	negs	r3, r3
 8004908:	61a3      	str	r3, [r4, #24]
 800490a:	2000      	movs	r0, #0
 800490c:	6923      	ldr	r3, [r4, #16]
 800490e:	4283      	cmp	r3, r0
 8004910:	d101      	bne.n	8004916 <__swsetup_r+0xaa>
 8004912:	0613      	lsls	r3, r2, #24
 8004914:	d4be      	bmi.n	8004894 <__swsetup_r+0x28>
 8004916:	bd70      	pop	{r4, r5, r6, pc}
 8004918:	0791      	lsls	r1, r2, #30
 800491a:	d400      	bmi.n	800491e <__swsetup_r+0xb2>
 800491c:	6963      	ldr	r3, [r4, #20]
 800491e:	60a3      	str	r3, [r4, #8]
 8004920:	e7f3      	b.n	800490a <__swsetup_r+0x9e>
 8004922:	46c0      	nop			@ (mov r8, r8)
 8004924:	20000018 	.word	0x20000018

08004928 <memset>:
 8004928:	0003      	movs	r3, r0
 800492a:	1882      	adds	r2, r0, r2
 800492c:	4293      	cmp	r3, r2
 800492e:	d100      	bne.n	8004932 <memset+0xa>
 8004930:	4770      	bx	lr
 8004932:	7019      	strb	r1, [r3, #0]
 8004934:	3301      	adds	r3, #1
 8004936:	e7f9      	b.n	800492c <memset+0x4>

08004938 <_close_r>:
 8004938:	2300      	movs	r3, #0
 800493a:	b570      	push	{r4, r5, r6, lr}
 800493c:	4d06      	ldr	r5, [pc, #24]	@ (8004958 <_close_r+0x20>)
 800493e:	0004      	movs	r4, r0
 8004940:	0008      	movs	r0, r1
 8004942:	602b      	str	r3, [r5, #0]
 8004944:	f7fc ffde 	bl	8001904 <_close>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	d103      	bne.n	8004954 <_close_r+0x1c>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d000      	beq.n	8004954 <_close_r+0x1c>
 8004952:	6023      	str	r3, [r4, #0]
 8004954:	bd70      	pop	{r4, r5, r6, pc}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	200003e4 	.word	0x200003e4

0800495c <_lseek_r>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	0004      	movs	r4, r0
 8004960:	0008      	movs	r0, r1
 8004962:	0011      	movs	r1, r2
 8004964:	001a      	movs	r2, r3
 8004966:	2300      	movs	r3, #0
 8004968:	4d05      	ldr	r5, [pc, #20]	@ (8004980 <_lseek_r+0x24>)
 800496a:	602b      	str	r3, [r5, #0]
 800496c:	f7fc ffeb 	bl	8001946 <_lseek>
 8004970:	1c43      	adds	r3, r0, #1
 8004972:	d103      	bne.n	800497c <_lseek_r+0x20>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d000      	beq.n	800497c <_lseek_r+0x20>
 800497a:	6023      	str	r3, [r4, #0]
 800497c:	bd70      	pop	{r4, r5, r6, pc}
 800497e:	46c0      	nop			@ (mov r8, r8)
 8004980:	200003e4 	.word	0x200003e4

08004984 <_read_r>:
 8004984:	b570      	push	{r4, r5, r6, lr}
 8004986:	0004      	movs	r4, r0
 8004988:	0008      	movs	r0, r1
 800498a:	0011      	movs	r1, r2
 800498c:	001a      	movs	r2, r3
 800498e:	2300      	movs	r3, #0
 8004990:	4d05      	ldr	r5, [pc, #20]	@ (80049a8 <_read_r+0x24>)
 8004992:	602b      	str	r3, [r5, #0]
 8004994:	f7fc ff7d 	bl	8001892 <_read>
 8004998:	1c43      	adds	r3, r0, #1
 800499a:	d103      	bne.n	80049a4 <_read_r+0x20>
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d000      	beq.n	80049a4 <_read_r+0x20>
 80049a2:	6023      	str	r3, [r4, #0]
 80049a4:	bd70      	pop	{r4, r5, r6, pc}
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	200003e4 	.word	0x200003e4

080049ac <_write_r>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	0004      	movs	r4, r0
 80049b0:	0008      	movs	r0, r1
 80049b2:	0011      	movs	r1, r2
 80049b4:	001a      	movs	r2, r3
 80049b6:	2300      	movs	r3, #0
 80049b8:	4d05      	ldr	r5, [pc, #20]	@ (80049d0 <_write_r+0x24>)
 80049ba:	602b      	str	r3, [r5, #0]
 80049bc:	f7fc ff86 	bl	80018cc <_write>
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	d103      	bne.n	80049cc <_write_r+0x20>
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d000      	beq.n	80049cc <_write_r+0x20>
 80049ca:	6023      	str	r3, [r4, #0]
 80049cc:	bd70      	pop	{r4, r5, r6, pc}
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	200003e4 	.word	0x200003e4

080049d4 <__errno>:
 80049d4:	4b01      	ldr	r3, [pc, #4]	@ (80049dc <__errno+0x8>)
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	4770      	bx	lr
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	20000018 	.word	0x20000018

080049e0 <__libc_init_array>:
 80049e0:	b570      	push	{r4, r5, r6, lr}
 80049e2:	2600      	movs	r6, #0
 80049e4:	4c0c      	ldr	r4, [pc, #48]	@ (8004a18 <__libc_init_array+0x38>)
 80049e6:	4d0d      	ldr	r5, [pc, #52]	@ (8004a1c <__libc_init_array+0x3c>)
 80049e8:	1b64      	subs	r4, r4, r5
 80049ea:	10a4      	asrs	r4, r4, #2
 80049ec:	42a6      	cmp	r6, r4
 80049ee:	d109      	bne.n	8004a04 <__libc_init_array+0x24>
 80049f0:	2600      	movs	r6, #0
 80049f2:	f000 fd3b 	bl	800546c <_init>
 80049f6:	4c0a      	ldr	r4, [pc, #40]	@ (8004a20 <__libc_init_array+0x40>)
 80049f8:	4d0a      	ldr	r5, [pc, #40]	@ (8004a24 <__libc_init_array+0x44>)
 80049fa:	1b64      	subs	r4, r4, r5
 80049fc:	10a4      	asrs	r4, r4, #2
 80049fe:	42a6      	cmp	r6, r4
 8004a00:	d105      	bne.n	8004a0e <__libc_init_array+0x2e>
 8004a02:	bd70      	pop	{r4, r5, r6, pc}
 8004a04:	00b3      	lsls	r3, r6, #2
 8004a06:	58eb      	ldr	r3, [r5, r3]
 8004a08:	4798      	blx	r3
 8004a0a:	3601      	adds	r6, #1
 8004a0c:	e7ee      	b.n	80049ec <__libc_init_array+0xc>
 8004a0e:	00b3      	lsls	r3, r6, #2
 8004a10:	58eb      	ldr	r3, [r5, r3]
 8004a12:	4798      	blx	r3
 8004a14:	3601      	adds	r6, #1
 8004a16:	e7f2      	b.n	80049fe <__libc_init_array+0x1e>
 8004a18:	080055a8 	.word	0x080055a8
 8004a1c:	080055a8 	.word	0x080055a8
 8004a20:	080055ac 	.word	0x080055ac
 8004a24:	080055a8 	.word	0x080055a8

08004a28 <__retarget_lock_init_recursive>:
 8004a28:	4770      	bx	lr

08004a2a <__retarget_lock_acquire_recursive>:
 8004a2a:	4770      	bx	lr

08004a2c <__retarget_lock_release_recursive>:
 8004a2c:	4770      	bx	lr
	...

08004a30 <_free_r>:
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	0005      	movs	r5, r0
 8004a34:	1e0c      	subs	r4, r1, #0
 8004a36:	d010      	beq.n	8004a5a <_free_r+0x2a>
 8004a38:	3c04      	subs	r4, #4
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	da00      	bge.n	8004a42 <_free_r+0x12>
 8004a40:	18e4      	adds	r4, r4, r3
 8004a42:	0028      	movs	r0, r5
 8004a44:	f000 f8e0 	bl	8004c08 <__malloc_lock>
 8004a48:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac0 <_free_r+0x90>)
 8004a4a:	6813      	ldr	r3, [r2, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <_free_r+0x2c>
 8004a50:	6063      	str	r3, [r4, #4]
 8004a52:	6014      	str	r4, [r2, #0]
 8004a54:	0028      	movs	r0, r5
 8004a56:	f000 f8df 	bl	8004c18 <__malloc_unlock>
 8004a5a:	bd70      	pop	{r4, r5, r6, pc}
 8004a5c:	42a3      	cmp	r3, r4
 8004a5e:	d908      	bls.n	8004a72 <_free_r+0x42>
 8004a60:	6820      	ldr	r0, [r4, #0]
 8004a62:	1821      	adds	r1, r4, r0
 8004a64:	428b      	cmp	r3, r1
 8004a66:	d1f3      	bne.n	8004a50 <_free_r+0x20>
 8004a68:	6819      	ldr	r1, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	1809      	adds	r1, r1, r0
 8004a6e:	6021      	str	r1, [r4, #0]
 8004a70:	e7ee      	b.n	8004a50 <_free_r+0x20>
 8004a72:	001a      	movs	r2, r3
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <_free_r+0x4e>
 8004a7a:	42a3      	cmp	r3, r4
 8004a7c:	d9f9      	bls.n	8004a72 <_free_r+0x42>
 8004a7e:	6811      	ldr	r1, [r2, #0]
 8004a80:	1850      	adds	r0, r2, r1
 8004a82:	42a0      	cmp	r0, r4
 8004a84:	d10b      	bne.n	8004a9e <_free_r+0x6e>
 8004a86:	6820      	ldr	r0, [r4, #0]
 8004a88:	1809      	adds	r1, r1, r0
 8004a8a:	1850      	adds	r0, r2, r1
 8004a8c:	6011      	str	r1, [r2, #0]
 8004a8e:	4283      	cmp	r3, r0
 8004a90:	d1e0      	bne.n	8004a54 <_free_r+0x24>
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	1841      	adds	r1, r0, r1
 8004a98:	6011      	str	r1, [r2, #0]
 8004a9a:	6053      	str	r3, [r2, #4]
 8004a9c:	e7da      	b.n	8004a54 <_free_r+0x24>
 8004a9e:	42a0      	cmp	r0, r4
 8004aa0:	d902      	bls.n	8004aa8 <_free_r+0x78>
 8004aa2:	230c      	movs	r3, #12
 8004aa4:	602b      	str	r3, [r5, #0]
 8004aa6:	e7d5      	b.n	8004a54 <_free_r+0x24>
 8004aa8:	6820      	ldr	r0, [r4, #0]
 8004aaa:	1821      	adds	r1, r4, r0
 8004aac:	428b      	cmp	r3, r1
 8004aae:	d103      	bne.n	8004ab8 <_free_r+0x88>
 8004ab0:	6819      	ldr	r1, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	1809      	adds	r1, r1, r0
 8004ab6:	6021      	str	r1, [r4, #0]
 8004ab8:	6063      	str	r3, [r4, #4]
 8004aba:	6054      	str	r4, [r2, #4]
 8004abc:	e7ca      	b.n	8004a54 <_free_r+0x24>
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	200003f0 	.word	0x200003f0

08004ac4 <sbrk_aligned>:
 8004ac4:	b570      	push	{r4, r5, r6, lr}
 8004ac6:	4e0f      	ldr	r6, [pc, #60]	@ (8004b04 <sbrk_aligned+0x40>)
 8004ac8:	000d      	movs	r5, r1
 8004aca:	6831      	ldr	r1, [r6, #0]
 8004acc:	0004      	movs	r4, r0
 8004ace:	2900      	cmp	r1, #0
 8004ad0:	d102      	bne.n	8004ad8 <sbrk_aligned+0x14>
 8004ad2:	f000 fcad 	bl	8005430 <_sbrk_r>
 8004ad6:	6030      	str	r0, [r6, #0]
 8004ad8:	0029      	movs	r1, r5
 8004ada:	0020      	movs	r0, r4
 8004adc:	f000 fca8 	bl	8005430 <_sbrk_r>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d103      	bne.n	8004aec <sbrk_aligned+0x28>
 8004ae4:	2501      	movs	r5, #1
 8004ae6:	426d      	negs	r5, r5
 8004ae8:	0028      	movs	r0, r5
 8004aea:	bd70      	pop	{r4, r5, r6, pc}
 8004aec:	2303      	movs	r3, #3
 8004aee:	1cc5      	adds	r5, r0, #3
 8004af0:	439d      	bics	r5, r3
 8004af2:	42a8      	cmp	r0, r5
 8004af4:	d0f8      	beq.n	8004ae8 <sbrk_aligned+0x24>
 8004af6:	1a29      	subs	r1, r5, r0
 8004af8:	0020      	movs	r0, r4
 8004afa:	f000 fc99 	bl	8005430 <_sbrk_r>
 8004afe:	3001      	adds	r0, #1
 8004b00:	d1f2      	bne.n	8004ae8 <sbrk_aligned+0x24>
 8004b02:	e7ef      	b.n	8004ae4 <sbrk_aligned+0x20>
 8004b04:	200003ec 	.word	0x200003ec

08004b08 <_malloc_r>:
 8004b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	1ccb      	adds	r3, r1, #3
 8004b0e:	4393      	bics	r3, r2
 8004b10:	3308      	adds	r3, #8
 8004b12:	0005      	movs	r5, r0
 8004b14:	001f      	movs	r7, r3
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	d234      	bcs.n	8004b84 <_malloc_r+0x7c>
 8004b1a:	270c      	movs	r7, #12
 8004b1c:	42b9      	cmp	r1, r7
 8004b1e:	d833      	bhi.n	8004b88 <_malloc_r+0x80>
 8004b20:	0028      	movs	r0, r5
 8004b22:	f000 f871 	bl	8004c08 <__malloc_lock>
 8004b26:	4e37      	ldr	r6, [pc, #220]	@ (8004c04 <_malloc_r+0xfc>)
 8004b28:	6833      	ldr	r3, [r6, #0]
 8004b2a:	001c      	movs	r4, r3
 8004b2c:	2c00      	cmp	r4, #0
 8004b2e:	d12f      	bne.n	8004b90 <_malloc_r+0x88>
 8004b30:	0039      	movs	r1, r7
 8004b32:	0028      	movs	r0, r5
 8004b34:	f7ff ffc6 	bl	8004ac4 <sbrk_aligned>
 8004b38:	0004      	movs	r4, r0
 8004b3a:	1c43      	adds	r3, r0, #1
 8004b3c:	d15f      	bne.n	8004bfe <_malloc_r+0xf6>
 8004b3e:	6834      	ldr	r4, [r6, #0]
 8004b40:	9400      	str	r4, [sp, #0]
 8004b42:	9b00      	ldr	r3, [sp, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d14a      	bne.n	8004bde <_malloc_r+0xd6>
 8004b48:	2c00      	cmp	r4, #0
 8004b4a:	d052      	beq.n	8004bf2 <_malloc_r+0xea>
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	0028      	movs	r0, r5
 8004b50:	18e3      	adds	r3, r4, r3
 8004b52:	9900      	ldr	r1, [sp, #0]
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	f000 fc6b 	bl	8005430 <_sbrk_r>
 8004b5a:	9b01      	ldr	r3, [sp, #4]
 8004b5c:	4283      	cmp	r3, r0
 8004b5e:	d148      	bne.n	8004bf2 <_malloc_r+0xea>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	0028      	movs	r0, r5
 8004b64:	1aff      	subs	r7, r7, r3
 8004b66:	0039      	movs	r1, r7
 8004b68:	f7ff ffac 	bl	8004ac4 <sbrk_aligned>
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	d040      	beq.n	8004bf2 <_malloc_r+0xea>
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	19db      	adds	r3, r3, r7
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	6833      	ldr	r3, [r6, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	2a00      	cmp	r2, #0
 8004b7c:	d133      	bne.n	8004be6 <_malloc_r+0xde>
 8004b7e:	9b00      	ldr	r3, [sp, #0]
 8004b80:	6033      	str	r3, [r6, #0]
 8004b82:	e019      	b.n	8004bb8 <_malloc_r+0xb0>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	dac9      	bge.n	8004b1c <_malloc_r+0x14>
 8004b88:	230c      	movs	r3, #12
 8004b8a:	602b      	str	r3, [r5, #0]
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b90:	6821      	ldr	r1, [r4, #0]
 8004b92:	1bc9      	subs	r1, r1, r7
 8004b94:	d420      	bmi.n	8004bd8 <_malloc_r+0xd0>
 8004b96:	290b      	cmp	r1, #11
 8004b98:	d90a      	bls.n	8004bb0 <_malloc_r+0xa8>
 8004b9a:	19e2      	adds	r2, r4, r7
 8004b9c:	6027      	str	r7, [r4, #0]
 8004b9e:	42a3      	cmp	r3, r4
 8004ba0:	d104      	bne.n	8004bac <_malloc_r+0xa4>
 8004ba2:	6032      	str	r2, [r6, #0]
 8004ba4:	6863      	ldr	r3, [r4, #4]
 8004ba6:	6011      	str	r1, [r2, #0]
 8004ba8:	6053      	str	r3, [r2, #4]
 8004baa:	e005      	b.n	8004bb8 <_malloc_r+0xb0>
 8004bac:	605a      	str	r2, [r3, #4]
 8004bae:	e7f9      	b.n	8004ba4 <_malloc_r+0x9c>
 8004bb0:	6862      	ldr	r2, [r4, #4]
 8004bb2:	42a3      	cmp	r3, r4
 8004bb4:	d10e      	bne.n	8004bd4 <_malloc_r+0xcc>
 8004bb6:	6032      	str	r2, [r6, #0]
 8004bb8:	0028      	movs	r0, r5
 8004bba:	f000 f82d 	bl	8004c18 <__malloc_unlock>
 8004bbe:	0020      	movs	r0, r4
 8004bc0:	2207      	movs	r2, #7
 8004bc2:	300b      	adds	r0, #11
 8004bc4:	1d23      	adds	r3, r4, #4
 8004bc6:	4390      	bics	r0, r2
 8004bc8:	1ac2      	subs	r2, r0, r3
 8004bca:	4298      	cmp	r0, r3
 8004bcc:	d0df      	beq.n	8004b8e <_malloc_r+0x86>
 8004bce:	1a1b      	subs	r3, r3, r0
 8004bd0:	50a3      	str	r3, [r4, r2]
 8004bd2:	e7dc      	b.n	8004b8e <_malloc_r+0x86>
 8004bd4:	605a      	str	r2, [r3, #4]
 8004bd6:	e7ef      	b.n	8004bb8 <_malloc_r+0xb0>
 8004bd8:	0023      	movs	r3, r4
 8004bda:	6864      	ldr	r4, [r4, #4]
 8004bdc:	e7a6      	b.n	8004b2c <_malloc_r+0x24>
 8004bde:	9c00      	ldr	r4, [sp, #0]
 8004be0:	6863      	ldr	r3, [r4, #4]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	e7ad      	b.n	8004b42 <_malloc_r+0x3a>
 8004be6:	001a      	movs	r2, r3
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	42a3      	cmp	r3, r4
 8004bec:	d1fb      	bne.n	8004be6 <_malloc_r+0xde>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e7da      	b.n	8004ba8 <_malloc_r+0xa0>
 8004bf2:	230c      	movs	r3, #12
 8004bf4:	0028      	movs	r0, r5
 8004bf6:	602b      	str	r3, [r5, #0]
 8004bf8:	f000 f80e 	bl	8004c18 <__malloc_unlock>
 8004bfc:	e7c6      	b.n	8004b8c <_malloc_r+0x84>
 8004bfe:	6007      	str	r7, [r0, #0]
 8004c00:	e7da      	b.n	8004bb8 <_malloc_r+0xb0>
 8004c02:	46c0      	nop			@ (mov r8, r8)
 8004c04:	200003f0 	.word	0x200003f0

08004c08 <__malloc_lock>:
 8004c08:	b510      	push	{r4, lr}
 8004c0a:	4802      	ldr	r0, [pc, #8]	@ (8004c14 <__malloc_lock+0xc>)
 8004c0c:	f7ff ff0d 	bl	8004a2a <__retarget_lock_acquire_recursive>
 8004c10:	bd10      	pop	{r4, pc}
 8004c12:	46c0      	nop			@ (mov r8, r8)
 8004c14:	200003e8 	.word	0x200003e8

08004c18 <__malloc_unlock>:
 8004c18:	b510      	push	{r4, lr}
 8004c1a:	4802      	ldr	r0, [pc, #8]	@ (8004c24 <__malloc_unlock+0xc>)
 8004c1c:	f7ff ff06 	bl	8004a2c <__retarget_lock_release_recursive>
 8004c20:	bd10      	pop	{r4, pc}
 8004c22:	46c0      	nop			@ (mov r8, r8)
 8004c24:	200003e8 	.word	0x200003e8

08004c28 <__sfputc_r>:
 8004c28:	6893      	ldr	r3, [r2, #8]
 8004c2a:	b510      	push	{r4, lr}
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	6093      	str	r3, [r2, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	da04      	bge.n	8004c3e <__sfputc_r+0x16>
 8004c34:	6994      	ldr	r4, [r2, #24]
 8004c36:	42a3      	cmp	r3, r4
 8004c38:	db07      	blt.n	8004c4a <__sfputc_r+0x22>
 8004c3a:	290a      	cmp	r1, #10
 8004c3c:	d005      	beq.n	8004c4a <__sfputc_r+0x22>
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	1c58      	adds	r0, r3, #1
 8004c42:	6010      	str	r0, [r2, #0]
 8004c44:	7019      	strb	r1, [r3, #0]
 8004c46:	0008      	movs	r0, r1
 8004c48:	bd10      	pop	{r4, pc}
 8004c4a:	f7ff fdcd 	bl	80047e8 <__swbuf_r>
 8004c4e:	0001      	movs	r1, r0
 8004c50:	e7f9      	b.n	8004c46 <__sfputc_r+0x1e>

08004c52 <__sfputs_r>:
 8004c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c54:	0006      	movs	r6, r0
 8004c56:	000f      	movs	r7, r1
 8004c58:	0014      	movs	r4, r2
 8004c5a:	18d5      	adds	r5, r2, r3
 8004c5c:	42ac      	cmp	r4, r5
 8004c5e:	d101      	bne.n	8004c64 <__sfputs_r+0x12>
 8004c60:	2000      	movs	r0, #0
 8004c62:	e007      	b.n	8004c74 <__sfputs_r+0x22>
 8004c64:	7821      	ldrb	r1, [r4, #0]
 8004c66:	003a      	movs	r2, r7
 8004c68:	0030      	movs	r0, r6
 8004c6a:	f7ff ffdd 	bl	8004c28 <__sfputc_r>
 8004c6e:	3401      	adds	r4, #1
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d1f3      	bne.n	8004c5c <__sfputs_r+0xa>
 8004c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c78 <_vfiprintf_r>:
 8004c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c7a:	b0a1      	sub	sp, #132	@ 0x84
 8004c7c:	000f      	movs	r7, r1
 8004c7e:	0015      	movs	r5, r2
 8004c80:	001e      	movs	r6, r3
 8004c82:	9003      	str	r0, [sp, #12]
 8004c84:	2800      	cmp	r0, #0
 8004c86:	d004      	beq.n	8004c92 <_vfiprintf_r+0x1a>
 8004c88:	6a03      	ldr	r3, [r0, #32]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <_vfiprintf_r+0x1a>
 8004c8e:	f7ff fcbb 	bl	8004608 <__sinit>
 8004c92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c94:	07db      	lsls	r3, r3, #31
 8004c96:	d405      	bmi.n	8004ca4 <_vfiprintf_r+0x2c>
 8004c98:	89bb      	ldrh	r3, [r7, #12]
 8004c9a:	059b      	lsls	r3, r3, #22
 8004c9c:	d402      	bmi.n	8004ca4 <_vfiprintf_r+0x2c>
 8004c9e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004ca0:	f7ff fec3 	bl	8004a2a <__retarget_lock_acquire_recursive>
 8004ca4:	89bb      	ldrh	r3, [r7, #12]
 8004ca6:	071b      	lsls	r3, r3, #28
 8004ca8:	d502      	bpl.n	8004cb0 <_vfiprintf_r+0x38>
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d113      	bne.n	8004cd8 <_vfiprintf_r+0x60>
 8004cb0:	0039      	movs	r1, r7
 8004cb2:	9803      	ldr	r0, [sp, #12]
 8004cb4:	f7ff fdda 	bl	800486c <__swsetup_r>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d00d      	beq.n	8004cd8 <_vfiprintf_r+0x60>
 8004cbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cbe:	07db      	lsls	r3, r3, #31
 8004cc0:	d503      	bpl.n	8004cca <_vfiprintf_r+0x52>
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	4240      	negs	r0, r0
 8004cc6:	b021      	add	sp, #132	@ 0x84
 8004cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cca:	89bb      	ldrh	r3, [r7, #12]
 8004ccc:	059b      	lsls	r3, r3, #22
 8004cce:	d4f8      	bmi.n	8004cc2 <_vfiprintf_r+0x4a>
 8004cd0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004cd2:	f7ff feab 	bl	8004a2c <__retarget_lock_release_recursive>
 8004cd6:	e7f4      	b.n	8004cc2 <_vfiprintf_r+0x4a>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	ac08      	add	r4, sp, #32
 8004cdc:	6163      	str	r3, [r4, #20]
 8004cde:	3320      	adds	r3, #32
 8004ce0:	7663      	strb	r3, [r4, #25]
 8004ce2:	3310      	adds	r3, #16
 8004ce4:	76a3      	strb	r3, [r4, #26]
 8004ce6:	9607      	str	r6, [sp, #28]
 8004ce8:	002e      	movs	r6, r5
 8004cea:	7833      	ldrb	r3, [r6, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <_vfiprintf_r+0x7c>
 8004cf0:	2b25      	cmp	r3, #37	@ 0x25
 8004cf2:	d148      	bne.n	8004d86 <_vfiprintf_r+0x10e>
 8004cf4:	1b73      	subs	r3, r6, r5
 8004cf6:	9305      	str	r3, [sp, #20]
 8004cf8:	42ae      	cmp	r6, r5
 8004cfa:	d00b      	beq.n	8004d14 <_vfiprintf_r+0x9c>
 8004cfc:	002a      	movs	r2, r5
 8004cfe:	0039      	movs	r1, r7
 8004d00:	9803      	ldr	r0, [sp, #12]
 8004d02:	f7ff ffa6 	bl	8004c52 <__sfputs_r>
 8004d06:	3001      	adds	r0, #1
 8004d08:	d100      	bne.n	8004d0c <_vfiprintf_r+0x94>
 8004d0a:	e0ae      	b.n	8004e6a <_vfiprintf_r+0x1f2>
 8004d0c:	6963      	ldr	r3, [r4, #20]
 8004d0e:	9a05      	ldr	r2, [sp, #20]
 8004d10:	189b      	adds	r3, r3, r2
 8004d12:	6163      	str	r3, [r4, #20]
 8004d14:	7833      	ldrb	r3, [r6, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d100      	bne.n	8004d1c <_vfiprintf_r+0xa4>
 8004d1a:	e0a6      	b.n	8004e6a <_vfiprintf_r+0x1f2>
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	2300      	movs	r3, #0
 8004d20:	4252      	negs	r2, r2
 8004d22:	6062      	str	r2, [r4, #4]
 8004d24:	a904      	add	r1, sp, #16
 8004d26:	3254      	adds	r2, #84	@ 0x54
 8004d28:	1852      	adds	r2, r2, r1
 8004d2a:	1c75      	adds	r5, r6, #1
 8004d2c:	6023      	str	r3, [r4, #0]
 8004d2e:	60e3      	str	r3, [r4, #12]
 8004d30:	60a3      	str	r3, [r4, #8]
 8004d32:	7013      	strb	r3, [r2, #0]
 8004d34:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004d36:	4b59      	ldr	r3, [pc, #356]	@ (8004e9c <_vfiprintf_r+0x224>)
 8004d38:	2205      	movs	r2, #5
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	7829      	ldrb	r1, [r5, #0]
 8004d3e:	9305      	str	r3, [sp, #20]
 8004d40:	f000 fb88 	bl	8005454 <memchr>
 8004d44:	1c6e      	adds	r6, r5, #1
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d11f      	bne.n	8004d8a <_vfiprintf_r+0x112>
 8004d4a:	6822      	ldr	r2, [r4, #0]
 8004d4c:	06d3      	lsls	r3, r2, #27
 8004d4e:	d504      	bpl.n	8004d5a <_vfiprintf_r+0xe2>
 8004d50:	2353      	movs	r3, #83	@ 0x53
 8004d52:	a904      	add	r1, sp, #16
 8004d54:	185b      	adds	r3, r3, r1
 8004d56:	2120      	movs	r1, #32
 8004d58:	7019      	strb	r1, [r3, #0]
 8004d5a:	0713      	lsls	r3, r2, #28
 8004d5c:	d504      	bpl.n	8004d68 <_vfiprintf_r+0xf0>
 8004d5e:	2353      	movs	r3, #83	@ 0x53
 8004d60:	a904      	add	r1, sp, #16
 8004d62:	185b      	adds	r3, r3, r1
 8004d64:	212b      	movs	r1, #43	@ 0x2b
 8004d66:	7019      	strb	r1, [r3, #0]
 8004d68:	782b      	ldrb	r3, [r5, #0]
 8004d6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d6c:	d016      	beq.n	8004d9c <_vfiprintf_r+0x124>
 8004d6e:	002e      	movs	r6, r5
 8004d70:	2100      	movs	r1, #0
 8004d72:	200a      	movs	r0, #10
 8004d74:	68e3      	ldr	r3, [r4, #12]
 8004d76:	7832      	ldrb	r2, [r6, #0]
 8004d78:	1c75      	adds	r5, r6, #1
 8004d7a:	3a30      	subs	r2, #48	@ 0x30
 8004d7c:	2a09      	cmp	r2, #9
 8004d7e:	d950      	bls.n	8004e22 <_vfiprintf_r+0x1aa>
 8004d80:	2900      	cmp	r1, #0
 8004d82:	d111      	bne.n	8004da8 <_vfiprintf_r+0x130>
 8004d84:	e017      	b.n	8004db6 <_vfiprintf_r+0x13e>
 8004d86:	3601      	adds	r6, #1
 8004d88:	e7af      	b.n	8004cea <_vfiprintf_r+0x72>
 8004d8a:	9b05      	ldr	r3, [sp, #20]
 8004d8c:	6822      	ldr	r2, [r4, #0]
 8004d8e:	1ac0      	subs	r0, r0, r3
 8004d90:	2301      	movs	r3, #1
 8004d92:	4083      	lsls	r3, r0
 8004d94:	4313      	orrs	r3, r2
 8004d96:	0035      	movs	r5, r6
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	e7cc      	b.n	8004d36 <_vfiprintf_r+0xbe>
 8004d9c:	9b07      	ldr	r3, [sp, #28]
 8004d9e:	1d19      	adds	r1, r3, #4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	9107      	str	r1, [sp, #28]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	db01      	blt.n	8004dac <_vfiprintf_r+0x134>
 8004da8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004daa:	e004      	b.n	8004db6 <_vfiprintf_r+0x13e>
 8004dac:	425b      	negs	r3, r3
 8004dae:	60e3      	str	r3, [r4, #12]
 8004db0:	2302      	movs	r3, #2
 8004db2:	4313      	orrs	r3, r2
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	7833      	ldrb	r3, [r6, #0]
 8004db8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dba:	d10c      	bne.n	8004dd6 <_vfiprintf_r+0x15e>
 8004dbc:	7873      	ldrb	r3, [r6, #1]
 8004dbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dc0:	d134      	bne.n	8004e2c <_vfiprintf_r+0x1b4>
 8004dc2:	9b07      	ldr	r3, [sp, #28]
 8004dc4:	3602      	adds	r6, #2
 8004dc6:	1d1a      	adds	r2, r3, #4
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	9207      	str	r2, [sp, #28]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	da01      	bge.n	8004dd4 <_vfiprintf_r+0x15c>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	425b      	negs	r3, r3
 8004dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dd6:	4d32      	ldr	r5, [pc, #200]	@ (8004ea0 <_vfiprintf_r+0x228>)
 8004dd8:	2203      	movs	r2, #3
 8004dda:	0028      	movs	r0, r5
 8004ddc:	7831      	ldrb	r1, [r6, #0]
 8004dde:	f000 fb39 	bl	8005454 <memchr>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d006      	beq.n	8004df4 <_vfiprintf_r+0x17c>
 8004de6:	2340      	movs	r3, #64	@ 0x40
 8004de8:	1b40      	subs	r0, r0, r5
 8004dea:	4083      	lsls	r3, r0
 8004dec:	6822      	ldr	r2, [r4, #0]
 8004dee:	3601      	adds	r6, #1
 8004df0:	4313      	orrs	r3, r2
 8004df2:	6023      	str	r3, [r4, #0]
 8004df4:	7831      	ldrb	r1, [r6, #0]
 8004df6:	2206      	movs	r2, #6
 8004df8:	482a      	ldr	r0, [pc, #168]	@ (8004ea4 <_vfiprintf_r+0x22c>)
 8004dfa:	1c75      	adds	r5, r6, #1
 8004dfc:	7621      	strb	r1, [r4, #24]
 8004dfe:	f000 fb29 	bl	8005454 <memchr>
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d040      	beq.n	8004e88 <_vfiprintf_r+0x210>
 8004e06:	4b28      	ldr	r3, [pc, #160]	@ (8004ea8 <_vfiprintf_r+0x230>)
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d122      	bne.n	8004e52 <_vfiprintf_r+0x1da>
 8004e0c:	2207      	movs	r2, #7
 8004e0e:	9b07      	ldr	r3, [sp, #28]
 8004e10:	3307      	adds	r3, #7
 8004e12:	4393      	bics	r3, r2
 8004e14:	3308      	adds	r3, #8
 8004e16:	9307      	str	r3, [sp, #28]
 8004e18:	6963      	ldr	r3, [r4, #20]
 8004e1a:	9a04      	ldr	r2, [sp, #16]
 8004e1c:	189b      	adds	r3, r3, r2
 8004e1e:	6163      	str	r3, [r4, #20]
 8004e20:	e762      	b.n	8004ce8 <_vfiprintf_r+0x70>
 8004e22:	4343      	muls	r3, r0
 8004e24:	002e      	movs	r6, r5
 8004e26:	2101      	movs	r1, #1
 8004e28:	189b      	adds	r3, r3, r2
 8004e2a:	e7a4      	b.n	8004d76 <_vfiprintf_r+0xfe>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	200a      	movs	r0, #10
 8004e30:	0019      	movs	r1, r3
 8004e32:	3601      	adds	r6, #1
 8004e34:	6063      	str	r3, [r4, #4]
 8004e36:	7832      	ldrb	r2, [r6, #0]
 8004e38:	1c75      	adds	r5, r6, #1
 8004e3a:	3a30      	subs	r2, #48	@ 0x30
 8004e3c:	2a09      	cmp	r2, #9
 8004e3e:	d903      	bls.n	8004e48 <_vfiprintf_r+0x1d0>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0c8      	beq.n	8004dd6 <_vfiprintf_r+0x15e>
 8004e44:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e46:	e7c6      	b.n	8004dd6 <_vfiprintf_r+0x15e>
 8004e48:	4341      	muls	r1, r0
 8004e4a:	002e      	movs	r6, r5
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	1889      	adds	r1, r1, r2
 8004e50:	e7f1      	b.n	8004e36 <_vfiprintf_r+0x1be>
 8004e52:	aa07      	add	r2, sp, #28
 8004e54:	9200      	str	r2, [sp, #0]
 8004e56:	0021      	movs	r1, r4
 8004e58:	003a      	movs	r2, r7
 8004e5a:	4b14      	ldr	r3, [pc, #80]	@ (8004eac <_vfiprintf_r+0x234>)
 8004e5c:	9803      	ldr	r0, [sp, #12]
 8004e5e:	e000      	b.n	8004e62 <_vfiprintf_r+0x1ea>
 8004e60:	bf00      	nop
 8004e62:	9004      	str	r0, [sp, #16]
 8004e64:	9b04      	ldr	r3, [sp, #16]
 8004e66:	3301      	adds	r3, #1
 8004e68:	d1d6      	bne.n	8004e18 <_vfiprintf_r+0x1a0>
 8004e6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e6c:	07db      	lsls	r3, r3, #31
 8004e6e:	d405      	bmi.n	8004e7c <_vfiprintf_r+0x204>
 8004e70:	89bb      	ldrh	r3, [r7, #12]
 8004e72:	059b      	lsls	r3, r3, #22
 8004e74:	d402      	bmi.n	8004e7c <_vfiprintf_r+0x204>
 8004e76:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004e78:	f7ff fdd8 	bl	8004a2c <__retarget_lock_release_recursive>
 8004e7c:	89bb      	ldrh	r3, [r7, #12]
 8004e7e:	065b      	lsls	r3, r3, #25
 8004e80:	d500      	bpl.n	8004e84 <_vfiprintf_r+0x20c>
 8004e82:	e71e      	b.n	8004cc2 <_vfiprintf_r+0x4a>
 8004e84:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004e86:	e71e      	b.n	8004cc6 <_vfiprintf_r+0x4e>
 8004e88:	aa07      	add	r2, sp, #28
 8004e8a:	9200      	str	r2, [sp, #0]
 8004e8c:	0021      	movs	r1, r4
 8004e8e:	003a      	movs	r2, r7
 8004e90:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <_vfiprintf_r+0x234>)
 8004e92:	9803      	ldr	r0, [sp, #12]
 8004e94:	f000 f87c 	bl	8004f90 <_printf_i>
 8004e98:	e7e3      	b.n	8004e62 <_vfiprintf_r+0x1ea>
 8004e9a:	46c0      	nop			@ (mov r8, r8)
 8004e9c:	0800556c 	.word	0x0800556c
 8004ea0:	08005572 	.word	0x08005572
 8004ea4:	08005576 	.word	0x08005576
 8004ea8:	00000000 	.word	0x00000000
 8004eac:	08004c53 	.word	0x08004c53

08004eb0 <_printf_common>:
 8004eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004eb2:	0016      	movs	r6, r2
 8004eb4:	9301      	str	r3, [sp, #4]
 8004eb6:	688a      	ldr	r2, [r1, #8]
 8004eb8:	690b      	ldr	r3, [r1, #16]
 8004eba:	000c      	movs	r4, r1
 8004ebc:	9000      	str	r0, [sp, #0]
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	da00      	bge.n	8004ec4 <_printf_common+0x14>
 8004ec2:	0013      	movs	r3, r2
 8004ec4:	0022      	movs	r2, r4
 8004ec6:	6033      	str	r3, [r6, #0]
 8004ec8:	3243      	adds	r2, #67	@ 0x43
 8004eca:	7812      	ldrb	r2, [r2, #0]
 8004ecc:	2a00      	cmp	r2, #0
 8004ece:	d001      	beq.n	8004ed4 <_printf_common+0x24>
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	6033      	str	r3, [r6, #0]
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	069b      	lsls	r3, r3, #26
 8004ed8:	d502      	bpl.n	8004ee0 <_printf_common+0x30>
 8004eda:	6833      	ldr	r3, [r6, #0]
 8004edc:	3302      	adds	r3, #2
 8004ede:	6033      	str	r3, [r6, #0]
 8004ee0:	6822      	ldr	r2, [r4, #0]
 8004ee2:	2306      	movs	r3, #6
 8004ee4:	0015      	movs	r5, r2
 8004ee6:	401d      	ands	r5, r3
 8004ee8:	421a      	tst	r2, r3
 8004eea:	d027      	beq.n	8004f3c <_printf_common+0x8c>
 8004eec:	0023      	movs	r3, r4
 8004eee:	3343      	adds	r3, #67	@ 0x43
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	1e5a      	subs	r2, r3, #1
 8004ef4:	4193      	sbcs	r3, r2
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	0692      	lsls	r2, r2, #26
 8004efa:	d430      	bmi.n	8004f5e <_printf_common+0xae>
 8004efc:	0022      	movs	r2, r4
 8004efe:	9901      	ldr	r1, [sp, #4]
 8004f00:	9800      	ldr	r0, [sp, #0]
 8004f02:	9d08      	ldr	r5, [sp, #32]
 8004f04:	3243      	adds	r2, #67	@ 0x43
 8004f06:	47a8      	blx	r5
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d025      	beq.n	8004f58 <_printf_common+0xa8>
 8004f0c:	2206      	movs	r2, #6
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	2500      	movs	r5, #0
 8004f12:	4013      	ands	r3, r2
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d105      	bne.n	8004f24 <_printf_common+0x74>
 8004f18:	6833      	ldr	r3, [r6, #0]
 8004f1a:	68e5      	ldr	r5, [r4, #12]
 8004f1c:	1aed      	subs	r5, r5, r3
 8004f1e:	43eb      	mvns	r3, r5
 8004f20:	17db      	asrs	r3, r3, #31
 8004f22:	401d      	ands	r5, r3
 8004f24:	68a3      	ldr	r3, [r4, #8]
 8004f26:	6922      	ldr	r2, [r4, #16]
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	dd01      	ble.n	8004f30 <_printf_common+0x80>
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	18ed      	adds	r5, r5, r3
 8004f30:	2600      	movs	r6, #0
 8004f32:	42b5      	cmp	r5, r6
 8004f34:	d120      	bne.n	8004f78 <_printf_common+0xc8>
 8004f36:	2000      	movs	r0, #0
 8004f38:	e010      	b.n	8004f5c <_printf_common+0xac>
 8004f3a:	3501      	adds	r5, #1
 8004f3c:	68e3      	ldr	r3, [r4, #12]
 8004f3e:	6832      	ldr	r2, [r6, #0]
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	42ab      	cmp	r3, r5
 8004f44:	ddd2      	ble.n	8004eec <_printf_common+0x3c>
 8004f46:	0022      	movs	r2, r4
 8004f48:	2301      	movs	r3, #1
 8004f4a:	9901      	ldr	r1, [sp, #4]
 8004f4c:	9800      	ldr	r0, [sp, #0]
 8004f4e:	9f08      	ldr	r7, [sp, #32]
 8004f50:	3219      	adds	r2, #25
 8004f52:	47b8      	blx	r7
 8004f54:	3001      	adds	r0, #1
 8004f56:	d1f0      	bne.n	8004f3a <_printf_common+0x8a>
 8004f58:	2001      	movs	r0, #1
 8004f5a:	4240      	negs	r0, r0
 8004f5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f5e:	2030      	movs	r0, #48	@ 0x30
 8004f60:	18e1      	adds	r1, r4, r3
 8004f62:	3143      	adds	r1, #67	@ 0x43
 8004f64:	7008      	strb	r0, [r1, #0]
 8004f66:	0021      	movs	r1, r4
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	3145      	adds	r1, #69	@ 0x45
 8004f6c:	7809      	ldrb	r1, [r1, #0]
 8004f6e:	18a2      	adds	r2, r4, r2
 8004f70:	3243      	adds	r2, #67	@ 0x43
 8004f72:	3302      	adds	r3, #2
 8004f74:	7011      	strb	r1, [r2, #0]
 8004f76:	e7c1      	b.n	8004efc <_printf_common+0x4c>
 8004f78:	0022      	movs	r2, r4
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	9901      	ldr	r1, [sp, #4]
 8004f7e:	9800      	ldr	r0, [sp, #0]
 8004f80:	9f08      	ldr	r7, [sp, #32]
 8004f82:	321a      	adds	r2, #26
 8004f84:	47b8      	blx	r7
 8004f86:	3001      	adds	r0, #1
 8004f88:	d0e6      	beq.n	8004f58 <_printf_common+0xa8>
 8004f8a:	3601      	adds	r6, #1
 8004f8c:	e7d1      	b.n	8004f32 <_printf_common+0x82>
	...

08004f90 <_printf_i>:
 8004f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f92:	b08b      	sub	sp, #44	@ 0x2c
 8004f94:	9206      	str	r2, [sp, #24]
 8004f96:	000a      	movs	r2, r1
 8004f98:	3243      	adds	r2, #67	@ 0x43
 8004f9a:	9307      	str	r3, [sp, #28]
 8004f9c:	9005      	str	r0, [sp, #20]
 8004f9e:	9203      	str	r2, [sp, #12]
 8004fa0:	7e0a      	ldrb	r2, [r1, #24]
 8004fa2:	000c      	movs	r4, r1
 8004fa4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004fa6:	2a78      	cmp	r2, #120	@ 0x78
 8004fa8:	d809      	bhi.n	8004fbe <_printf_i+0x2e>
 8004faa:	2a62      	cmp	r2, #98	@ 0x62
 8004fac:	d80b      	bhi.n	8004fc6 <_printf_i+0x36>
 8004fae:	2a00      	cmp	r2, #0
 8004fb0:	d100      	bne.n	8004fb4 <_printf_i+0x24>
 8004fb2:	e0bc      	b.n	800512e <_printf_i+0x19e>
 8004fb4:	497b      	ldr	r1, [pc, #492]	@ (80051a4 <_printf_i+0x214>)
 8004fb6:	9104      	str	r1, [sp, #16]
 8004fb8:	2a58      	cmp	r2, #88	@ 0x58
 8004fba:	d100      	bne.n	8004fbe <_printf_i+0x2e>
 8004fbc:	e090      	b.n	80050e0 <_printf_i+0x150>
 8004fbe:	0025      	movs	r5, r4
 8004fc0:	3542      	adds	r5, #66	@ 0x42
 8004fc2:	702a      	strb	r2, [r5, #0]
 8004fc4:	e022      	b.n	800500c <_printf_i+0x7c>
 8004fc6:	0010      	movs	r0, r2
 8004fc8:	3863      	subs	r0, #99	@ 0x63
 8004fca:	2815      	cmp	r0, #21
 8004fcc:	d8f7      	bhi.n	8004fbe <_printf_i+0x2e>
 8004fce:	f7fb f89b 	bl	8000108 <__gnu_thumb1_case_shi>
 8004fd2:	0016      	.short	0x0016
 8004fd4:	fff6001f 	.word	0xfff6001f
 8004fd8:	fff6fff6 	.word	0xfff6fff6
 8004fdc:	001ffff6 	.word	0x001ffff6
 8004fe0:	fff6fff6 	.word	0xfff6fff6
 8004fe4:	fff6fff6 	.word	0xfff6fff6
 8004fe8:	003600a1 	.word	0x003600a1
 8004fec:	fff60080 	.word	0xfff60080
 8004ff0:	00b2fff6 	.word	0x00b2fff6
 8004ff4:	0036fff6 	.word	0x0036fff6
 8004ff8:	fff6fff6 	.word	0xfff6fff6
 8004ffc:	0084      	.short	0x0084
 8004ffe:	0025      	movs	r5, r4
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	3542      	adds	r5, #66	@ 0x42
 8005004:	1d11      	adds	r1, r2, #4
 8005006:	6019      	str	r1, [r3, #0]
 8005008:	6813      	ldr	r3, [r2, #0]
 800500a:	702b      	strb	r3, [r5, #0]
 800500c:	2301      	movs	r3, #1
 800500e:	e0a0      	b.n	8005152 <_printf_i+0x1c2>
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	6809      	ldr	r1, [r1, #0]
 8005014:	1d02      	adds	r2, r0, #4
 8005016:	060d      	lsls	r5, r1, #24
 8005018:	d50b      	bpl.n	8005032 <_printf_i+0xa2>
 800501a:	6806      	ldr	r6, [r0, #0]
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	2e00      	cmp	r6, #0
 8005020:	da03      	bge.n	800502a <_printf_i+0x9a>
 8005022:	232d      	movs	r3, #45	@ 0x2d
 8005024:	9a03      	ldr	r2, [sp, #12]
 8005026:	4276      	negs	r6, r6
 8005028:	7013      	strb	r3, [r2, #0]
 800502a:	4b5e      	ldr	r3, [pc, #376]	@ (80051a4 <_printf_i+0x214>)
 800502c:	270a      	movs	r7, #10
 800502e:	9304      	str	r3, [sp, #16]
 8005030:	e018      	b.n	8005064 <_printf_i+0xd4>
 8005032:	6806      	ldr	r6, [r0, #0]
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	0649      	lsls	r1, r1, #25
 8005038:	d5f1      	bpl.n	800501e <_printf_i+0x8e>
 800503a:	b236      	sxth	r6, r6
 800503c:	e7ef      	b.n	800501e <_printf_i+0x8e>
 800503e:	6808      	ldr	r0, [r1, #0]
 8005040:	6819      	ldr	r1, [r3, #0]
 8005042:	c940      	ldmia	r1!, {r6}
 8005044:	0605      	lsls	r5, r0, #24
 8005046:	d402      	bmi.n	800504e <_printf_i+0xbe>
 8005048:	0640      	lsls	r0, r0, #25
 800504a:	d500      	bpl.n	800504e <_printf_i+0xbe>
 800504c:	b2b6      	uxth	r6, r6
 800504e:	6019      	str	r1, [r3, #0]
 8005050:	4b54      	ldr	r3, [pc, #336]	@ (80051a4 <_printf_i+0x214>)
 8005052:	270a      	movs	r7, #10
 8005054:	9304      	str	r3, [sp, #16]
 8005056:	2a6f      	cmp	r2, #111	@ 0x6f
 8005058:	d100      	bne.n	800505c <_printf_i+0xcc>
 800505a:	3f02      	subs	r7, #2
 800505c:	0023      	movs	r3, r4
 800505e:	2200      	movs	r2, #0
 8005060:	3343      	adds	r3, #67	@ 0x43
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	6863      	ldr	r3, [r4, #4]
 8005066:	60a3      	str	r3, [r4, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	db03      	blt.n	8005074 <_printf_i+0xe4>
 800506c:	2104      	movs	r1, #4
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	438a      	bics	r2, r1
 8005072:	6022      	str	r2, [r4, #0]
 8005074:	2e00      	cmp	r6, #0
 8005076:	d102      	bne.n	800507e <_printf_i+0xee>
 8005078:	9d03      	ldr	r5, [sp, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00c      	beq.n	8005098 <_printf_i+0x108>
 800507e:	9d03      	ldr	r5, [sp, #12]
 8005080:	0030      	movs	r0, r6
 8005082:	0039      	movs	r1, r7
 8005084:	f7fb f8d0 	bl	8000228 <__aeabi_uidivmod>
 8005088:	9b04      	ldr	r3, [sp, #16]
 800508a:	3d01      	subs	r5, #1
 800508c:	5c5b      	ldrb	r3, [r3, r1]
 800508e:	702b      	strb	r3, [r5, #0]
 8005090:	0033      	movs	r3, r6
 8005092:	0006      	movs	r6, r0
 8005094:	429f      	cmp	r7, r3
 8005096:	d9f3      	bls.n	8005080 <_printf_i+0xf0>
 8005098:	2f08      	cmp	r7, #8
 800509a:	d109      	bne.n	80050b0 <_printf_i+0x120>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	07db      	lsls	r3, r3, #31
 80050a0:	d506      	bpl.n	80050b0 <_printf_i+0x120>
 80050a2:	6862      	ldr	r2, [r4, #4]
 80050a4:	6923      	ldr	r3, [r4, #16]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	dc02      	bgt.n	80050b0 <_printf_i+0x120>
 80050aa:	2330      	movs	r3, #48	@ 0x30
 80050ac:	3d01      	subs	r5, #1
 80050ae:	702b      	strb	r3, [r5, #0]
 80050b0:	9b03      	ldr	r3, [sp, #12]
 80050b2:	1b5b      	subs	r3, r3, r5
 80050b4:	6123      	str	r3, [r4, #16]
 80050b6:	9b07      	ldr	r3, [sp, #28]
 80050b8:	0021      	movs	r1, r4
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	9805      	ldr	r0, [sp, #20]
 80050be:	9b06      	ldr	r3, [sp, #24]
 80050c0:	aa09      	add	r2, sp, #36	@ 0x24
 80050c2:	f7ff fef5 	bl	8004eb0 <_printf_common>
 80050c6:	3001      	adds	r0, #1
 80050c8:	d148      	bne.n	800515c <_printf_i+0x1cc>
 80050ca:	2001      	movs	r0, #1
 80050cc:	4240      	negs	r0, r0
 80050ce:	b00b      	add	sp, #44	@ 0x2c
 80050d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d2:	2220      	movs	r2, #32
 80050d4:	6809      	ldr	r1, [r1, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	6022      	str	r2, [r4, #0]
 80050da:	2278      	movs	r2, #120	@ 0x78
 80050dc:	4932      	ldr	r1, [pc, #200]	@ (80051a8 <_printf_i+0x218>)
 80050de:	9104      	str	r1, [sp, #16]
 80050e0:	0021      	movs	r1, r4
 80050e2:	3145      	adds	r1, #69	@ 0x45
 80050e4:	700a      	strb	r2, [r1, #0]
 80050e6:	6819      	ldr	r1, [r3, #0]
 80050e8:	6822      	ldr	r2, [r4, #0]
 80050ea:	c940      	ldmia	r1!, {r6}
 80050ec:	0610      	lsls	r0, r2, #24
 80050ee:	d402      	bmi.n	80050f6 <_printf_i+0x166>
 80050f0:	0650      	lsls	r0, r2, #25
 80050f2:	d500      	bpl.n	80050f6 <_printf_i+0x166>
 80050f4:	b2b6      	uxth	r6, r6
 80050f6:	6019      	str	r1, [r3, #0]
 80050f8:	07d3      	lsls	r3, r2, #31
 80050fa:	d502      	bpl.n	8005102 <_printf_i+0x172>
 80050fc:	2320      	movs	r3, #32
 80050fe:	4313      	orrs	r3, r2
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	2e00      	cmp	r6, #0
 8005104:	d001      	beq.n	800510a <_printf_i+0x17a>
 8005106:	2710      	movs	r7, #16
 8005108:	e7a8      	b.n	800505c <_printf_i+0xcc>
 800510a:	2220      	movs	r2, #32
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	4393      	bics	r3, r2
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	e7f8      	b.n	8005106 <_printf_i+0x176>
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	680d      	ldr	r5, [r1, #0]
 8005118:	1d10      	adds	r0, r2, #4
 800511a:	6949      	ldr	r1, [r1, #20]
 800511c:	6018      	str	r0, [r3, #0]
 800511e:	6813      	ldr	r3, [r2, #0]
 8005120:	062e      	lsls	r6, r5, #24
 8005122:	d501      	bpl.n	8005128 <_printf_i+0x198>
 8005124:	6019      	str	r1, [r3, #0]
 8005126:	e002      	b.n	800512e <_printf_i+0x19e>
 8005128:	066d      	lsls	r5, r5, #25
 800512a:	d5fb      	bpl.n	8005124 <_printf_i+0x194>
 800512c:	8019      	strh	r1, [r3, #0]
 800512e:	2300      	movs	r3, #0
 8005130:	9d03      	ldr	r5, [sp, #12]
 8005132:	6123      	str	r3, [r4, #16]
 8005134:	e7bf      	b.n	80050b6 <_printf_i+0x126>
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	1d11      	adds	r1, r2, #4
 800513a:	6019      	str	r1, [r3, #0]
 800513c:	6815      	ldr	r5, [r2, #0]
 800513e:	2100      	movs	r1, #0
 8005140:	0028      	movs	r0, r5
 8005142:	6862      	ldr	r2, [r4, #4]
 8005144:	f000 f986 	bl	8005454 <memchr>
 8005148:	2800      	cmp	r0, #0
 800514a:	d001      	beq.n	8005150 <_printf_i+0x1c0>
 800514c:	1b40      	subs	r0, r0, r5
 800514e:	6060      	str	r0, [r4, #4]
 8005150:	6863      	ldr	r3, [r4, #4]
 8005152:	6123      	str	r3, [r4, #16]
 8005154:	2300      	movs	r3, #0
 8005156:	9a03      	ldr	r2, [sp, #12]
 8005158:	7013      	strb	r3, [r2, #0]
 800515a:	e7ac      	b.n	80050b6 <_printf_i+0x126>
 800515c:	002a      	movs	r2, r5
 800515e:	6923      	ldr	r3, [r4, #16]
 8005160:	9906      	ldr	r1, [sp, #24]
 8005162:	9805      	ldr	r0, [sp, #20]
 8005164:	9d07      	ldr	r5, [sp, #28]
 8005166:	47a8      	blx	r5
 8005168:	3001      	adds	r0, #1
 800516a:	d0ae      	beq.n	80050ca <_printf_i+0x13a>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	079b      	lsls	r3, r3, #30
 8005170:	d415      	bmi.n	800519e <_printf_i+0x20e>
 8005172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005174:	68e0      	ldr	r0, [r4, #12]
 8005176:	4298      	cmp	r0, r3
 8005178:	daa9      	bge.n	80050ce <_printf_i+0x13e>
 800517a:	0018      	movs	r0, r3
 800517c:	e7a7      	b.n	80050ce <_printf_i+0x13e>
 800517e:	0022      	movs	r2, r4
 8005180:	2301      	movs	r3, #1
 8005182:	9906      	ldr	r1, [sp, #24]
 8005184:	9805      	ldr	r0, [sp, #20]
 8005186:	9e07      	ldr	r6, [sp, #28]
 8005188:	3219      	adds	r2, #25
 800518a:	47b0      	blx	r6
 800518c:	3001      	adds	r0, #1
 800518e:	d09c      	beq.n	80050ca <_printf_i+0x13a>
 8005190:	3501      	adds	r5, #1
 8005192:	68e3      	ldr	r3, [r4, #12]
 8005194:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	42ab      	cmp	r3, r5
 800519a:	dcf0      	bgt.n	800517e <_printf_i+0x1ee>
 800519c:	e7e9      	b.n	8005172 <_printf_i+0x1e2>
 800519e:	2500      	movs	r5, #0
 80051a0:	e7f7      	b.n	8005192 <_printf_i+0x202>
 80051a2:	46c0      	nop			@ (mov r8, r8)
 80051a4:	0800557d 	.word	0x0800557d
 80051a8:	0800558e 	.word	0x0800558e

080051ac <__sflush_r>:
 80051ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051ae:	220c      	movs	r2, #12
 80051b0:	5e8b      	ldrsh	r3, [r1, r2]
 80051b2:	0005      	movs	r5, r0
 80051b4:	000c      	movs	r4, r1
 80051b6:	071a      	lsls	r2, r3, #28
 80051b8:	d456      	bmi.n	8005268 <__sflush_r+0xbc>
 80051ba:	684a      	ldr	r2, [r1, #4]
 80051bc:	2a00      	cmp	r2, #0
 80051be:	dc02      	bgt.n	80051c6 <__sflush_r+0x1a>
 80051c0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80051c2:	2a00      	cmp	r2, #0
 80051c4:	dd4e      	ble.n	8005264 <__sflush_r+0xb8>
 80051c6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80051c8:	2f00      	cmp	r7, #0
 80051ca:	d04b      	beq.n	8005264 <__sflush_r+0xb8>
 80051cc:	2200      	movs	r2, #0
 80051ce:	2080      	movs	r0, #128	@ 0x80
 80051d0:	682e      	ldr	r6, [r5, #0]
 80051d2:	602a      	str	r2, [r5, #0]
 80051d4:	001a      	movs	r2, r3
 80051d6:	0140      	lsls	r0, r0, #5
 80051d8:	6a21      	ldr	r1, [r4, #32]
 80051da:	4002      	ands	r2, r0
 80051dc:	4203      	tst	r3, r0
 80051de:	d033      	beq.n	8005248 <__sflush_r+0x9c>
 80051e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	075b      	lsls	r3, r3, #29
 80051e6:	d506      	bpl.n	80051f6 <__sflush_r+0x4a>
 80051e8:	6863      	ldr	r3, [r4, #4]
 80051ea:	1ad2      	subs	r2, r2, r3
 80051ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <__sflush_r+0x4a>
 80051f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051f4:	1ad2      	subs	r2, r2, r3
 80051f6:	2300      	movs	r3, #0
 80051f8:	0028      	movs	r0, r5
 80051fa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80051fc:	6a21      	ldr	r1, [r4, #32]
 80051fe:	47b8      	blx	r7
 8005200:	89a2      	ldrh	r2, [r4, #12]
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	d106      	bne.n	8005214 <__sflush_r+0x68>
 8005206:	6829      	ldr	r1, [r5, #0]
 8005208:	291d      	cmp	r1, #29
 800520a:	d846      	bhi.n	800529a <__sflush_r+0xee>
 800520c:	4b29      	ldr	r3, [pc, #164]	@ (80052b4 <__sflush_r+0x108>)
 800520e:	410b      	asrs	r3, r1
 8005210:	07db      	lsls	r3, r3, #31
 8005212:	d442      	bmi.n	800529a <__sflush_r+0xee>
 8005214:	2300      	movs	r3, #0
 8005216:	6063      	str	r3, [r4, #4]
 8005218:	6923      	ldr	r3, [r4, #16]
 800521a:	6023      	str	r3, [r4, #0]
 800521c:	04d2      	lsls	r2, r2, #19
 800521e:	d505      	bpl.n	800522c <__sflush_r+0x80>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d102      	bne.n	800522a <__sflush_r+0x7e>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d100      	bne.n	800522c <__sflush_r+0x80>
 800522a:	6560      	str	r0, [r4, #84]	@ 0x54
 800522c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800522e:	602e      	str	r6, [r5, #0]
 8005230:	2900      	cmp	r1, #0
 8005232:	d017      	beq.n	8005264 <__sflush_r+0xb8>
 8005234:	0023      	movs	r3, r4
 8005236:	3344      	adds	r3, #68	@ 0x44
 8005238:	4299      	cmp	r1, r3
 800523a:	d002      	beq.n	8005242 <__sflush_r+0x96>
 800523c:	0028      	movs	r0, r5
 800523e:	f7ff fbf7 	bl	8004a30 <_free_r>
 8005242:	2300      	movs	r3, #0
 8005244:	6363      	str	r3, [r4, #52]	@ 0x34
 8005246:	e00d      	b.n	8005264 <__sflush_r+0xb8>
 8005248:	2301      	movs	r3, #1
 800524a:	0028      	movs	r0, r5
 800524c:	47b8      	blx	r7
 800524e:	0002      	movs	r2, r0
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d1c6      	bne.n	80051e2 <__sflush_r+0x36>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0c3      	beq.n	80051e2 <__sflush_r+0x36>
 800525a:	2b1d      	cmp	r3, #29
 800525c:	d001      	beq.n	8005262 <__sflush_r+0xb6>
 800525e:	2b16      	cmp	r3, #22
 8005260:	d11a      	bne.n	8005298 <__sflush_r+0xec>
 8005262:	602e      	str	r6, [r5, #0]
 8005264:	2000      	movs	r0, #0
 8005266:	e01e      	b.n	80052a6 <__sflush_r+0xfa>
 8005268:	690e      	ldr	r6, [r1, #16]
 800526a:	2e00      	cmp	r6, #0
 800526c:	d0fa      	beq.n	8005264 <__sflush_r+0xb8>
 800526e:	680f      	ldr	r7, [r1, #0]
 8005270:	600e      	str	r6, [r1, #0]
 8005272:	1bba      	subs	r2, r7, r6
 8005274:	9201      	str	r2, [sp, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	079b      	lsls	r3, r3, #30
 800527a:	d100      	bne.n	800527e <__sflush_r+0xd2>
 800527c:	694a      	ldr	r2, [r1, #20]
 800527e:	60a2      	str	r2, [r4, #8]
 8005280:	9b01      	ldr	r3, [sp, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	ddee      	ble.n	8005264 <__sflush_r+0xb8>
 8005286:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005288:	0032      	movs	r2, r6
 800528a:	001f      	movs	r7, r3
 800528c:	0028      	movs	r0, r5
 800528e:	9b01      	ldr	r3, [sp, #4]
 8005290:	6a21      	ldr	r1, [r4, #32]
 8005292:	47b8      	blx	r7
 8005294:	2800      	cmp	r0, #0
 8005296:	dc07      	bgt.n	80052a8 <__sflush_r+0xfc>
 8005298:	89a2      	ldrh	r2, [r4, #12]
 800529a:	2340      	movs	r3, #64	@ 0x40
 800529c:	2001      	movs	r0, #1
 800529e:	4313      	orrs	r3, r2
 80052a0:	b21b      	sxth	r3, r3
 80052a2:	81a3      	strh	r3, [r4, #12]
 80052a4:	4240      	negs	r0, r0
 80052a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80052a8:	9b01      	ldr	r3, [sp, #4]
 80052aa:	1836      	adds	r6, r6, r0
 80052ac:	1a1b      	subs	r3, r3, r0
 80052ae:	9301      	str	r3, [sp, #4]
 80052b0:	e7e6      	b.n	8005280 <__sflush_r+0xd4>
 80052b2:	46c0      	nop			@ (mov r8, r8)
 80052b4:	dfbffffe 	.word	0xdfbffffe

080052b8 <_fflush_r>:
 80052b8:	690b      	ldr	r3, [r1, #16]
 80052ba:	b570      	push	{r4, r5, r6, lr}
 80052bc:	0005      	movs	r5, r0
 80052be:	000c      	movs	r4, r1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d102      	bne.n	80052ca <_fflush_r+0x12>
 80052c4:	2500      	movs	r5, #0
 80052c6:	0028      	movs	r0, r5
 80052c8:	bd70      	pop	{r4, r5, r6, pc}
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d004      	beq.n	80052d8 <_fflush_r+0x20>
 80052ce:	6a03      	ldr	r3, [r0, #32]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <_fflush_r+0x20>
 80052d4:	f7ff f998 	bl	8004608 <__sinit>
 80052d8:	220c      	movs	r2, #12
 80052da:	5ea3      	ldrsh	r3, [r4, r2]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f1      	beq.n	80052c4 <_fflush_r+0xc>
 80052e0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80052e2:	07d2      	lsls	r2, r2, #31
 80052e4:	d404      	bmi.n	80052f0 <_fflush_r+0x38>
 80052e6:	059b      	lsls	r3, r3, #22
 80052e8:	d402      	bmi.n	80052f0 <_fflush_r+0x38>
 80052ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052ec:	f7ff fb9d 	bl	8004a2a <__retarget_lock_acquire_recursive>
 80052f0:	0028      	movs	r0, r5
 80052f2:	0021      	movs	r1, r4
 80052f4:	f7ff ff5a 	bl	80051ac <__sflush_r>
 80052f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052fa:	0005      	movs	r5, r0
 80052fc:	07db      	lsls	r3, r3, #31
 80052fe:	d4e2      	bmi.n	80052c6 <_fflush_r+0xe>
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	059b      	lsls	r3, r3, #22
 8005304:	d4df      	bmi.n	80052c6 <_fflush_r+0xe>
 8005306:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005308:	f7ff fb90 	bl	8004a2c <__retarget_lock_release_recursive>
 800530c:	e7db      	b.n	80052c6 <_fflush_r+0xe>
	...

08005310 <__swhatbuf_r>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	000e      	movs	r6, r1
 8005314:	001d      	movs	r5, r3
 8005316:	230e      	movs	r3, #14
 8005318:	5ec9      	ldrsh	r1, [r1, r3]
 800531a:	0014      	movs	r4, r2
 800531c:	b096      	sub	sp, #88	@ 0x58
 800531e:	2900      	cmp	r1, #0
 8005320:	da0c      	bge.n	800533c <__swhatbuf_r+0x2c>
 8005322:	89b2      	ldrh	r2, [r6, #12]
 8005324:	2380      	movs	r3, #128	@ 0x80
 8005326:	0011      	movs	r1, r2
 8005328:	4019      	ands	r1, r3
 800532a:	421a      	tst	r2, r3
 800532c:	d114      	bne.n	8005358 <__swhatbuf_r+0x48>
 800532e:	2380      	movs	r3, #128	@ 0x80
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	2000      	movs	r0, #0
 8005334:	6029      	str	r1, [r5, #0]
 8005336:	6023      	str	r3, [r4, #0]
 8005338:	b016      	add	sp, #88	@ 0x58
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	466a      	mov	r2, sp
 800533e:	f000 f853 	bl	80053e8 <_fstat_r>
 8005342:	2800      	cmp	r0, #0
 8005344:	dbed      	blt.n	8005322 <__swhatbuf_r+0x12>
 8005346:	23f0      	movs	r3, #240	@ 0xf0
 8005348:	9901      	ldr	r1, [sp, #4]
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	4019      	ands	r1, r3
 800534e:	4b04      	ldr	r3, [pc, #16]	@ (8005360 <__swhatbuf_r+0x50>)
 8005350:	18c9      	adds	r1, r1, r3
 8005352:	424b      	negs	r3, r1
 8005354:	4159      	adcs	r1, r3
 8005356:	e7ea      	b.n	800532e <__swhatbuf_r+0x1e>
 8005358:	2100      	movs	r1, #0
 800535a:	2340      	movs	r3, #64	@ 0x40
 800535c:	e7e9      	b.n	8005332 <__swhatbuf_r+0x22>
 800535e:	46c0      	nop			@ (mov r8, r8)
 8005360:	ffffe000 	.word	0xffffe000

08005364 <__smakebuf_r>:
 8005364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005366:	2602      	movs	r6, #2
 8005368:	898b      	ldrh	r3, [r1, #12]
 800536a:	0005      	movs	r5, r0
 800536c:	000c      	movs	r4, r1
 800536e:	b085      	sub	sp, #20
 8005370:	4233      	tst	r3, r6
 8005372:	d007      	beq.n	8005384 <__smakebuf_r+0x20>
 8005374:	0023      	movs	r3, r4
 8005376:	3347      	adds	r3, #71	@ 0x47
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	6123      	str	r3, [r4, #16]
 800537c:	2301      	movs	r3, #1
 800537e:	6163      	str	r3, [r4, #20]
 8005380:	b005      	add	sp, #20
 8005382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005384:	ab03      	add	r3, sp, #12
 8005386:	aa02      	add	r2, sp, #8
 8005388:	f7ff ffc2 	bl	8005310 <__swhatbuf_r>
 800538c:	9f02      	ldr	r7, [sp, #8]
 800538e:	9001      	str	r0, [sp, #4]
 8005390:	0039      	movs	r1, r7
 8005392:	0028      	movs	r0, r5
 8005394:	f7ff fbb8 	bl	8004b08 <_malloc_r>
 8005398:	2800      	cmp	r0, #0
 800539a:	d108      	bne.n	80053ae <__smakebuf_r+0x4a>
 800539c:	220c      	movs	r2, #12
 800539e:	5ea3      	ldrsh	r3, [r4, r2]
 80053a0:	059a      	lsls	r2, r3, #22
 80053a2:	d4ed      	bmi.n	8005380 <__smakebuf_r+0x1c>
 80053a4:	2203      	movs	r2, #3
 80053a6:	4393      	bics	r3, r2
 80053a8:	431e      	orrs	r6, r3
 80053aa:	81a6      	strh	r6, [r4, #12]
 80053ac:	e7e2      	b.n	8005374 <__smakebuf_r+0x10>
 80053ae:	2380      	movs	r3, #128	@ 0x80
 80053b0:	89a2      	ldrh	r2, [r4, #12]
 80053b2:	6020      	str	r0, [r4, #0]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	81a3      	strh	r3, [r4, #12]
 80053b8:	9b03      	ldr	r3, [sp, #12]
 80053ba:	6120      	str	r0, [r4, #16]
 80053bc:	6167      	str	r7, [r4, #20]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00c      	beq.n	80053dc <__smakebuf_r+0x78>
 80053c2:	0028      	movs	r0, r5
 80053c4:	230e      	movs	r3, #14
 80053c6:	5ee1      	ldrsh	r1, [r4, r3]
 80053c8:	f000 f820 	bl	800540c <_isatty_r>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d005      	beq.n	80053dc <__smakebuf_r+0x78>
 80053d0:	2303      	movs	r3, #3
 80053d2:	89a2      	ldrh	r2, [r4, #12]
 80053d4:	439a      	bics	r2, r3
 80053d6:	3b02      	subs	r3, #2
 80053d8:	4313      	orrs	r3, r2
 80053da:	81a3      	strh	r3, [r4, #12]
 80053dc:	89a3      	ldrh	r3, [r4, #12]
 80053de:	9a01      	ldr	r2, [sp, #4]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	81a3      	strh	r3, [r4, #12]
 80053e4:	e7cc      	b.n	8005380 <__smakebuf_r+0x1c>
	...

080053e8 <_fstat_r>:
 80053e8:	2300      	movs	r3, #0
 80053ea:	b570      	push	{r4, r5, r6, lr}
 80053ec:	4d06      	ldr	r5, [pc, #24]	@ (8005408 <_fstat_r+0x20>)
 80053ee:	0004      	movs	r4, r0
 80053f0:	0008      	movs	r0, r1
 80053f2:	0011      	movs	r1, r2
 80053f4:	602b      	str	r3, [r5, #0]
 80053f6:	f7fc fa8f 	bl	8001918 <_fstat>
 80053fa:	1c43      	adds	r3, r0, #1
 80053fc:	d103      	bne.n	8005406 <_fstat_r+0x1e>
 80053fe:	682b      	ldr	r3, [r5, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d000      	beq.n	8005406 <_fstat_r+0x1e>
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	bd70      	pop	{r4, r5, r6, pc}
 8005408:	200003e4 	.word	0x200003e4

0800540c <_isatty_r>:
 800540c:	2300      	movs	r3, #0
 800540e:	b570      	push	{r4, r5, r6, lr}
 8005410:	4d06      	ldr	r5, [pc, #24]	@ (800542c <_isatty_r+0x20>)
 8005412:	0004      	movs	r4, r0
 8005414:	0008      	movs	r0, r1
 8005416:	602b      	str	r3, [r5, #0]
 8005418:	f7fc fa8c 	bl	8001934 <_isatty>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d103      	bne.n	8005428 <_isatty_r+0x1c>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d000      	beq.n	8005428 <_isatty_r+0x1c>
 8005426:	6023      	str	r3, [r4, #0]
 8005428:	bd70      	pop	{r4, r5, r6, pc}
 800542a:	46c0      	nop			@ (mov r8, r8)
 800542c:	200003e4 	.word	0x200003e4

08005430 <_sbrk_r>:
 8005430:	2300      	movs	r3, #0
 8005432:	b570      	push	{r4, r5, r6, lr}
 8005434:	4d06      	ldr	r5, [pc, #24]	@ (8005450 <_sbrk_r+0x20>)
 8005436:	0004      	movs	r4, r0
 8005438:	0008      	movs	r0, r1
 800543a:	602b      	str	r3, [r5, #0]
 800543c:	f7fc fa8e 	bl	800195c <_sbrk>
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	d103      	bne.n	800544c <_sbrk_r+0x1c>
 8005444:	682b      	ldr	r3, [r5, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d000      	beq.n	800544c <_sbrk_r+0x1c>
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	bd70      	pop	{r4, r5, r6, pc}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	200003e4 	.word	0x200003e4

08005454 <memchr>:
 8005454:	b2c9      	uxtb	r1, r1
 8005456:	1882      	adds	r2, r0, r2
 8005458:	4290      	cmp	r0, r2
 800545a:	d101      	bne.n	8005460 <memchr+0xc>
 800545c:	2000      	movs	r0, #0
 800545e:	4770      	bx	lr
 8005460:	7803      	ldrb	r3, [r0, #0]
 8005462:	428b      	cmp	r3, r1
 8005464:	d0fb      	beq.n	800545e <memchr+0xa>
 8005466:	3001      	adds	r0, #1
 8005468:	e7f6      	b.n	8005458 <memchr+0x4>
	...

0800546c <_init>:
 800546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005472:	bc08      	pop	{r3}
 8005474:	469e      	mov	lr, r3
 8005476:	4770      	bx	lr

08005478 <_fini>:
 8005478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547a:	46c0      	nop			@ (mov r8, r8)
 800547c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547e:	bc08      	pop	{r3}
 8005480:	469e      	mov	lr, r3
 8005482:	4770      	bx	lr
